{"id":"6fee338d49a9793e15987b2ecac3388e","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/Chainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CBORChainlink} from \"./vendor/CBORChainlink.sol\";\nimport {BufferChainlink} from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  ) internal pure returns (Chainlink.Request memory) {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(Request memory self, bytes memory data) internal pure {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(\n    Request memory self,\n    string memory key,\n    string memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(\n    Request memory self,\n    string memory key,\n    bytes memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(\n    Request memory self,\n    string memory key,\n    int256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(\n    Request memory self,\n    string memory key,\n    uint256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(\n    Request memory self,\n    string memory key,\n    string[] memory values\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n"},"@chainlink/contracts/src/v0.8/ChainlinkClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/ChainlinkRequestInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport {ENSResolver as ENSResolver_Chainlink} from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\nabstract contract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\n  uint256 private constant AMOUNT_OVERRIDE = 0;\n  address private constant SENDER_OVERRIDE = address(0);\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private s_ens;\n  bytes32 private s_ensNode;\n  LinkTokenInterface private s_link;\n  OperatorInterface private s_oracle;\n  uint256 private s_requestCount = 1;\n  mapping(bytes32 => address) private s_pendingRequests;\n\n  event ChainlinkRequested(bytes32 indexed id);\n  event ChainlinkFulfilled(bytes32 indexed id);\n  event ChainlinkCancelled(bytes32 indexed id);\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddr address to operate the callback on\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddr,\n    bytes4 callbackFunctionSignature\n  ) internal pure returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\n    internal\n    view\n    returns (Chainlink.Request memory)\n  {\n    Chainlink.Request memory req;\n    return req.initialize(specId, address(this), callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      ChainlinkRequestInterface.oracleRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      address(this),\n      req.callbackFunctionId,\n      nonce,\n      ORACLE_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      OperatorInterface.operatorRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackFunctionId,\n      nonce,\n      OPERATOR_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param nonce used to generate the request ID\n   * @param payment The amount of LINK to send for the request\n   * @param encodedRequest data encoded for request type specific format\n   * @return requestId The request ID\n   */\n  function _rawRequest(\n    address oracleAddress,\n    uint256 nonce,\n    uint256 payment,\n    bytes memory encodedRequest\n  ) private returns (bytes32 requestId) {\n    requestId = keccak256(abi.encodePacked(this, nonce));\n    s_pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \"unable to transferAndCall to oracle\");\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  ) internal {\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\n    delete s_pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice the next request count to be used in generating a nonce\n   * @dev starts at 1 in order to ensure consistent gas cost\n   * @return returns the next request count to be used in a nonce\n   */\n  function getNextRequestCount() internal view returns (uint256) {\n    return s_requestCount;\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(address oracleAddress) internal {\n    s_oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(address linkAddress) internal {\n    s_link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() internal {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress() internal view returns (address) {\n    return address(s_link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress() internal view returns (address) {\n    return address(s_oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\n    s_pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\n    s_ens = ENSInterface(ensAddress);\n    s_ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS() internal {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(bytes32 requestId)\n    internal\n    recordChainlinkFulfillment(requestId)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\n    require(msg.sender == s_pendingRequests[requestId], \"Source must be the oracle of the request\");\n    delete s_pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 requestId) {\n    require(s_pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ENSInterface {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./ChainlinkRequestInterface.sol\";\n\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\n  function operatorRequest(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  ) external returns (bool);\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\n\n  function getAuthorizedSenders() external returns (address[] memory);\n\n  function setAuthorizedSenders(address[] calldata senders) external;\n\n  function getForwarder() external returns (address);\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  ) external returns (bool);\n\n  function isAuthorizedSender(address node) external view returns (bool);\n\n  function withdraw(address recipient, uint256 amount) external;\n\n  function withdrawable() external view returns (uint256);\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface PointerInterface {\n  function getAddress() external view returns (address);\n}\n"},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary BufferChainlink {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    unchecked {\n      uint256 mask = (256**(32 - len)) - 1;\n      assembly {\n        let srcpart := and(mload(src), not(mask))\n        let destpart := and(mload(dest), mask)\n        mstore(dest, or(destpart, srcpart))\n      }\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    unchecked {\n      uint256 mask = (256**len) - 1;\n      // Right-align data\n      data = data >> (8 * (32 - len));\n      assembly {\n        // Memory address of the buffer data\n        let bufptr := mload(buf)\n        // Address = buffer address + sizeof(buffer length) + off + len\n        let dest := add(add(bufptr, off), len)\n        mstore(dest, or(and(mload(dest), not(mask)), data))\n        // Update buffer length if we extended it\n        if gt(add(off, len), mload(bufptr)) {\n          mstore(bufptr, add(off, len))\n        }\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = (256**len) - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.19;\n\nimport {BufferChainlink} from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if (value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if (value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if (value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n    if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n    }\n  }\n\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, uint(value));\n    } else if(value >= 0) {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\n    }\n  }\n\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n    buf.append(value);\n  }\n\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(value));\n  }\n\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\n  }\n\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n    buf.append(bytes(value));\n  }\n\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSResolver {\n  function addr(bytes32 node) public view virtual returns (address);\n}\n"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/interfaces/ISwapHelper.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface ISwapHelper {\r\n    function requestQuote(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n    function requestSwap(\r\n        address src,\r\n        address dst,\r\n        uint256 amount,\r\n        uint8 slippage\r\n    ) external payable;\r\n    function fulfillSwap() external;\r\n}"},"contracts/interfaces/ISwapHelperSubscriber.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface ISwapHelperSubscriber {\r\n    function notify(address src, address dst, uint256 amountOut, uint256 amountIn) external;\r\n}"},"contracts/utils/SwapHelper.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\nimport \"../interfaces/ISwapHelperSubscriber.sol\";\r\n\r\ncontract SwapHelper is AccessControl, ChainlinkClient, ConfirmedOwner {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using Chainlink for Chainlink.Request;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    error TransferError();\r\n    error SlippageIsTooBig();\r\n    error NotEnoughNativeTokensSent();\r\n    error CannotAddSubscriber();\r\n    error CannotRemoveSubscriber();\r\n    error SwapOperationIsNotReady();\r\n\r\n    event QuoteReceived(\r\n        address indexed src, \r\n        address indexed dst, \r\n        uint256 indexed amountOut, \r\n        uint256 amountIn\r\n    );\r\n    event SwapPerformed(\r\n        address indexed src, \r\n        address indexed dst, \r\n        uint256 indexed amountIn\r\n    );\r\n    event SwapRegistered(bytes indexed swapCalldata);\r\n\r\n    address public constant ONE_INCH_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    bytes32 public constant SWAP_AUTHORIZED_ROLE = keccak256(\"SWAP_AUTHORIZED_ROLE\");\r\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\r\n\r\n    address public immutable aggregationRouter; // 0x1111111254EEB25477B68fb85Ed929f73A960582\r\n\r\n    bytes32 public immutable quoteJobId; // Mumbai - a8356f48569c434eaa4ac5fcb4db5cc0\t\r\n    uint256 public immutable quoteJobFee;\r\n\r\n    bytes32 public immutable swapCalldataJobId; // Mumbai - 8ced832954544a3c98543c94a51d6a8d\r\n    uint256 public immutable swapCalldataJobFee;\r\n\r\n    address public lastQuotedSrcToken;\r\n    address public lastQuotedDstToken;\r\n    uint256 public lastQuotedSrcTokenAmount;\r\n\r\n    address public lastSwapSrcToken;\r\n    address public lastSwapDstToken;\r\n    uint256 public lastSwapSrcTokenAmount;\r\n    bool public isReadyToFulfillSwap;\r\n    bytes internal _lastSwapCalldata;\r\n\r\n    string public oneInchApiKey;\r\n    EnumerableSet.AddressSet internal _subscribers;\r\n    \r\n    constructor(\r\n        uint256 _quoteJobFee,\r\n        uint256 _swapCalldataJobFee,\r\n        bytes32 _quoteJobId,\r\n        bytes32 _swapCalldataJobId,\r\n        address _strategist,\r\n        address _aggregationRouter,\r\n        address chainlinkTokenAddress, // Mumbai - 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\r\n        address chainlinkOracleAddress, // Mumbai - 0x12A3d7759F745f4cb8EE8a647038c040cB8862A5\r\n        string memory _oneInchApiKey, // sc2uJVR5JYtl05ddY2Iryp9tq89jVjnh\r\n        address[] memory authorizedToSwap\r\n    )\r\n        ConfirmedOwner(_msgSender())\r\n    {\r\n        setChainlinkToken(chainlinkTokenAddress);\r\n        setChainlinkOracle(chainlinkOracleAddress);\r\n        quoteJobFee = _quoteJobFee; // SHOULD BE PART OF LINK_DIVISIBILITY CONSTANT\r\n        swapCalldataJobFee = _swapCalldataJobFee; // SHOULD BE PART OF LINK_DIVISIBILITY CONSTANT\r\n        quoteJobId = _quoteJobId;\r\n        swapCalldataJobId = _swapCalldataJobId;\r\n        oneInchApiKey = _oneInchApiKey;\r\n        aggregationRouter = _aggregationRouter;\r\n        for (uint8 i = 0; i < authorizedToSwap.length; i++) {\r\n            _grantRole(SWAP_AUTHORIZED_ROLE, authorizedToSwap[uint256(i)]);\r\n        }\r\n        _grantRole(STRATEGIST_ROLE, _strategist);\r\n    }\r\n\r\n    function addSubscriber(address subscriber) external onlyRole(STRATEGIST_ROLE) {\r\n        if (!_subscribers.add(subscriber)) {\r\n            revert CannotAddSubscriber();\r\n        }\r\n    }\r\n\r\n    function removeSubscriber(address subscriber) external onlyRole(STRATEGIST_ROLE) {\r\n        if (!_subscribers.remove(subscriber)) {\r\n            revert CannotRemoveSubscriber();\r\n        }\r\n    }\r\n\r\n    function subscriberAt(uint256 subscriberIdx) external view returns (address) {\r\n        return _subscribers.at(subscriberIdx);\r\n    }\r\n\r\n    function subscribersLength() external view returns (uint256) {\r\n        return _subscribers.length();\r\n    }\r\n\r\n    function requestQuote(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external onlyRole(SWAP_AUTHORIZED_ROLE) {\r\n        Chainlink.Request memory req = buildChainlinkRequest(\r\n            quoteJobId,\r\n            address(this),\r\n            this.fulfillQuoteRequest.selector\r\n        );\r\n        req.add('method', 'GET');\r\n        req.add(\r\n            'url', \r\n            string(\r\n                abi.encodePacked(\r\n                    'https://api.1inch.dev/swap/v5.2/1/quote?src=', \r\n                    Strings.toHexString(src),\r\n                    \"&dst=\",\r\n                    Strings.toHexString(dst),\r\n                    \"&amount=\",\r\n                    Strings.toString(amount)\r\n                )\r\n            )\r\n        );\r\n        req.add('headers', string(abi.encodePacked(\r\n            '[\"accept\", \"application/json\", \"Authorization\", \"Bearer ',\r\n            oneInchApiKey,\r\n            '\"]'\r\n        )));\r\n        req.add('contact', 'numert');\r\n        req.add('path', \"toAmount\");\r\n        lastQuotedSrcToken = src;\r\n        lastQuotedDstToken = dst;\r\n        lastQuotedSrcTokenAmount = amount;\r\n        sendChainlinkRequest(req, quoteJobFee);\r\n    }\r\n\r\n    function fulfillQuoteRequest(\r\n        bytes32 requestId,\r\n        uint256 toAmount\r\n    ) public recordChainlinkFulfillment(requestId)  {\r\n        emit QuoteReceived(\r\n            lastQuotedSrcToken, \r\n            lastQuotedDstToken, \r\n            toAmount, \r\n            lastQuotedSrcTokenAmount\r\n        );\r\n        uint256 length = _subscribers.length(); \r\n        for (uint256 i = 0; i < length; i++) {\r\n            ISwapHelperSubscriber(_subscribers.at(i)).notify(\r\n                lastQuotedSrcToken,\r\n                lastQuotedDstToken,\r\n                toAmount,\r\n                lastQuotedSrcTokenAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function requestSwap(\r\n        address src,\r\n        address dst,\r\n        uint256 amount,\r\n        uint8 slippage\r\n    ) external payable onlyRole(SWAP_AUTHORIZED_ROLE) {\r\n        if (slippage > 50) {\r\n            revert SlippageIsTooBig(); // A constraint dictated by 1inch Aggregation Protocol\r\n        }\r\n        if (src == ONE_INCH_ETH_ADDRESS && amount < msg.value) {\r\n            revert NotEnoughNativeTokensSent();\r\n        }\r\n        isReadyToFulfillSwap = false; // double check if the flag is down\r\n\r\n        IERC20 srcErc20 = IERC20(src);\r\n        if (srcErc20.allowance(address(this), aggregationRouter) < amount) {\r\n            srcErc20.approve(aggregationRouter, type(uint256).max);\r\n        }\r\n        \r\n        Chainlink.Request memory req = buildChainlinkRequest(\r\n            swapCalldataJobId,\r\n            address(this),\r\n            this.registerSwapCalldata.selector\r\n        );\r\n        req.add('method', 'GET');\r\n        req.add(\r\n            'url', \r\n            string(\r\n                abi.encodePacked(\r\n                    'https://api.1inch.dev/swap/v5.2/1/swap?src=', \r\n                    Strings.toHexString(src),\r\n                    \"&dst=\",\r\n                    Strings.toHexString(dst),\r\n                    \"&amount=\",\r\n                    Strings.toString(amount),\r\n                    \"&from=\",\r\n                    Strings.toHexString(_msgSender()),\r\n                    \"&slippage=\",\r\n                    Strings.toString(slippage),\r\n                    \"&disableEstimate=true\"\r\n                )\r\n            )\r\n        );\r\n        req.add('headers', string(abi.encodePacked(\r\n            '[\"accept\", \"application/json\", \"Authorization\", \"Bearer ',\r\n            oneInchApiKey,\r\n            '\"]'\r\n        )));\r\n        req.add('contact', 'numert');\r\n        req.add('path', \"tx,data\");\r\n        lastSwapSrcToken = src;\r\n        lastSwapDstToken = dst;\r\n        lastSwapSrcTokenAmount = amount;\r\n        sendChainlinkRequest(req, swapCalldataJobFee);\r\n    }\r\n\r\n    function registerSwapCalldata(\r\n        bytes32 requestId,\r\n        bytes memory swapCalldata\r\n    ) public recordChainlinkFulfillment(requestId) {\r\n        _lastSwapCalldata = swapCalldata;\r\n        isReadyToFulfillSwap = true;\r\n        emit SwapRegistered(swapCalldata);\r\n    }\r\n\r\n    function fulfillSwap() external onlyRole(STRATEGIST_ROLE) {\r\n        if (!isReadyToFulfillSwap) {\r\n            revert SwapOperationIsNotReady();\r\n        }\r\n        if (lastSwapSrcToken == ONE_INCH_ETH_ADDRESS) {\r\n            aggregationRouter.functionCallWithValue(\r\n                _lastSwapCalldata,\r\n                lastSwapSrcTokenAmount\r\n            );\r\n        } else {\r\n            aggregationRouter.functionCall(_lastSwapCalldata);\r\n        }\r\n        emit SwapPerformed(\r\n            lastSwapSrcToken,\r\n            lastSwapDstToken,\r\n            lastSwapSrcTokenAmount\r\n        );\r\n        isReadyToFulfillSwap = false;\r\n    }\r\n\r\n    function evacuateLinkTokens() external onlyRole(STRATEGIST_ROLE) {\r\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\r\n        if (!link.transfer(msg.sender, link.balanceOf(address(this)))) {\r\n            revert TransferError();\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}"}},"settings":{"optimizer":{"enabled":true,"runs":10},"outputSelection":{"*":{"*":["storageLayout","abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true},"remappings":["@yearn-protocol/=lib/yearn-vaults/"]}},"output":{"sources":{"@chainlink/contracts/src/v0.8/Chainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/Chainlink.sol","exportedSymbols":{"BufferChainlink":[1916],"CBORChainlink":[2363],"Chainlink":[268]},"id":269,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol","file":"./vendor/CBORChainlink.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":2364,"src":"57:57:0","symbolAliases":[{"foreign":{"id":2,"name":"CBORChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"65:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","file":"./vendor/BufferChainlink.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":1917,"src":"115:61:0","symbolAliases":[{"foreign":{"id":4,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"123:15:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Chainlink","contractDependencies":[],"contractKind":"library","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"178:114:0","text":" @title Library for common Chainlink functions\n @dev Uses imported CBOR library for encoding to buffer"},"fullyImplemented":true,"id":268,"linearizedBaseContracts":[268],"name":"Chainlink","nameLocation":"301:9:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":9,"mutability":"constant","name":"defaultBufferSize","nameLocation":"341:17:0","nodeType":"VariableDeclaration","scope":268,"src":"315:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"315:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323536","id":8,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"361:3:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"visibility":"internal"},{"global":false,"id":13,"libraryName":{"id":10,"name":"CBORChainlink","nameLocations":["420:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":2363,"src":"420:13:0"},"nodeType":"UsingForDirective","src":"414:47:0","typeName":{"id":12,"nodeType":"UserDefinedTypeName","pathNode":{"id":11,"name":"BufferChainlink.buffer","nameLocations":["438:15:0","454:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"438:22:0"},"referencedDeclaration":1402,"src":"438:22:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}}},{"canonicalName":"Chainlink.Request","id":25,"members":[{"constant":false,"id":15,"mutability":"mutable","name":"id","nameLocation":"494:2:0","nodeType":"VariableDeclaration","scope":25,"src":"486:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":17,"mutability":"mutable","name":"callbackAddress","nameLocation":"510:15:0","nodeType":"VariableDeclaration","scope":25,"src":"502:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"538:18:0","nodeType":"VariableDeclaration","scope":25,"src":"531:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":18,"name":"bytes4","nodeType":"ElementaryTypeName","src":"531:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"nonce","nameLocation":"570:5:0","nodeType":"VariableDeclaration","scope":25,"src":"562:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":24,"mutability":"mutable","name":"buf","nameLocation":"604:3:0","nodeType":"VariableDeclaration","scope":25,"src":"581:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":23,"nodeType":"UserDefinedTypeName","pathNode":{"id":22,"name":"BufferChainlink.buffer","nameLocations":["581:15:0","597:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"581:22:0"},"referencedDeclaration":1402,"src":"581:22:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"name":"Request","nameLocation":"472:7:0","nodeType":"StructDefinition","scope":268,"src":"465:147:0","visibility":"public"},{"body":{"id":69,"nodeType":"Block","src":"1155:183:0","statements":[{"expression":{"arguments":[{"expression":{"id":44,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1182:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":45,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1187:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"1182:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":46,"name":"defaultBufferSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"1192:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":41,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"1161:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BufferChainlink_$1916_$","typeString":"type(library BufferChainlink)"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1177:4:0","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1440,"src":"1161:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1161:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":48,"nodeType":"ExpressionStatement","src":"1161:49:0"},{"expression":{"id":53,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":49,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1216:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":51,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1221:2:0","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":15,"src":"1216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":52,"name":"jobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1226:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1216:15:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":54,"nodeType":"ExpressionStatement","src":"1216:15:0"},{"expression":{"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":55,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1237:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":57,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1242:15:0","memberName":"callbackAddress","nodeType":"MemberAccess","referencedDeclaration":17,"src":"1237:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":58,"name":"callbackAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1260:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1237:35:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":60,"nodeType":"ExpressionStatement","src":"1237:35:0"},{"expression":{"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":61,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1278:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":63,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1283:18:0","memberName":"callbackFunctionId","nodeType":"MemberAccess","referencedDeclaration":19,"src":"1278:23:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":64,"name":"callbackFunc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1304:12:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1278:38:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":66,"nodeType":"ExpressionStatement","src":"1278:38:0"},{"expression":{"id":67,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1329:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"functionReturnParameters":40,"id":68,"nodeType":"Return","src":"1322:11:0"}]},"documentation":{"id":26,"nodeType":"StructuredDocumentation","src":"616:368:0","text":" @notice Initializes a Chainlink request\n @dev Sets the ID, callback address, and callback function signature on the request\n @param self The uninitialized request\n @param jobId The Job Specification ID\n @param callbackAddr The callback address\n @param callbackFunc The callback function signature\n @return The initialized request"},"id":70,"implemented":true,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"996:10:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"self","nameLocation":"1027:4:0","nodeType":"VariableDeclaration","scope":70,"src":"1012:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":28,"nodeType":"UserDefinedTypeName","pathNode":{"id":27,"name":"Request","nameLocations":["1012:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"1012:7:0"},"referencedDeclaration":25,"src":"1012:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":31,"mutability":"mutable","name":"jobId","nameLocation":"1045:5:0","nodeType":"VariableDeclaration","scope":70,"src":"1037:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":30,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1037:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"callbackAddr","nameLocation":"1064:12:0","nodeType":"VariableDeclaration","scope":70,"src":"1056:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1056:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"callbackFunc","nameLocation":"1089:12:0","nodeType":"VariableDeclaration","scope":70,"src":"1082:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":34,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1082:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1006:99:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"1129:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"Chainlink.Request","nameLocations":["1129:9:0","1139:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"1129:17:0"},"referencedDeclaration":25,"src":"1129:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"src":"1128:26:0"},"scope":268,"src":"987:351:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":96,"nodeType":"Block","src":"1648:98:0","statements":[{"expression":{"arguments":[{"expression":{"id":82,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"1675:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":83,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1680:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"1675:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"id":84,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1685:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1690:6:0","memberName":"length","nodeType":"MemberAccess","src":"1685:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":79,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"1654:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BufferChainlink_$1916_$","typeString":"type(library BufferChainlink)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1670:4:0","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1440,"src":"1654:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":87,"nodeType":"ExpressionStatement","src":"1654:43:0"},{"expression":{"arguments":[{"expression":{"id":91,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"1726:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":92,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1731:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"1726:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":93,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1736:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":88,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"1703:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BufferChainlink_$1916_$","typeString":"type(library BufferChainlink)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1719:6:0","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1659,"src":"1703:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1703:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":95,"nodeType":"ExpressionStatement","src":"1703:38:0"}]},"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"1342:230:0","text":" @notice Sets the data for the buffer without encoding CBOR on-chain\n @dev CBOR can be closed with curly-brackets {} or they can be left off\n @param self The initialized request\n @param data The CBOR data"},"id":97,"implemented":true,"kind":"function","modifiers":[],"name":"setBuffer","nameLocation":"1584:9:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"self","nameLocation":"1609:4:0","nodeType":"VariableDeclaration","scope":97,"src":"1594:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"Request","nameLocations":["1594:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"1594:7:0"},"referencedDeclaration":25,"src":"1594:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"data","nameLocation":"1628:4:0","nodeType":"VariableDeclaration","scope":97,"src":"1615:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":75,"name":"bytes","nodeType":"ElementaryTypeName","src":"1615:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1593:40:0"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[],"src":"1648:0:0"},"scope":268,"src":"1575:171:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":124,"nodeType":"Block","src":"2055:71:0","statements":[{"expression":{"arguments":[{"id":113,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"2083:3:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":108,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2061:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2066:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2061:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2070:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"2061:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2061:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":115,"nodeType":"ExpressionStatement","src":"2061:26:0"},{"expression":{"arguments":[{"id":121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"2115:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":116,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2093:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2098:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2093:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2102:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"2093:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2093:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"ExpressionStatement","src":"2093:28:0"}]},"documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"1750:198:0","text":" @notice Adds a string value to the request with a given key name\n @param self The initialized request\n @param key The name of the key\n @param value The string value to add"},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"1960:3:0","nodeType":"FunctionDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"self","nameLocation":"1984:4:0","nodeType":"VariableDeclaration","scope":125,"src":"1969:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":100,"nodeType":"UserDefinedTypeName","pathNode":{"id":99,"name":"Request","nameLocations":["1969:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"1969:7:0"},"referencedDeclaration":25,"src":"1969:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"key","nameLocation":"2008:3:0","nodeType":"VariableDeclaration","scope":125,"src":"1994:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":102,"name":"string","nodeType":"ElementaryTypeName","src":"1994:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"value","nameLocation":"2031:5:0","nodeType":"VariableDeclaration","scope":125,"src":"2017:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":104,"name":"string","nodeType":"ElementaryTypeName","src":"2017:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1963:77:0"},"returnParameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2055:0:0"},"scope":268,"src":"1951:175:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"2437:70:0","statements":[{"expression":{"arguments":[{"id":141,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"2465:3:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":136,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"2443:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":139,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2448:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2443:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2452:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"2443:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2443:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"2443:26:0"},{"expression":{"arguments":[{"id":149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"2496:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":144,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"2475:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2480:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2475:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2484:11:0","memberName":"encodeBytes","nodeType":"MemberAccess","referencedDeclaration":2227,"src":"2475:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2475:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":151,"nodeType":"ExpressionStatement","src":"2475:27:0"}]},"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2130:196:0","text":" @notice Adds a bytes value to the request with a given key name\n @param self The initialized request\n @param key The name of the key\n @param value The bytes value to add"},"id":153,"implemented":true,"kind":"function","modifiers":[],"name":"addBytes","nameLocation":"2338:8:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"self","nameLocation":"2367:4:0","nodeType":"VariableDeclaration","scope":153,"src":"2352:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":128,"nodeType":"UserDefinedTypeName","pathNode":{"id":127,"name":"Request","nameLocations":["2352:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2352:7:0"},"referencedDeclaration":25,"src":"2352:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"key","nameLocation":"2391:3:0","nodeType":"VariableDeclaration","scope":153,"src":"2377:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":130,"name":"string","nodeType":"ElementaryTypeName","src":"2377:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"value","nameLocation":"2413:5:0","nodeType":"VariableDeclaration","scope":153,"src":"2400:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":132,"name":"bytes","nodeType":"ElementaryTypeName","src":"2400:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2346:76:0"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"2437:0:0"},"scope":268,"src":"2329:178:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":180,"nodeType":"Block","src":"2812:68:0","statements":[{"expression":{"arguments":[{"id":169,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"2840:3:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":164,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2818:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":167,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2823:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2818:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2827:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"2818:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2818:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":171,"nodeType":"ExpressionStatement","src":"2818:26:0"},{"expression":{"arguments":[{"id":177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"2869:5:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":172,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2850:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":175,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2855:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"2850:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2859:9:0","memberName":"encodeInt","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"2850:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_int256_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,int256) pure"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"2850:25:0"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"2511:198:0","text":" @notice Adds a int256 value to the request with a given key name\n @param self The initialized request\n @param key The name of the key\n @param value The int256 value to add"},"id":181,"implemented":true,"kind":"function","modifiers":[],"name":"addInt","nameLocation":"2721:6:0","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"self","nameLocation":"2748:4:0","nodeType":"VariableDeclaration","scope":181,"src":"2733:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":156,"nodeType":"UserDefinedTypeName","pathNode":{"id":155,"name":"Request","nameLocations":["2733:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2733:7:0"},"referencedDeclaration":25,"src":"2733:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"key","nameLocation":"2772:3:0","nodeType":"VariableDeclaration","scope":181,"src":"2758:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":158,"name":"string","nodeType":"ElementaryTypeName","src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"value","nameLocation":"2788:5:0","nodeType":"VariableDeclaration","scope":181,"src":"2781:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":160,"name":"int256","nodeType":"ElementaryTypeName","src":"2781:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2727:70:0"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"2812:0:0"},"scope":268,"src":"2712:168:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":208,"nodeType":"Block","src":"3189:69:0","statements":[{"expression":{"arguments":[{"id":197,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"3217:3:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":192,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"3195:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3200:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3195:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":196,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3204:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"3195:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3195:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"3195:26:0"},{"expression":{"arguments":[{"id":205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"3247:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":200,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"3227:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3232:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3227:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3236:10:0","memberName":"encodeUInt","nodeType":"MemberAccess","referencedDeclaration":2136,"src":"3227:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3227:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"3227:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"2884:200:0","text":" @notice Adds a uint256 value to the request with a given key name\n @param self The initialized request\n @param key The name of the key\n @param value The uint256 value to add"},"id":209,"implemented":true,"kind":"function","modifiers":[],"name":"addUint","nameLocation":"3096:7:0","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"self","nameLocation":"3124:4:0","nodeType":"VariableDeclaration","scope":209,"src":"3109:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":184,"nodeType":"UserDefinedTypeName","pathNode":{"id":183,"name":"Request","nameLocations":["3109:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"3109:7:0"},"referencedDeclaration":25,"src":"3109:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"key","nameLocation":"3148:3:0","nodeType":"VariableDeclaration","scope":209,"src":"3134:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":186,"name":"string","nodeType":"ElementaryTypeName","src":"3134:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"value","nameLocation":"3165:5:0","nodeType":"VariableDeclaration","scope":209,"src":"3157:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3157:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3103:71:0"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"3189:0:0"},"scope":268,"src":"3087:171:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"3597:188:0","statements":[{"expression":{"arguments":[{"id":226,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"3625:3:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":221,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"3603:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3608:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3603:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3612:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"3603:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3603:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":228,"nodeType":"ExpressionStatement","src":"3603:26:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":229,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"3635:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3640:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3635:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3644:10:0","memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":2338,"src":"3635:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory) pure"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3635:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":235,"nodeType":"ExpressionStatement","src":"3635:21:0"},{"body":{"id":257,"nodeType":"Block","src":"3706:47:0","statements":[{"expression":{"arguments":[{"baseExpression":{"id":252,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3736:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":254,"indexExpression":{"id":253,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"3743:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3736:9:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":247,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"3714:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3719:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3714:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3723:12:0","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":2326,"src":"3714:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3714:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":256,"nodeType":"ExpressionStatement","src":"3714:32:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"3682:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":241,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3686:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3693:6:0","memberName":"length","nodeType":"MemberAccess","src":"3686:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3682:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":258,"initializationExpression":{"assignments":[237],"declarations":[{"constant":false,"id":237,"mutability":"mutable","name":"i","nameLocation":"3675:1:0","nodeType":"VariableDeclaration","scope":258,"src":"3667:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"3667:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":239,"initialValue":{"hexValue":"30","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3679:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3667:13:0"},"loopExpression":{"expression":{"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3701:3:0","subExpression":{"id":244,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"3701:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":246,"nodeType":"ExpressionStatement","src":"3701:3:0"},"nodeType":"ForStatement","src":"3662:91:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":259,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"3758:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3763:3:0","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"3758:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3767:11:0","memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":2362,"src":"3758:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$returns$__$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory) pure"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"ExpressionStatement","src":"3758:22:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"3262:214:0","text":" @notice Adds an array of strings to the request with a given key name\n @param self The initialized request\n @param key The name of the key\n @param values The array of string values to add"},"id":267,"implemented":true,"kind":"function","modifiers":[],"name":"addStringArray","nameLocation":"3488:14:0","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"self","nameLocation":"3523:4:0","nodeType":"VariableDeclaration","scope":267,"src":"3508:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":212,"nodeType":"UserDefinedTypeName","pathNode":{"id":211,"name":"Request","nameLocations":["3508:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"3508:7:0"},"referencedDeclaration":25,"src":"3508:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":215,"mutability":"mutable","name":"key","nameLocation":"3547:3:0","nodeType":"VariableDeclaration","scope":267,"src":"3533:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":214,"name":"string","nodeType":"ElementaryTypeName","src":"3533:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"values","nameLocation":"3572:6:0","nodeType":"VariableDeclaration","scope":267,"src":"3556:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":216,"name":"string","nodeType":"ElementaryTypeName","src":"3556:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":217,"nodeType":"ArrayTypeName","src":"3556:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"3502:80:0"},"returnParameters":{"id":220,"nodeType":"ParameterList","parameters":[],"src":"3597:0:0"},"scope":268,"src":"3479:306:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":269,"src":"293:3494:0","usedErrors":[]}],"src":"32:3756:0"},"id":0},"@chainlink/contracts/src/v0.8/ChainlinkClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol","exportedSymbols":{"BufferChainlink":[1916],"CBORChainlink":[2363],"Chainlink":[268],"ChainlinkClient":[861],"ChainlinkRequestInterface":[1076],"ENSInterface":[1156],"ENSResolver_Chainlink":[2373],"LinkTokenInterface":[1251],"OperatorInterface":[1331],"OracleInterface":[1370],"PointerInterface":[1394]},"id":862,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":270,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/Chainlink.sol","file":"./Chainlink.sol","id":271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":269,"src":"57:25:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol","file":"./interfaces/ENSInterface.sol","id":272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":1157,"src":"83:39:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":1252,"src":"123:45:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol","file":"./interfaces/ChainlinkRequestInterface.sol","id":274,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":1077,"src":"169:52:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol","file":"./interfaces/OperatorInterface.sol","id":275,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":1332,"src":"222:44:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol","file":"./interfaces/PointerInterface.sol","id":276,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":1395,"src":"267:43:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol","file":"./vendor/ENSResolver.sol","id":278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":862,"sourceUnit":2374,"src":"311:78:1","symbolAliases":[{"foreign":{"id":277,"name":"ENSResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"319:11:1","typeDescriptions":{}},"local":"ENSResolver_Chainlink","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ChainlinkClient","contractDependencies":[],"contractKind":"contract","documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"391:157:1","text":" @title The ChainlinkClient contract\n @notice Contract writers can inherit this contract in order to create requests for the\n Chainlink network"},"fullyImplemented":true,"id":861,"linearizedBaseContracts":[861],"name":"ChainlinkClient","nameLocation":"567:15:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":283,"libraryName":{"id":280,"name":"Chainlink","nameLocations":["593:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":268,"src":"593:9:1"},"nodeType":"UsingForDirective","src":"587:38:1","typeName":{"id":282,"nodeType":"UserDefinedTypeName","pathNode":{"id":281,"name":"Chainlink.Request","nameLocations":["607:9:1","617:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"607:17:1"},"referencedDeclaration":25,"src":"607:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}}},{"constant":true,"id":288,"mutability":"constant","name":"LINK_DIVISIBILITY","nameLocation":"655:17:1","nodeType":"VariableDeclaration","scope":861,"src":"629:52:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"id":287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"675:2:1","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3138","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"679:2:1","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"675:6:1","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"}},"visibility":"internal"},{"constant":true,"id":291,"mutability":"constant","name":"AMOUNT_OVERRIDE","nameLocation":"710:15:1","nodeType":"VariableDeclaration","scope":861,"src":"685:44:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"728:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":297,"mutability":"constant","name":"SENDER_OVERRIDE","nameLocation":"758:15:1","nodeType":"VariableDeclaration","scope":861,"src":"733:53:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"733:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"30","id":295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"784:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"776:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"776:7:1","typeDescriptions":{}}},"id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"776:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":true,"id":300,"mutability":"constant","name":"ORACLE_ARGS_VERSION","nameLocation":"815:19:1","nodeType":"VariableDeclaration","scope":861,"src":"790:48:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"837:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":303,"mutability":"constant","name":"OPERATOR_ARGS_VERSION","nameLocation":"867:21:1","nodeType":"VariableDeclaration","scope":861,"src":"842:50:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":308,"mutability":"constant","name":"ENS_TOKEN_SUBNAME","nameLocation":"921:17:1","nodeType":"VariableDeclaration","scope":861,"src":"896:62:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"896:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6c696e6b","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"951:6:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_90430203e2d9ce04f00738d355173358b054545ecb52218de9c6fb01cbd9aeaf","typeString":"literal_string \"link\""},"value":"link"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_90430203e2d9ce04f00738d355173358b054545ecb52218de9c6fb01cbd9aeaf","typeString":"literal_string \"link\""}],"id":305,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"941:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":313,"mutability":"constant","name":"ENS_ORACLE_SUBNAME","nameLocation":"987:18:1","nodeType":"VariableDeclaration","scope":861,"src":"962:65:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":309,"name":"bytes32","nodeType":"ElementaryTypeName","src":"962:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6f7261636c65","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1018:8:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_89cbf5af14e0328a3cd3a734f92c3832d729d431da79b7873a62cbeebd37beb6","typeString":"literal_string \"oracle\""},"value":"oracle"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_89cbf5af14e0328a3cd3a734f92c3832d729d431da79b7873a62cbeebd37beb6","typeString":"literal_string \"oracle\""}],"id":310,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1008:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":316,"mutability":"constant","name":"LINK_TOKEN_POINTER","nameLocation":"1056:18:1","nodeType":"VariableDeclaration","scope":861,"src":"1031:88:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307843383962443445313633324433413433434230334141416435323632636265343033384263353731","id":315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:42:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571"},"visibility":"private"},{"constant":false,"id":319,"mutability":"mutable","name":"s_ens","nameLocation":"1145:5:1","nodeType":"VariableDeclaration","scope":861,"src":"1124:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"},"typeName":{"id":318,"nodeType":"UserDefinedTypeName","pathNode":{"id":317,"name":"ENSInterface","nameLocations":["1124:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":1156,"src":"1124:12:1"},"referencedDeclaration":1156,"src":"1124:12:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"visibility":"private"},{"constant":false,"id":321,"mutability":"mutable","name":"s_ensNode","nameLocation":"1170:9:1","nodeType":"VariableDeclaration","scope":861,"src":"1154:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1154:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":324,"mutability":"mutable","name":"s_link","nameLocation":"1210:6:1","nodeType":"VariableDeclaration","scope":861,"src":"1183:33:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"},"typeName":{"id":323,"nodeType":"UserDefinedTypeName","pathNode":{"id":322,"name":"LinkTokenInterface","nameLocations":["1183:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":1251,"src":"1183:18:1"},"referencedDeclaration":1251,"src":"1183:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"visibility":"private"},{"constant":false,"id":327,"mutability":"mutable","name":"s_oracle","nameLocation":"1246:8:1","nodeType":"VariableDeclaration","scope":861,"src":"1220:34:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"},"typeName":{"id":326,"nodeType":"UserDefinedTypeName","pathNode":{"id":325,"name":"OperatorInterface","nameLocations":["1220:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1331,"src":"1220:17:1"},"referencedDeclaration":1331,"src":"1220:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"visibility":"private"},{"constant":false,"id":330,"mutability":"mutable","name":"s_requestCount","nameLocation":"1274:14:1","nodeType":"VariableDeclaration","scope":861,"src":"1258:34:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1258:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1291:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":334,"mutability":"mutable","name":"s_pendingRequests","nameLocation":"1332:17:1","nodeType":"VariableDeclaration","scope":861,"src":"1296:53:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"typeName":{"id":333,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1304:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1296:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1315:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"b5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af9","id":338,"name":"ChainlinkRequested","nameLocation":"1360:18:1","nodeType":"EventDefinition","parameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1395:2:1","nodeType":"VariableDeclaration","scope":338,"src":"1379:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1379:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1378:20:1"},"src":"1354:45:1"},{"anonymous":false,"eventSelector":"7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a","id":342,"name":"ChainlinkFulfilled","nameLocation":"1408:18:1","nodeType":"EventDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1443:2:1","nodeType":"VariableDeclaration","scope":342,"src":"1427:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1427:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1426:20:1"},"src":"1402:45:1"},{"anonymous":false,"eventSelector":"e1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c5","id":346,"name":"ChainlinkCancelled","nameLocation":"1456:18:1","nodeType":"EventDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1491:2:1","nodeType":"VariableDeclaration","scope":346,"src":"1475:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1475:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1474:20:1"},"src":"1450:45:1"},{"body":{"id":372,"nodeType":"Block","src":"2018:115:1","statements":[{"assignments":[363],"declarations":[{"constant":false,"id":363,"mutability":"mutable","name":"req","nameLocation":"2049:3:1","nodeType":"VariableDeclaration","scope":372,"src":"2024:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":362,"nodeType":"UserDefinedTypeName","pathNode":{"id":361,"name":"Chainlink.Request","nameLocations":["2024:9:1","2034:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2024:17:1"},"referencedDeclaration":25,"src":"2024:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"id":364,"nodeType":"VariableDeclarationStatement","src":"2024:28:1"},{"expression":{"arguments":[{"id":367,"name":"specId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"2080:6:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":368,"name":"callbackAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2088:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":369,"name":"callbackFunctionSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"2102:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":365,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"2065:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2069:10:1","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":70,"src":"2065:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_bytes32_$_t_address_$_t_bytes4_$returns$_t_struct$_Request_$25_memory_ptr_$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,bytes32,address,bytes4) pure returns (struct Chainlink.Request memory)"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2065:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"functionReturnParameters":358,"id":371,"nodeType":"Return","src":"2058:70:1"}]},"documentation":{"id":347,"nodeType":"StructuredDocumentation","src":"1499:348:1","text":" @notice Creates a request that can hold additional parameters\n @param specId The Job Specification ID that the request will be created for\n @param callbackAddr address to operate the callback on\n @param callbackFunctionSignature function signature to use for the callback\n @return A Chainlink Request struct in memory"},"id":373,"implemented":true,"kind":"function","modifiers":[],"name":"buildChainlinkRequest","nameLocation":"1859:21:1","nodeType":"FunctionDefinition","parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"specId","nameLocation":"1894:6:1","nodeType":"VariableDeclaration","scope":373,"src":"1886:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1886:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"callbackAddr","nameLocation":"1914:12:1","nodeType":"VariableDeclaration","scope":373,"src":"1906:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"1906:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"callbackFunctionSignature","nameLocation":"1939:25:1","nodeType":"VariableDeclaration","scope":373,"src":"1932:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":352,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1932:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1880:88:1"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":373,"src":"1992:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":356,"nodeType":"UserDefinedTypeName","pathNode":{"id":355,"name":"Chainlink.Request","nameLocations":["1992:9:1","2002:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"1992:17:1"},"referencedDeclaration":25,"src":"1992:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"src":"1991:26:1"},"scope":861,"src":"1850:283:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":400,"nodeType":"Block","src":"2571:116:1","statements":[{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"req","nameLocation":"2602:3:1","nodeType":"VariableDeclaration","scope":400,"src":"2577:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"Chainlink.Request","nameLocations":["2577:9:1","2587:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2577:17:1"},"referencedDeclaration":25,"src":"2577:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"id":389,"nodeType":"VariableDeclarationStatement","src":"2577:28:1"},{"expression":{"arguments":[{"id":392,"name":"specId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2633:6:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":395,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2649:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"}],"id":394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2641:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":393,"name":"address","nodeType":"ElementaryTypeName","src":"2641:7:1","typeDescriptions":{}}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":397,"name":"callbackFunctionSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2656:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":390,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2618:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2622:10:1","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":70,"src":"2618:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_bytes32_$_t_address_$_t_bytes4_$returns$_t_struct$_Request_$25_memory_ptr_$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,bytes32,address,bytes4) pure returns (struct Chainlink.Request memory)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2618:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"functionReturnParameters":383,"id":399,"nodeType":"Return","src":"2611:71:1"}]},"documentation":{"id":374,"nodeType":"StructuredDocumentation","src":"2137:288:1","text":" @notice Creates a request that can hold additional parameters\n @param specId The Job Specification ID that the request will be created for\n @param callbackFunctionSignature function signature to use for the callback\n @return A Chainlink Request struct in memory"},"id":401,"implemented":true,"kind":"function","modifiers":[],"name":"buildOperatorRequest","nameLocation":"2437:20:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"specId","nameLocation":"2466:6:1","nodeType":"VariableDeclaration","scope":401,"src":"2458:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":375,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2458:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"callbackFunctionSignature","nameLocation":"2481:25:1","nodeType":"VariableDeclaration","scope":401,"src":"2474:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":377,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2474:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2457:50:1"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":401,"src":"2543:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":381,"nodeType":"UserDefinedTypeName","pathNode":{"id":380,"name":"Chainlink.Request","nameLocations":["2543:9:1","2553:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2543:17:1"},"referencedDeclaration":25,"src":"2543:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"src":"2542:26:1"},"scope":861,"src":"2428:259:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":421,"nodeType":"Block","src":"3096:73:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":415,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3140:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}],"id":414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3132:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"3132:7:1","typeDescriptions":{}}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3132:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":417,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"3151:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},{"id":418,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"3156:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":412,"name":"sendChainlinkRequestTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"3109:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_Request_$25_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (address,struct Chainlink.Request memory,uint256) returns (bytes32)"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3109:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":411,"id":420,"nodeType":"Return","src":"3102:62:1"}]},"documentation":{"id":402,"nodeType":"StructuredDocumentation","src":"2691:298:1","text":" @notice Creates a Chainlink request to the stored oracle address\n @dev Calls `chainlinkRequestTo` with the stored oracle address\n @param req The initialized Chainlink Request\n @param payment The amount of LINK to send for the request\n @return requestId The request ID"},"id":422,"implemented":true,"kind":"function","modifiers":[],"name":"sendChainlinkRequest","nameLocation":"3001:20:1","nodeType":"FunctionDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"req","nameLocation":"3047:3:1","nodeType":"VariableDeclaration","scope":422,"src":"3022:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":404,"nodeType":"UserDefinedTypeName","pathNode":{"id":403,"name":"Chainlink.Request","nameLocations":["3022:9:1","3032:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"3022:17:1"},"referencedDeclaration":25,"src":"3022:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"payment","nameLocation":"3060:7:1","nodeType":"VariableDeclaration","scope":422,"src":"3052:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"3052:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3021:47:1"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"3087:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3086:9:1"},"scope":861,"src":"2992:177:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":476,"nodeType":"Block","src":"3842:601:1","statements":[{"assignments":[436],"declarations":[{"constant":false,"id":436,"mutability":"mutable","name":"nonce","nameLocation":"3856:5:1","nodeType":"VariableDeclaration","scope":476,"src":"3848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":435,"name":"uint256","nodeType":"ElementaryTypeName","src":"3848:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":438,"initialValue":{"id":437,"name":"s_requestCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3864:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3848:30:1"},{"expression":{"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":439,"name":"s_requestCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3884:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":440,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"3901:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3909:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3901:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3884:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":444,"nodeType":"ExpressionStatement","src":"3884:26:1"},{"assignments":[446],"declarations":[{"constant":false,"id":446,"mutability":"mutable","name":"encodedRequest","nameLocation":"3929:14:1","nodeType":"VariableDeclaration","scope":476,"src":"3916:27:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":445,"name":"bytes","nodeType":"ElementaryTypeName","src":"3916:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":468,"initialValue":{"arguments":[{"expression":{"expression":{"id":449,"name":"ChainlinkRequestInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"3976:25:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ChainlinkRequestInterface_$1076_$","typeString":"type(contract ChainlinkRequestInterface)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4002:13:1","memberName":"oracleRequest","nodeType":"MemberAccess","referencedDeclaration":1064,"src":"3976:39:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_address_$_t_bytes4_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function ChainlinkRequestInterface.oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes calldata)"}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4016:8:1","memberName":"selector","nodeType":"MemberAccess","src":"3976:48:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":452,"name":"SENDER_OVERRIDE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"4032:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":453,"name":"AMOUNT_OVERRIDE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"4140:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":454,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"4245:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4249:2:1","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":15,"src":"4245:6:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":458,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4267:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"}],"id":457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4259:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:1","typeDescriptions":{}}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4259:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":460,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"4280:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4284:18:1","memberName":"callbackFunctionId","nodeType":"MemberAccess","referencedDeclaration":19,"src":"4280:22:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":462,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"4310:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":463,"name":"ORACLE_ARGS_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"4323:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":464,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"4350:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4354:3:1","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"4350:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4358:3:1","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"4350:11:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":447,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3946:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3950:18:1","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3946:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3946:421:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3916:451:1"},{"expression":{"arguments":[{"id":470,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4392:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":471,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"4407:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":472,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"4414:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":473,"name":"encodedRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"4423:14:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":469,"name":"_rawRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4380:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (address,uint256,uint256,bytes memory) returns (bytes32)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4380:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":434,"id":475,"nodeType":"Return","src":"4373:65:1"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"3173:511:1","text":" @notice Creates a Chainlink request to the specified oracle address\n @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n send LINK which creates a request on the target oracle contract.\n Emits ChainlinkRequested event.\n @param oracleAddress The address of the oracle for the request\n @param req The initialized Chainlink Request\n @param payment The amount of LINK to send for the request\n @return requestId The request ID"},"id":477,"implemented":true,"kind":"function","modifiers":[],"name":"sendChainlinkRequestTo","nameLocation":"3696:22:1","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"oracleAddress","nameLocation":"3732:13:1","nodeType":"VariableDeclaration","scope":477,"src":"3724:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"3724:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"req","nameLocation":"3776:3:1","nodeType":"VariableDeclaration","scope":477,"src":"3751:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":427,"nodeType":"UserDefinedTypeName","pathNode":{"id":426,"name":"Chainlink.Request","nameLocations":["3751:9:1","3761:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"3751:17:1"},"referencedDeclaration":25,"src":"3751:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"payment","nameLocation":"3793:7:1","nodeType":"VariableDeclaration","scope":477,"src":"3785:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"3785:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3718:86:1"},"returnParameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"requestId","nameLocation":"3831:9:1","nodeType":"VariableDeclaration","scope":477,"src":"3823:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3823:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3822:19:1"},"scope":861,"src":"3687:756:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":497,"nodeType":"Block","src":"4907:72:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":491,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4950:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}],"id":490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4942:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"4942:7:1","typeDescriptions":{}}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4942:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"4961:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},{"id":494,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4966:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":488,"name":"sendOperatorRequestTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"4920:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_Request_$25_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (address,struct Chainlink.Request memory,uint256) returns (bytes32)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4920:54:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":487,"id":496,"nodeType":"Return","src":"4913:61:1"}]},"documentation":{"id":478,"nodeType":"StructuredDocumentation","src":"4447:354:1","text":" @notice Creates a Chainlink request to the stored oracle address\n @dev This function supports multi-word response\n @dev Calls `sendOperatorRequestTo` with the stored oracle address\n @param req The initialized Chainlink Request\n @param payment The amount of LINK to send for the request\n @return requestId The request ID"},"id":498,"implemented":true,"kind":"function","modifiers":[],"name":"sendOperatorRequest","nameLocation":"4813:19:1","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"req","nameLocation":"4858:3:1","nodeType":"VariableDeclaration","scope":498,"src":"4833:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":480,"nodeType":"UserDefinedTypeName","pathNode":{"id":479,"name":"Chainlink.Request","nameLocations":["4833:9:1","4843:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"4833:17:1"},"referencedDeclaration":25,"src":"4833:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"payment","nameLocation":"4871:7:1","nodeType":"VariableDeclaration","scope":498,"src":"4863:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"4863:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4832:47:1"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":498,"src":"4898:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4898:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4897:9:1"},"scope":861,"src":"4804:175:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":548,"nodeType":"Block","src":"5704:576:1","statements":[{"assignments":[512],"declarations":[{"constant":false,"id":512,"mutability":"mutable","name":"nonce","nameLocation":"5718:5:1","nodeType":"VariableDeclaration","scope":548,"src":"5710:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":511,"name":"uint256","nodeType":"ElementaryTypeName","src":"5710:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":514,"initialValue":{"id":513,"name":"s_requestCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"5726:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5710:30:1"},{"expression":{"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":515,"name":"s_requestCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"5746:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":516,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"5763:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5771:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5763:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5746:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":520,"nodeType":"ExpressionStatement","src":"5746:26:1"},{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"encodedRequest","nameLocation":"5791:14:1","nodeType":"VariableDeclaration","scope":548,"src":"5778:27:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":521,"name":"bytes","nodeType":"ElementaryTypeName","src":"5778:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":540,"initialValue":{"arguments":[{"expression":{"expression":{"id":525,"name":"OperatorInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"5838:17:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OperatorInterface_$1331_$","typeString":"type(contract OperatorInterface)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5856:15:1","memberName":"operatorRequest","nodeType":"MemberAccess","referencedDeclaration":1276,"src":"5838:33:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_bytes4_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function OperatorInterface.operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes calldata)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5872:8:1","memberName":"selector","nodeType":"MemberAccess","src":"5838:42:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":528,"name":"SENDER_OVERRIDE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"5888:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":529,"name":"AMOUNT_OVERRIDE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"5996:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":530,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6101:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6105:2:1","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":15,"src":"6101:6:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":532,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6115:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6119:18:1","memberName":"callbackFunctionId","nodeType":"MemberAccess","referencedDeclaration":19,"src":"6115:22:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":534,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":535,"name":"OPERATOR_ARGS_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"6158:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":536,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"6187:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6191:3:1","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":24,"src":"6187:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6195:3:1","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"6187:11:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":523,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5808:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5812:18:1","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"5808:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5808:396:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5778:426:1"},{"expression":{"arguments":[{"id":542,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6229:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":543,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"6244:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":544,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6251:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":545,"name":"encodedRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"6260:14:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":541,"name":"_rawRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"6217:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (address,uint256,uint256,bytes memory) returns (bytes32)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6217:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":510,"id":547,"nodeType":"Return","src":"6210:65:1"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"4983:564:1","text":" @notice Creates a Chainlink request to the specified oracle address\n @dev This function supports multi-word response\n @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n send LINK which creates a request on the target oracle contract.\n Emits ChainlinkRequested event.\n @param oracleAddress The address of the oracle for the request\n @param req The initialized Chainlink Request\n @param payment The amount of LINK to send for the request\n @return requestId The request ID"},"id":549,"implemented":true,"kind":"function","modifiers":[],"name":"sendOperatorRequestTo","nameLocation":"5559:21:1","nodeType":"FunctionDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"oracleAddress","nameLocation":"5594:13:1","nodeType":"VariableDeclaration","scope":549,"src":"5586:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"5586:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"req","nameLocation":"5638:3:1","nodeType":"VariableDeclaration","scope":549,"src":"5613:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":503,"nodeType":"UserDefinedTypeName","pathNode":{"id":502,"name":"Chainlink.Request","nameLocations":["5613:9:1","5623:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"5613:17:1"},"referencedDeclaration":25,"src":"5613:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"payment","nameLocation":"5655:7:1","nodeType":"VariableDeclaration","scope":549,"src":"5647:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"5647:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5580:86:1"},"returnParameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":509,"mutability":"mutable","name":"requestId","nameLocation":"5693:9:1","nodeType":"VariableDeclaration","scope":549,"src":"5685:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5685:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5684:19:1"},"scope":861,"src":"5550:730:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":593,"nodeType":"Block","src":"6790:269:1","statements":[{"expression":{"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":563,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6796:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":567,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6835:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"}},{"id":568,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6841:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ChainlinkClient_$861","typeString":"contract ChainlinkClient"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":565,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6818:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6822:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"6818:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6818:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":564,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6808:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6808:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6796:52:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":572,"nodeType":"ExpressionStatement","src":"6796:52:1"},{"expression":{"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":573,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"6854:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":575,"indexExpression":{"id":574,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6872:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6854:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":576,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"6885:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6854:44:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":578,"nodeType":"ExpressionStatement","src":"6854:44:1"},{"eventCall":{"arguments":[{"id":580,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6928:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":579,"name":"ChainlinkRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"6909:18:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6909:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":582,"nodeType":"EmitStatement","src":"6904:34:1"},{"expression":{"arguments":[{"arguments":[{"id":586,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"6975:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":587,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"6990:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":588,"name":"encodedRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6999:14:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":584,"name":"s_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"6952:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6959:15:1","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":1239,"src":"6952:22:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6952:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7016:37:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b3efd608222b424e5ed8427d7f6a272069793e6a1f5930c93db5c7960c3ce96","typeString":"literal_string \"unable to transferAndCall to oracle\""},"value":"unable to transferAndCall to oracle"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b3efd608222b424e5ed8427d7f6a272069793e6a1f5930c93db5c7960c3ce96","typeString":"literal_string \"unable to transferAndCall to oracle\""}],"id":583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6944:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6944:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":592,"nodeType":"ExpressionStatement","src":"6944:110:1"}]},"documentation":{"id":550,"nodeType":"StructuredDocumentation","src":"6284:342:1","text":" @notice Make a request to an oracle\n @param oracleAddress The address of the oracle for the request\n @param nonce used to generate the request ID\n @param payment The amount of LINK to send for the request\n @param encodedRequest data encoded for request type specific format\n @return requestId The request ID"},"id":594,"implemented":true,"kind":"function","modifiers":[],"name":"_rawRequest","nameLocation":"6638:11:1","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"oracleAddress","nameLocation":"6663:13:1","nodeType":"VariableDeclaration","scope":594,"src":"6655:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"6655:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":554,"mutability":"mutable","name":"nonce","nameLocation":"6690:5:1","nodeType":"VariableDeclaration","scope":594,"src":"6682:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint256","nodeType":"ElementaryTypeName","src":"6682:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"payment","nameLocation":"6709:7:1","nodeType":"VariableDeclaration","scope":594,"src":"6701:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint256","nodeType":"ElementaryTypeName","src":"6701:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"encodedRequest","nameLocation":"6735:14:1","nodeType":"VariableDeclaration","scope":594,"src":"6722:27:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":557,"name":"bytes","nodeType":"ElementaryTypeName","src":"6722:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6649:104:1"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"requestId","nameLocation":"6779:9:1","nodeType":"VariableDeclaration","scope":594,"src":"6771:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6771:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6770:19:1"},"scope":861,"src":"6629:430:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":633,"nodeType":"Block","src":"7713:250:1","statements":[{"assignments":[608],"declarations":[{"constant":false,"id":608,"mutability":"mutable","name":"requested","nameLocation":"7737:9:1","nodeType":"VariableDeclaration","scope":633,"src":"7719:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"},"typeName":{"id":607,"nodeType":"UserDefinedTypeName","pathNode":{"id":606,"name":"OperatorInterface","nameLocations":["7719:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1331,"src":"7719:17:1"},"referencedDeclaration":1331,"src":"7719:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"visibility":"internal"}],"id":614,"initialValue":{"arguments":[{"baseExpression":{"id":610,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"7767:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":612,"indexExpression":{"id":611,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7785:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7767:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":609,"name":"OperatorInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"7749:17:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OperatorInterface_$1331_$","typeString":"type(contract OperatorInterface)"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7749:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"nodeType":"VariableDeclarationStatement","src":"7719:77:1"},{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7802:35:1","subExpression":{"baseExpression":{"id":615,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"7809:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":617,"indexExpression":{"id":616,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7827:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7809:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":619,"nodeType":"ExpressionStatement","src":"7802:35:1"},{"eventCall":{"arguments":[{"id":621,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7867:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":620,"name":"ChainlinkCancelled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"7848:18:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7848:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"EmitStatement","src":"7843:34:1"},{"expression":{"arguments":[{"id":627,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7913:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":628,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"7924:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":629,"name":"callbackFunc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"7933:12:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":630,"name":"expiration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"7947:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":624,"name":"requested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"7883:9:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7893:19:1","memberName":"cancelOracleRequest","nodeType":"MemberAccess","referencedDeclaration":1075,"src":"7883:29:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes4_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256,bytes4,uint256) external"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7883:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":632,"nodeType":"ExpressionStatement","src":"7883:75:1"}]},"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"7063:509:1","text":" @notice Allows a request to be cancelled if it has not been fulfilled\n @dev Requires keeping track of the expiration value emitted from the oracle contract.\n Deletes the request from the `pendingRequests` mapping.\n Emits ChainlinkCancelled event.\n @param requestId The request ID\n @param payment The amount of LINK sent for the request\n @param callbackFunc The callback function specified for the request\n @param expiration The time of the expiration for the request"},"id":634,"implemented":true,"kind":"function","modifiers":[],"name":"cancelChainlinkRequest","nameLocation":"7584:22:1","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"requestId","nameLocation":"7620:9:1","nodeType":"VariableDeclaration","scope":634,"src":"7612:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7612:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":599,"mutability":"mutable","name":"payment","nameLocation":"7643:7:1","nodeType":"VariableDeclaration","scope":634,"src":"7635:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint256","nodeType":"ElementaryTypeName","src":"7635:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":601,"mutability":"mutable","name":"callbackFunc","nameLocation":"7663:12:1","nodeType":"VariableDeclaration","scope":634,"src":"7656:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":600,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7656:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":603,"mutability":"mutable","name":"expiration","nameLocation":"7689:10:1","nodeType":"VariableDeclaration","scope":634,"src":"7681:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":602,"name":"uint256","nodeType":"ElementaryTypeName","src":"7681:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7606:97:1"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[],"src":"7713:0:1"},"scope":861,"src":"7575:388:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":642,"nodeType":"Block","src":"8238:32:1","statements":[{"expression":{"id":640,"name":"s_requestCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"8251:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":639,"id":641,"nodeType":"Return","src":"8244:21:1"}]},"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"7967:205:1","text":" @notice the next request count to be used in generating a nonce\n @dev starts at 1 in order to ensure consistent gas cost\n @return returns the next request count to be used in a nonce"},"id":643,"implemented":true,"kind":"function","modifiers":[],"name":"getNextRequestCount","nameLocation":"8184:19:1","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"8203:2:1"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":643,"src":"8229:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":637,"name":"uint256","nodeType":"ElementaryTypeName","src":"8229:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8228:9:1"},"scope":861,"src":"8175:95:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":655,"nodeType":"Block","src":"8451:54:1","statements":[{"expression":{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":649,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"8457:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":651,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"8486:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":650,"name":"OperatorInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"8468:17:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OperatorInterface_$1331_$","typeString":"type(contract OperatorInterface)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8468:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"src":"8457:43:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}},"id":654,"nodeType":"ExpressionStatement","src":"8457:43:1"}]},"documentation":{"id":644,"nodeType":"StructuredDocumentation","src":"8274:114:1","text":" @notice Sets the stored oracle address\n @param oracleAddress The address of the oracle contract"},"id":656,"implemented":true,"kind":"function","modifiers":[],"name":"setChainlinkOracle","nameLocation":"8400:18:1","nodeType":"FunctionDefinition","parameters":{"id":647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"oracleAddress","nameLocation":"8427:13:1","nodeType":"VariableDeclaration","scope":656,"src":"8419:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"8419:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8418:23:1"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"8451:0:1"},"scope":861,"src":"8391:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"8682:51:1","statements":[{"expression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":662,"name":"s_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"8688:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":664,"name":"linkAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"8716:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":663,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"8697:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$1251_$","typeString":"type(contract LinkTokenInterface)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8697:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"src":"8688:40:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"id":667,"nodeType":"ExpressionStatement","src":"8688:40:1"}]},"documentation":{"id":657,"nodeType":"StructuredDocumentation","src":"8509:113:1","text":" @notice Sets the LINK token address\n @param linkAddress The address of the LINK token contract"},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"setChainlinkToken","nameLocation":"8634:17:1","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"linkAddress","nameLocation":"8660:11:1","nodeType":"VariableDeclaration","scope":669,"src":"8652:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"8652:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8651:21:1"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"8682:0:1"},"scope":861,"src":"8625:108:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":681,"nodeType":"Block","src":"8900:79:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":675,"name":"LINK_TOKEN_POINTER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"8941:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":674,"name":"PointerInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"8924:16:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PointerInterface_$1394_$","typeString":"type(contract PointerInterface)"}},"id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8924:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_PointerInterface_$1394","typeString":"contract PointerInterface"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8961:10:1","memberName":"getAddress","nodeType":"MemberAccess","referencedDeclaration":1393,"src":"8924:47:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8924:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":673,"name":"setChainlinkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"8906:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8906:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":680,"nodeType":"ExpressionStatement","src":"8906:68:1"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"8737:116:1","text":" @notice Sets the Chainlink token address for the public\n network as given by the Pointer contract"},"id":682,"implemented":true,"kind":"function","modifiers":[],"name":"setPublicChainlinkToken","nameLocation":"8865:23:1","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"8888:2:1"},"returnParameters":{"id":672,"nodeType":"ParameterList","parameters":[],"src":"8900:0:1"},"scope":861,"src":"8856:123:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"9163:33:1","statements":[{"expression":{"arguments":[{"id":690,"name":"s_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"9184:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}],"id":689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":688,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:1","typeDescriptions":{}}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":687,"id":692,"nodeType":"Return","src":"9169:22:1"}]},"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"8983:112:1","text":" @notice Retrieves the stored address of the LINK token\n @return The address of the LINK token"},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"chainlinkTokenAddress","nameLocation":"9107:21:1","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"9128:2:1"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":694,"src":"9154:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"9154:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9153:9:1"},"scope":861,"src":"9098:98:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":705,"nodeType":"Block","src":"9391:35:1","statements":[{"expression":{"arguments":[{"id":702,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"9412:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OperatorInterface_$1331","typeString":"contract OperatorInterface"}],"id":701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"9404:7:1","typeDescriptions":{}}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":699,"id":704,"nodeType":"Return","src":"9397:24:1"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"9200:122:1","text":" @notice Retrieves the stored address of the oracle contract\n @return The address of the oracle contract"},"id":706,"implemented":true,"kind":"function","modifiers":[],"name":"chainlinkOracleAddress","nameLocation":"9334:22:1","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"9356:2:1"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":706,"src":"9382:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"9382:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9381:9:1"},"scope":861,"src":"9325:101:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":723,"nodeType":"Block","src":"9819:55:1","statements":[{"expression":{"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":717,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"9825:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":719,"indexExpression":{"id":718,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"9843:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9825:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":720,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"9856:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9825:44:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":722,"nodeType":"ExpressionStatement","src":"9825:44:1"}]},"documentation":{"id":707,"nodeType":"StructuredDocumentation","src":"9430:269:1","text":" @notice Allows for a request which was created on another contract to be fulfilled\n on this contract\n @param oracleAddress The address of the oracle contract that will fulfill the request\n @param requestId The request ID used for the response"},"id":724,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":714,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"9808:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":715,"kind":"modifierInvocation","modifierName":{"id":713,"name":"notPendingRequest","nameLocations":["9790:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":860,"src":"9790:17:1"},"nodeType":"ModifierInvocation","src":"9790:28:1"}],"name":"addChainlinkExternalRequest","nameLocation":"9711:27:1","nodeType":"FunctionDefinition","parameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"oracleAddress","nameLocation":"9747:13:1","nodeType":"VariableDeclaration","scope":724,"src":"9739:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":708,"name":"address","nodeType":"ElementaryTypeName","src":"9739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"requestId","nameLocation":"9770:9:1","nodeType":"VariableDeclaration","scope":724,"src":"9762:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9762:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9738:42:1"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[],"src":"9819:0:1"},"scope":861,"src":"9702:172:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":772,"nodeType":"Block","src":"10207:326:1","statements":[{"expression":{"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":732,"name":"s_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"10213:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":734,"name":"ensAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"10234:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":733,"name":"ENSInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"10221:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ENSInterface_$1156_$","typeString":"type(contract ENSInterface)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10221:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"src":"10213:32:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"id":737,"nodeType":"ExpressionStatement","src":"10213:32:1"},{"expression":{"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":738,"name":"s_ensNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"10251:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":739,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"10263:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10251:16:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":741,"nodeType":"ExpressionStatement","src":"10251:16:1"},{"assignments":[743],"declarations":[{"constant":false,"id":743,"mutability":"mutable","name":"linkSubnode","nameLocation":"10281:11:1","nodeType":"VariableDeclaration","scope":772,"src":"10273:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10273:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":751,"initialValue":{"arguments":[{"arguments":[{"id":747,"name":"s_ensNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"10322:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":748,"name":"ENS_TOKEN_SUBNAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"10333:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":745,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10305:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10309:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"10305:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10305:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":744,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10295:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10295:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10273:79:1"},{"assignments":[754],"declarations":[{"constant":false,"id":754,"mutability":"mutable","name":"resolver","nameLocation":"10380:8:1","nodeType":"VariableDeclaration","scope":772,"src":"10358:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"},"typeName":{"id":753,"nodeType":"UserDefinedTypeName","pathNode":{"id":752,"name":"ENSResolver_Chainlink","nameLocations":["10358:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"10358:21:1"},"referencedDeclaration":2373,"src":"10358:21:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"visibility":"internal"}],"id":761,"initialValue":{"arguments":[{"arguments":[{"id":758,"name":"linkSubnode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"10428:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":756,"name":"s_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"10413:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:8:1","memberName":"resolver","nodeType":"MemberAccess","referencedDeclaration":1148,"src":"10413:14:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10413:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":755,"name":"ENSResolver_Chainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"10391:21:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ENSResolver_$2373_$","typeString":"type(contract ENSResolver)"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10391:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"nodeType":"VariableDeclarationStatement","src":"10358:83:1"},{"expression":{"arguments":[{"arguments":[{"id":765,"name":"linkSubnode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"10479:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":763,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"10465:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10474:4:1","memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"10465:13:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10465:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":762,"name":"setChainlinkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"10447:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10447:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"ExpressionStatement","src":"10447:45:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":769,"name":"updateChainlinkOracleWithENS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"10498:28:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10498:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"ExpressionStatement","src":"10498:30:1"}]},"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"9878:254:1","text":" @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n @dev Accounts for subnodes having different resolvers\n @param ensAddress The address of the ENS contract\n @param node The ENS node hash"},"id":773,"implemented":true,"kind":"function","modifiers":[],"name":"useChainlinkWithENS","nameLocation":"10144:19:1","nodeType":"FunctionDefinition","parameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"ensAddress","nameLocation":"10172:10:1","nodeType":"VariableDeclaration","scope":773,"src":"10164:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":726,"name":"address","nodeType":"ElementaryTypeName","src":"10164:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":729,"mutability":"mutable","name":"node","nameLocation":"10192:4:1","nodeType":"VariableDeclaration","scope":773,"src":"10184:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10184:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10163:34:1"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"10207:0:1"},"scope":861,"src":"10135:398:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":804,"nodeType":"Block","src":"10776:238:1","statements":[{"assignments":[778],"declarations":[{"constant":false,"id":778,"mutability":"mutable","name":"oracleSubnode","nameLocation":"10790:13:1","nodeType":"VariableDeclaration","scope":804,"src":"10782:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10782:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":786,"initialValue":{"arguments":[{"arguments":[{"id":782,"name":"s_ensNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"10833:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":783,"name":"ENS_ORACLE_SUBNAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"10844:18:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":780,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10816:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10820:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"10816:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10816:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":779,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10806:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10806:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10782:82:1"},{"assignments":[789],"declarations":[{"constant":false,"id":789,"mutability":"mutable","name":"resolver","nameLocation":"10892:8:1","nodeType":"VariableDeclaration","scope":804,"src":"10870:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"},"typeName":{"id":788,"nodeType":"UserDefinedTypeName","pathNode":{"id":787,"name":"ENSResolver_Chainlink","nameLocations":["10870:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"10870:21:1"},"referencedDeclaration":2373,"src":"10870:21:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"visibility":"internal"}],"id":796,"initialValue":{"arguments":[{"arguments":[{"id":793,"name":"oracleSubnode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"10940:13:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":791,"name":"s_ens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"10925:5:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSInterface_$1156","typeString":"contract ENSInterface"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10931:8:1","memberName":"resolver","nodeType":"MemberAccess","referencedDeclaration":1148,"src":"10925:14:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10925:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":790,"name":"ENSResolver_Chainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"10903:21:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ENSResolver_$2373_$","typeString":"type(contract ENSResolver)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"nodeType":"VariableDeclarationStatement","src":"10870:85:1"},{"expression":{"arguments":[{"arguments":[{"id":800,"name":"oracleSubnode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"10994:13:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":798,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"10980:8:1","typeDescriptions":{"typeIdentifier":"t_contract$_ENSResolver_$2373","typeString":"contract ENSResolver"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10989:4:1","memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"10980:13:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10980:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":797,"name":"setChainlinkOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"10961:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10961:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":803,"nodeType":"ExpressionStatement","src":"10961:48:1"}]},"documentation":{"id":774,"nodeType":"StructuredDocumentation","src":"10537:187:1","text":" @notice Sets the stored oracle contract with the address resolved by ENS\n @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously"},"id":805,"implemented":true,"kind":"function","modifiers":[],"name":"updateChainlinkOracleWithENS","nameLocation":"10736:28:1","nodeType":"FunctionDefinition","parameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"10764:2:1"},"returnParameters":{"id":776,"nodeType":"ParameterList","parameters":[],"src":"10776:0:1"},"scope":861,"src":"10727:287:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":814,"nodeType":"Block","src":"11402:6:1","statements":[]},"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"11018:223:1","text":" @notice Ensures that the fulfillment is valid for this contract\n @dev Use if the contract developer prefers methods instead of modifiers for validation\n @param requestId The request ID for fulfillment"},"id":815,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":811,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"11342:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":812,"kind":"modifierInvocation","modifierName":{"id":810,"name":"recordChainlinkFulfillment","nameLocations":["11315:26:1"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"11315:26:1"},"nodeType":"ModifierInvocation","src":"11315:37:1"}],"name":"validateChainlinkCallback","nameLocation":"11253:25:1","nodeType":"FunctionDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"requestId","nameLocation":"11287:9:1","nodeType":"VariableDeclaration","scope":815,"src":"11279:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":807,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11279:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11278:19:1"},"returnParameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"11402:0:1"},"scope":861,"src":"11244:164:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":840,"nodeType":"Block","src":"11635:194:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":821,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11649:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11653:6:1","memberName":"sender","nodeType":"MemberAccess","src":"11649:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":823,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"11663:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":825,"indexExpression":{"id":824,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11681:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11663:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11649:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536f75726365206d75737420626520746865206f7261636c65206f66207468652072657175657374","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11693:42:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d5cafe2745dab6273b51cca76f8727c7664db74ede49af049a5b5ca6a3b184e4","typeString":"literal_string \"Source must be the oracle of the request\""},"value":"Source must be the oracle of the request"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d5cafe2745dab6273b51cca76f8727c7664db74ede49af049a5b5ca6a3b184e4","typeString":"literal_string \"Source must be the oracle of the request\""}],"id":820,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11641:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:95:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":829,"nodeType":"ExpressionStatement","src":"11641:95:1"},{"expression":{"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11742:35:1","subExpression":{"baseExpression":{"id":830,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"11749:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":832,"indexExpression":{"id":831,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11767:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11749:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":834,"nodeType":"ExpressionStatement","src":"11742:35:1"},{"eventCall":{"arguments":[{"id":836,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11807:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":835,"name":"ChainlinkFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"11788:18:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11788:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":838,"nodeType":"EmitStatement","src":"11783:34:1"},{"id":839,"nodeType":"PlaceholderStatement","src":"11823:1:1"}]},"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"11412:165:1","text":" @dev Reverts if the sender is not the oracle of the request.\n Emits ChainlinkFulfilled event.\n @param requestId The request ID for fulfillment"},"id":841,"name":"recordChainlinkFulfillment","nameLocation":"11589:26:1","nodeType":"ModifierDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"requestId","nameLocation":"11624:9:1","nodeType":"VariableDeclaration","scope":841,"src":"11616:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11616:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11615:19:1"},"src":"11580:249:1","virtual":false,"visibility":"internal"},{"body":{"id":859,"nodeType":"Block","src":"11996:99:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":847,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"12010:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":849,"indexExpression":{"id":848,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"12028:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12010:28:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12050:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12042:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":850,"name":"address","nodeType":"ElementaryTypeName","src":"12042:7:1","typeDescriptions":{}}},"id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12042:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12010:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265717565737420697320616c72656164792070656e64696e67","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12054:28:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_efa688de2ca2442cd2f76ca864c7a15bdcb24ac77ed3de01d4cf9f6afd58c7aa","typeString":"literal_string \"Request is already pending\""},"value":"Request is already pending"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_efa688de2ca2442cd2f76ca864c7a15bdcb24ac77ed3de01d4cf9f6afd58c7aa","typeString":"literal_string \"Request is already pending\""}],"id":846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12002:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12002:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"12002:81:1"},{"id":858,"nodeType":"PlaceholderStatement","src":"12089:1:1"}]},"documentation":{"id":842,"nodeType":"StructuredDocumentation","src":"11833:114:1","text":" @dev Reverts if the request is already pending\n @param requestId The request ID for fulfillment"},"id":860,"name":"notPendingRequest","nameLocation":"11959:17:1","nodeType":"ModifierDefinition","parameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"requestId","nameLocation":"11985:9:1","nodeType":"VariableDeclaration","scope":860,"src":"11977:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11977:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11976:19:1"},"src":"11950:145:1","virtual":false,"visibility":"internal"}],"scope":862,"src":"549:11548:1","usedErrors":[]}],"src":"32:12066:1"},"id":1},"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[881],"ConfirmedOwnerWithProposal":[1043],"OwnableInterface":[1386]},"id":882,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":863,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":864,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":882,"sourceUnit":1044,"src":"57:42:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":866,"name":"ConfirmedOwnerWithProposal","nameLocations":["239:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":1043,"src":"239:26:2"},"id":867,"nodeType":"InheritanceSpecifier","src":"239:26:2"}],"canonicalName":"ConfirmedOwner","contractDependencies":[],"contractKind":"contract","documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"101:110:2","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":881,"linearizedBaseContracts":[881,1043,1386],"name":"ConfirmedOwner","nameLocation":"221:14:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":879,"nodeType":"Block","src":"349:2:2","statements":[]},"id":880,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":872,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"327:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"345:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"337:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"337:7:2","typeDescriptions":{}}},"id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"337:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":877,"kind":"baseConstructorSpecifier","modifierName":{"id":871,"name":"ConfirmedOwnerWithProposal","nameLocations":["300:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":1043,"src":"300:26:2"},"nodeType":"ModifierInvocation","src":"300:48:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"newOwner","nameLocation":"290:8:2","nodeType":"VariableDeclaration","scope":880,"src":"282:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"282:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"281:18:2"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[],"src":"349:0:2"},"scope":881,"src":"270:81:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":882,"src":"212:141:2","usedErrors":[]}],"src":"32:322:2"},"id":2},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[1043],"OwnableInterface":[1386]},"id":1044,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":883,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol","file":"./interfaces/OwnableInterface.sol","id":884,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1044,"sourceUnit":1387,"src":"57:43:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":886,"name":"OwnableInterface","nameLocations":["252:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":1386,"src":"252:16:3"},"id":887,"nodeType":"InheritanceSpecifier","src":"252:16:3"}],"canonicalName":"ConfirmedOwnerWithProposal","contractDependencies":[],"contractKind":"contract","documentation":{"id":885,"nodeType":"StructuredDocumentation","src":"102:110:3","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":1043,"linearizedBaseContracts":[1043,1386],"name":"ConfirmedOwnerWithProposal","nameLocation":"222:26:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":889,"mutability":"mutable","name":"s_owner","nameLocation":"289:7:3","nodeType":"VariableDeclaration","scope":1043,"src":"273:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":888,"name":"address","nodeType":"ElementaryTypeName","src":"273:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":891,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"316:14:3","nodeType":"VariableDeclaration","scope":1043,"src":"300:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"300:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278","id":897,"name":"OwnershipTransferRequested","nameLocation":"341:26:3","nodeType":"EventDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"384:4:3","nodeType":"VariableDeclaration","scope":897,"src":"368:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"368:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":895,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"406:2:3","nodeType":"VariableDeclaration","scope":897,"src":"390:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"367:42:3"},"src":"335:75:3"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":903,"name":"OwnershipTransferred","nameLocation":"419:20:3","nodeType":"EventDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"456:4:3","nodeType":"VariableDeclaration","scope":903,"src":"440:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":898,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":901,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"478:2:3","nodeType":"VariableDeclaration","scope":903,"src":"462:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"462:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"439:42:3"},"src":"413:69:3"},{"body":{"id":936,"nodeType":"Block","src":"538:179:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":911,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"552:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"572:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"564:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"564:7:3","typeDescriptions":{}}},"id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"564:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"552:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"576:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":910,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"544:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"544:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"ExpressionStatement","src":"544:59:3"},{"expression":{"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":920,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"610:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":921,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"620:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"610:18:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":923,"nodeType":"ExpressionStatement","src":"610:18:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":924,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"638:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"662:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"654:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:3","typeDescriptions":{}}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"654:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"638:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":935,"nodeType":"IfStatement","src":"634:79:3","trueBody":{"id":934,"nodeType":"Block","src":"666:47:3","statements":[{"expression":{"arguments":[{"id":931,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"693:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":930,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"674:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"674:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"674:32:3"}]}}]},"id":937,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"newOwner","nameLocation":"506:8:3","nodeType":"VariableDeclaration","scope":937,"src":"498:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"498:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"pendingOwner","nameLocation":"524:12:3","nodeType":"VariableDeclaration","scope":937,"src":"516:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"516:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"497:40:3"},"returnParameters":{"id":909,"nodeType":"ParameterList","parameters":[],"src":"538:0:3"},"scope":1043,"src":"486:231:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1382],"body":{"id":950,"nodeType":"Block","src":"891:33:3","statements":[{"expression":{"arguments":[{"id":947,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"916:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":946,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"897:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"897:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":949,"nodeType":"ExpressionStatement","src":"897:22:3"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"721:102:3","text":" @notice Allows an owner to begin transferring ownership to a new address,\n pending."},"functionSelector":"f2fde38b","id":951,"implemented":true,"kind":"function","modifiers":[{"id":944,"kind":"modifierInvocation","modifierName":{"id":943,"name":"onlyOwner","nameLocations":["881:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1042,"src":"881:9:3"},"nodeType":"ModifierInvocation","src":"881:9:3"}],"name":"transferOwnership","nameLocation":"835:17:3","nodeType":"FunctionDefinition","overrides":{"id":942,"nodeType":"OverrideSpecifier","overrides":[],"src":"872:8:3"},"parameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"to","nameLocation":"861:2:3","nodeType":"VariableDeclaration","scope":951,"src":"853:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"853:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"852:12:3"},"returnParameters":{"id":945,"nodeType":"ParameterList","parameters":[],"src":"891:0:3"},"scope":1043,"src":"826:98:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1385],"body":{"id":986,"nodeType":"Block","src":"1061:220:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":957,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1075:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1075:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":959,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"1089:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1075:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1105:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1067:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1067:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"1067:63:3"},{"assignments":[965],"declarations":[{"constant":false,"id":965,"mutability":"mutable","name":"oldOwner","nameLocation":"1145:8:3","nodeType":"VariableDeclaration","scope":986,"src":"1137:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":964,"name":"address","nodeType":"ElementaryTypeName","src":"1137:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":967,"initialValue":{"id":966,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1156:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1137:26:3"},{"expression":{"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":968,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1169:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1179:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1183:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1179:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1169:20:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":972,"nodeType":"ExpressionStatement","src":"1169:20:3"},{"expression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":973,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"1195:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1220:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1212:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"1212:7:3","typeDescriptions":{}}},"id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1212:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1195:27:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":979,"nodeType":"ExpressionStatement","src":"1195:27:3"},{"eventCall":{"arguments":[{"id":981,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"1255:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":982,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1265:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1269:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1265:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":980,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"1234:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1234:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"EmitStatement","src":"1229:47:3"}]},"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"928:85:3","text":" @notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":987,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1025:15:3","nodeType":"FunctionDefinition","overrides":{"id":954,"nodeType":"OverrideSpecifier","overrides":[],"src":"1052:8:3"},"parameters":{"id":953,"nodeType":"ParameterList","parameters":[],"src":"1040:2:3"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"1061:0:3"},"scope":1043,"src":"1016:265:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1377],"body":{"id":996,"nodeType":"Block","src":"1388:25:3","statements":[{"expression":{"id":994,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1401:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":993,"id":995,"nodeType":"Return","src":"1394:14:3"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"1285:44:3","text":" @notice Get the current owner"},"functionSelector":"8da5cb5b","id":997,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1341:5:3","nodeType":"FunctionDefinition","overrides":{"id":990,"nodeType":"OverrideSpecifier","overrides":[],"src":"1361:8:3"},"parameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"1346:2:3"},"returnParameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"1379:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1378:9:3"},"scope":1043,"src":"1332:81:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1020,"nodeType":"Block","src":"1545:140:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1559:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1565:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1565:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1559:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1577:25:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":1003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1551:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1551:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1010,"nodeType":"ExpressionStatement","src":"1551:52:3"},{"expression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1011,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"1610:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1012,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1627:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1610:19:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1014,"nodeType":"ExpressionStatement","src":"1610:19:3"},{"eventCall":{"arguments":[{"id":1016,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1668:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1017,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1677:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1015,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"1641:26:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"EmitStatement","src":"1636:44:3"}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"1417:77:3","text":" @notice validate, transfer ownership, and emit relevant events"},"id":1021,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1506:18:3","nodeType":"FunctionDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"to","nameLocation":"1533:2:3","nodeType":"VariableDeclaration","scope":1021,"src":"1525:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"1525:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1524:12:3"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[],"src":"1545:0:3"},"scope":1043,"src":"1497:188:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1033,"nodeType":"Block","src":"1774:67:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1026,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1788:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1792:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1788:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1028,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1802:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1788:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1811:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":1025,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1780:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1032,"nodeType":"ExpressionStatement","src":"1780:56:3"}]},"documentation":{"id":1022,"nodeType":"StructuredDocumentation","src":"1689:38:3","text":" @notice validate access"},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1739:18:3","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[],"src":"1757:2:3"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"1774:0:3"},"scope":1043,"src":"1730:111:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1041,"nodeType":"Block","src":"1950:38:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1037,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"1956:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1956:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1039,"nodeType":"ExpressionStatement","src":"1956:20:3"},{"id":1040,"nodeType":"PlaceholderStatement","src":"1982:1:3"}]},"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"1845:81:3","text":" @notice Reverts if called by anyone other than the contract owner."},"id":1042,"name":"onlyOwner","nameLocation":"1938:9:3","nodeType":"ModifierDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"1947:2:3"},"src":"1929:59:3","virtual":false,"visibility":"internal"}],"scope":1044,"src":"213:1777:3","usedErrors":[]}],"src":"32:1959:3"},"id":3},"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol","exportedSymbols":{"ChainlinkRequestInterface":[1076]},"id":1077,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1045,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"ChainlinkRequestInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1076,"linearizedBaseContracts":[1076],"name":"ChainlinkRequestInterface","nameLocation":"67:25:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40429946","id":1064,"implemented":false,"kind":"function","modifiers":[],"name":"oracleRequest","nameLocation":"106:13:4","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1047,"mutability":"mutable","name":"sender","nameLocation":"133:6:4","nodeType":"VariableDeclaration","scope":1064,"src":"125:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1046,"name":"address","nodeType":"ElementaryTypeName","src":"125:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1049,"mutability":"mutable","name":"requestPrice","nameLocation":"153:12:4","nodeType":"VariableDeclaration","scope":1064,"src":"145:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1048,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"serviceAgreementID","nameLocation":"179:18:4","nodeType":"VariableDeclaration","scope":1064,"src":"171:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"171:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"callbackAddress","nameLocation":"211:15:4","nodeType":"VariableDeclaration","scope":1064,"src":"203:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"239:18:4","nodeType":"VariableDeclaration","scope":1064,"src":"232:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1054,"name":"bytes4","nodeType":"ElementaryTypeName","src":"232:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"nonce","nameLocation":"271:5:4","nodeType":"VariableDeclaration","scope":1064,"src":"263:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"263:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"dataVersion","nameLocation":"290:11:4","nodeType":"VariableDeclaration","scope":1064,"src":"282:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"282:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"data","nameLocation":"322:4:4","nodeType":"VariableDeclaration","scope":1064,"src":"307:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1060,"name":"bytes","nodeType":"ElementaryTypeName","src":"307:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"119:211:4"},"returnParameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"339:0:4"},"scope":1076,"src":"97:243:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6ee4d553","id":1075,"implemented":false,"kind":"function","modifiers":[],"name":"cancelOracleRequest","nameLocation":"353:19:4","nodeType":"FunctionDefinition","parameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"mutability":"mutable","name":"requestId","nameLocation":"386:9:4","nodeType":"VariableDeclaration","scope":1075,"src":"378:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"378:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1068,"mutability":"mutable","name":"payment","nameLocation":"409:7:4","nodeType":"VariableDeclaration","scope":1075,"src":"401:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"401:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"429:18:4","nodeType":"VariableDeclaration","scope":1075,"src":"422:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1069,"name":"bytes4","nodeType":"ElementaryTypeName","src":"422:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"expiration","nameLocation":"461:10:4","nodeType":"VariableDeclaration","scope":1075,"src":"453:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"453:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"372:103:4"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[],"src":"484:0:4"},"scope":1076,"src":"344:141:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1077,"src":"57:430:4","usedErrors":[]}],"src":"32:456:4"},"id":4},"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol","exportedSymbols":{"ENSInterface":[1156]},"id":1157,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1078,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"ENSInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1156,"linearizedBaseContracts":[1156],"name":"ENSInterface","nameLocation":"67:12:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","id":1086,"name":"NewOwner","nameLocation":"161:8:5","nodeType":"EventDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"186:4:5","nodeType":"VariableDeclaration","scope":1086,"src":"170:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1079,"name":"bytes32","nodeType":"ElementaryTypeName","src":"170:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1082,"indexed":true,"mutability":"mutable","name":"label","nameLocation":"208:5:5","nodeType":"VariableDeclaration","scope":1086,"src":"192:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"192:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1084,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"223:5:5","nodeType":"VariableDeclaration","scope":1086,"src":"215:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"215:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"169:60:5"},"src":"155:75:5"},{"anonymous":false,"eventSelector":"d4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d266","id":1092,"name":"Transfer","nameLocation":"315:8:5","nodeType":"EventDefinition","parameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"340:4:5","nodeType":"VariableDeclaration","scope":1092,"src":"324:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"324:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1090,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"354:5:5","nodeType":"VariableDeclaration","scope":1092,"src":"346:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"346:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"323:37:5"},"src":"309:52:5"},{"anonymous":false,"eventSelector":"335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0","id":1098,"name":"NewResolver","nameLocation":"421:11:5","nodeType":"EventDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"449:4:5","nodeType":"VariableDeclaration","scope":1098,"src":"433:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"433:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1096,"indexed":false,"mutability":"mutable","name":"resolver","nameLocation":"463:8:5","nodeType":"VariableDeclaration","scope":1098,"src":"455:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"455:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"432:40:5"},"src":"415:58:5"},{"anonymous":false,"eventSelector":"1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68","id":1104,"name":"NewTTL","nameLocation":"526:6:5","nodeType":"EventDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"indexed":true,"mutability":"mutable","name":"node","nameLocation":"549:4:5","nodeType":"VariableDeclaration","scope":1104,"src":"533:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1099,"name":"bytes32","nodeType":"ElementaryTypeName","src":"533:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1102,"indexed":false,"mutability":"mutable","name":"ttl","nameLocation":"562:3:5","nodeType":"VariableDeclaration","scope":1104,"src":"555:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1101,"name":"uint64","nodeType":"ElementaryTypeName","src":"555:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"532:34:5"},"src":"520:47:5"},{"functionSelector":"06ab5923","id":1113,"implemented":false,"kind":"function","modifiers":[],"name":"setSubnodeOwner","nameLocation":"580:15:5","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1106,"mutability":"mutable","name":"node","nameLocation":"609:4:5","nodeType":"VariableDeclaration","scope":1113,"src":"601:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"601:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"label","nameLocation":"627:5:5","nodeType":"VariableDeclaration","scope":1113,"src":"619:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"619:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"owner","nameLocation":"646:5:5","nodeType":"VariableDeclaration","scope":1113,"src":"638:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"595:60:5"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":1156,"src":"571:94:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1896f70a","id":1120,"implemented":false,"kind":"function","modifiers":[],"name":"setResolver","nameLocation":"678:11:5","nodeType":"FunctionDefinition","parameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"node","nameLocation":"698:4:5","nodeType":"VariableDeclaration","scope":1120,"src":"690:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"resolver","nameLocation":"712:8:5","nodeType":"VariableDeclaration","scope":1120,"src":"704:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"704:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"689:32:5"},"returnParameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"730:0:5"},"scope":1156,"src":"669:62:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5b0fc9c3","id":1127,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"744:8:5","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"node","nameLocation":"761:4:5","nodeType":"VariableDeclaration","scope":1127,"src":"753:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1121,"name":"bytes32","nodeType":"ElementaryTypeName","src":"753:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"owner","nameLocation":"775:5:5","nodeType":"VariableDeclaration","scope":1127,"src":"767:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"767:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:29:5"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[],"src":"790:0:5"},"scope":1156,"src":"735:56:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"14ab9038","id":1134,"implemented":false,"kind":"function","modifiers":[],"name":"setTTL","nameLocation":"804:6:5","nodeType":"FunctionDefinition","parameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"node","nameLocation":"819:4:5","nodeType":"VariableDeclaration","scope":1134,"src":"811:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"811:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"ttl","nameLocation":"832:3:5","nodeType":"VariableDeclaration","scope":1134,"src":"825:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1130,"name":"uint64","nodeType":"ElementaryTypeName","src":"825:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"810:26:5"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"845:0:5"},"scope":1156,"src":"795:51:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"02571be3","id":1141,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"859:5:5","nodeType":"FunctionDefinition","parameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"node","nameLocation":"873:4:5","nodeType":"VariableDeclaration","scope":1141,"src":"865:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"865:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"864:14:5"},"returnParameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"902:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"902:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"901:9:5"},"scope":1156,"src":"850:61:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0178b8bf","id":1148,"implemented":false,"kind":"function","modifiers":[],"name":"resolver","nameLocation":"924:8:5","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"node","nameLocation":"941:4:5","nodeType":"VariableDeclaration","scope":1148,"src":"933:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"933:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"932:14:5"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1148,"src":"970:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1145,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"969:9:5"},"scope":1156,"src":"915:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"16a25cbd","id":1155,"implemented":false,"kind":"function","modifiers":[],"name":"ttl","nameLocation":"992:3:5","nodeType":"FunctionDefinition","parameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"node","nameLocation":"1004:4:5","nodeType":"VariableDeclaration","scope":1155,"src":"996:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"996:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"995:14:5"},"returnParameters":{"id":1154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1155,"src":"1033:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1152,"name":"uint64","nodeType":"ElementaryTypeName","src":"1033:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1032:8:5"},"scope":1156,"src":"983:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1157,"src":"57:986:5","usedErrors":[]}],"src":"32:1012:5"},"id":5},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[1251]},"id":1252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1158,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"LinkTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1251,"linearizedBaseContracts":[1251],"name":"LinkTokenInterface","nameLocation":"67:18:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":1167,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:6","nodeType":"FunctionDefinition","parameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"owner","nameLocation":"117:5:6","nodeType":"VariableDeclaration","scope":1167,"src":"109:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1162,"mutability":"mutable","name":"spender","nameLocation":"132:7:6","nodeType":"VariableDeclaration","scope":1167,"src":"124:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1161,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:6"},"returnParameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"remaining","nameLocation":"172:9:6","nodeType":"VariableDeclaration","scope":1167,"src":"164:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:6"},"scope":1251,"src":"90:93:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":1176,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:6","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"spender","nameLocation":"212:7:6","nodeType":"VariableDeclaration","scope":1176,"src":"204:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"value","nameLocation":"229:5:6","nodeType":"VariableDeclaration","scope":1176,"src":"221:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:6"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"success","nameLocation":"259:7:6","nodeType":"VariableDeclaration","scope":1176,"src":"254:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1173,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:6"},"scope":1251,"src":"187:81:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":1183,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:6","nodeType":"FunctionDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"owner","nameLocation":"299:5:6","nodeType":"VariableDeclaration","scope":1183,"src":"291:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:6"},"returnParameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"balance","nameLocation":"337:7:6","nodeType":"VariableDeclaration","scope":1183,"src":"329:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:6"},"scope":1251,"src":"272:74:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":1188,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:6","nodeType":"FunctionDefinition","parameters":{"id":1184,"nodeType":"ParameterList","parameters":[],"src":"367:2:6"},"returnParameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:6","nodeType":"VariableDeclaration","scope":1188,"src":"393:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1185,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:6"},"scope":1251,"src":"350:64:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":1197,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:6","nodeType":"FunctionDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"spender","nameLocation":"452:7:6","nodeType":"VariableDeclaration","scope":1197,"src":"444:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:6","nodeType":"VariableDeclaration","scope":1197,"src":"461:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:6"},"returnParameters":{"id":1196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"success","nameLocation":"504:7:6","nodeType":"VariableDeclaration","scope":1197,"src":"499:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1194,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:6"},"scope":1251,"src":"418:95:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":1204,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:6","nodeType":"FunctionDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"spender","nameLocation":"551:7:6","nodeType":"VariableDeclaration","scope":1204,"src":"543:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1198,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:6","nodeType":"VariableDeclaration","scope":1204,"src":"560:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:6"},"returnParameters":{"id":1203,"nodeType":"ParameterList","parameters":[],"src":"593:0:6"},"scope":1251,"src":"517:77:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":1209,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:6","nodeType":"FunctionDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[],"src":"611:2:6"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:6","nodeType":"VariableDeclaration","scope":1209,"src":"637:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1206,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:6"},"scope":1251,"src":"598:64:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":1214,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:6","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"681:2:6"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:6","nodeType":"VariableDeclaration","scope":1214,"src":"707:25:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1211,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:6"},"scope":1251,"src":"666:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":1219,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:6","nodeType":"FunctionDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[],"src":"758:2:6"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:6","nodeType":"VariableDeclaration","scope":1219,"src":"784:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:6"},"scope":1251,"src":"738:73:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":1228,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:6","nodeType":"FunctionDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1221,"mutability":"mutable","name":"to","nameLocation":"841:2:6","nodeType":"VariableDeclaration","scope":1228,"src":"833:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1220,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"value","nameLocation":"853:5:6","nodeType":"VariableDeclaration","scope":1228,"src":"845:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:6"},"returnParameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"success","nameLocation":"883:7:6","nodeType":"VariableDeclaration","scope":1228,"src":"878:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1225,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:6"},"scope":1251,"src":"815:77:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":1239,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:6","nodeType":"FunctionDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"to","nameLocation":"934:2:6","nodeType":"VariableDeclaration","scope":1239,"src":"926:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"value","nameLocation":"950:5:6","nodeType":"VariableDeclaration","scope":1239,"src":"942:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"data","nameLocation":"976:4:6","nodeType":"VariableDeclaration","scope":1239,"src":"961:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1233,"name":"bytes","nodeType":"ElementaryTypeName","src":"961:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:64:6"},"returnParameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"success","nameLocation":"1008:7:6","nodeType":"VariableDeclaration","scope":1239,"src":"1003:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1236,"name":"bool","nodeType":"ElementaryTypeName","src":"1003:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1002:14:6"},"scope":1251,"src":"896:121:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":1250,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1030:12:6","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"from","nameLocation":"1056:4:6","nodeType":"VariableDeclaration","scope":1250,"src":"1048:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1240,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"to","nameLocation":"1074:2:6","nodeType":"VariableDeclaration","scope":1250,"src":"1066:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"value","nameLocation":"1090:5:6","nodeType":"VariableDeclaration","scope":1250,"src":"1082:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:57:6"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"success","nameLocation":"1123:7:6","nodeType":"VariableDeclaration","scope":1250,"src":"1118:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1247,"name":"bool","nodeType":"ElementaryTypeName","src":"1118:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1117:14:6"},"scope":1251,"src":"1021:111:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1252,"src":"57:1077:6","usedErrors":[]}],"src":"32:1103:6"},"id":6},"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol","exportedSymbols":{"ChainlinkRequestInterface":[1076],"OperatorInterface":[1331],"OracleInterface":[1370]},"id":1332,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol","file":"./OracleInterface.sol","id":1254,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1332,"sourceUnit":1371,"src":"57:31:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol","file":"./ChainlinkRequestInterface.sol","id":1255,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1332,"sourceUnit":1077,"src":"89:41:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1256,"name":"OracleInterface","nameLocations":["163:15:7"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"163:15:7"},"id":1257,"nodeType":"InheritanceSpecifier","src":"163:15:7"},{"baseName":{"id":1258,"name":"ChainlinkRequestInterface","nameLocations":["180:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":1076,"src":"180:25:7"},"id":1259,"nodeType":"InheritanceSpecifier","src":"180:25:7"}],"canonicalName":"OperatorInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1331,"linearizedBaseContracts":[1331,1076,1370],"name":"OperatorInterface","nameLocation":"142:17:7","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3c6d41b9","id":1276,"implemented":false,"kind":"function","modifiers":[],"name":"operatorRequest","nameLocation":"219:15:7","nodeType":"FunctionDefinition","parameters":{"id":1274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"sender","nameLocation":"248:6:7","nodeType":"VariableDeclaration","scope":1276,"src":"240:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1263,"mutability":"mutable","name":"payment","nameLocation":"268:7:7","nodeType":"VariableDeclaration","scope":1276,"src":"260:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"specId","nameLocation":"289:6:7","nodeType":"VariableDeclaration","scope":1276,"src":"281:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"281:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"308:18:7","nodeType":"VariableDeclaration","scope":1276,"src":"301:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1266,"name":"bytes4","nodeType":"ElementaryTypeName","src":"301:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"nonce","nameLocation":"340:5:7","nodeType":"VariableDeclaration","scope":1276,"src":"332:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"332:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1271,"mutability":"mutable","name":"dataVersion","nameLocation":"359:11:7","nodeType":"VariableDeclaration","scope":1276,"src":"351:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"351:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1273,"mutability":"mutable","name":"data","nameLocation":"391:4:7","nodeType":"VariableDeclaration","scope":1276,"src":"376:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1272,"name":"bytes","nodeType":"ElementaryTypeName","src":"376:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"234:165:7"},"returnParameters":{"id":1275,"nodeType":"ParameterList","parameters":[],"src":"408:0:7"},"scope":1331,"src":"210:199:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6ae0bc76","id":1293,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillOracleRequest2","nameLocation":"422:21:7","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"requestId","nameLocation":"457:9:7","nodeType":"VariableDeclaration","scope":1293,"src":"449:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"449:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"payment","nameLocation":"480:7:7","nodeType":"VariableDeclaration","scope":1293,"src":"472:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"472:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"callbackAddress","nameLocation":"501:15:7","nodeType":"VariableDeclaration","scope":1293,"src":"493:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"529:18:7","nodeType":"VariableDeclaration","scope":1293,"src":"522:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1283,"name":"bytes4","nodeType":"ElementaryTypeName","src":"522:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"expiration","nameLocation":"561:10:7","nodeType":"VariableDeclaration","scope":1293,"src":"553:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1288,"mutability":"mutable","name":"data","nameLocation":"592:4:7","nodeType":"VariableDeclaration","scope":1293,"src":"577:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1287,"name":"bytes","nodeType":"ElementaryTypeName","src":"577:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"443:157:7"},"returnParameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1293,"src":"619:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1290,"name":"bool","nodeType":"ElementaryTypeName","src":"619:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"618:6:7"},"scope":1331,"src":"413:212:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"902fc370","id":1304,"implemented":false,"kind":"function","modifiers":[],"name":"ownerTransferAndCall","nameLocation":"638:20:7","nodeType":"FunctionDefinition","parameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"to","nameLocation":"672:2:7","nodeType":"VariableDeclaration","scope":1304,"src":"664:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"value","nameLocation":"688:5:7","nodeType":"VariableDeclaration","scope":1304,"src":"680:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1296,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"data","nameLocation":"714:4:7","nodeType":"VariableDeclaration","scope":1304,"src":"699:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1298,"name":"bytes","nodeType":"ElementaryTypeName","src":"699:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"658:64:7"},"returnParameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"success","nameLocation":"746:7:7","nodeType":"VariableDeclaration","scope":1304,"src":"741:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1301,"name":"bool","nodeType":"ElementaryTypeName","src":"741:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"740:14:7"},"scope":1331,"src":"629:126:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6bd59ec0","id":1313,"implemented":false,"kind":"function","modifiers":[],"name":"distributeFunds","nameLocation":"768:15:7","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"receivers","nameLocation":"811:9:7","nodeType":"VariableDeclaration","scope":1313,"src":"784:36:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1305,"name":"address","nodeType":"ElementaryTypeName","src":"784:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1306,"nodeType":"ArrayTypeName","src":"784:17:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"amounts","nameLocation":"841:7:7","nodeType":"VariableDeclaration","scope":1313,"src":"822:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1309,"nodeType":"ArrayTypeName","src":"822:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"783:66:7"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[],"src":"866:0:7"},"scope":1331,"src":"759:108:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2408afaa","id":1319,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizedSenders","nameLocation":"880:20:7","nodeType":"FunctionDefinition","parameters":{"id":1314,"nodeType":"ParameterList","parameters":[],"src":"900:2:7"},"returnParameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1319,"src":"921:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1315,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1316,"nodeType":"ArrayTypeName","src":"921:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"920:18:7"},"scope":1331,"src":"871:68:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ee56997b","id":1325,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizedSenders","nameLocation":"952:20:7","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"senders","nameLocation":"992:7:7","nodeType":"VariableDeclaration","scope":1325,"src":"973:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1321,"nodeType":"ArrayTypeName","src":"973:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"972:28:7"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[],"src":"1009:0:7"},"scope":1331,"src":"943:67:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a0042526","id":1330,"implemented":false,"kind":"function","modifiers":[],"name":"getForwarder","nameLocation":"1023:12:7","nodeType":"FunctionDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[],"src":"1035:2:7"},"returnParameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1330,"src":"1056:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"1056:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1055:9:7"},"scope":1331,"src":"1014:51:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1332,"src":"132:935:7","usedErrors":[]}],"src":"32:1036:7"},"id":7},"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol","exportedSymbols":{"OracleInterface":[1370]},"id":1371,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1333,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"OracleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1370,"linearizedBaseContracts":[1370],"name":"OracleInterface","nameLocation":"67:15:8","nodeType":"ContractDefinition","nodes":[{"functionSelector":"4ab0d190","id":1350,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillOracleRequest","nameLocation":"96:20:8","nodeType":"FunctionDefinition","parameters":{"id":1346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1335,"mutability":"mutable","name":"requestId","nameLocation":"130:9:8","nodeType":"VariableDeclaration","scope":1350,"src":"122:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"122:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"payment","nameLocation":"153:7:8","nodeType":"VariableDeclaration","scope":1350,"src":"145:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1336,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"callbackAddress","nameLocation":"174:15:8","nodeType":"VariableDeclaration","scope":1350,"src":"166:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"202:18:8","nodeType":"VariableDeclaration","scope":1350,"src":"195:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1340,"name":"bytes4","nodeType":"ElementaryTypeName","src":"195:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"expiration","nameLocation":"234:10:8","nodeType":"VariableDeclaration","scope":1350,"src":"226:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"226:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"data","nameLocation":"258:4:8","nodeType":"VariableDeclaration","scope":1350,"src":"250:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"250:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"116:150:8"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1350,"src":"285:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1347,"name":"bool","nodeType":"ElementaryTypeName","src":"285:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"284:6:8"},"scope":1370,"src":"87:204:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fa00763a","id":1357,"implemented":false,"kind":"function","modifiers":[],"name":"isAuthorizedSender","nameLocation":"304:18:8","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"node","nameLocation":"331:4:8","nodeType":"VariableDeclaration","scope":1357,"src":"323:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"323:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"322:14:8"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1357,"src":"360:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1354,"name":"bool","nodeType":"ElementaryTypeName","src":"360:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"359:6:8"},"scope":1370,"src":"295:71:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f3fef3a3","id":1364,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"379:8:8","nodeType":"FunctionDefinition","parameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"recipient","nameLocation":"396:9:8","nodeType":"VariableDeclaration","scope":1364,"src":"388:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1358,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1361,"mutability":"mutable","name":"amount","nameLocation":"415:6:8","nodeType":"VariableDeclaration","scope":1364,"src":"407:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"407:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"387:35:8"},"returnParameters":{"id":1363,"nodeType":"ParameterList","parameters":[],"src":"431:0:8"},"scope":1370,"src":"370:62:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"50188301","id":1369,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawable","nameLocation":"445:12:8","nodeType":"FunctionDefinition","parameters":{"id":1365,"nodeType":"ParameterList","parameters":[],"src":"457:2:8"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1369,"src":"483:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1366,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"482:9:8"},"scope":1370,"src":"436:56:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1371,"src":"57:437:8","usedErrors":[]}],"src":"32:463:8"},"id":8},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol","exportedSymbols":{"OwnableInterface":[1386]},"id":1387,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1372,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"OwnableInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1386,"linearizedBaseContracts":[1386],"name":"OwnableInterface","nameLocation":"67:16:9","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":1377,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"97:5:9","nodeType":"FunctionDefinition","parameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"102:2:9"},"returnParameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1377,"src":"123:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"123:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"122:9:9"},"scope":1386,"src":"88:44:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":1382,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"145:17:9","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"recipient","nameLocation":"171:9:9","nodeType":"VariableDeclaration","scope":1382,"src":"163:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1378,"name":"address","nodeType":"ElementaryTypeName","src":"163:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"162:19:9"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"190:0:9"},"scope":1386,"src":"136:55:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":1385,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"204:15:9","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[],"src":"219:2:9"},"returnParameters":{"id":1384,"nodeType":"ParameterList","parameters":[],"src":"230:0:9"},"scope":1386,"src":"195:36:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1387,"src":"57:176:9","usedErrors":[]}],"src":"32:202:9"},"id":9},"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol","exportedSymbols":{"PointerInterface":[1394]},"id":1395,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1388,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"PointerInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1394,"linearizedBaseContracts":[1394],"name":"PointerInterface","nameLocation":"67:16:10","nodeType":"ContractDefinition","nodes":[{"functionSelector":"38cc4831","id":1393,"implemented":false,"kind":"function","modifiers":[],"name":"getAddress","nameLocation":"97:10:10","nodeType":"FunctionDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[],"src":"107:2:10"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1393,"src":"133:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1390,"name":"address","nodeType":"ElementaryTypeName","src":"133:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"132:9:10"},"scope":1394,"src":"88:54:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1395,"src":"57:87:10","usedErrors":[]}],"src":"32:113:10"},"id":10},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","exportedSymbols":{"BufferChainlink":[1916]},"id":1917,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1396,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"BufferChainlink","contractDependencies":[],"contractKind":"library","documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"57:383:11","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for writing to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":1916,"linearizedBaseContracts":[1916],"name":"BufferChainlink","nameLocation":"449:15:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BufferChainlink.buffer","id":1402,"members":[{"constant":false,"id":1399,"mutability":"mutable","name":"buf","nameLocation":"743:3:11","nodeType":"VariableDeclaration","scope":1402,"src":"737:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1398,"name":"bytes","nodeType":"ElementaryTypeName","src":"737:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"capacity","nameLocation":"760:8:11","nodeType":"VariableDeclaration","scope":1402,"src":"752:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1400,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"724:6:11","nodeType":"StructDefinition","scope":1916,"src":"717:56:11","visibility":"public"},{"body":{"id":1439,"nodeType":"Block","src":"1090:310:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1414,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1100:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1111:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1100:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1117:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1100:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1429,"nodeType":"IfStatement","src":"1096:71:11","trueBody":{"id":1428,"nodeType":"Block","src":"1120:47:11","statements":[{"expression":{"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1419,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1128:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1140:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1421,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1146:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1157:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1146:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1145:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1140:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1128:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1427,"nodeType":"ExpressionStatement","src":"1128:32:11"}]}},{"expression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1430,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"1214:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1218:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"1214:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1433,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1229:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1214:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1435,"nodeType":"ExpressionStatement","src":"1214:23:11"},{"AST":{"nodeType":"YulBlock","src":"1252:128:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1260:22:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1277:4:11","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1271:5:11"},"nodeType":"YulFunctionCall","src":"1271:11:11"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1264:3:11","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1296:3:11"},{"name":"ptr","nodeType":"YulIdentifier","src":"1301:3:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1289:6:11"},"nodeType":"YulFunctionCall","src":"1289:16:11"},"nodeType":"YulExpressionStatement","src":"1289:16:11"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1319:3:11"},{"kind":"number","nodeType":"YulLiteral","src":"1324:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1312:6:11"},"nodeType":"YulFunctionCall","src":"1312:14:11"},"nodeType":"YulExpressionStatement","src":"1312:14:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1340:4:11","type":"","value":"0x40"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1350:2:11","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1358:3:11"},{"name":"capacity","nodeType":"YulIdentifier","src":"1363:8:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1354:3:11"},"nodeType":"YulFunctionCall","src":"1354:18:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1346:3:11"},"nodeType":"YulFunctionCall","src":"1346:27:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1333:6:11"},"nodeType":"YulFunctionCall","src":"1333:41:11"},"nodeType":"YulExpressionStatement","src":"1333:41:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1406,"isOffset":false,"isSlot":false,"src":"1296:3:11","valueSize":1},{"declaration":1408,"isOffset":false,"isSlot":false,"src":"1363:8:11","valueSize":1}],"id":1436,"nodeType":"InlineAssembly","src":"1243:137:11"},{"expression":{"id":1437,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"1392:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1413,"id":1438,"nodeType":"Return","src":"1385:10:11"}]},"documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"777:221:11","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":1440,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1010:4:11","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"buf","nameLocation":"1029:3:11","nodeType":"VariableDeclaration","scope":1440,"src":"1015:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1405,"nodeType":"UserDefinedTypeName","pathNode":{"id":1404,"name":"buffer","nameLocations":["1015:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1015:6:11"},"referencedDeclaration":1402,"src":"1015:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"capacity","nameLocation":"1042:8:11","nodeType":"VariableDeclaration","scope":1440,"src":"1034:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"1034:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1014:37:11"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1440,"src":"1075:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1411,"nodeType":"UserDefinedTypeName","pathNode":{"id":1410,"name":"buffer","nameLocations":["1075:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1075:6:11"},"referencedDeclaration":1402,"src":"1075:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"1074:15:11"},"scope":1916,"src":"1001:399:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1468,"nodeType":"Block","src":"1707:90:11","statements":[{"assignments":[1451],"declarations":[{"constant":false,"id":1451,"mutability":"mutable","name":"buf","nameLocation":"1727:3:11","nodeType":"VariableDeclaration","scope":1468,"src":"1713:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1450,"nodeType":"UserDefinedTypeName","pathNode":{"id":1449,"name":"buffer","nameLocations":["1713:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1713:6:11"},"referencedDeclaration":1402,"src":"1713:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"id":1452,"nodeType":"VariableDeclarationStatement","src":"1713:17:11"},{"expression":{"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1453,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"1736:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1740:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"1736:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"1746:1:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1736:11:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1458,"nodeType":"ExpressionStatement","src":"1736:11:11"},{"expression":{"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1459,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"1753:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1757:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"1753:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1462,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"1768:1:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1770:6:11","memberName":"length","nodeType":"MemberAccess","src":"1768:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1753:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1465,"nodeType":"ExpressionStatement","src":"1753:23:11"},{"expression":{"id":1466,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"1789:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1448,"id":1467,"nodeType":"Return","src":"1782:10:11"}]},"documentation":{"id":1441,"nodeType":"StructuredDocumentation","src":"1404:227:11","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":1469,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1643:9:11","nodeType":"FunctionDefinition","parameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"mutability":"mutable","name":"b","nameLocation":"1666:1:11","nodeType":"VariableDeclaration","scope":1469,"src":"1653:14:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1442,"name":"bytes","nodeType":"ElementaryTypeName","src":"1653:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1652:16:11"},"returnParameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1469,"src":"1692:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1446,"nodeType":"UserDefinedTypeName","pathNode":{"id":1445,"name":"buffer","nameLocations":["1692:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1692:6:11"},"referencedDeclaration":1402,"src":"1692:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"1691:15:11"},"scope":1916,"src":"1634:163:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"1867:90:11","statements":[{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"oldbuf","nameLocation":"1886:6:11","nodeType":"VariableDeclaration","scope":1492,"src":"1873:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1477,"name":"bytes","nodeType":"ElementaryTypeName","src":"1873:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1481,"initialValue":{"expression":{"id":1479,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"1895:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1899:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"1895:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1873:29:11"},{"expression":{"arguments":[{"id":1483,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"1913:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1484,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1918:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1482,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1908:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1908:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1486,"nodeType":"ExpressionStatement","src":"1908:19:11"},{"expression":{"arguments":[{"id":1488,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"1940:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1489,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1945:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1487,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1636,1659],"referencedDeclaration":1659,"src":"1933:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1491,"nodeType":"ExpressionStatement","src":"1933:19:11"}]},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"1810:6:11","nodeType":"FunctionDefinition","parameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"buf","nameLocation":"1831:3:11","nodeType":"VariableDeclaration","scope":1493,"src":"1817:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1471,"nodeType":"UserDefinedTypeName","pathNode":{"id":1470,"name":"buffer","nameLocations":["1817:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1817:6:11"},"referencedDeclaration":1402,"src":"1817:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"capacity","nameLocation":"1844:8:11","nodeType":"VariableDeclaration","scope":1493,"src":"1836:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1816:37:11"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[],"src":"1867:0:11"},"scope":1916,"src":"1801:156:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1511,"nodeType":"Block","src":"2027:58:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1502,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2037:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1503,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"2041:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2037:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1508,"nodeType":"IfStatement","src":"2033:34:11","trueBody":{"id":1507,"nodeType":"Block","src":"2044:23:11","statements":[{"expression":{"id":1505,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2059:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1501,"id":1506,"nodeType":"Return","src":"2052:8:11"}]}},{"expression":{"id":1509,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"2079:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1501,"id":1510,"nodeType":"Return","src":"2072:8:11"}]},"id":1512,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1970:3:11","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"a","nameLocation":"1982:1:11","nodeType":"VariableDeclaration","scope":1512,"src":"1974:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"1974:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"b","nameLocation":"1993:1:11","nodeType":"VariableDeclaration","scope":1512,"src":"1985:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1496,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1973:22:11"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1512,"src":"2018:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"2018:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2017:9:11"},"scope":1916,"src":"1961:124:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1525,"nodeType":"Block","src":"2300:97:11","statements":[{"AST":{"nodeType":"YulBlock","src":"2315:62:11","statements":[{"nodeType":"YulVariableDeclaration","src":"2323:24:11","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2343:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2337:5:11"},"nodeType":"YulFunctionCall","src":"2337:10:11"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2327:6:11","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2361:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"2369:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2354:6:11"},"nodeType":"YulFunctionCall","src":"2354:17:11"},"nodeType":"YulExpressionStatement","src":"2354:17:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1516,"isOffset":false,"isSlot":false,"src":"2343:3:11","valueSize":1}],"id":1522,"nodeType":"InlineAssembly","src":"2306:71:11"},{"expression":{"id":1523,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"2389:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1521,"id":1524,"nodeType":"Return","src":"2382:10:11"}]},"documentation":{"id":1513,"nodeType":"StructuredDocumentation","src":"2089:133:11","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":1526,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2234:8:11","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"buf","nameLocation":"2257:3:11","nodeType":"VariableDeclaration","scope":1526,"src":"2243:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1515,"nodeType":"UserDefinedTypeName","pathNode":{"id":1514,"name":"buffer","nameLocations":["2243:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2243:6:11"},"referencedDeclaration":1402,"src":"2243:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2242:19:11"},"returnParameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1526,"src":"2285:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1519,"nodeType":"UserDefinedTypeName","pathNode":{"id":1518,"name":"buffer","nameLocations":["2285:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2285:6:11"},"referencedDeclaration":1402,"src":"2285:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2284:15:11"},"scope":1916,"src":"2225:172:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1611,"nodeType":"Block","src":"2882:1073:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1543,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2896:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1544,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"2903:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2908:6:11","memberName":"length","nodeType":"MemberAccess","src":"2903:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2896:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2888:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2888:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1548,"nodeType":"ExpressionStatement","src":"2888:27:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1549,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2926:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1550,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2932:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2926:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1552,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"2938:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2942:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"2938:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2926:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1569,"nodeType":"IfStatement","src":"2922:90:11","trueBody":{"id":1568,"nodeType":"Block","src":"2952:60:11","statements":[{"expression":{"arguments":[{"id":1556,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"2967:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1558,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"2976:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2980:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"2976:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1560,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2990:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1561,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2996:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2990:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1557,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"2972:3:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2972:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3003:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2972:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1555,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2960:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2960:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1567,"nodeType":"ExpressionStatement","src":"2960:45:11"}]}},{"assignments":[1571],"declarations":[{"constant":false,"id":1571,"mutability":"mutable","name":"dest","nameLocation":"3026:4:11","nodeType":"VariableDeclaration","scope":1611,"src":"3018:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"3018:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1572,"nodeType":"VariableDeclarationStatement","src":"3018:12:11"},{"assignments":[1574],"declarations":[{"constant":false,"id":1574,"mutability":"mutable","name":"src","nameLocation":"3044:3:11","nodeType":"VariableDeclaration","scope":1611,"src":"3036:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3036:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1575,"nodeType":"VariableDeclarationStatement","src":"3036:11:11"},{"AST":{"nodeType":"YulBlock","src":"3062:430:11","statements":[{"nodeType":"YulVariableDeclaration","src":"3113:24:11","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3133:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3127:5:11"},"nodeType":"YulFunctionCall","src":"3127:10:11"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3117:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3184:27:11","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3204:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3198:5:11"},"nodeType":"YulFunctionCall","src":"3198:13:11"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3188:6:11","type":""}]},{"nodeType":"YulAssignment","src":"3291:33:11","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3307:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"3315:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3303:3:11"},"nodeType":"YulFunctionCall","src":"3303:15:11"},{"name":"off","nodeType":"YulIdentifier","src":"3320:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:11"},"nodeType":"YulFunctionCall","src":"3299:25:11"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3291:4:11"}]},{"body":{"nodeType":"YulBlock","src":"3412:47:11","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3429:6:11"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3441:3:11"},{"name":"off","nodeType":"YulIdentifier","src":"3446:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:11"},"nodeType":"YulFunctionCall","src":"3437:13:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3422:6:11"},"nodeType":"YulFunctionCall","src":"3422:29:11"},"nodeType":"YulExpressionStatement","src":"3422:29:11"}]},"condition":{"arguments":[{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3393:3:11"},{"name":"off","nodeType":"YulIdentifier","src":"3398:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3389:3:11"},"nodeType":"YulFunctionCall","src":"3389:13:11"},{"name":"buflen","nodeType":"YulIdentifier","src":"3404:6:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3386:2:11"},"nodeType":"YulFunctionCall","src":"3386:25:11"},"nodeType":"YulIf","src":"3383:76:11"},{"nodeType":"YulAssignment","src":"3466:20:11","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3477:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"3483:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3473:3:11"},"nodeType":"YulFunctionCall","src":"3473:13:11"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3466:3:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1530,"isOffset":false,"isSlot":false,"src":"3133:3:11","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"3477:4:11","valueSize":1},{"declaration":1571,"isOffset":false,"isSlot":false,"src":"3291:4:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"3393:3:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"3441:3:11","valueSize":1},{"declaration":1532,"isOffset":false,"isSlot":false,"src":"3320:3:11","valueSize":1},{"declaration":1532,"isOffset":false,"isSlot":false,"src":"3398:3:11","valueSize":1},{"declaration":1532,"isOffset":false,"isSlot":false,"src":"3446:3:11","valueSize":1},{"declaration":1574,"isOffset":false,"isSlot":false,"src":"3466:3:11","valueSize":1}],"id":1576,"nodeType":"InlineAssembly","src":"3053:439:11"},{"body":{"id":1593,"nodeType":"Block","src":"3573:100:11","statements":[{"AST":{"nodeType":"YulBlock","src":"3590:42:11","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3607:4:11"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3619:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3613:5:11"},"nodeType":"YulFunctionCall","src":"3613:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3600:6:11"},"nodeType":"YulFunctionCall","src":"3600:24:11"},"nodeType":"YulExpressionStatement","src":"3600:24:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1571,"isOffset":false,"isSlot":false,"src":"3607:4:11","valueSize":1},{"declaration":1574,"isOffset":false,"isSlot":false,"src":"3619:3:11","valueSize":1}],"id":1584,"nodeType":"InlineAssembly","src":"3581:51:11"},{"expression":{"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1585,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"3639:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3647:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3639:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1588,"nodeType":"ExpressionStatement","src":"3639:10:11"},{"expression":{"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1589,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"3657:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3664:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3657:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1592,"nodeType":"ExpressionStatement","src":"3657:9:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1577,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"3551:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3558:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3551:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1594,"loopExpression":{"expression":{"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1580,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"3562:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3569:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3562:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1583,"nodeType":"ExpressionStatement","src":"3562:9:11"},"nodeType":"ForStatement","src":"3544:129:11"},{"id":1608,"nodeType":"UncheckedBlock","src":"3707:227:11","statements":[{"assignments":[1596],"declarations":[{"constant":false,"id":1596,"mutability":"mutable","name":"mask","nameLocation":"3733:4:11","nodeType":"VariableDeclaration","scope":1608,"src":"3725:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"3725:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1606,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3741:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3747:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1599,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"3752:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3747:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1601,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3746:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3741:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1603,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3740:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3760:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3740:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3725:36:11"},{"AST":{"nodeType":"YulBlock","src":"3778:150:11","statements":[{"nodeType":"YulVariableDeclaration","src":"3788:41:11","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3813:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3807:5:11"},"nodeType":"YulFunctionCall","src":"3807:10:11"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"3823:4:11"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3819:3:11"},"nodeType":"YulFunctionCall","src":"3819:9:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3803:3:11"},"nodeType":"YulFunctionCall","src":"3803:26:11"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"3792:7:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3838:38:11","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3864:4:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3858:5:11"},"nodeType":"YulFunctionCall","src":"3858:11:11"},{"name":"mask","nodeType":"YulIdentifier","src":"3871:4:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3854:3:11"},"nodeType":"YulFunctionCall","src":"3854:22:11"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"3842:8:11","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3892:4:11"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"3901:8:11"},{"name":"srcpart","nodeType":"YulIdentifier","src":"3911:7:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3898:2:11"},"nodeType":"YulFunctionCall","src":"3898:21:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3885:6:11"},"nodeType":"YulFunctionCall","src":"3885:35:11"},"nodeType":"YulExpressionStatement","src":"3885:35:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1571,"isOffset":false,"isSlot":false,"src":"3864:4:11","valueSize":1},{"declaration":1571,"isOffset":false,"isSlot":false,"src":"3892:4:11","valueSize":1},{"declaration":1596,"isOffset":false,"isSlot":false,"src":"3823:4:11","valueSize":1},{"declaration":1596,"isOffset":false,"isSlot":false,"src":"3871:4:11","valueSize":1},{"declaration":1574,"isOffset":false,"isSlot":false,"src":"3813:3:11","valueSize":1}],"id":1607,"nodeType":"InlineAssembly","src":"3769:159:11"}]},{"expression":{"id":1609,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"3947:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1541,"id":1610,"nodeType":"Return","src":"3940:10:11"}]},"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"2401:341:11","text":" @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The start offset to write to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":1612,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"2754:5:11","nodeType":"FunctionDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1530,"mutability":"mutable","name":"buf","nameLocation":"2779:3:11","nodeType":"VariableDeclaration","scope":1612,"src":"2765:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1529,"nodeType":"UserDefinedTypeName","pathNode":{"id":1528,"name":"buffer","nameLocations":["2765:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2765:6:11"},"referencedDeclaration":1402,"src":"2765:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"off","nameLocation":"2796:3:11","nodeType":"VariableDeclaration","scope":1612,"src":"2788:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"2788:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"data","nameLocation":"2818:4:11","nodeType":"VariableDeclaration","scope":1612,"src":"2805:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1533,"name":"bytes","nodeType":"ElementaryTypeName","src":"2805:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1536,"mutability":"mutable","name":"len","nameLocation":"2836:3:11","nodeType":"VariableDeclaration","scope":1612,"src":"2828:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"2828:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2759:84:11"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"2867:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1539,"nodeType":"UserDefinedTypeName","pathNode":{"id":1538,"name":"buffer","nameLocations":["2867:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2867:6:11"},"referencedDeclaration":1402,"src":"2867:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2866:15:11"},"scope":1916,"src":"2745:1210:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1635,"nodeType":"Block","src":"4379:55:11","statements":[{"expression":{"arguments":[{"id":1627,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"4398:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1628,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"4403:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4407:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"4403:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4411:6:11","memberName":"length","nodeType":"MemberAccess","src":"4403:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1631,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"4419:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1632,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"4425:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1626,"name":"write","nodeType":"Identifier","overloadedDeclarations":[1612,1772],"referencedDeclaration":1612,"src":"4392:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4392:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1625,"id":1634,"nodeType":"Return","src":"4385:44:11"}]},"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"3959:296:11","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":1636,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4267:6:11","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"buf","nameLocation":"4293:3:11","nodeType":"VariableDeclaration","scope":1636,"src":"4279:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1615,"nodeType":"UserDefinedTypeName","pathNode":{"id":1614,"name":"buffer","nameLocations":["4279:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"4279:6:11"},"referencedDeclaration":1402,"src":"4279:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"data","nameLocation":"4315:4:11","nodeType":"VariableDeclaration","scope":1636,"src":"4302:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1617,"name":"bytes","nodeType":"ElementaryTypeName","src":"4302:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"len","nameLocation":"4333:3:11","nodeType":"VariableDeclaration","scope":1636,"src":"4325:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"4325:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4273:67:11"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1636,"src":"4364:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1623,"nodeType":"UserDefinedTypeName","pathNode":{"id":1622,"name":"buffer","nameLocations":["4364:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"4364:6:11"},"referencedDeclaration":1402,"src":"4364:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"4363:15:11"},"scope":1916,"src":"4258:176:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1658,"nodeType":"Block","src":"4784:63:11","statements":[{"expression":{"arguments":[{"id":1649,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"4803:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1650,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"4808:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4812:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"4808:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4816:6:11","memberName":"length","nodeType":"MemberAccess","src":"4808:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1653,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"4824:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1654,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"4830:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4835:6:11","memberName":"length","nodeType":"MemberAccess","src":"4830:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1648,"name":"write","nodeType":"Identifier","overloadedDeclarations":[1612,1772],"referencedDeclaration":1612,"src":"4797:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4797:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1647,"id":1657,"nodeType":"Return","src":"4790:52:11"}]},"documentation":{"id":1637,"nodeType":"StructuredDocumentation","src":"4438:251:11","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1659,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4701:6:11","nodeType":"FunctionDefinition","parameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"buf","nameLocation":"4722:3:11","nodeType":"VariableDeclaration","scope":1659,"src":"4708:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1639,"nodeType":"UserDefinedTypeName","pathNode":{"id":1638,"name":"buffer","nameLocations":["4708:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"4708:6:11"},"referencedDeclaration":1402,"src":"4708:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"data","nameLocation":"4740:4:11","nodeType":"VariableDeclaration","scope":1659,"src":"4727:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1641,"name":"bytes","nodeType":"ElementaryTypeName","src":"4727:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4707:38:11"},"returnParameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"4769:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1645,"nodeType":"UserDefinedTypeName","pathNode":{"id":1644,"name":"buffer","nameLocations":["4769:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"4769:6:11"},"referencedDeclaration":1402,"src":"4769:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"4768:15:11"},"scope":1916,"src":"4692:155:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1690,"nodeType":"Block","src":"5266:521:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1673,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"5276:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1674,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"5283:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5287:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"5283:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5276:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1686,"nodeType":"IfStatement","src":"5272:69:11","trueBody":{"id":1685,"nodeType":"Block","src":"5297:44:11","statements":[{"expression":{"arguments":[{"id":1678,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"5312:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1679,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"5317:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5321:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"5317:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5332:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5317:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1677,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"5305:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5305:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1684,"nodeType":"ExpressionStatement","src":"5305:29:11"}]}},{"AST":{"nodeType":"YulBlock","src":"5356:411:11","statements":[{"nodeType":"YulVariableDeclaration","src":"5407:24:11","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"5427:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5421:5:11"},"nodeType":"YulFunctionCall","src":"5421:10:11"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"5411:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5478:27:11","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5498:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5492:5:11"},"nodeType":"YulFunctionCall","src":"5492:13:11"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"5482:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5576:37:11","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5596:6:11"},{"name":"off","nodeType":"YulIdentifier","src":"5604:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5592:3:11"},"nodeType":"YulFunctionCall","src":"5592:16:11"},{"kind":"number","nodeType":"YulLiteral","src":"5610:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5588:3:11"},"nodeType":"YulFunctionCall","src":"5588:25:11"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"5580:4:11","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"5628:4:11"},{"name":"data","nodeType":"YulIdentifier","src":"5634:4:11"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"5620:7:11"},"nodeType":"YulFunctionCall","src":"5620:19:11"},"nodeType":"YulExpressionStatement","src":"5620:19:11"},{"body":{"nodeType":"YulBlock","src":"5713:48:11","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5730:6:11"},{"arguments":[{"name":"buflen","nodeType":"YulIdentifier","src":"5742:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5750:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5738:3:11"},"nodeType":"YulFunctionCall","src":"5738:14:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5723:6:11"},"nodeType":"YulFunctionCall","src":"5723:30:11"},"nodeType":"YulExpressionStatement","src":"5723:30:11"}]},"condition":{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"5700:3:11"},{"name":"buflen","nodeType":"YulIdentifier","src":"5705:6:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5697:2:11"},"nodeType":"YulFunctionCall","src":"5697:15:11"},"nodeType":"YulIf","src":"5694:67:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1663,"isOffset":false,"isSlot":false,"src":"5427:3:11","valueSize":1},{"declaration":1667,"isOffset":false,"isSlot":false,"src":"5634:4:11","valueSize":1},{"declaration":1665,"isOffset":false,"isSlot":false,"src":"5604:3:11","valueSize":1},{"declaration":1665,"isOffset":false,"isSlot":false,"src":"5700:3:11","valueSize":1}],"id":1687,"nodeType":"InlineAssembly","src":"5347:420:11"},{"expression":{"id":1688,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"5779:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1672,"id":1689,"nodeType":"Return","src":"5772:10:11"}]},"documentation":{"id":1660,"nodeType":"StructuredDocumentation","src":"4851:294:11","text":" @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write the byte at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1691,"implemented":true,"kind":"function","modifiers":[],"name":"writeUint8","nameLocation":"5157:10:11","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"buf","nameLocation":"5187:3:11","nodeType":"VariableDeclaration","scope":1691,"src":"5173:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1662,"nodeType":"UserDefinedTypeName","pathNode":{"id":1661,"name":"buffer","nameLocations":["5173:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"5173:6:11"},"referencedDeclaration":1402,"src":"5173:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"off","nameLocation":"5204:3:11","nodeType":"VariableDeclaration","scope":1691,"src":"5196:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"5196:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"data","nameLocation":"5219:4:11","nodeType":"VariableDeclaration","scope":1691,"src":"5213:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1666,"name":"uint8","nodeType":"ElementaryTypeName","src":"5213:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5167:60:11"},"returnParameters":{"id":1672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1691,"src":"5251:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1670,"nodeType":"UserDefinedTypeName","pathNode":{"id":1669,"name":"buffer","nameLocations":["5251:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"5251:6:11"},"referencedDeclaration":1402,"src":"5251:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"5250:15:11"},"scope":1916,"src":"5148:639:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1711,"nodeType":"Block","src":"6130:55:11","statements":[{"expression":{"arguments":[{"id":1704,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"6154:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1705,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"6159:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6163:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"6159:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6167:6:11","memberName":"length","nodeType":"MemberAccess","src":"6159:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1708,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6175:4:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1703,"name":"writeUint8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"6143:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6143:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1702,"id":1710,"nodeType":"Return","src":"6136:44:11"}]},"documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"5791:246:11","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1712,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"6049:11:11","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"buf","nameLocation":"6075:3:11","nodeType":"VariableDeclaration","scope":1712,"src":"6061:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1694,"nodeType":"UserDefinedTypeName","pathNode":{"id":1693,"name":"buffer","nameLocations":["6061:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"6061:6:11"},"referencedDeclaration":1402,"src":"6061:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"data","nameLocation":"6086:4:11","nodeType":"VariableDeclaration","scope":1712,"src":"6080:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1696,"name":"uint8","nodeType":"ElementaryTypeName","src":"6080:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6060:31:11"},"returnParameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1712,"src":"6115:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1700,"nodeType":"UserDefinedTypeName","pathNode":{"id":1699,"name":"buffer","nameLocations":["6115:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"6115:6:11"},"referencedDeclaration":1402,"src":"6115:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"6114:15:11"},"scope":1916,"src":"6040:145:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1771,"nodeType":"Block","src":"6677:652:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1728,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"6687:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1729,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"6693:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6687:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1731,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6699:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6703:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"6699:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6687:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1745,"nodeType":"IfStatement","src":"6683:73:11","trueBody":{"id":1744,"nodeType":"Block","src":"6713:43:11","statements":[{"expression":{"arguments":[{"id":1735,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"6728:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1736,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"6734:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1737,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"6740:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6734:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1739,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6733:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6747:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6733:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1734,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"6721:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6721:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1743,"nodeType":"ExpressionStatement","src":"6721:28:11"}]}},{"id":1768,"nodeType":"UncheckedBlock","src":"6762:547:11","statements":[{"assignments":[1747],"declarations":[{"constant":false,"id":1747,"mutability":"mutable","name":"mask","nameLocation":"6788:4:11","nodeType":"VariableDeclaration","scope":1768,"src":"6780:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"6780:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1754,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6796:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1749,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"6801:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6796:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6795:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6808:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6795:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6780:29:11"},{"expression":{"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1755,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"6843:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1756,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"6850:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6859:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6864:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1759,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"6869:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6864:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6863:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6859:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1763,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6858:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6850:24:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6843:31:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1766,"nodeType":"ExpressionStatement","src":"6843:31:11"},{"AST":{"nodeType":"YulBlock","src":"6891:412:11","statements":[{"nodeType":"YulVariableDeclaration","src":"6946:24:11","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6966:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6960:5:11"},"nodeType":"YulFunctionCall","src":"6960:10:11"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6950:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7051:38:11","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7071:6:11"},{"name":"off","nodeType":"YulIdentifier","src":"7079:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7067:3:11"},"nodeType":"YulFunctionCall","src":"7067:16:11"},{"name":"len","nodeType":"YulIdentifier","src":"7085:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7063:3:11"},"nodeType":"YulFunctionCall","src":"7063:26:11"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"7055:4:11","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"7105:4:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"7124:4:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7118:5:11"},"nodeType":"YulFunctionCall","src":"7118:11:11"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"7135:4:11"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7131:3:11"},"nodeType":"YulFunctionCall","src":"7131:9:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7114:3:11"},"nodeType":"YulFunctionCall","src":"7114:27:11"},{"name":"data","nodeType":"YulIdentifier","src":"7143:4:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7111:2:11"},"nodeType":"YulFunctionCall","src":"7111:37:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7098:6:11"},"nodeType":"YulFunctionCall","src":"7098:51:11"},"nodeType":"YulExpressionStatement","src":"7098:51:11"},{"body":{"nodeType":"YulBlock","src":"7244:51:11","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7263:6:11"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"7275:3:11"},{"name":"len","nodeType":"YulIdentifier","src":"7280:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7271:3:11"},"nodeType":"YulFunctionCall","src":"7271:13:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7256:6:11"},"nodeType":"YulFunctionCall","src":"7256:29:11"},"nodeType":"YulExpressionStatement","src":"7256:29:11"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"7218:3:11"},{"name":"len","nodeType":"YulIdentifier","src":"7223:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7214:3:11"},"nodeType":"YulFunctionCall","src":"7214:13:11"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7235:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7229:5:11"},"nodeType":"YulFunctionCall","src":"7229:13:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7211:2:11"},"nodeType":"YulFunctionCall","src":"7211:32:11"},"nodeType":"YulIf","src":"7208:87:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1716,"isOffset":false,"isSlot":false,"src":"6966:3:11","valueSize":1},{"declaration":1720,"isOffset":false,"isSlot":false,"src":"7143:4:11","valueSize":1},{"declaration":1722,"isOffset":false,"isSlot":false,"src":"7085:3:11","valueSize":1},{"declaration":1722,"isOffset":false,"isSlot":false,"src":"7223:3:11","valueSize":1},{"declaration":1722,"isOffset":false,"isSlot":false,"src":"7280:3:11","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"7135:4:11","valueSize":1},{"declaration":1718,"isOffset":false,"isSlot":false,"src":"7079:3:11","valueSize":1},{"declaration":1718,"isOffset":false,"isSlot":false,"src":"7218:3:11","valueSize":1},{"declaration":1718,"isOffset":false,"isSlot":false,"src":"7275:3:11","valueSize":1}],"id":1767,"nodeType":"InlineAssembly","src":"6882:421:11"}]},{"expression":{"id":1769,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"7321:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1727,"id":1770,"nodeType":"Return","src":"7314:10:11"}]},"documentation":{"id":1713,"nodeType":"StructuredDocumentation","src":"6189:354:11","text":" @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":1772,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"6555:5:11","nodeType":"FunctionDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"buf","nameLocation":"6580:3:11","nodeType":"VariableDeclaration","scope":1772,"src":"6566:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1715,"nodeType":"UserDefinedTypeName","pathNode":{"id":1714,"name":"buffer","nameLocations":["6566:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"6566:6:11"},"referencedDeclaration":1402,"src":"6566:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1718,"mutability":"mutable","name":"off","nameLocation":"6597:3:11","nodeType":"VariableDeclaration","scope":1772,"src":"6589:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1717,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"data","nameLocation":"6614:4:11","nodeType":"VariableDeclaration","scope":1772,"src":"6606:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6606:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"len","nameLocation":"6632:3:11","nodeType":"VariableDeclaration","scope":1772,"src":"6624:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"6624:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6560:79:11"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1772,"src":"6662:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1725,"nodeType":"UserDefinedTypeName","pathNode":{"id":1724,"name":"buffer","nameLocations":["6662:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"6662:6:11"},"referencedDeclaration":1402,"src":"6662:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"6661:15:11"},"scope":1916,"src":"6546:783:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1796,"nodeType":"Block","src":"7746:52:11","statements":[{"expression":{"arguments":[{"id":1787,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"7765:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1788,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"7770:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1791,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"7783:4:11","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7775:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7775:7:11","typeDescriptions":{}}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7775:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7790:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1786,"name":"write","nodeType":"Identifier","overloadedDeclarations":[1612,1772],"referencedDeclaration":1772,"src":"7759:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7759:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1785,"id":1795,"nodeType":"Return","src":"7752:41:11"}]},"documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"7333:288:11","text":" @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1797,"implemented":true,"kind":"function","modifiers":[],"name":"writeBytes20","nameLocation":"7633:12:11","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"buf","nameLocation":"7665:3:11","nodeType":"VariableDeclaration","scope":1797,"src":"7651:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1775,"nodeType":"UserDefinedTypeName","pathNode":{"id":1774,"name":"buffer","nameLocations":["7651:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"7651:6:11"},"referencedDeclaration":1402,"src":"7651:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"off","nameLocation":"7682:3:11","nodeType":"VariableDeclaration","scope":1797,"src":"7674:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"7674:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"data","nameLocation":"7699:4:11","nodeType":"VariableDeclaration","scope":1797,"src":"7691:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1779,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7691:7:11","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7645:62:11"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1797,"src":"7731:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1783,"nodeType":"UserDefinedTypeName","pathNode":{"id":1782,"name":"buffer","nameLocations":["7731:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"7731:6:11"},"referencedDeclaration":1402,"src":"7731:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"7730:15:11"},"scope":1916,"src":"7624:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1821,"nodeType":"Block","src":"8149:63:11","statements":[{"expression":{"arguments":[{"id":1810,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"8168:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1811,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"8173:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8177:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"8173:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8181:6:11","memberName":"length","nodeType":"MemberAccess","src":"8173:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1816,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"8197:4:11","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8189:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8189:7:11","typeDescriptions":{}}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8189:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8204:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1809,"name":"write","nodeType":"Identifier","overloadedDeclarations":[1612,1772],"referencedDeclaration":1772,"src":"8162:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8162:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1808,"id":1820,"nodeType":"Return","src":"8155:52:11"}]},"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"7802:250:11","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":1822,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"8064:13:11","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"buf","nameLocation":"8092:3:11","nodeType":"VariableDeclaration","scope":1822,"src":"8078:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1800,"nodeType":"UserDefinedTypeName","pathNode":{"id":1799,"name":"buffer","nameLocations":["8078:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"8078:6:11"},"referencedDeclaration":1402,"src":"8078:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"data","nameLocation":"8105:4:11","nodeType":"VariableDeclaration","scope":1822,"src":"8097:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1802,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8097:7:11","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8077:33:11"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1822,"src":"8134:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1806,"nodeType":"UserDefinedTypeName","pathNode":{"id":1805,"name":"buffer","nameLocations":["8134:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"8134:6:11"},"referencedDeclaration":1402,"src":"8134:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"8133:15:11"},"scope":1916,"src":"8055:157:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1843,"nodeType":"Block","src":"8562:54:11","statements":[{"expression":{"arguments":[{"id":1835,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"8581:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1836,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"8586:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8590:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"8586:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8594:6:11","memberName":"length","nodeType":"MemberAccess","src":"8586:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1839,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"8602:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8608:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1834,"name":"write","nodeType":"Identifier","overloadedDeclarations":[1612,1772],"referencedDeclaration":1772,"src":"8575:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8575:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1833,"id":1842,"nodeType":"Return","src":"8568:43:11"}]},"documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"8216:249:11","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"8477:13:11","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"buf","nameLocation":"8505:3:11","nodeType":"VariableDeclaration","scope":1844,"src":"8491:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1825,"nodeType":"UserDefinedTypeName","pathNode":{"id":1824,"name":"buffer","nameLocations":["8491:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"8491:6:11"},"referencedDeclaration":1402,"src":"8491:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"data","nameLocation":"8518:4:11","nodeType":"VariableDeclaration","scope":1844,"src":"8510:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8490:33:11"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"8547:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1831,"nodeType":"UserDefinedTypeName","pathNode":{"id":1830,"name":"buffer","nameLocations":["8547:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"8547:6:11"},"referencedDeclaration":1402,"src":"8547:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"8546:15:11"},"scope":1916,"src":"8468:148:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1890,"nodeType":"Block","src":"9108:541:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1860,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"9118:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1861,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"9124:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9118:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1863,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"9130:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9134:8:11","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"9130:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9118:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1877,"nodeType":"IfStatement","src":"9114:73:11","trueBody":{"id":1876,"nodeType":"Block","src":"9144:43:11","statements":[{"expression":{"arguments":[{"id":1867,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"9159:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1868,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"9165:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1869,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"9171:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9165:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1871,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9164:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9178:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9164:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1866,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"9152:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9152:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1875,"nodeType":"ExpressionStatement","src":"9152:28:11"}]}},{"assignments":[1879],"declarations":[{"constant":false,"id":1879,"mutability":"mutable","name":"mask","nameLocation":"9201:4:11","nodeType":"VariableDeclaration","scope":1890,"src":"9193:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"9193:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1886,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9209:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1881,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"9214:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9209:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9208:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9221:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9208:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9193:29:11"},{"AST":{"nodeType":"YulBlock","src":"9237:392:11","statements":[{"nodeType":"YulVariableDeclaration","src":"9288:24:11","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"9308:3:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9302:5:11"},"nodeType":"YulFunctionCall","src":"9302:10:11"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"9292:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9389:38:11","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9409:6:11"},{"name":"off","nodeType":"YulIdentifier","src":"9417:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9405:3:11"},"nodeType":"YulFunctionCall","src":"9405:16:11"},{"name":"len","nodeType":"YulIdentifier","src":"9423:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9401:3:11"},"nodeType":"YulFunctionCall","src":"9401:26:11"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"9393:4:11","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"9441:4:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"9460:4:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9454:5:11"},"nodeType":"YulFunctionCall","src":"9454:11:11"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"9471:4:11"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9467:3:11"},"nodeType":"YulFunctionCall","src":"9467:9:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9450:3:11"},"nodeType":"YulFunctionCall","src":"9450:27:11"},{"name":"data","nodeType":"YulIdentifier","src":"9479:4:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9447:2:11"},"nodeType":"YulFunctionCall","src":"9447:37:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9434:6:11"},"nodeType":"YulFunctionCall","src":"9434:51:11"},"nodeType":"YulExpressionStatement","src":"9434:51:11"},{"body":{"nodeType":"YulBlock","src":"9576:47:11","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9593:6:11"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"9605:3:11"},{"name":"len","nodeType":"YulIdentifier","src":"9610:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:11"},"nodeType":"YulFunctionCall","src":"9601:13:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9586:6:11"},"nodeType":"YulFunctionCall","src":"9586:29:11"},"nodeType":"YulExpressionStatement","src":"9586:29:11"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"9550:3:11"},{"name":"len","nodeType":"YulIdentifier","src":"9555:3:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9546:3:11"},"nodeType":"YulFunctionCall","src":"9546:13:11"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9567:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9561:5:11"},"nodeType":"YulFunctionCall","src":"9561:13:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9543:2:11"},"nodeType":"YulFunctionCall","src":"9543:32:11"},"nodeType":"YulIf","src":"9540:83:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1848,"isOffset":false,"isSlot":false,"src":"9308:3:11","valueSize":1},{"declaration":1852,"isOffset":false,"isSlot":false,"src":"9479:4:11","valueSize":1},{"declaration":1854,"isOffset":false,"isSlot":false,"src":"9423:3:11","valueSize":1},{"declaration":1854,"isOffset":false,"isSlot":false,"src":"9555:3:11","valueSize":1},{"declaration":1854,"isOffset":false,"isSlot":false,"src":"9610:3:11","valueSize":1},{"declaration":1879,"isOffset":false,"isSlot":false,"src":"9471:4:11","valueSize":1},{"declaration":1850,"isOffset":false,"isSlot":false,"src":"9417:3:11","valueSize":1},{"declaration":1850,"isOffset":false,"isSlot":false,"src":"9550:3:11","valueSize":1},{"declaration":1850,"isOffset":false,"isSlot":false,"src":"9605:3:11","valueSize":1}],"id":1887,"nodeType":"InlineAssembly","src":"9228:401:11"},{"expression":{"id":1888,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"9641:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1859,"id":1889,"nodeType":"Return","src":"9634:10:11"}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"8620:351:11","text":" @dev Writes an integer to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer, for chaining."},"id":1891,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt","nameLocation":"8983:8:11","nodeType":"FunctionDefinition","parameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1848,"mutability":"mutable","name":"buf","nameLocation":"9011:3:11","nodeType":"VariableDeclaration","scope":1891,"src":"8997:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1847,"nodeType":"UserDefinedTypeName","pathNode":{"id":1846,"name":"buffer","nameLocations":["8997:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"8997:6:11"},"referencedDeclaration":1402,"src":"8997:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"off","nameLocation":"9028:3:11","nodeType":"VariableDeclaration","scope":1891,"src":"9020:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"9020:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"data","nameLocation":"9045:4:11","nodeType":"VariableDeclaration","scope":1891,"src":"9037:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"9037:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1854,"mutability":"mutable","name":"len","nameLocation":"9063:3:11","nodeType":"VariableDeclaration","scope":1891,"src":"9055:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1853,"name":"uint256","nodeType":"ElementaryTypeName","src":"9055:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8991:79:11"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1891,"src":"9093:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1857,"nodeType":"UserDefinedTypeName","pathNode":{"id":1856,"name":"buffer","nameLocations":["9093:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"9093:6:11"},"referencedDeclaration":1402,"src":"9093:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"9092:15:11"},"scope":1916,"src":"8974:675:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1914,"nodeType":"Block","src":"10013:58:11","statements":[{"expression":{"arguments":[{"id":1906,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"10035:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":1907,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"10040:3:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10044:3:11","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"10040:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10048:6:11","memberName":"length","nodeType":"MemberAccess","src":"10040:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1910,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"10056:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1911,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"10062:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1905,"name":"writeInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"10026:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":1904,"id":1913,"nodeType":"Return","src":"10019:47:11"}]},"documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"9653:238:11","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer."},"id":1915,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"9903:9:11","nodeType":"FunctionDefinition","parameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"buf","nameLocation":"9932:3:11","nodeType":"VariableDeclaration","scope":1915,"src":"9918:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1894,"nodeType":"UserDefinedTypeName","pathNode":{"id":1893,"name":"buffer","nameLocations":["9918:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"9918:6:11"},"referencedDeclaration":1402,"src":"9918:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1897,"mutability":"mutable","name":"data","nameLocation":"9949:4:11","nodeType":"VariableDeclaration","scope":1915,"src":"9941:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"9941:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"len","nameLocation":"9967:3:11","nodeType":"VariableDeclaration","scope":1915,"src":"9959:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1898,"name":"uint256","nodeType":"ElementaryTypeName","src":"9959:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9912:62:11"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1915,"src":"9998:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1902,"nodeType":"UserDefinedTypeName","pathNode":{"id":1901,"name":"buffer","nameLocations":["9998:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"9998:6:11"},"referencedDeclaration":1402,"src":"9998:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"9997:15:11"},"scope":1916,"src":"9894:177:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1917,"src":"441:9632:11","usedErrors":[]}],"src":"32:10042:11"},"id":11},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol","exportedSymbols":{"BufferChainlink":[1916],"CBORChainlink":[2363]},"id":2364,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1918,"literals":["solidity",">=","0.4",".19"],"nodeType":"PragmaDirective","src":"32:25:12"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","file":"./BufferChainlink.sol","id":1920,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2364,"sourceUnit":1917,"src":"59:54:12","symbolAliases":[{"foreign":{"id":1919,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"67:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"CBORChainlink","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2363,"linearizedBaseContracts":[2363],"name":"CBORChainlink","nameLocation":"123:13:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1924,"libraryName":{"id":1921,"name":"BufferChainlink","nameLocations":["147:15:12"],"nodeType":"IdentifierPath","referencedDeclaration":1916,"src":"147:15:12"},"nodeType":"UsingForDirective","src":"141:49:12","typeName":{"id":1923,"nodeType":"UserDefinedTypeName","pathNode":{"id":1922,"name":"BufferChainlink.buffer","nameLocations":["167:15:12","183:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"167:22:12"},"referencedDeclaration":1402,"src":"167:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}}},{"constant":true,"id":1927,"mutability":"constant","name":"MAJOR_TYPE_INT","nameLocation":"217:14:12","nodeType":"VariableDeclaration","scope":2363,"src":"194:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1925,"name":"uint8","nodeType":"ElementaryTypeName","src":"194:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"234:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":1930,"mutability":"constant","name":"MAJOR_TYPE_NEGATIVE_INT","nameLocation":"262:23:12","nodeType":"VariableDeclaration","scope":2363,"src":"239:50:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1928,"name":"uint8","nodeType":"ElementaryTypeName","src":"239:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"288:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1933,"mutability":"constant","name":"MAJOR_TYPE_BYTES","nameLocation":"316:16:12","nodeType":"VariableDeclaration","scope":2363,"src":"293:43:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1931,"name":"uint8","nodeType":"ElementaryTypeName","src":"293:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"335:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1936,"mutability":"constant","name":"MAJOR_TYPE_STRING","nameLocation":"363:17:12","nodeType":"VariableDeclaration","scope":2363,"src":"340:44:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1934,"name":"uint8","nodeType":"ElementaryTypeName","src":"340:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"383:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1939,"mutability":"constant","name":"MAJOR_TYPE_ARRAY","nameLocation":"411:16:12","nodeType":"VariableDeclaration","scope":2363,"src":"388:43:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1937,"name":"uint8","nodeType":"ElementaryTypeName","src":"388:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"430:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":1942,"mutability":"constant","name":"MAJOR_TYPE_MAP","nameLocation":"458:14:12","nodeType":"VariableDeclaration","scope":2363,"src":"435:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1940,"name":"uint8","nodeType":"ElementaryTypeName","src":"435:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"475:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"private"},{"constant":true,"id":1945,"mutability":"constant","name":"MAJOR_TYPE_TAG","nameLocation":"503:14:12","nodeType":"VariableDeclaration","scope":2363,"src":"480:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1943,"name":"uint8","nodeType":"ElementaryTypeName","src":"480:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"520:1:12","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"private"},{"constant":true,"id":1948,"mutability":"constant","name":"MAJOR_TYPE_CONTENT_FREE","nameLocation":"548:23:12","nodeType":"VariableDeclaration","scope":2363,"src":"525:50:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1946,"name":"uint8","nodeType":"ElementaryTypeName","src":"525:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"574:1:12","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"private"},{"constant":true,"id":1951,"mutability":"constant","name":"TAG_TYPE_BIGNUM","nameLocation":"603:15:12","nodeType":"VariableDeclaration","scope":2363,"src":"580:42:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1949,"name":"uint8","nodeType":"ElementaryTypeName","src":"580:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"621:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1954,"mutability":"constant","name":"TAG_TYPE_NEGATIVE_BIGNUM","nameLocation":"649:24:12","nodeType":"VariableDeclaration","scope":2363,"src":"626:51:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1952,"name":"uint8","nodeType":"ElementaryTypeName","src":"626:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"676:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"body":{"id":2083,"nodeType":"Block","src":"785:522:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"794:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3233","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"803:2:12","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"src":"794:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"876:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646","id":1983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"885:4:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"876:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"988:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307846464646","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"997:6:12","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"988:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1102:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646464646464646","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1111:10:12","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xFFFFFFFF"},"src":"1102:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2078,"nodeType":"Block","src":"1216:87:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2062,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"1247:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1256:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1247:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1246:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3237","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1261:2:12","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"1246:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1240:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2060,"name":"uint8","nodeType":"ElementaryTypeName","src":"1240:5:12","typeDescriptions":{}}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1240:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2057,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1224:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2059,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1228:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"1224:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1224:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2070,"nodeType":"ExpressionStatement","src":"1224:41:12"},{"expression":{"arguments":[{"id":2074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1287:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"38","id":2075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1294:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"id":2071,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1273:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1277:9:12","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"1273:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1273:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2077,"nodeType":"ExpressionStatement","src":"1273:23:12"}]},"id":2079,"nodeType":"IfStatement","src":"1098:205:12","trueBody":{"id":2056,"nodeType":"Block","src":"1123:87:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2040,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"1154:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1163:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1154:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2043,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1153:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3236","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1168:2:12","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"1153:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1147:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2038,"name":"uint8","nodeType":"ElementaryTypeName","src":"1147:5:12","typeDescriptions":{}}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1147:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2035,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1131:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1135:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"1131:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1131:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2048,"nodeType":"ExpressionStatement","src":"1131:41:12"},{"expression":{"arguments":[{"id":2052,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1194:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"34","id":2053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1201:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":2049,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1180:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1184:9:12","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"1180:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1180:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2055,"nodeType":"ExpressionStatement","src":"1180:23:12"}]}},"id":2080,"nodeType":"IfStatement","src":"984:319:12","trueBody":{"id":2031,"nodeType":"Block","src":"1005:87:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"1036:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1036:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2018,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1035:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3235","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:2:12","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"1035:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1029:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2013,"name":"uint8","nodeType":"ElementaryTypeName","src":"1029:5:12","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1029:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2010,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1013:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1017:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"1013:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1013:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2023,"nodeType":"ExpressionStatement","src":"1013:41:12"},{"expression":{"arguments":[{"id":2027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1076:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"32","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1083:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":2024,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1062:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2026,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1066:9:12","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"1062:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2030,"nodeType":"ExpressionStatement","src":"1062:23:12"}]}},"id":2081,"nodeType":"IfStatement","src":"872:431:12","trueBody":{"id":2006,"nodeType":"Block","src":"891:87:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1990,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"922:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"931:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"922:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"921:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3234","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"921:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1988,"name":"uint8","nodeType":"ElementaryTypeName","src":"915:5:12","typeDescriptions":{}}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":1985,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"899:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1987,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"903:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"899:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"899:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1998,"nodeType":"ExpressionStatement","src":"899:41:12"},{"expression":{"arguments":[{"id":2002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"962:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"31","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"969:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":1999,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"948:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2001,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"952:9:12","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1915,"src":"948:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2005,"nodeType":"ExpressionStatement","src":"948:23:12"}]}},"id":2082,"nodeType":"IfStatement","src":"791:512:12","trueBody":{"id":1981,"nodeType":"Block","src":"807:59:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1972,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"838:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"847:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"838:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"837:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1976,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"852:5:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"837:20:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"831:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1970,"name":"uint8","nodeType":"ElementaryTypeName","src":"831:5:12","typeDescriptions":{}}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"831:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":1967,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"815:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1969,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"819:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"815:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"815:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1980,"nodeType":"ExpressionStatement","src":"815:44:12"}]}}]},"id":2084,"implemented":true,"kind":"function","modifiers":[],"name":"encodeFixedNumeric","nameLocation":"691:18:12","nodeType":"FunctionDefinition","parameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1957,"mutability":"mutable","name":"buf","nameLocation":"740:3:12","nodeType":"VariableDeclaration","scope":2084,"src":"710:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1956,"nodeType":"UserDefinedTypeName","pathNode":{"id":1955,"name":"BufferChainlink.buffer","nameLocations":["710:15:12","726:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"710:22:12"},"referencedDeclaration":1402,"src":"710:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"major","nameLocation":"751:5:12","nodeType":"VariableDeclaration","scope":2084,"src":"745:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1958,"name":"uint8","nodeType":"ElementaryTypeName","src":"745:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"value","nameLocation":"765:5:12","nodeType":"VariableDeclaration","scope":2084,"src":"758:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1960,"name":"uint64","nodeType":"ElementaryTypeName","src":"758:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"709:62:12"},"returnParameters":{"id":1963,"nodeType":"ParameterList","parameters":[],"src":"785:0:12"},"scope":2363,"src":"682:625:12","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2106,"nodeType":"Block","src":"1408:52:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"1437:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1446:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1437:10:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1436:12:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3331","id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1451:2:12","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1436:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1430:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2095,"name":"uint8","nodeType":"ElementaryTypeName","src":"1430:5:12","typeDescriptions":{}}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1430:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2092,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"1414:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1418:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"1414:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2105,"nodeType":"ExpressionStatement","src":"1414:41:12"}]},"id":2107,"implemented":true,"kind":"function","modifiers":[],"name":"encodeIndefiniteLengthType","nameLocation":"1320:26:12","nodeType":"FunctionDefinition","parameters":{"id":2090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"buf","nameLocation":"1377:3:12","nodeType":"VariableDeclaration","scope":2107,"src":"1347:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2086,"nodeType":"UserDefinedTypeName","pathNode":{"id":2085,"name":"BufferChainlink.buffer","nameLocations":["1347:15:12","1363:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1347:22:12"},"referencedDeclaration":1402,"src":"1347:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2089,"mutability":"mutable","name":"major","nameLocation":"1388:5:12","nodeType":"VariableDeclaration","scope":2107,"src":"1382:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2088,"name":"uint8","nodeType":"ElementaryTypeName","src":"1382:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1346:48:12"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[],"src":"1408:0:12"},"scope":2363,"src":"1311:149:12","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2135,"nodeType":"Block","src":"1545:155:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"1554:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1562:18:12","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1554:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2133,"nodeType":"Block","src":"1627:69:12","statements":[{"expression":{"arguments":[{"id":2125,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"1654:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2126,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"1659:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":2129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"1682:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1675:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2127,"name":"uint64","nodeType":"ElementaryTypeName","src":"1675:6:12","typeDescriptions":{}}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2124,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"1635:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2132,"nodeType":"ExpressionStatement","src":"1635:54:12"}]},"id":2134,"nodeType":"IfStatement","src":"1551:145:12","trueBody":{"id":2123,"nodeType":"Block","src":"1582:39:12","statements":[{"expression":{"arguments":[{"id":2119,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"1603:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"1608:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"1590:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1590:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2122,"nodeType":"ExpressionStatement","src":"1590:24:12"}]}}]},"id":2136,"implemented":true,"kind":"function","modifiers":[],"name":"encodeUInt","nameLocation":"1473:10:12","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"buf","nameLocation":"1514:3:12","nodeType":"VariableDeclaration","scope":2136,"src":"1484:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2109,"nodeType":"UserDefinedTypeName","pathNode":{"id":2108,"name":"BufferChainlink.buffer","nameLocations":["1484:15:12","1500:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1484:22:12"},"referencedDeclaration":1402,"src":"1484:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"value","nameLocation":"1524:5:12","nodeType":"VariableDeclaration","scope":2136,"src":"1519:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint","nodeType":"ElementaryTypeName","src":"1519:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1483:47:12"},"returnParameters":{"id":2114,"nodeType":"ParameterList","parameters":[],"src":"1545:0:12"},"scope":2363,"src":"1464:236:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2201,"nodeType":"Block","src":"1783:367:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1792:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1800:20:12","subExpression":{"hexValue":"30783130303030303030303030303030303030","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:19:12","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"value":"0x10000000000000000"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_18446744073709551616_by_1","typeString":"int_const -18446744073709551616"}},"src":"1792:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1876:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1884:18:12","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1876:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1958:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1967:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1958:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2197,"nodeType":"Block","src":"2054:92:12","statements":[{"expression":{"arguments":[{"id":2183,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"2081:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2184,"name":"MAJOR_TYPE_NEGATIVE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2086:23:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2126:2:12","subExpression":{"hexValue":"31","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2127:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2131:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2126:10:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2118:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2118:7:12","typeDescriptions":{}}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2118:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2111:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2185,"name":"uint64","nodeType":"ElementaryTypeName","src":"2111:6:12","typeDescriptions":{}}},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2111:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2182,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2062:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2062:77:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"2062:77:12"}]},"id":2198,"nodeType":"IfStatement","src":"1955:191:12","trueBody":{"id":2181,"nodeType":"Block","src":"1970:78:12","statements":[{"expression":{"arguments":[{"id":2170,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"1997:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2171,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"2002:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"id":2176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2033:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2025:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2025:7:12","typeDescriptions":{}}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2025:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2018:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2172,"name":"uint64","nodeType":"ElementaryTypeName","src":"2018:6:12","typeDescriptions":{}}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2169,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"1978:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1978:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2180,"nodeType":"ExpressionStatement","src":"1978:63:12"}]}},"id":2199,"nodeType":"IfStatement","src":"1873:273:12","trueBody":{"id":2165,"nodeType":"Block","src":"1904:45:12","statements":[{"expression":{"arguments":[{"id":2158,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"1925:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"id":2161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1935:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1930:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2159,"name":"uint","nodeType":"ElementaryTypeName","src":"1930:4:12","typeDescriptions":{}}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1930:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2157,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"1912:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1912:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2164,"nodeType":"ExpressionStatement","src":"1912:30:12"}]}},"id":2200,"nodeType":"IfStatement","src":"1789:357:12","trueBody":{"id":2153,"nodeType":"Block","src":"1822:45:12","statements":[{"expression":{"arguments":[{"id":2149,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"1849:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1854:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2148,"name":"encodeSignedBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"1830:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_int256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,int256) pure"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1830:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2152,"nodeType":"ExpressionStatement","src":"1830:30:12"}]}}]},"id":2202,"implemented":true,"kind":"function","modifiers":[],"name":"encodeInt","nameLocation":"1713:9:12","nodeType":"FunctionDefinition","parameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2139,"mutability":"mutable","name":"buf","nameLocation":"1753:3:12","nodeType":"VariableDeclaration","scope":2202,"src":"1723:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2138,"nodeType":"UserDefinedTypeName","pathNode":{"id":2137,"name":"BufferChainlink.buffer","nameLocations":["1723:15:12","1739:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"1723:22:12"},"referencedDeclaration":1402,"src":"1723:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"value","nameLocation":"1762:5:12","nodeType":"VariableDeclaration","scope":2202,"src":"1758:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2140,"name":"int","nodeType":"ElementaryTypeName","src":"1758:3:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1722:46:12"},"returnParameters":{"id":2143,"nodeType":"ParameterList","parameters":[],"src":"1783:0:12"},"scope":2363,"src":"1704:446:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2226,"nodeType":"Block","src":"2244:97:12","statements":[{"expression":{"arguments":[{"id":2211,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"2269:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2212,"name":"MAJOR_TYPE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2274:16:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"id":2215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"2299:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2305:6:12","memberName":"length","nodeType":"MemberAccess","src":"2299:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2292:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2213,"name":"uint64","nodeType":"ElementaryTypeName","src":"2292:6:12","typeDescriptions":{}}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2292:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2210,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2250:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2250:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2219,"nodeType":"ExpressionStatement","src":"2250:63:12"},{"expression":{"arguments":[{"id":2223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"2330:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2220,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"2319:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2323:6:12","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1659,"src":"2319:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2319:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2225,"nodeType":"ExpressionStatement","src":"2319:17:12"}]},"id":2227,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBytes","nameLocation":"2163:11:12","nodeType":"FunctionDefinition","parameters":{"id":2208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2205,"mutability":"mutable","name":"buf","nameLocation":"2205:3:12","nodeType":"VariableDeclaration","scope":2227,"src":"2175:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2204,"nodeType":"UserDefinedTypeName","pathNode":{"id":2203,"name":"BufferChainlink.buffer","nameLocations":["2175:15:12","2191:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2175:22:12"},"referencedDeclaration":1402,"src":"2175:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2207,"mutability":"mutable","name":"value","nameLocation":"2223:5:12","nodeType":"VariableDeclaration","scope":2227,"src":"2210:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2206,"name":"bytes","nodeType":"ElementaryTypeName","src":"2210:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2174:55:12"},"returnParameters":{"id":2209,"nodeType":"ParameterList","parameters":[],"src":"2244:0:12"},"scope":2363,"src":"2154:187:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2257,"nodeType":"Block","src":"2428:115:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2240,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2457:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2475:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2457:19:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2456:21:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2244,"name":"TAG_TYPE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"2480:15:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2456:39:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2450:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2238,"name":"uint8","nodeType":"ElementaryTypeName","src":"2450:5:12","typeDescriptions":{}}},"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2450:46:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2235,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2434:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2438:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"2434:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2434:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2248,"nodeType":"ExpressionStatement","src":"2434:63:12"},{"expression":{"arguments":[{"id":2250,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2515:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"id":2253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"2531:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2251,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2520:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2524:6:12","memberName":"encode","nodeType":"MemberAccess","src":"2520:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2520:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2249,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"2503:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2503:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2256,"nodeType":"ExpressionStatement","src":"2503:35:12"}]},"id":2258,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBigNum","nameLocation":"2354:12:12","nodeType":"FunctionDefinition","parameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"buf","nameLocation":"2397:3:12","nodeType":"VariableDeclaration","scope":2258,"src":"2367:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2229,"nodeType":"UserDefinedTypeName","pathNode":{"id":2228,"name":"BufferChainlink.buffer","nameLocations":["2367:15:12","2383:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2367:22:12"},"referencedDeclaration":1402,"src":"2367:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2232,"mutability":"mutable","name":"value","nameLocation":"2407:5:12","nodeType":"VariableDeclaration","scope":2258,"src":"2402:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint","nodeType":"ElementaryTypeName","src":"2402:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2366:47:12"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[],"src":"2428:0:12"},"scope":2363,"src":"2345:198:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"2635:138:12","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2271,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2664:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2682:1:12","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2664:19:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2663:21:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2275,"name":"TAG_TYPE_NEGATIVE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"2687:24:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2663:48:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2657:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2269,"name":"uint8","nodeType":"ElementaryTypeName","src":"2657:5:12","typeDescriptions":{}}},"id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2266,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"2641:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2645:11:12","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1712,"src":"2641:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2279,"nodeType":"ExpressionStatement","src":"2641:72:12"},{"expression":{"arguments":[{"id":2281,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"2731:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2755:2:12","subExpression":{"hexValue":"31","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2756:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2288,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"2760:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2755:10:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"2747:7:12","typeDescriptions":{}}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2282,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2736:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2740:6:12","memberName":"encode","nodeType":"MemberAccess","src":"2736:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2280,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"2719:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2719:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"2719:49:12"}]},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"encodeSignedBigNum","nameLocation":"2556:18:12","nodeType":"FunctionDefinition","parameters":{"id":2264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2261,"mutability":"mutable","name":"buf","nameLocation":"2605:3:12","nodeType":"VariableDeclaration","scope":2295,"src":"2575:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2260,"nodeType":"UserDefinedTypeName","pathNode":{"id":2259,"name":"BufferChainlink.buffer","nameLocations":["2575:15:12","2591:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2575:22:12"},"referencedDeclaration":1402,"src":"2575:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2263,"mutability":"mutable","name":"input","nameLocation":"2614:5:12","nodeType":"VariableDeclaration","scope":2295,"src":"2610:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2262,"name":"int","nodeType":"ElementaryTypeName","src":"2610:3:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2574:46:12"},"returnParameters":{"id":2265,"nodeType":"ParameterList","parameters":[],"src":"2635:0:12"},"scope":2363,"src":"2547:226:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2325,"nodeType":"Block","src":"2869:112:12","statements":[{"expression":{"arguments":[{"id":2304,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"2894:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2305,"name":"MAJOR_TYPE_STRING","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"2899:17:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"arguments":[{"id":2310,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"2931:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2925:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2308,"name":"bytes","nodeType":"ElementaryTypeName","src":"2925:5:12","typeDescriptions":{}}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2925:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:6:12","memberName":"length","nodeType":"MemberAccess","src":"2925:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2918:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2306,"name":"uint64","nodeType":"ElementaryTypeName","src":"2918:6:12","typeDescriptions":{}}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2918:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2303,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"2875:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2875:71:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2315,"nodeType":"ExpressionStatement","src":"2875:71:12"},{"expression":{"arguments":[{"arguments":[{"id":2321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"2969:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2963:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2319,"name":"bytes","nodeType":"ElementaryTypeName","src":"2963:5:12","typeDescriptions":{}}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2316,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"2952:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2956:6:12","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1659,"src":"2952:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1402_memory_ptr_$attached_to$_t_struct$_buffer_$1402_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":2324,"nodeType":"ExpressionStatement","src":"2952:24:12"}]},"id":2326,"implemented":true,"kind":"function","modifiers":[],"name":"encodeString","nameLocation":"2786:12:12","nodeType":"FunctionDefinition","parameters":{"id":2301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"buf","nameLocation":"2829:3:12","nodeType":"VariableDeclaration","scope":2326,"src":"2799:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2297,"nodeType":"UserDefinedTypeName","pathNode":{"id":2296,"name":"BufferChainlink.buffer","nameLocations":["2799:15:12","2815:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"2799:22:12"},"referencedDeclaration":1402,"src":"2799:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":2300,"mutability":"mutable","name":"value","nameLocation":"2848:5:12","nodeType":"VariableDeclaration","scope":2326,"src":"2834:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2299,"name":"string","nodeType":"ElementaryTypeName","src":"2834:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2798:56:12"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[],"src":"2869:0:12"},"scope":2363,"src":"2777:204:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2337,"nodeType":"Block","src":"3054:60:12","statements":[{"expression":{"arguments":[{"id":2333,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"3087:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2334,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3092:16:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2332,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"3060:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3060:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2336,"nodeType":"ExpressionStatement","src":"3060:49:12"}]},"id":2338,"implemented":true,"kind":"function","modifiers":[],"name":"startArray","nameLocation":"2994:10:12","nodeType":"FunctionDefinition","parameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"buf","nameLocation":"3035:3:12","nodeType":"VariableDeclaration","scope":2338,"src":"3005:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2328,"nodeType":"UserDefinedTypeName","pathNode":{"id":2327,"name":"BufferChainlink.buffer","nameLocations":["3005:15:12","3021:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"3005:22:12"},"referencedDeclaration":1402,"src":"3005:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3004:35:12"},"returnParameters":{"id":2331,"nodeType":"ParameterList","parameters":[],"src":"3054:0:12"},"scope":2363,"src":"2985:129:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2349,"nodeType":"Block","src":"3185:58:12","statements":[{"expression":{"arguments":[{"id":2345,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"3218:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2346,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"3223:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2344,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"3191:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2348,"nodeType":"ExpressionStatement","src":"3191:47:12"}]},"id":2350,"implemented":true,"kind":"function","modifiers":[],"name":"startMap","nameLocation":"3127:8:12","nodeType":"FunctionDefinition","parameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"buf","nameLocation":"3166:3:12","nodeType":"VariableDeclaration","scope":2350,"src":"3136:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2340,"nodeType":"UserDefinedTypeName","pathNode":{"id":2339,"name":"BufferChainlink.buffer","nameLocations":["3136:15:12","3152:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"3136:22:12"},"referencedDeclaration":1402,"src":"3136:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3135:35:12"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[],"src":"3185:0:12"},"scope":2363,"src":"3118:125:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2361,"nodeType":"Block","src":"3317:67:12","statements":[{"expression":{"arguments":[{"id":2357,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"3350:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":2358,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"3355:23:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2356,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"3323:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1402_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3323:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2360,"nodeType":"ExpressionStatement","src":"3323:56:12"}]},"id":2362,"implemented":true,"kind":"function","modifiers":[],"name":"endSequence","nameLocation":"3256:11:12","nodeType":"FunctionDefinition","parameters":{"id":2354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"buf","nameLocation":"3298:3:12","nodeType":"VariableDeclaration","scope":2362,"src":"3268:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":2352,"nodeType":"UserDefinedTypeName","pathNode":{"id":2351,"name":"BufferChainlink.buffer","nameLocations":["3268:15:12","3284:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":1402,"src":"3268:22:12"},"referencedDeclaration":1402,"src":"3268:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1402_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3267:35:12"},"returnParameters":{"id":2355,"nodeType":"ParameterList","parameters":[],"src":"3317:0:12"},"scope":2363,"src":"3247:137:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2364,"src":"115:3271:12","usedErrors":[]}],"src":"32:3355:12"},"id":12},"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol","exportedSymbols":{"ENSResolver":[2373]},"id":2374,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2365,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":true,"baseContracts":[],"canonicalName":"ENSResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":2373,"linearizedBaseContracts":[2373],"name":"ENSResolver","nameLocation":"75:11:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3b3b57de","id":2372,"implemented":false,"kind":"function","modifiers":[],"name":"addr","nameLocation":"100:4:13","nodeType":"FunctionDefinition","parameters":{"id":2368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2367,"mutability":"mutable","name":"node","nameLocation":"113:4:13","nodeType":"VariableDeclaration","scope":2372,"src":"105:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"105:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"104:14:13"},"returnParameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2372,"src":"148:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2369,"name":"address","nodeType":"ElementaryTypeName","src":"148:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"147:9:13"},"scope":2373,"src":"91:66:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2374,"src":"57:102:13","usedErrors":[]}],"src":"32:128:13"},"id":13},"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[2689],"Context":[3604],"ERC165":[3857],"IAccessControl":[2762],"IERC165":[3869],"Math":[4735],"SignedMath":[4840],"Strings":[3833]},"id":2690,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2375,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:14"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":2376,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2690,"sourceUnit":2763,"src":"133:30:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2690,"sourceUnit":3605,"src":"164:30:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":2378,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2690,"sourceUnit":3834,"src":"195:30:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":2379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2690,"sourceUnit":3858,"src":"226:43:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2381,"name":"Context","nameLocations":["1967:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3604,"src":"1967:7:14"},"id":2382,"nodeType":"InheritanceSpecifier","src":"1967:7:14"},{"baseName":{"id":2383,"name":"IAccessControl","nameLocations":["1976:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":2762,"src":"1976:14:14"},"id":2384,"nodeType":"InheritanceSpecifier","src":"1976:14:14"},{"baseName":{"id":2385,"name":"ERC165","nameLocations":["1992:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":3857,"src":"1992:6:14"},"id":2386,"nodeType":"InheritanceSpecifier","src":"1992:6:14"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"271:1660:14","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":2689,"linearizedBaseContracts":[2689,3857,3869,2762,3604],"name":"AccessControl","nameLocation":"1950:13:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":2393,"members":[{"constant":false,"id":2390,"mutability":"mutable","name":"members","nameLocation":"2056:7:14","nodeType":"VariableDeclaration","scope":2393,"src":"2031:32:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2389,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2387,"name":"address","nodeType":"ElementaryTypeName","src":"2039:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2031:24:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2388,"name":"bool","nodeType":"ElementaryTypeName","src":"2050:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":2392,"mutability":"mutable","name":"adminRole","nameLocation":"2081:9:14","nodeType":"VariableDeclaration","scope":2393,"src":"2073:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2073:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2012:8:14","nodeType":"StructDefinition","scope":2689,"src":"2005:92:14","visibility":"public"},{"constant":false,"id":2398,"mutability":"mutable","name":"_roles","nameLocation":"2140:6:14","nodeType":"VariableDeclaration","scope":2689,"src":"2103:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":2397,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2103:28:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2396,"nodeType":"UserDefinedTypeName","pathNode":{"id":2395,"name":"RoleData","nameLocations":["2122:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2393,"src":"2122:8:14"},"referencedDeclaration":2393,"src":"2122:8:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":2401,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2177:18:14","nodeType":"VariableDeclaration","scope":2689,"src":"2153:49:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2198:4:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":2411,"nodeType":"Block","src":"2621:44:14","statements":[{"expression":{"arguments":[{"id":2407,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"2642:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2406,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[2466,2505],"referencedDeclaration":2466,"src":"2631:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2631:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2409,"nodeType":"ExpressionStatement","src":"2631:16:14"},{"id":2410,"nodeType":"PlaceholderStatement","src":"2657:1:14"}]},"documentation":{"id":2402,"nodeType":"StructuredDocumentation","src":"2209:375:14","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":2412,"name":"onlyRole","nameLocation":"2598:8:14","nodeType":"ModifierDefinition","parameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"role","nameLocation":"2615:4:14","nodeType":"VariableDeclaration","scope":2412,"src":"2607:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2607:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2606:14:14"},"src":"2589:76:14","virtual":false,"visibility":"internal"},{"baseFunctions":[3856],"body":{"id":2433,"nodeType":"Block","src":"2823:111:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"2840:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2423,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"2860:14:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$2762_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$2762_$","typeString":"type(contract IAccessControl)"}],"id":2422,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2855:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$2762","typeString":"type(contract IAccessControl)"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2876:11:14","memberName":"interfaceId","nodeType":"MemberAccess","src":"2855:32:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2840:47:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2429,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"2915:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2427,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2891:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$2689_$","typeString":"type(contract super AccessControl)"}},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:17:14","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3856,"src":"2891:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2891:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2840:87:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2420,"id":2432,"nodeType":"Return","src":"2833:94:14"}]},"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"2671:56:14","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2741:17:14","nodeType":"FunctionDefinition","overrides":{"id":2417,"nodeType":"OverrideSpecifier","overrides":[],"src":"2799:8:14"},"parameters":{"id":2416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"interfaceId","nameLocation":"2766:11:14","nodeType":"VariableDeclaration","scope":2434,"src":"2759:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2414,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2759:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2758:20:14"},"returnParameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"2817:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2418,"name":"bool","nodeType":"ElementaryTypeName","src":"2817:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2816:6:14"},"scope":2689,"src":"2732:202:14","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2729],"body":{"id":2452,"nodeType":"Block","src":"3113:53:14","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":2445,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"3130:6:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":2447,"indexExpression":{"id":2446,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"3137:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":2448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3143:7:14","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"3130:20:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2450,"indexExpression":{"id":2449,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"3151:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2444,"id":2451,"nodeType":"Return","src":"3123:36:14"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"2940:76:14","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":2453,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3030:7:14","nodeType":"FunctionDefinition","overrides":{"id":2441,"nodeType":"OverrideSpecifier","overrides":[],"src":"3089:8:14"},"parameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"role","nameLocation":"3046:4:14","nodeType":"VariableDeclaration","scope":2453,"src":"3038:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"account","nameLocation":"3060:7:14","nodeType":"VariableDeclaration","scope":2453,"src":"3052:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"3052:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3037:31:14"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2453,"src":"3107:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2442,"name":"bool","nodeType":"ElementaryTypeName","src":"3107:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3106:6:14"},"scope":2689,"src":"3021:145:14","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2465,"nodeType":"Block","src":"3516:47:14","statements":[{"expression":{"arguments":[{"id":2460,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"3537:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2461,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"3543:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3543:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2459,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[2466,2505],"referencedDeclaration":2505,"src":"3526:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3526:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2464,"nodeType":"ExpressionStatement","src":"3526:30:14"}]},"documentation":{"id":2454,"nodeType":"StructuredDocumentation","src":"3172:283:14","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":2466,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3469:10:14","nodeType":"FunctionDefinition","parameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"role","nameLocation":"3488:4:14","nodeType":"VariableDeclaration","scope":2466,"src":"3480:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3480:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3479:14:14"},"returnParameters":{"id":2458,"nodeType":"ParameterList","parameters":[],"src":"3516:0:14"},"scope":2689,"src":"3460:103:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2504,"nodeType":"Block","src":"3917:406:14","statements":[{"condition":{"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3931:23:14","subExpression":{"arguments":[{"id":2475,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"3940:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2476,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"3946:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2474,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"3932:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3932:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2503,"nodeType":"IfStatement","src":"3927:390:14","trueBody":{"id":2502,"nodeType":"Block","src":"3956:361:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4064:25:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":2487,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"4135:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2485,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4115:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4123:11:14","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"4115:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4115:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4169:19:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":2494,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"4242:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4234:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2492,"name":"uint256","nodeType":"ElementaryTypeName","src":"4234:7:14","typeDescriptions":{}}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4234:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4249:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":2490,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4214:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4222:11:14","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3787,"src":"4214:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2482,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4022:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4026:12:14","memberName":"encodePacked","nodeType":"MemberAccess","src":"4022:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:252:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3994:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2480,"name":"string","nodeType":"ElementaryTypeName","src":"3994:6:14","typeDescriptions":{}}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3994:298:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2479,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3970:6:14","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3970:336:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2501,"nodeType":"ExpressionStatement","src":"3970:336:14"}]}}]},"documentation":{"id":2467,"nodeType":"StructuredDocumentation","src":"3569:270:14","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":2505,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3853:10:14","nodeType":"FunctionDefinition","parameters":{"id":2472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"role","nameLocation":"3872:4:14","nodeType":"VariableDeclaration","scope":2505,"src":"3864:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3864:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2471,"mutability":"mutable","name":"account","nameLocation":"3886:7:14","nodeType":"VariableDeclaration","scope":2505,"src":"3878:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2470,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3863:31:14"},"returnParameters":{"id":2473,"nodeType":"ParameterList","parameters":[],"src":"3917:0:14"},"scope":2689,"src":"3844:479:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2737],"body":{"id":2519,"nodeType":"Block","src":"4587:46:14","statements":[{"expression":{"expression":{"baseExpression":{"id":2514,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"4604:6:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":2516,"indexExpression":{"id":2515,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"4611:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4604:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":2517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4617:9:14","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":2392,"src":"4604:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2513,"id":2518,"nodeType":"Return","src":"4597:29:14"}]},"documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"4329:170:14","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":2520,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4513:12:14","nodeType":"FunctionDefinition","overrides":{"id":2510,"nodeType":"OverrideSpecifier","overrides":[],"src":"4560:8:14"},"parameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"role","nameLocation":"4534:4:14","nodeType":"VariableDeclaration","scope":2520,"src":"4526:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4526:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4525:14:14"},"returnParameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2520,"src":"4578:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2511,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4578:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4577:9:14"},"scope":2689,"src":"4504:129:14","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2745],"body":{"id":2539,"nodeType":"Block","src":"5032:42:14","statements":[{"expression":{"arguments":[{"id":2535,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"5053:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2536,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"5059:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2534,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"5042:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2538,"nodeType":"ExpressionStatement","src":"5042:25:14"}]},"documentation":{"id":2521,"nodeType":"StructuredDocumentation","src":"4639:285:14","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":2540,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":2530,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"5025:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2529,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"5012:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5012:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2532,"kind":"modifierInvocation","modifierName":{"id":2528,"name":"onlyRole","nameLocations":["5003:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"5003:8:14"},"nodeType":"ModifierInvocation","src":"5003:28:14"}],"name":"grantRole","nameLocation":"4938:9:14","nodeType":"FunctionDefinition","overrides":{"id":2527,"nodeType":"OverrideSpecifier","overrides":[],"src":"4994:8:14"},"parameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"role","nameLocation":"4956:4:14","nodeType":"VariableDeclaration","scope":2540,"src":"4948:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4948:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"account","nameLocation":"4970:7:14","nodeType":"VariableDeclaration","scope":2540,"src":"4962:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"4962:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4947:31:14"},"returnParameters":{"id":2533,"nodeType":"ParameterList","parameters":[],"src":"5032:0:14"},"scope":2689,"src":"4929:145:14","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2753],"body":{"id":2559,"nodeType":"Block","src":"5458:43:14","statements":[{"expression":{"arguments":[{"id":2555,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"5480:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2556,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"5486:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2554,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"5468:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5468:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2558,"nodeType":"ExpressionStatement","src":"5468:26:14"}]},"documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"5080:269:14","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":2560,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":2550,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"5451:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2549,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"5438:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5438:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2552,"kind":"modifierInvocation","modifierName":{"id":2548,"name":"onlyRole","nameLocations":["5429:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"5429:8:14"},"nodeType":"ModifierInvocation","src":"5429:28:14"}],"name":"revokeRole","nameLocation":"5363:10:14","nodeType":"FunctionDefinition","overrides":{"id":2547,"nodeType":"OverrideSpecifier","overrides":[],"src":"5420:8:14"},"parameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2543,"mutability":"mutable","name":"role","nameLocation":"5382:4:14","nodeType":"VariableDeclaration","scope":2560,"src":"5374:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5374:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"account","nameLocation":"5396:7:14","nodeType":"VariableDeclaration","scope":2560,"src":"5388:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5373:31:14"},"returnParameters":{"id":2553,"nodeType":"ParameterList","parameters":[],"src":"5458:0:14"},"scope":2689,"src":"5354:147:14","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2761],"body":{"id":2582,"nodeType":"Block","src":"6115:137:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"6133:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2571,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"6144:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6144:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6133:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6158:49:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":2569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6125:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6125:83:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2576,"nodeType":"ExpressionStatement","src":"6125:83:14"},{"expression":{"arguments":[{"id":2578,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"6231:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2579,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"6237:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2577,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"6219:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6219:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2581,"nodeType":"ExpressionStatement","src":"6219:26:14"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"5507:526:14","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":2583,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6047:12:14","nodeType":"FunctionDefinition","overrides":{"id":2567,"nodeType":"OverrideSpecifier","overrides":[],"src":"6106:8:14"},"parameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"role","nameLocation":"6068:4:14","nodeType":"VariableDeclaration","scope":2583,"src":"6060:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6060:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2565,"mutability":"mutable","name":"account","nameLocation":"6082:7:14","nodeType":"VariableDeclaration","scope":2583,"src":"6074:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2564,"name":"address","nodeType":"ElementaryTypeName","src":"6074:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6059:31:14"},"returnParameters":{"id":2568,"nodeType":"ParameterList","parameters":[],"src":"6115:0:14"},"scope":2689,"src":"6038:214:14","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2596,"nodeType":"Block","src":"7005:42:14","statements":[{"expression":{"arguments":[{"id":2592,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"7026:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2593,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"7032:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2591,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7015:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7015:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2595,"nodeType":"ExpressionStatement","src":"7015:25:14"}]},"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"6258:674:14","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":2597,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6946:10:14","nodeType":"FunctionDefinition","parameters":{"id":2589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"role","nameLocation":"6965:4:14","nodeType":"VariableDeclaration","scope":2597,"src":"6957:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6957:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2588,"mutability":"mutable","name":"account","nameLocation":"6979:7:14","nodeType":"VariableDeclaration","scope":2597,"src":"6971:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2587,"name":"address","nodeType":"ElementaryTypeName","src":"6971:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6956:31:14"},"returnParameters":{"id":2590,"nodeType":"ParameterList","parameters":[],"src":"7005:0:14"},"scope":2689,"src":"6937:110:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2624,"nodeType":"Block","src":"7245:174:14","statements":[{"assignments":[2606],"declarations":[{"constant":false,"id":2606,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7263:17:14","nodeType":"VariableDeclaration","scope":2624,"src":"7255:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7255:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2610,"initialValue":{"arguments":[{"id":2608,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"7296:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2607,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"7283:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7255:46:14"},{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2611,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"7311:6:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":2613,"indexExpression":{"id":2612,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"7318:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7311:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":2614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7324:9:14","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":2392,"src":"7311:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2615,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"7336:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7311:34:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2617,"nodeType":"ExpressionStatement","src":"7311:34:14"},{"eventCall":{"arguments":[{"id":2619,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"7377:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2620,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"7383:17:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2621,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"7402:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2618,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"7360:16:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7360:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2623,"nodeType":"EmitStatement","src":"7355:57:14"}]},"documentation":{"id":2598,"nodeType":"StructuredDocumentation","src":"7053:114:14","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":2625,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7181:13:14","nodeType":"FunctionDefinition","parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"role","nameLocation":"7203:4:14","nodeType":"VariableDeclaration","scope":2625,"src":"7195:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2599,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7195:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"adminRole","nameLocation":"7217:9:14","nodeType":"VariableDeclaration","scope":2625,"src":"7209:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7209:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7194:33:14"},"returnParameters":{"id":2604,"nodeType":"ParameterList","parameters":[],"src":"7245:0:14"},"scope":2689,"src":"7172:247:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2656,"nodeType":"Block","src":"7655:165:14","statements":[{"condition":{"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7669:23:14","subExpression":{"arguments":[{"id":2634,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"7678:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2635,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"7684:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2633,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"7670:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2655,"nodeType":"IfStatement","src":"7665:149:14","trueBody":{"id":2654,"nodeType":"Block","src":"7694:120:14","statements":[{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":2638,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"7708:6:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":2640,"indexExpression":{"id":2639,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"7715:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7708:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":2641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7721:7:14","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"7708:20:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2643,"indexExpression":{"id":2642,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"7729:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7708:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7740:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7708:36:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2646,"nodeType":"ExpressionStatement","src":"7708:36:14"},{"eventCall":{"arguments":[{"id":2648,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"7775:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2649,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"7781:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2650,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"7790:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7790:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2647,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2710,"src":"7763:11:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7763:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2653,"nodeType":"EmitStatement","src":"7758:45:14"}]}}]},"documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"7425:157:14","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":2657,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7596:10:14","nodeType":"FunctionDefinition","parameters":{"id":2631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2628,"mutability":"mutable","name":"role","nameLocation":"7615:4:14","nodeType":"VariableDeclaration","scope":2657,"src":"7607:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7607:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2630,"mutability":"mutable","name":"account","nameLocation":"7629:7:14","nodeType":"VariableDeclaration","scope":2657,"src":"7621:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2629,"name":"address","nodeType":"ElementaryTypeName","src":"7621:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7606:31:14"},"returnParameters":{"id":2632,"nodeType":"ParameterList","parameters":[],"src":"7655:0:14"},"scope":2689,"src":"7587:233:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2687,"nodeType":"Block","src":"8060:165:14","statements":[{"condition":{"arguments":[{"id":2666,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"8082:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2667,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"8088:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2665,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"8074:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8074:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2686,"nodeType":"IfStatement","src":"8070:149:14","trueBody":{"id":2685,"nodeType":"Block","src":"8098:121:14","statements":[{"expression":{"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":2669,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"8112:6:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$2393_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":2671,"indexExpression":{"id":2670,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"8119:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8112:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$2393_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":2672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8125:7:14","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"8112:20:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2674,"indexExpression":{"id":2673,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"8133:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8112:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8144:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8112:37:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2677,"nodeType":"ExpressionStatement","src":"8112:37:14"},{"eventCall":{"arguments":[{"id":2679,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"8180:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2680,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"8186:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2681,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"8195:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8195:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2678,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"8168:11:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8168:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2684,"nodeType":"EmitStatement","src":"8163:45:14"}]}}]},"documentation":{"id":2658,"nodeType":"StructuredDocumentation","src":"7826:160:14","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":2688,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8000:11:14","nodeType":"FunctionDefinition","parameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"role","nameLocation":"8020:4:14","nodeType":"VariableDeclaration","scope":2688,"src":"8012:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8012:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"account","nameLocation":"8034:7:14","nodeType":"VariableDeclaration","scope":2688,"src":"8026:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2661,"name":"address","nodeType":"ElementaryTypeName","src":"8026:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8011:31:14"},"returnParameters":{"id":2664,"nodeType":"ParameterList","parameters":[],"src":"8060:0:14"},"scope":2689,"src":"7991:234:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2690,"src":"1932:6295:14","usedErrors":[]}],"src":"108:8120:14"},"id":14},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[2762]},"id":2763,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2691,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":2692,"nodeType":"StructuredDocumentation","src":"119:89:15","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":2762,"linearizedBaseContracts":[2762],"name":"IAccessControl","nameLocation":"219:14:15","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2693,"nodeType":"StructuredDocumentation","src":"240:292:15","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":2701,"name":"RoleAdminChanged","nameLocation":"543:16:15","nodeType":"EventDefinition","parameters":{"id":2700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:15","nodeType":"VariableDeclaration","scope":2701,"src":"560:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2697,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:15","nodeType":"VariableDeclaration","scope":2701,"src":"582:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2699,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:15","nodeType":"VariableDeclaration","scope":2701,"src":"617:28:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:15"},"src":"537:110:15"},{"anonymous":false,"documentation":{"id":2702,"nodeType":"StructuredDocumentation","src":"653:212:15","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":2710,"name":"RoleGranted","nameLocation":"876:11:15","nodeType":"EventDefinition","parameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2704,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:15","nodeType":"VariableDeclaration","scope":2710,"src":"888:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2703,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2706,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:15","nodeType":"VariableDeclaration","scope":2710,"src":"910:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2705,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2708,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:15","nodeType":"VariableDeclaration","scope":2710,"src":"935:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2707,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:15"},"src":"870:89:15"},{"anonymous":false,"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"965:275:15","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":2719,"name":"RoleRevoked","nameLocation":"1251:11:15","nodeType":"EventDefinition","parameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:15","nodeType":"VariableDeclaration","scope":2719,"src":"1263:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2715,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:15","nodeType":"VariableDeclaration","scope":2719,"src":"1285:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2717,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:15","nodeType":"VariableDeclaration","scope":2719,"src":"1310:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2716,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:15"},"src":"1245:89:15"},{"documentation":{"id":2720,"nodeType":"StructuredDocumentation","src":"1340:76:15","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":2729,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:15","nodeType":"FunctionDefinition","parameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"role","nameLocation":"1446:4:15","nodeType":"VariableDeclaration","scope":2729,"src":"1438:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"account","nameLocation":"1460:7:15","nodeType":"VariableDeclaration","scope":2729,"src":"1452:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:15"},"returnParameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2729,"src":"1492:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2726,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:15"},"scope":2762,"src":"1421:77:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"1504:184:15","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":2737,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:15","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"role","nameLocation":"1723:4:15","nodeType":"VariableDeclaration","scope":2737,"src":"1715:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:15"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2737,"src":"1752:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:15"},"scope":2762,"src":"1693:68:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2738,"nodeType":"StructuredDocumentation","src":"1767:239:15","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":2745,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:15","nodeType":"FunctionDefinition","parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2740,"mutability":"mutable","name":"role","nameLocation":"2038:4:15","nodeType":"VariableDeclaration","scope":2745,"src":"2030:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"account","nameLocation":"2052:7:15","nodeType":"VariableDeclaration","scope":2745,"src":"2044:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2741,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:15"},"returnParameters":{"id":2744,"nodeType":"ParameterList","parameters":[],"src":"2069:0:15"},"scope":2762,"src":"2011:59:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"2076:223:15","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":2753,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:15","nodeType":"FunctionDefinition","parameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"role","nameLocation":"2332:4:15","nodeType":"VariableDeclaration","scope":2753,"src":"2324:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2750,"mutability":"mutable","name":"account","nameLocation":"2346:7:15","nodeType":"VariableDeclaration","scope":2753,"src":"2338:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2749,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:15"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[],"src":"2363:0:15"},"scope":2762,"src":"2304:60:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"2370:480:15","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":2761,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:15","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2756,"mutability":"mutable","name":"role","nameLocation":"2885:4:15","nodeType":"VariableDeclaration","scope":2761,"src":"2877:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"account","nameLocation":"2899:7:15","nodeType":"VariableDeclaration","scope":2761,"src":"2891:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2757,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:15"},"returnParameters":{"id":2760,"nodeType":"ParameterList","parameters":[],"src":"2916:0:15"},"scope":2762,"src":"2855:62:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2763,"src":"209:2710:15","usedErrors":[]}],"src":"94:2826:15"},"id":15},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2840]},"id":2841,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2764,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2765,"nodeType":"StructuredDocumentation","src":"131:70:16","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2840,"linearizedBaseContracts":[2840],"name":"IERC20","nameLocation":"212:6:16","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2766,"nodeType":"StructuredDocumentation","src":"225:158:16","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2774,"name":"Transfer","nameLocation":"394:8:16","nodeType":"EventDefinition","parameters":{"id":2773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2768,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:16","nodeType":"VariableDeclaration","scope":2774,"src":"403:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2767,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2770,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:16","nodeType":"VariableDeclaration","scope":2774,"src":"425:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2769,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2772,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:16","nodeType":"VariableDeclaration","scope":2774,"src":"445:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:16"},"src":"388:72:16"},{"anonymous":false,"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"466:148:16","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2783,"name":"Approval","nameLocation":"625:8:16","nodeType":"EventDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2777,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:16","nodeType":"VariableDeclaration","scope":2783,"src":"634:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2776,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2779,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:16","nodeType":"VariableDeclaration","scope":2783,"src":"657:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2781,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:16","nodeType":"VariableDeclaration","scope":2783,"src":"682:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:16"},"src":"619:78:16"},{"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"703:66:16","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2789,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:16","nodeType":"FunctionDefinition","parameters":{"id":2785,"nodeType":"ParameterList","parameters":[],"src":"794:2:16"},"returnParameters":{"id":2788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2789,"src":"820:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:16"},"scope":2840,"src":"774:55:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2790,"nodeType":"StructuredDocumentation","src":"835:72:16","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2797,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:16","nodeType":"FunctionDefinition","parameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"account","nameLocation":"939:7:16","nodeType":"VariableDeclaration","scope":2797,"src":"931:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2791,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:16"},"returnParameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2797,"src":"971:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:16"},"scope":2840,"src":"912:68:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2798,"nodeType":"StructuredDocumentation","src":"986:202:16","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2807,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:16","nodeType":"FunctionDefinition","parameters":{"id":2803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"to","nameLocation":"1219:2:16","nodeType":"VariableDeclaration","scope":2807,"src":"1211:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2799,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2802,"mutability":"mutable","name":"amount","nameLocation":"1231:6:16","nodeType":"VariableDeclaration","scope":2807,"src":"1223:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:16"},"returnParameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2807,"src":"1257:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2804,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:16"},"scope":2840,"src":"1193:70:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2808,"nodeType":"StructuredDocumentation","src":"1269:264:16","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2817,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:16","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"owner","nameLocation":"1565:5:16","nodeType":"VariableDeclaration","scope":2817,"src":"1557:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2809,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2812,"mutability":"mutable","name":"spender","nameLocation":"1580:7:16","nodeType":"VariableDeclaration","scope":2817,"src":"1572:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2811,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:16"},"returnParameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2817,"src":"1612:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2814,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:16"},"scope":2840,"src":"1538:83:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2818,"nodeType":"StructuredDocumentation","src":"1627:642:16","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2827,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:16","nodeType":"FunctionDefinition","parameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2820,"mutability":"mutable","name":"spender","nameLocation":"2299:7:16","nodeType":"VariableDeclaration","scope":2827,"src":"2291:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2819,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2822,"mutability":"mutable","name":"amount","nameLocation":"2316:6:16","nodeType":"VariableDeclaration","scope":2827,"src":"2308:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2821,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:16"},"returnParameters":{"id":2826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2827,"src":"2342:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2824,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:16"},"scope":2840,"src":"2274:74:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2828,"nodeType":"StructuredDocumentation","src":"2354:287:16","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2839,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:16","nodeType":"FunctionDefinition","parameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"from","nameLocation":"2676:4:16","nodeType":"VariableDeclaration","scope":2839,"src":"2668:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2829,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"to","nameLocation":"2690:2:16","nodeType":"VariableDeclaration","scope":2839,"src":"2682:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2831,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"amount","nameLocation":"2702:6:16","nodeType":"VariableDeclaration","scope":2839,"src":"2694:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:16"},"returnParameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2839,"src":"2728:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2836,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:16"},"scope":2840,"src":"2646:88:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2841,"src":"202:2534:16","usedErrors":[]}],"src":"106:2631:16"},"id":16},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[2876]},"id":2877,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2842,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":2843,"nodeType":"StructuredDocumentation","src":"148:480:17","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":2876,"linearizedBaseContracts":[2876],"name":"IERC20Permit","nameLocation":"639:12:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2844,"nodeType":"StructuredDocumentation","src":"658:792:17","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":2861,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:17","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"owner","nameLocation":"1488:5:17","nodeType":"VariableDeclaration","scope":2861,"src":"1480:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2845,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2848,"mutability":"mutable","name":"spender","nameLocation":"1511:7:17","nodeType":"VariableDeclaration","scope":2861,"src":"1503:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2847,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2850,"mutability":"mutable","name":"value","nameLocation":"1536:5:17","nodeType":"VariableDeclaration","scope":2861,"src":"1528:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2852,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:17","nodeType":"VariableDeclaration","scope":2861,"src":"1551:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2854,"mutability":"mutable","name":"v","nameLocation":"1583:1:17","nodeType":"VariableDeclaration","scope":2861,"src":"1577:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2853,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"r","nameLocation":"1602:1:17","nodeType":"VariableDeclaration","scope":2861,"src":"1594:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"s","nameLocation":"1621:1:17","nodeType":"VariableDeclaration","scope":2861,"src":"1613:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:17"},"returnParameters":{"id":2860,"nodeType":"ParameterList","parameters":[],"src":"1637:0:17"},"scope":2876,"src":"1455:183:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2862,"nodeType":"StructuredDocumentation","src":"1644:294:17","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2869,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:17","nodeType":"FunctionDefinition","parameters":{"id":2865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"owner","nameLocation":"1967:5:17","nodeType":"VariableDeclaration","scope":2869,"src":"1959:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2863,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:17"},"returnParameters":{"id":2868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2869,"src":"1997:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:17"},"scope":2876,"src":"1943:63:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2870,"nodeType":"StructuredDocumentation","src":"2012:128:17","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2875,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:17","nodeType":"FunctionDefinition","parameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"2223:2:17"},"returnParameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2875,"src":"2249:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:17"},"scope":2876,"src":"2198:60:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2877,"src":"629:1631:17","usedErrors":[]}],"src":"123:2138:17"},"id":17},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[3582],"IERC20":[2840],"IERC20Permit":[2876],"SafeERC20":[3252]},"id":3253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2878,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:18"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2879,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3253,"sourceUnit":2841,"src":"140:23:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":2880,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3253,"sourceUnit":2877,"src":"164:40:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":2881,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3253,"sourceUnit":3583,"src":"205:36:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"243:457:18","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3252,"linearizedBaseContracts":[3252],"name":"SafeERC20","nameLocation":"709:9:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2885,"libraryName":{"id":2883,"name":"Address","nameLocations":["731:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3582,"src":"731:7:18"},"nodeType":"UsingForDirective","src":"725:26:18","typeName":{"id":2884,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2908,"nodeType":"Block","src":"1013:103:18","statements":[{"expression":{"arguments":[{"id":2897,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"1043:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2900,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"1073:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:18","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2807,"src":"1073:14:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:18","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2903,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"1098:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"1102:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2898,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2896,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"1023:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2907,"nodeType":"ExpressionStatement","src":"1023:86:18"}]},"documentation":{"id":2886,"nodeType":"StructuredDocumentation","src":"757:179:18","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2909,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:18","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"token","nameLocation":"970:5:18","nodeType":"VariableDeclaration","scope":2909,"src":"963:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":2888,"nodeType":"UserDefinedTypeName","pathNode":{"id":2887,"name":"IERC20","nameLocations":["963:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"963:6:18"},"referencedDeclaration":2840,"src":"963:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"to","nameLocation":"985:2:18","nodeType":"VariableDeclaration","scope":2909,"src":"977:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2890,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"value","nameLocation":"997:5:18","nodeType":"VariableDeclaration","scope":2909,"src":"989:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:18"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[],"src":"1013:0:18"},"scope":3252,"src":"941:175:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2935,"nodeType":"Block","src":"1445:113:18","statements":[{"expression":{"arguments":[{"id":2923,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"1475:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2926,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"1505:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:18","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2839,"src":"1505:18:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:18","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2929,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1534:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2930,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"1540:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"1544:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2924,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2922,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"1455:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2934,"nodeType":"ExpressionStatement","src":"1455:96:18"}]},"documentation":{"id":2910,"nodeType":"StructuredDocumentation","src":"1122:228:18","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":2936,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:18","nodeType":"FunctionDefinition","parameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2913,"mutability":"mutable","name":"token","nameLocation":"1388:5:18","nodeType":"VariableDeclaration","scope":2936,"src":"1381:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":2912,"nodeType":"UserDefinedTypeName","pathNode":{"id":2911,"name":"IERC20","nameLocations":["1381:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"1381:6:18"},"referencedDeclaration":2840,"src":"1381:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2915,"mutability":"mutable","name":"from","nameLocation":"1403:4:18","nodeType":"VariableDeclaration","scope":2936,"src":"1395:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2914,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2917,"mutability":"mutable","name":"to","nameLocation":"1417:2:18","nodeType":"VariableDeclaration","scope":2936,"src":"1409:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2916,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2919,"mutability":"mutable","name":"value","nameLocation":"1429:5:18","nodeType":"VariableDeclaration","scope":2936,"src":"1421:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:18"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[],"src":"1445:0:18"},"scope":3252,"src":"1355:203:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2979,"nodeType":"Block","src":"1894:497:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"2143:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2951,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2956,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}],"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2954,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:18","typeDescriptions":{}}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2958,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"2190:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2952,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2159:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:18","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2817,"src":"2159:15:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":2947,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2966,"nodeType":"ExpressionStatement","src":"2121:163:18"},{"expression":{"arguments":[{"id":2968,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2314:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2971,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2344:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:18","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"2344:13:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:18","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2974,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"2368:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2975,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"2377:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2969,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2967,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2294:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2978,"nodeType":"ExpressionStatement","src":"2294:90:18"}]},"documentation":{"id":2937,"nodeType":"StructuredDocumentation","src":"1564:249:18","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":2980,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:18","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"token","nameLocation":"1846:5:18","nodeType":"VariableDeclaration","scope":2980,"src":"1839:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":2939,"nodeType":"UserDefinedTypeName","pathNode":{"id":2938,"name":"IERC20","nameLocations":["1839:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"1839:6:18"},"referencedDeclaration":2840,"src":"1839:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"spender","nameLocation":"1861:7:18","nodeType":"VariableDeclaration","scope":2980,"src":"1853:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2941,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"value","nameLocation":"1878:5:18","nodeType":"VariableDeclaration","scope":2980,"src":"1870:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2943,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:18"},"returnParameters":{"id":2946,"nodeType":"ParameterList","parameters":[],"src":"1894:0:18"},"scope":3252,"src":"1818:573:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3016,"nodeType":"Block","src":"2668:194:18","statements":[{"assignments":[2992],"declarations":[{"constant":false,"id":2992,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:18","nodeType":"VariableDeclaration","scope":3016,"src":"2678:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3001,"initialValue":{"arguments":[{"arguments":[{"id":2997,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}],"id":2996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2995,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:18","typeDescriptions":{}}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2999,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2732:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2993,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2701:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:18","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2817,"src":"2701:15:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:18"},{"expression":{"arguments":[{"id":3003,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2770:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3006,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2800:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:18","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"2800:13:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:18","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3009,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2824:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3010,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2833:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2848:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3004,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3002,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2750:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3015,"nodeType":"ExpressionStatement","src":"2750:105:18"}]},"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"2397:180:18","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3017,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:18","nodeType":"FunctionDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"token","nameLocation":"2620:5:18","nodeType":"VariableDeclaration","scope":3017,"src":"2613:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":2983,"nodeType":"UserDefinedTypeName","pathNode":{"id":2982,"name":"IERC20","nameLocations":["2613:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"2613:6:18"},"referencedDeclaration":2840,"src":"2613:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"spender","nameLocation":"2635:7:18","nodeType":"VariableDeclaration","scope":3017,"src":"2627:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2985,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"value","nameLocation":"2652:5:18","nodeType":"VariableDeclaration","scope":3017,"src":"2644:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2987,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:18"},"returnParameters":{"id":2990,"nodeType":"ParameterList","parameters":[],"src":"2668:0:18"},"scope":3252,"src":"2582:280:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3061,"nodeType":"Block","src":"3139:321:18","statements":[{"id":3060,"nodeType":"UncheckedBlock","src":"3149:305:18","statements":[{"assignments":[3029],"declarations":[{"constant":false,"id":3029,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:18","nodeType":"VariableDeclaration","scope":3060,"src":"3173:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3038,"initialValue":{"arguments":[{"arguments":[{"id":3034,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3252","typeString":"library SafeERC20"}],"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3032,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:18","typeDescriptions":{}}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3036,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"3227:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3030,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"3196:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:18","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2817,"src":"3196:15:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3040,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3257:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"3273:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3045,"nodeType":"ExpressionStatement","src":"3249:75:18"},{"expression":{"arguments":[{"id":3047,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"3358:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3050,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"3388:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:18","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"3388:13:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:18","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3053,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"3412:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3054,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3421:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"3436:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3048,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3046,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"3338:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3059,"nodeType":"ExpressionStatement","src":"3338:105:18"}]}]},"documentation":{"id":3018,"nodeType":"StructuredDocumentation","src":"2868:180:18","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:18","nodeType":"FunctionDefinition","parameters":{"id":3026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"token","nameLocation":"3091:5:18","nodeType":"VariableDeclaration","scope":3062,"src":"3084:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":3020,"nodeType":"UserDefinedTypeName","pathNode":{"id":3019,"name":"IERC20","nameLocations":["3084:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"3084:6:18"},"referencedDeclaration":2840,"src":"3084:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"spender","nameLocation":"3106:7:18","nodeType":"VariableDeclaration","scope":3062,"src":"3098:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3022,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"value","nameLocation":"3123:5:18","nodeType":"VariableDeclaration","scope":3062,"src":"3115:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:18"},"returnParameters":{"id":3027,"nodeType":"ParameterList","parameters":[],"src":"3139:0:18"},"scope":3252,"src":"3053:407:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3108,"nodeType":"Block","src":"3856:333:18","statements":[{"assignments":[3074],"declarations":[{"constant":false,"id":3074,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:18","nodeType":"VariableDeclaration","scope":3108,"src":"3866:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3073,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3083,"initialValue":{"arguments":[{"expression":{"expression":{"id":3077,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"3917:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:18","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"3917:13:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:18","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3080,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"3941:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3950:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3075,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:18"},{"condition":{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:18","subExpression":{"arguments":[{"id":3085,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"3996:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"id":3086,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"4003:12:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3084,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"3972:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3107,"nodeType":"IfStatement","src":"3967:216:18","trueBody":{"id":3106,"nodeType":"Block","src":"4018:165:18","statements":[{"expression":{"arguments":[{"id":3090,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"4052:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3093,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"4082:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:18","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"4082:13:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:18","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3096,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"4106:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3091,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3089,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"4032:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3100,"nodeType":"ExpressionStatement","src":"4032:86:18"},{"expression":{"arguments":[{"id":3102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"4152:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},{"id":3103,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"4159:12:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3101,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"4132:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2840_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3105,"nodeType":"ExpressionStatement","src":"4132:40:18"}]}}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"3466:308:18","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":3109,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:18","nodeType":"FunctionDefinition","parameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"token","nameLocation":"3808:5:18","nodeType":"VariableDeclaration","scope":3109,"src":"3801:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":3065,"nodeType":"UserDefinedTypeName","pathNode":{"id":3064,"name":"IERC20","nameLocations":["3801:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"3801:6:18"},"referencedDeclaration":2840,"src":"3801:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"spender","nameLocation":"3823:7:18","nodeType":"VariableDeclaration","scope":3109,"src":"3815:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3067,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"value","nameLocation":"3840:5:18","nodeType":"VariableDeclaration","scope":3109,"src":"3832:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3069,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:18"},"returnParameters":{"id":3072,"nodeType":"ParameterList","parameters":[],"src":"3856:0:18"},"scope":3252,"src":"3779:410:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3165,"nodeType":"Block","src":"4556:257:18","statements":[{"assignments":[3131],"declarations":[{"constant":false,"id":3131,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:18","nodeType":"VariableDeclaration","scope":3165,"src":"4566:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3130,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3136,"initialValue":{"arguments":[{"id":3134,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"4601:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3132,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"4588:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2876","typeString":"contract IERC20Permit"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:18","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2869,"src":"4588:12:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:18"},{"expression":{"arguments":[{"id":3140,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"4630:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3141,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"4637:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"4646:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3143,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"4653:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3144,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"4663:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3145,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4666:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3146,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"4669:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3137,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"4617:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2876","typeString":"contract IERC20Permit"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:18","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2861,"src":"4617:12:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3148,"nodeType":"ExpressionStatement","src":"4617:54:18"},{"assignments":[3150],"declarations":[{"constant":false,"id":3150,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:18","nodeType":"VariableDeclaration","scope":3165,"src":"4681:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3155,"initialValue":{"arguments":[{"id":3153,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"4715:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3151,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"4702:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2876","typeString":"contract IERC20Permit"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:18","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2869,"src":"4702:12:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4739:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3158,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"4753:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":3156,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3164,"nodeType":"ExpressionStatement","src":"4731:75:18"}]},"documentation":{"id":3110,"nodeType":"StructuredDocumentation","src":"4195:141:18","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":3166,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:18","nodeType":"FunctionDefinition","parameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"mutability":"mutable","name":"token","nameLocation":"4383:5:18","nodeType":"VariableDeclaration","scope":3166,"src":"4370:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2876","typeString":"contract IERC20Permit"},"typeName":{"id":3112,"nodeType":"UserDefinedTypeName","pathNode":{"id":3111,"name":"IERC20Permit","nameLocations":["4370:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":2876,"src":"4370:12:18"},"referencedDeclaration":2876,"src":"4370:12:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2876","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":3115,"mutability":"mutable","name":"owner","nameLocation":"4406:5:18","nodeType":"VariableDeclaration","scope":3166,"src":"4398:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3117,"mutability":"mutable","name":"spender","nameLocation":"4429:7:18","nodeType":"VariableDeclaration","scope":3166,"src":"4421:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3116,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"value","nameLocation":"4454:5:18","nodeType":"VariableDeclaration","scope":3166,"src":"4446:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3121,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:18","nodeType":"VariableDeclaration","scope":3166,"src":"4469:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"v","nameLocation":"4501:1:18","nodeType":"VariableDeclaration","scope":3166,"src":"4495:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3122,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3125,"mutability":"mutable","name":"r","nameLocation":"4520:1:18","nodeType":"VariableDeclaration","scope":3166,"src":"4512:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3127,"mutability":"mutable","name":"s","nameLocation":"4539:1:18","nodeType":"VariableDeclaration","scope":3166,"src":"4531:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:18"},"returnParameters":{"id":3129,"nodeType":"ParameterList","parameters":[],"src":"4556:0:18"},"scope":3252,"src":"4341:472:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3202,"nodeType":"Block","src":"5266:572:18","statements":[{"assignments":[3176],"declarations":[{"constant":false,"id":3176,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:18","nodeType":"VariableDeclaration","scope":3202,"src":"5615:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3175,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3185,"initialValue":{"arguments":[{"id":3182,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"5669:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3179,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"5649:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}],"id":3178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3177,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:18","typeDescriptions":{}}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:18","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3342,"src":"5641:27:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3187,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"5728:10:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:18","memberName":"length","nodeType":"MemberAccess","src":"5728:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3193,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"5765:10:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3194,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:18","typeDescriptions":{}}}],"id":3196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3191,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:18","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:18","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3186,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3201,"nodeType":"ExpressionStatement","src":"5720:111:18"}]},"documentation":{"id":3167,"nodeType":"StructuredDocumentation","src":"4819:372:18","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3203,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:18","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"token","nameLocation":"5232:5:18","nodeType":"VariableDeclaration","scope":3203,"src":"5225:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":3169,"nodeType":"UserDefinedTypeName","pathNode":{"id":3168,"name":"IERC20","nameLocations":["5225:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"5225:6:18"},"referencedDeclaration":2840,"src":"5225:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"data","nameLocation":"5252:4:18","nodeType":"VariableDeclaration","scope":3203,"src":"5239:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3171,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:18"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"5266:0:18"},"scope":3252,"src":"5196:642:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3250,"nodeType":"Block","src":"6428:505:18","statements":[{"assignments":[3215,3217],"declarations":[{"constant":false,"id":3215,"mutability":"mutable","name":"success","nameLocation":"6729:7:18","nodeType":"VariableDeclaration","scope":3250,"src":"6724:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3214,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3217,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:18","nodeType":"VariableDeclaration","scope":3250,"src":"6738:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3216,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3225,"initialValue":{"arguments":[{"id":3223,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"6785:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3220,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"6773:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}],"id":3219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3218,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:18","typeDescriptions":{}}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:18","memberName":"call","nodeType":"MemberAccess","src":"6765:19:18","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:18"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"6819:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3227,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"6831:10:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:18","memberName":"length","nodeType":"MemberAccess","src":"6831:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3233,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"6868:10:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3234,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:18","typeDescriptions":{}}}],"id":3236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3231,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:18","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:18","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":3245,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"6919:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}],"id":3244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3243,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:18","typeDescriptions":{}}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3241,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"6892:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3582_$","typeString":"type(library Address)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:18","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3270,"src":"6892:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3213,"id":3249,"nodeType":"Return","src":"6800:126:18"}]},"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"5844:490:18","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":3251,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:18","nodeType":"FunctionDefinition","parameters":{"id":3210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"token","nameLocation":"6379:5:18","nodeType":"VariableDeclaration","scope":3251,"src":"6372:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":3206,"nodeType":"UserDefinedTypeName","pathNode":{"id":3205,"name":"IERC20","nameLocations":["6372:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"6372:6:18"},"referencedDeclaration":2840,"src":"6372:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"data","nameLocation":"6399:4:18","nodeType":"VariableDeclaration","scope":3251,"src":"6386:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3208,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:18"},"returnParameters":{"id":3213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3251,"src":"6422:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3211,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:18"},"scope":3252,"src":"6339:594:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3253,"src":"701:6234:18","usedErrors":[]}],"src":"115:6821:18"},"id":18},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3582]},"id":3583,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3254,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3255,"nodeType":"StructuredDocumentation","src":"126:67:19","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3582,"linearizedBaseContracts":[3582],"name":"Address","nameLocation":"202:7:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3269,"nodeType":"Block","src":"1478:254:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3263,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1702:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:19","memberName":"code","nodeType":"MemberAccess","src":"1702:12:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:19","memberName":"length","nodeType":"MemberAccess","src":"1702:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3262,"id":3268,"nodeType":"Return","src":"1695:30:19"}]},"documentation":{"id":3256,"nodeType":"StructuredDocumentation","src":"216:1191:19","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:19","nodeType":"FunctionDefinition","parameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3258,"mutability":"mutable","name":"account","nameLocation":"1440:7:19","nodeType":"VariableDeclaration","scope":3270,"src":"1432:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:19"},"returnParameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3270,"src":"1472:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3260,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:19"},"scope":3582,"src":"1412:320:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3303,"nodeType":"Block","src":"2718:241:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3281,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3582","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3582","typeString":"library Address"}],"id":3280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3279,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:19","typeDescriptions":{}}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:19","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3284,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2761:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3278,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3288,"nodeType":"ExpressionStatement","src":"2728:73:19"},{"assignments":[3290,null],"declarations":[{"constant":false,"id":3290,"mutability":"mutable","name":"success","nameLocation":"2818:7:19","nodeType":"VariableDeclaration","scope":3303,"src":"2813:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3289,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3297,"initialValue":{"arguments":[{"hexValue":"","id":3295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3291,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"2831:9:19","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:19","memberName":"call","nodeType":"MemberAccess","src":"2831:14:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3293,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2853:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:19"},{"expression":{"arguments":[{"id":3299,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3290,"src":"2882:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3298,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3302,"nodeType":"ExpressionStatement","src":"2874:78:19"}]},"documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"1738:904:19","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3304,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:19","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:19","nodeType":"VariableDeclaration","scope":3304,"src":"2666:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:19","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3275,"mutability":"mutable","name":"amount","nameLocation":"2701:6:19","nodeType":"VariableDeclaration","scope":3304,"src":"2693:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3274,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:19"},"returnParameters":{"id":3277,"nodeType":"ParameterList","parameters":[],"src":"2718:0:19"},"scope":3582,"src":"2647:312:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3321,"nodeType":"Block","src":"3790:96:19","statements":[{"expression":{"arguments":[{"id":3315,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"3829:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3316,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"3837:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3314,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3362,3406],"referencedDeclaration":3406,"src":"3807:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3313,"id":3320,"nodeType":"Return","src":"3800:79:19"}]},"documentation":{"id":3305,"nodeType":"StructuredDocumentation","src":"2965:731:19","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3322,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:19","nodeType":"FunctionDefinition","parameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3307,"mutability":"mutable","name":"target","nameLocation":"3731:6:19","nodeType":"VariableDeclaration","scope":3322,"src":"3723:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3306,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3309,"mutability":"mutable","name":"data","nameLocation":"3752:4:19","nodeType":"VariableDeclaration","scope":3322,"src":"3739:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3308,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:19"},"returnParameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3322,"src":"3776:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3311,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:19"},"scope":3582,"src":"3701:185:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3341,"nodeType":"Block","src":"4255:76:19","statements":[{"expression":{"arguments":[{"id":3335,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"4294:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3336,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"4302:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3338,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"4311:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3334,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3362,3406],"referencedDeclaration":3406,"src":"4272:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3333,"id":3340,"nodeType":"Return","src":"4265:59:19"}]},"documentation":{"id":3323,"nodeType":"StructuredDocumentation","src":"3892:211:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3342,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:19","nodeType":"FunctionDefinition","parameters":{"id":3330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3325,"mutability":"mutable","name":"target","nameLocation":"4147:6:19","nodeType":"VariableDeclaration","scope":3342,"src":"4139:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3324,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3327,"mutability":"mutable","name":"data","nameLocation":"4176:4:19","nodeType":"VariableDeclaration","scope":3342,"src":"4163:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3326,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3329,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:19","nodeType":"VariableDeclaration","scope":3342,"src":"4190:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3328,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:19"},"returnParameters":{"id":3333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3342,"src":"4241:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3331,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:19"},"scope":3582,"src":"4108:223:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3361,"nodeType":"Block","src":"4806:111:19","statements":[{"expression":{"arguments":[{"id":3355,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"4845:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3356,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"4853:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3357,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"4859:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3354,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3362,3406],"referencedDeclaration":3406,"src":"4823:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3353,"id":3360,"nodeType":"Return","src":"4816:94:19"}]},"documentation":{"id":3343,"nodeType":"StructuredDocumentation","src":"4337:351:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3362,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:19","nodeType":"FunctionDefinition","parameters":{"id":3350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"target","nameLocation":"4732:6:19","nodeType":"VariableDeclaration","scope":3362,"src":"4724:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"data","nameLocation":"4753:4:19","nodeType":"VariableDeclaration","scope":3362,"src":"4740:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3346,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3349,"mutability":"mutable","name":"value","nameLocation":"4767:5:19","nodeType":"VariableDeclaration","scope":3362,"src":"4759:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3348,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:19"},"returnParameters":{"id":3353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3362,"src":"4792:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3351,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:19"},"scope":3582,"src":"4693:224:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3405,"nodeType":"Block","src":"5344:267:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3379,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3582","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3582","typeString":"library Address"}],"id":3378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:19","typeDescriptions":{}}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:19","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"5387:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3376,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3386,"nodeType":"ExpressionStatement","src":"5354:81:19"},{"assignments":[3388,3390],"declarations":[{"constant":false,"id":3388,"mutability":"mutable","name":"success","nameLocation":"5451:7:19","nodeType":"VariableDeclaration","scope":3405,"src":"5446:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3387,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3390,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:19","nodeType":"VariableDeclaration","scope":3405,"src":"5460:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3389,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3397,"initialValue":{"arguments":[{"id":3395,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"5513:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3391,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5487:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:19","memberName":"call","nodeType":"MemberAccess","src":"5487:11:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"5506:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:19"},{"expression":{"arguments":[{"id":3399,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5562:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3400,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"5570:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3401,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"5579:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3402,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"5591:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3398,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"5535:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3375,"id":3404,"nodeType":"Return","src":"5528:76:19"}]},"documentation":{"id":3363,"nodeType":"StructuredDocumentation","src":"4923:237:19","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3406,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:19","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"target","nameLocation":"5213:6:19","nodeType":"VariableDeclaration","scope":3406,"src":"5205:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3364,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"data","nameLocation":"5242:4:19","nodeType":"VariableDeclaration","scope":3406,"src":"5229:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3366,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"value","nameLocation":"5264:5:19","nodeType":"VariableDeclaration","scope":3406,"src":"5256:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:19","nodeType":"VariableDeclaration","scope":3406,"src":"5279:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3370,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:19"},"returnParameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"5330:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3373,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:19"},"scope":3582,"src":"5165:446:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3422,"nodeType":"Block","src":"5888:97:19","statements":[{"expression":{"arguments":[{"id":3417,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"5924:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3418,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"5932:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3416,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3423,3452],"referencedDeclaration":3452,"src":"5905:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3415,"id":3421,"nodeType":"Return","src":"5898:80:19"}]},"documentation":{"id":3407,"nodeType":"StructuredDocumentation","src":"5617:166:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:19","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"target","nameLocation":"5824:6:19","nodeType":"VariableDeclaration","scope":3423,"src":"5816:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"data","nameLocation":"5845:4:19","nodeType":"VariableDeclaration","scope":3423,"src":"5832:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3410,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:19"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3423,"src":"5874:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3413,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:19"},"scope":3582,"src":"5788:197:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3451,"nodeType":"Block","src":"6327:168:19","statements":[{"assignments":[3436,3438],"declarations":[{"constant":false,"id":3436,"mutability":"mutable","name":"success","nameLocation":"6343:7:19","nodeType":"VariableDeclaration","scope":3451,"src":"6338:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3435,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:19","nodeType":"VariableDeclaration","scope":3451,"src":"6352:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3437,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3443,"initialValue":{"arguments":[{"id":3441,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"6397:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3439,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"6379:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:19","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:19","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:19"},{"expression":{"arguments":[{"id":3445,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"6446:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3446,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"6454:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3447,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"6463:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3448,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"6475:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3444,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"6419:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3434,"id":3450,"nodeType":"Return","src":"6412:76:19"}]},"documentation":{"id":3424,"nodeType":"StructuredDocumentation","src":"5991:173:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3452,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:19","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"target","nameLocation":"6214:6:19","nodeType":"VariableDeclaration","scope":3452,"src":"6206:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3425,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"data","nameLocation":"6243:4:19","nodeType":"VariableDeclaration","scope":3452,"src":"6230:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3427,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:19","nodeType":"VariableDeclaration","scope":3452,"src":"6257:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3429,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:19"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"6313:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3432,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:19"},"scope":3582,"src":"6169:326:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3468,"nodeType":"Block","src":"6771:101:19","statements":[{"expression":{"arguments":[{"id":3463,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"6809:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3464,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"6817:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3462,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3469,3498],"referencedDeclaration":3498,"src":"6788:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3461,"id":3467,"nodeType":"Return","src":"6781:84:19"}]},"documentation":{"id":3453,"nodeType":"StructuredDocumentation","src":"6501:168:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3469,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:19","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"target","nameLocation":"6712:6:19","nodeType":"VariableDeclaration","scope":3469,"src":"6704:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3454,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"data","nameLocation":"6733:4:19","nodeType":"VariableDeclaration","scope":3469,"src":"6720:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3456,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:19"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3469,"src":"6757:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3459,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:19"},"scope":3582,"src":"6674:198:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3497,"nodeType":"Block","src":"7213:170:19","statements":[{"assignments":[3482,3484],"declarations":[{"constant":false,"id":3482,"mutability":"mutable","name":"success","nameLocation":"7229:7:19","nodeType":"VariableDeclaration","scope":3497,"src":"7224:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3481,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3484,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:19","nodeType":"VariableDeclaration","scope":3497,"src":"7238:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3483,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3489,"initialValue":{"arguments":[{"id":3487,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"7285:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3485,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"7265:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:19","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:19","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:19"},{"expression":{"arguments":[{"id":3491,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"7334:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3492,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"7342:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3493,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"7351:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3494,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"7363:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3490,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7307:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3480,"id":3496,"nodeType":"Return","src":"7300:76:19"}]},"documentation":{"id":3470,"nodeType":"StructuredDocumentation","src":"6878:175:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3498,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:19","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"mutability":"mutable","name":"target","nameLocation":"7105:6:19","nodeType":"VariableDeclaration","scope":3498,"src":"7097:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"data","nameLocation":"7134:4:19","nodeType":"VariableDeclaration","scope":3498,"src":"7121:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3473,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:19","nodeType":"VariableDeclaration","scope":3498,"src":"7148:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3475,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:19"},"returnParameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3498,"src":"7199:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3478,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:19"},"scope":3582,"src":"7058:325:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3536,"nodeType":"Block","src":"7865:434:19","statements":[{"condition":{"id":3512,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"7879:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3534,"nodeType":"Block","src":"8235:58:19","statements":[{"expression":{"arguments":[{"id":3530,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"8257:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3531,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"8269:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3529,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"8249:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3533,"nodeType":"ExpressionStatement","src":"8249:33:19"}]},"id":3535,"nodeType":"IfStatement","src":"7875:418:19","trueBody":{"id":3528,"nodeType":"Block","src":"7888:341:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3513,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"7906:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:19","memberName":"length","nodeType":"MemberAccess","src":"7906:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3525,"nodeType":"IfStatement","src":"7902:286:19","trueBody":{"id":3524,"nodeType":"Block","src":"7930:258:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":3519,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"8132:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3518,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"8121:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3523,"nodeType":"ExpressionStatement","src":"8113:60:19"}]}},{"expression":{"id":3526,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"8208:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3511,"id":3527,"nodeType":"Return","src":"8201:17:19"}]}}]},"documentation":{"id":3499,"nodeType":"StructuredDocumentation","src":"7389:277:19","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3537,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:19","nodeType":"FunctionDefinition","parameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3501,"mutability":"mutable","name":"target","nameLocation":"7724:6:19","nodeType":"VariableDeclaration","scope":3537,"src":"7716:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3500,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"success","nameLocation":"7745:7:19","nodeType":"VariableDeclaration","scope":3537,"src":"7740:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3502,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3505,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:19","nodeType":"VariableDeclaration","scope":3537,"src":"7762:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3504,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3507,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:19","nodeType":"VariableDeclaration","scope":3537,"src":"7795:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3506,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:19"},"returnParameters":{"id":3511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3537,"src":"7851:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3509,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:19"},"scope":3582,"src":"7671:628:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3560,"nodeType":"Block","src":"8680:135:19","statements":[{"condition":{"id":3549,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"8694:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3558,"nodeType":"Block","src":"8751:58:19","statements":[{"expression":{"arguments":[{"id":3554,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"8773:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3555,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"8785:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3553,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"8765:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3557,"nodeType":"ExpressionStatement","src":"8765:33:19"}]},"id":3559,"nodeType":"IfStatement","src":"8690:119:19","trueBody":{"id":3552,"nodeType":"Block","src":"8703:42:19","statements":[{"expression":{"id":3550,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"8724:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3548,"id":3551,"nodeType":"Return","src":"8717:17:19"}]}}]},"documentation":{"id":3538,"nodeType":"StructuredDocumentation","src":"8305:210:19","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3561,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:19","nodeType":"FunctionDefinition","parameters":{"id":3545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3540,"mutability":"mutable","name":"success","nameLocation":"8560:7:19","nodeType":"VariableDeclaration","scope":3561,"src":"8555:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3539,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:19","nodeType":"VariableDeclaration","scope":3561,"src":"8577:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3541,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:19","nodeType":"VariableDeclaration","scope":3561,"src":"8610:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3543,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:19"},"returnParameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3561,"src":"8666:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3546,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:19"},"scope":3582,"src":"8520:295:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3580,"nodeType":"Block","src":"8904:457:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3568,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"8980:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:19","memberName":"length","nodeType":"MemberAccess","src":"8980:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3578,"nodeType":"Block","src":"9310:45:19","statements":[{"expression":{"arguments":[{"id":3575,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9331:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3574,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3577,"nodeType":"ExpressionStatement","src":"9324:20:19"}]},"id":3579,"nodeType":"IfStatement","src":"8976:379:19","trueBody":{"id":3573,"nodeType":"Block","src":"9003:301:19","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:19","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:19","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:19"},"nodeType":"YulFunctionCall","src":"9202:17:19"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:19","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:19"},"nodeType":"YulFunctionCall","src":"9243:19:19"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:19"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:19"},"nodeType":"YulFunctionCall","src":"9236:44:19"},"nodeType":"YulExpressionStatement","src":"9236:44:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3563,"isOffset":false,"isSlot":false,"src":"9208:10:19","valueSize":1},{"declaration":3563,"isOffset":false,"isSlot":false,"src":"9251:10:19","valueSize":1}],"id":3572,"nodeType":"InlineAssembly","src":"9152:142:19"}]}}]},"id":3581,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:19","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:19","nodeType":"VariableDeclaration","scope":3581,"src":"8838:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3562,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3565,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:19","nodeType":"VariableDeclaration","scope":3581,"src":"8863:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3564,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:19"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[],"src":"8904:0:19"},"scope":3582,"src":"8821:540:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3583,"src":"194:9169:19","usedErrors":[]}],"src":"101:9263:19"},"id":19},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3604]},"id":3605,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3584,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:20"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3585,"nodeType":"StructuredDocumentation","src":"111:496:20","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3604,"linearizedBaseContracts":[3604],"name":"Context","nameLocation":"626:7:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":3593,"nodeType":"Block","src":"702:34:20","statements":[{"expression":{"expression":{"id":3590,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:20","memberName":"sender","nodeType":"MemberAccess","src":"719:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3589,"id":3592,"nodeType":"Return","src":"712:17:20"}]},"id":3594,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:20","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[],"src":"659:2:20"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3594,"src":"693:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:20"},"scope":3604,"src":"640:96:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3602,"nodeType":"Block","src":"809:32:20","statements":[{"expression":{"expression":{"id":3599,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:20","memberName":"data","nodeType":"MemberAccess","src":"826:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3598,"id":3601,"nodeType":"Return","src":"819:15:20"}]},"id":3603,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:20","nodeType":"FunctionDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[],"src":"759:2:20"},"returnParameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3603,"src":"793:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3596,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:20"},"scope":3604,"src":"742:99:20","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3605,"src":"608:235:20","usedErrors":[]}],"src":"86:758:20"},"id":20},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4735],"SignedMath":[4840],"Strings":[3833]},"id":3834,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3606,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:21"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3834,"sourceUnit":4736,"src":"126:25:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3608,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3834,"sourceUnit":4841,"src":"152:31:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3609,"nodeType":"StructuredDocumentation","src":"185:34:21","text":" @dev String operations."},"fullyImplemented":true,"id":3833,"linearizedBaseContracts":[3833],"name":"Strings","nameLocation":"228:7:21","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3612,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:21","nodeType":"VariableDeclaration","scope":3833,"src":"242:54:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3610,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3615,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:21","nodeType":"VariableDeclaration","scope":3833,"src":"302:43:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3613,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3662,"nodeType":"Block","src":"518:625:21","statements":[{"id":3661,"nodeType":"UncheckedBlock","src":"528:609:21","statements":[{"assignments":[3624],"declarations":[{"constant":false,"id":3624,"mutability":"mutable","name":"length","nameLocation":"560:6:21","nodeType":"VariableDeclaration","scope":3661,"src":"552:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3623,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3631,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"580:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3625,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"569:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4735_$","typeString":"type(library Math)"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:21","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4572,"src":"569:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:21"},{"assignments":[3633],"declarations":[{"constant":false,"id":3633,"mutability":"mutable","name":"buffer","nameLocation":"618:6:21","nodeType":"VariableDeclaration","scope":3661,"src":"604:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3632,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3638,"initialValue":{"arguments":[{"id":3636,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"638:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3634,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:21"},{"assignments":[3640],"declarations":[{"constant":false,"id":3640,"mutability":"mutable","name":"ptr","nameLocation":"667:3:21","nodeType":"VariableDeclaration","scope":3661,"src":"659:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3641,"nodeType":"VariableDeclarationStatement","src":"659:11:21"},{"AST":{"nodeType":"YulBlock","src":"740:67:21","statements":[{"nodeType":"YulAssignment","src":"758:35:21","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:21","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:21"},"nodeType":"YulFunctionCall","src":"777:15:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:21"},"nodeType":"YulFunctionCall","src":"765:28:21"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3633,"isOffset":false,"isSlot":false,"src":"769:6:21","valueSize":1},{"declaration":3624,"isOffset":false,"isSlot":false,"src":"785:6:21","valueSize":1},{"declaration":3640,"isOffset":false,"isSlot":false,"src":"758:3:21","valueSize":1}],"id":3642,"nodeType":"InlineAssembly","src":"731:76:21"},{"body":{"id":3657,"nodeType":"Block","src":"833:267:21","statements":[{"expression":{"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:21","subExpression":{"id":3644,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"851:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"nodeType":"ExpressionStatement","src":"851:5:21"},{"AST":{"nodeType":"YulBlock","src":"934:84:21","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:21","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:21"},"nodeType":"YulFunctionCall","src":"974:14:21"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:21"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:21"},"nodeType":"YulFunctionCall","src":"969:30:21"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:21"},"nodeType":"YulFunctionCall","src":"956:44:21"},"nodeType":"YulExpressionStatement","src":"956:44:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3612,"isOffset":false,"isSlot":false,"src":"990:8:21","valueSize":1},{"declaration":3640,"isOffset":false,"isSlot":false,"src":"964:3:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"978:5:21","valueSize":1}],"id":3647,"nodeType":"InlineAssembly","src":"925:93:21"},{"expression":{"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"1035:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3651,"nodeType":"ExpressionStatement","src":"1035:11:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"1068:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3656,"nodeType":"IfStatement","src":"1064:21:21","trueBody":{"id":3655,"nodeType":"Break","src":"1080:5:21"}}]},"condition":{"hexValue":"74727565","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3658,"nodeType":"WhileStatement","src":"820:280:21"},{"expression":{"id":3659,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"1120:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3622,"id":3660,"nodeType":"Return","src":"1113:13:21"}]}]},"documentation":{"id":3616,"nodeType":"StructuredDocumentation","src":"352:90:21","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3663,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:21","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"value","nameLocation":"473:5:21","nodeType":"VariableDeclaration","scope":3663,"src":"465:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:21"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3663,"src":"503:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3620,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:21"},"scope":3833,"src":"447:696:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3690,"nodeType":"Block","src":"1313:103:21","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"1354:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:21","trueExpression":{"hexValue":"2d","id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"1400:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3682,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"1385:10:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4840_$","typeString":"type(library SignedMath)"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:21","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4839,"src":"1385:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3681,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3663,3691],"referencedDeclaration":3663,"src":"1376:8:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3673,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:21","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:21","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3671,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:21","typeDescriptions":{}}},"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3670,"id":3689,"nodeType":"Return","src":"1323:86:21"}]},"documentation":{"id":3664,"nodeType":"StructuredDocumentation","src":"1149:89:21","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3691,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:21","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"value","nameLocation":"1268:5:21","nodeType":"VariableDeclaration","scope":3691,"src":"1261:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3665,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:21"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3691,"src":"1298:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3668,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:21"},"scope":3833,"src":"1243:173:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3710,"nodeType":"Block","src":"1595:100:21","statements":[{"id":3709,"nodeType":"UncheckedBlock","src":"1605:84:21","statements":[{"expression":{"arguments":[{"id":3700,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"1648:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"1667:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3701,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"1655:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4735_$","typeString":"type(library Math)"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:21","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4695,"src":"1655:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3699,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3711,3787,3807],"referencedDeclaration":3787,"src":"1636:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3698,"id":3708,"nodeType":"Return","src":"1629:49:21"}]}]},"documentation":{"id":3692,"nodeType":"StructuredDocumentation","src":"1422:94:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3711,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:21","nodeType":"FunctionDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"value","nameLocation":"1550:5:21","nodeType":"VariableDeclaration","scope":3711,"src":"1542:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:21"},"returnParameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3711,"src":"1580:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3696,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:21"},"scope":3833,"src":"1521:174:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3786,"nodeType":"Block","src":"1908:347:21","statements":[{"assignments":[3722],"declarations":[{"constant":false,"id":3722,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:21","nodeType":"VariableDeclaration","scope":3786,"src":"1918:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3721,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3731,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3726,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"1954:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3723,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:21"},{"expression":{"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3732,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"1975:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3734,"indexExpression":{"hexValue":"30","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3737,"nodeType":"ExpressionStatement","src":"1975:15:21"},{"expression":{"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3738,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2000:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3740,"indexExpression":{"hexValue":"31","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3743,"nodeType":"ExpressionStatement","src":"2000:15:21"},{"body":{"id":3772,"nodeType":"Block","src":"2070:83:21","statements":[{"expression":{"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3758,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2084:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3760,"indexExpression":{"id":3759,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"2091:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3761,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"2096:8:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3765,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2105:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:21","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3767,"nodeType":"ExpressionStatement","src":"2084:33:21"},{"expression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2131:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3771,"nodeType":"ExpressionStatement","src":"2131:11:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3752,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"2058:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3773,"initializationExpression":{"assignments":[3745],"declarations":[{"constant":false,"id":3745,"mutability":"mutable","name":"i","nameLocation":"2038:1:21","nodeType":"VariableDeclaration","scope":3773,"src":"2030:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3744,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3751,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3747,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2046:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:21"},"loopExpression":{"expression":{"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:21","subExpression":{"id":3755,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"2067:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3757,"nodeType":"ExpressionStatement","src":"2065:3:21"},"nodeType":"ForStatement","src":"2025:128:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2170:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3780,"nodeType":"ExpressionStatement","src":"2162:55:21"},{"expression":{"arguments":[{"id":3783,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"2241:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3781,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:21","typeDescriptions":{}}},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3720,"id":3785,"nodeType":"Return","src":"2227:21:21"}]},"documentation":{"id":3712,"nodeType":"StructuredDocumentation","src":"1701:112:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3787,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:21","nodeType":"FunctionDefinition","parameters":{"id":3717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"value","nameLocation":"1847:5:21","nodeType":"VariableDeclaration","scope":3787,"src":"1839:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3713,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3716,"mutability":"mutable","name":"length","nameLocation":"1862:6:21","nodeType":"VariableDeclaration","scope":3787,"src":"1854:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3715,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:21"},"returnParameters":{"id":3720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3787,"src":"1893:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3718,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:21"},"scope":3833,"src":"1818:437:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3806,"nodeType":"Block","src":"2480:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3800,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"2525:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3798,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:21","typeDescriptions":{}}},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3796,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:21","typeDescriptions":{}}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3803,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"2533:15:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3795,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3711,3787,3807],"referencedDeclaration":3787,"src":"2497:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3794,"id":3805,"nodeType":"Return","src":"2490:59:21"}]},"documentation":{"id":3788,"nodeType":"StructuredDocumentation","src":"2261:141:21","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3807,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:21","nodeType":"FunctionDefinition","parameters":{"id":3791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3790,"mutability":"mutable","name":"addr","nameLocation":"2436:4:21","nodeType":"VariableDeclaration","scope":3807,"src":"2428:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3789,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:21"},"returnParameters":{"id":3794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3807,"src":"2465:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3792,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:21"},"scope":3833,"src":"2407:149:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3831,"nodeType":"Block","src":"2711:66:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3820,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"2744:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3818,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:21","typeDescriptions":{}}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3817,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3826,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"2767:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3824,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:21","typeDescriptions":{}}},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3823,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3816,"id":3830,"nodeType":"Return","src":"2721:49:21"}]},"documentation":{"id":3808,"nodeType":"StructuredDocumentation","src":"2562:66:21","text":" @dev Returns true if the two strings are equal."},"id":3832,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:21","nodeType":"FunctionDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3810,"mutability":"mutable","name":"a","nameLocation":"2662:1:21","nodeType":"VariableDeclaration","scope":3832,"src":"2648:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3809,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3812,"mutability":"mutable","name":"b","nameLocation":"2679:1:21","nodeType":"VariableDeclaration","scope":3832,"src":"2665:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3811,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:21"},"returnParameters":{"id":3816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3832,"src":"2705:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3814,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:21"},"scope":3833,"src":"2633:144:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3834,"src":"220:2559:21","usedErrors":[]}],"src":"101:2679:21"},"id":21},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3857],"IERC165":[3869]},"id":3858,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3835,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:22"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":3870,"src":"124:23:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3838,"name":"IERC165","nameLocations":["754:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":3869,"src":"754:7:22"},"id":3839,"nodeType":"InheritanceSpecifier","src":"754:7:22"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3837,"nodeType":"StructuredDocumentation","src":"149:576:22","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3857,"linearizedBaseContracts":[3857,3869],"name":"ERC165","nameLocation":"744:6:22","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3868],"body":{"id":3855,"nodeType":"Block","src":"920:64:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3848,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"937:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3850,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"957:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3869_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3869_$","typeString":"type(contract IERC165)"}],"id":3849,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3869","typeString":"type(contract IERC165)"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3847,"id":3854,"nodeType":"Return","src":"930:47:22"}]},"documentation":{"id":3840,"nodeType":"StructuredDocumentation","src":"768:56:22","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3856,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:22","nodeType":"FunctionDefinition","overrides":{"id":3844,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:22"},"parameters":{"id":3843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3842,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:22","nodeType":"VariableDeclaration","scope":3856,"src":"856:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3841,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:22"},"returnParameters":{"id":3847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3856,"src":"914:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3845,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:22"},"scope":3857,"src":"829:155:22","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3858,"src":"726:260:22","usedErrors":[]}],"src":"99:888:22"},"id":22},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3869]},"id":3870,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3859,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3860,"nodeType":"StructuredDocumentation","src":"125:279:23","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3869,"linearizedBaseContracts":[3869],"name":"IERC165","nameLocation":"415:7:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3861,"nodeType":"StructuredDocumentation","src":"429:340:23","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3868,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:23","nodeType":"FunctionDefinition","parameters":{"id":3864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3863,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:23","nodeType":"VariableDeclaration","scope":3868,"src":"801:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3862,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:23"},"returnParameters":{"id":3867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3868,"src":"844:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3865,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:23"},"scope":3869,"src":"774:76:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3870,"src":"405:447:23","usedErrors":[]}],"src":"100:753:23"},"id":23},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4735]},"id":4736,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3871,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3872,"nodeType":"StructuredDocumentation","src":"128:73:24","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4735,"linearizedBaseContracts":[4735],"name":"Math","nameLocation":"210:4:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3876,"members":[{"id":3873,"name":"Down","nameLocation":"245:4:24","nodeType":"EnumValue","src":"245:4:24"},{"id":3874,"name":"Up","nameLocation":"287:2:24","nodeType":"EnumValue","src":"287:2:24"},{"id":3875,"name":"Zero","nameLocation":"318:4:24","nodeType":"EnumValue","src":"318:4:24"}],"name":"Rounding","nameLocation":"226:8:24","nodeType":"EnumDefinition","src":"221:122:24"},{"body":{"id":3893,"nodeType":"Block","src":"480:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"497:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"501:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3890,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"509:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:24","trueExpression":{"id":3889,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"505:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3885,"id":3892,"nodeType":"Return","src":"490:20:24"}]},"documentation":{"id":3877,"nodeType":"StructuredDocumentation","src":"349:59:24","text":" @dev Returns the largest of two numbers."},"id":3894,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:24","nodeType":"FunctionDefinition","parameters":{"id":3882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"mutability":"mutable","name":"a","nameLocation":"434:1:24","nodeType":"VariableDeclaration","scope":3894,"src":"426:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3881,"mutability":"mutable","name":"b","nameLocation":"445:1:24","nodeType":"VariableDeclaration","scope":3894,"src":"437:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3880,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:24"},"returnParameters":{"id":3885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3894,"src":"471:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3883,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:24"},"scope":4735,"src":"413:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3911,"nodeType":"Block","src":"655:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3897,"src":"672:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"676:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3908,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"684:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:24","trueExpression":{"id":3907,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3897,"src":"680:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3903,"id":3910,"nodeType":"Return","src":"665:20:24"}]},"documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"523:60:24","text":" @dev Returns the smallest of two numbers."},"id":3912,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:24","nodeType":"FunctionDefinition","parameters":{"id":3900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"a","nameLocation":"609:1:24","nodeType":"VariableDeclaration","scope":3912,"src":"601:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3899,"mutability":"mutable","name":"b","nameLocation":"620:1:24","nodeType":"VariableDeclaration","scope":3912,"src":"612:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3898,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:24"},"returnParameters":{"id":3903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3912,"src":"646:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:24"},"scope":4735,"src":"588:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3934,"nodeType":"Block","src":"876:82:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3915,"src":"931:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3923,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"935:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3915,"src":"941:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3927,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"945:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3929,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3921,"id":3933,"nodeType":"Return","src":"923:28:24"}]},"documentation":{"id":3913,"nodeType":"StructuredDocumentation","src":"698:102:24","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3935,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:24","nodeType":"FunctionDefinition","parameters":{"id":3918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3915,"mutability":"mutable","name":"a","nameLocation":"830:1:24","nodeType":"VariableDeclaration","scope":3935,"src":"822:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3914,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3917,"mutability":"mutable","name":"b","nameLocation":"841:1:24","nodeType":"VariableDeclaration","scope":3935,"src":"833:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3916,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:24"},"returnParameters":{"id":3921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3935,"src":"867:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3919,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:24"},"scope":4735,"src":"805:153:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3959,"nodeType":"Block","src":"1228:123:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3945,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"1316:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"1330:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3953,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"1339:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:24","trueExpression":{"hexValue":"30","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3944,"id":3958,"nodeType":"Return","src":"1309:35:24"}]},"documentation":{"id":3936,"nodeType":"StructuredDocumentation","src":"964:188:24","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3960,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:24","nodeType":"FunctionDefinition","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3938,"mutability":"mutable","name":"a","nameLocation":"1182:1:24","nodeType":"VariableDeclaration","scope":3960,"src":"1174:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3940,"mutability":"mutable","name":"b","nameLocation":"1193:1:24","nodeType":"VariableDeclaration","scope":3960,"src":"1185:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:24"},"returnParameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3960,"src":"1219:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:24"},"scope":4735,"src":"1157:194:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4082,"nodeType":"Block","src":"1765:4115:24","statements":[{"id":4081,"nodeType":"UncheckedBlock","src":"1775:4099:24","statements":[{"assignments":[3973],"declarations":[{"constant":false,"id":3973,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:24","nodeType":"VariableDeclaration","scope":4081,"src":"2096:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3972,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3974,"nodeType":"VariableDeclarationStatement","src":"2096:13:24"},{"assignments":[3976],"declarations":[{"constant":false,"id":3976,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:24","nodeType":"VariableDeclaration","scope":4081,"src":"2168:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3975,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3977,"nodeType":"VariableDeclarationStatement","src":"2168:13:24"},{"AST":{"nodeType":"YulBlock","src":"2248:157:24","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:24"},"nodeType":"YulFunctionCall","src":"2289:6:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:24"},"nodeType":"YulFunctionCall","src":"2276:20:24"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:24","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:24"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:24"},"nodeType":"YulFunctionCall","src":"2322:9:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:24"}]},{"nodeType":"YulAssignment","src":"2348:43:24","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:24"},"nodeType":"YulFunctionCall","src":"2361:14:24"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:24"},"nodeType":"YulFunctionCall","src":"2377:13:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:24"},"nodeType":"YulFunctionCall","src":"2357:34:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3973,"isOffset":false,"isSlot":false,"src":"2313:5:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"2369:5:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"2384:5:24","valueSize":1},{"declaration":3976,"isOffset":false,"isSlot":false,"src":"2348:5:24","valueSize":1},{"declaration":3963,"isOffset":false,"isSlot":false,"src":"2283:1:24","valueSize":1},{"declaration":3963,"isOffset":false,"isSlot":false,"src":"2326:1:24","valueSize":1},{"declaration":3965,"isOffset":false,"isSlot":false,"src":"2286:1:24","valueSize":1},{"declaration":3965,"isOffset":false,"isSlot":false,"src":"2329:1:24","valueSize":1}],"id":3978,"nodeType":"InlineAssembly","src":"2239:166:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3979,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"2486:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3987,"nodeType":"IfStatement","src":"2482:368:24","trueBody":{"id":3986,"nodeType":"Block","src":"2498:352:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3982,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"2816:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3983,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2824:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3971,"id":3985,"nodeType":"Return","src":"2809:26:24"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3989,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2960:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3990,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"2974:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":3992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":3988,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3994,"nodeType":"ExpressionStatement","src":"2952:53:24"},{"assignments":[3996],"declarations":[{"constant":false,"id":3996,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:24","nodeType":"VariableDeclaration","scope":4081,"src":"3261:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3995,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3997,"nodeType":"VariableDeclarationStatement","src":"3261:17:24"},{"AST":{"nodeType":"YulBlock","src":"3301:291:24","statements":[{"nodeType":"YulAssignment","src":"3370:38:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:24"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:24"},"nodeType":"YulFunctionCall","src":"3383:25:24"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:24"}]},{"nodeType":"YulAssignment","src":"3490:41:24","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:24"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:24"},"nodeType":"YulFunctionCall","src":"3510:20:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:24"},"nodeType":"YulFunctionCall","src":"3499:32:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:24"}]},{"nodeType":"YulAssignment","src":"3548:30:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:24"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:24"},"nodeType":"YulFunctionCall","src":"3557:21:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3967,"isOffset":false,"isSlot":false,"src":"3396:11:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"3524:5:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"3548:5:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"3561:5:24","valueSize":1},{"declaration":3976,"isOffset":false,"isSlot":false,"src":"3490:5:24","valueSize":1},{"declaration":3976,"isOffset":false,"isSlot":false,"src":"3503:5:24","valueSize":1},{"declaration":3996,"isOffset":false,"isSlot":false,"src":"3370:9:24","valueSize":1},{"declaration":3996,"isOffset":false,"isSlot":false,"src":"3513:9:24","valueSize":1},{"declaration":3996,"isOffset":false,"isSlot":false,"src":"3568:9:24","valueSize":1},{"declaration":3963,"isOffset":false,"isSlot":false,"src":"3390:1:24","valueSize":1},{"declaration":3965,"isOffset":false,"isSlot":false,"src":"3393:1:24","valueSize":1}],"id":3998,"nodeType":"InlineAssembly","src":"3292:300:24"},{"assignments":[4000],"declarations":[{"constant":false,"id":4000,"mutability":"mutable","name":"twos","nameLocation":"3907:4:24","nodeType":"VariableDeclaration","scope":4081,"src":"3899:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4008,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4001,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3914:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:24","subExpression":{"id":4002,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3930:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:24"},{"AST":{"nodeType":"YulBlock","src":"3969:362:24","statements":[{"nodeType":"YulAssignment","src":"4034:37:24","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:24"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:24"},"nodeType":"YulFunctionCall","src":"4049:22:24"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:24"}]},{"nodeType":"YulAssignment","src":"4138:25:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:24"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:24"},"nodeType":"YulFunctionCall","src":"4147:16:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:24"}]},{"nodeType":"YulAssignment","src":"4278:39:24","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:24","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:24"},"nodeType":"YulFunctionCall","src":"4294:12:24"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:24"},"nodeType":"YulFunctionCall","src":"4290:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:24"},"nodeType":"YulFunctionCall","src":"4286:31:24"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3967,"isOffset":false,"isSlot":false,"src":"4034:11:24","valueSize":1},{"declaration":3967,"isOffset":false,"isSlot":false,"src":"4053:11:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"4138:5:24","valueSize":1},{"declaration":3973,"isOffset":false,"isSlot":false,"src":"4151:5:24","valueSize":1},{"declaration":4000,"isOffset":false,"isSlot":false,"src":"4066:4:24","valueSize":1},{"declaration":4000,"isOffset":false,"isSlot":false,"src":"4158:4:24","valueSize":1},{"declaration":4000,"isOffset":false,"isSlot":false,"src":"4278:4:24","valueSize":1},{"declaration":4000,"isOffset":false,"isSlot":false,"src":"4301:4:24","valueSize":1},{"declaration":4000,"isOffset":false,"isSlot":false,"src":"4308:4:24","valueSize":1}],"id":4009,"nodeType":"InlineAssembly","src":"3960:371:24"},{"expression":{"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4010,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"4397:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"4406:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4012,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"4414:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4015,"nodeType":"ExpressionStatement","src":"4397:21:24"},{"assignments":[4017],"declarations":[{"constant":false,"id":4017,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:24","nodeType":"VariableDeclaration","scope":4081,"src":"4736:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4024,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"4759:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:24"},{"expression":{"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4025,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"4992:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4027,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5007:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4028,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5021:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4032,"nodeType":"ExpressionStatement","src":"4992:36:24"},{"expression":{"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4033,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5061:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5076:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4036,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5090:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4040,"nodeType":"ExpressionStatement","src":"5061:36:24"},{"expression":{"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4041,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5131:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4043,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5146:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4044,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5160:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4048,"nodeType":"ExpressionStatement","src":"5131:36:24"},{"expression":{"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4049,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5201:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4051,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5216:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4052,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5230:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4056,"nodeType":"ExpressionStatement","src":"5201:36:24"},{"expression":{"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4057,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5271:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4059,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5286:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4060,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5300:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4064,"nodeType":"ExpressionStatement","src":"5271:36:24"},{"expression":{"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4065,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5342:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4067,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5357:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4068,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5371:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4072,"nodeType":"ExpressionStatement","src":"5342:36:24"},{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4073,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"5812:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4074,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"5821:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4075,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5829:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4078,"nodeType":"ExpressionStatement","src":"5812:24:24"},{"expression":{"id":4079,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"5857:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3971,"id":4080,"nodeType":"Return","src":"5850:13:24"}]}]},"documentation":{"id":3961,"nodeType":"StructuredDocumentation","src":"1357:305:24","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4083,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:24","nodeType":"FunctionDefinition","parameters":{"id":3968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"x","nameLocation":"1691:1:24","nodeType":"VariableDeclaration","scope":4083,"src":"1683:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3962,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3965,"mutability":"mutable","name":"y","nameLocation":"1702:1:24","nodeType":"VariableDeclaration","scope":4083,"src":"1694:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3964,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3967,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:24","nodeType":"VariableDeclaration","scope":4083,"src":"1705:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3966,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:24"},"returnParameters":{"id":3971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3970,"mutability":"mutable","name":"result","nameLocation":"1757:6:24","nodeType":"VariableDeclaration","scope":4083,"src":"1749:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3969,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:24"},"scope":4735,"src":"1667:4213:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4126,"nodeType":"Block","src":"6122:189:24","statements":[{"assignments":[4099],"declarations":[{"constant":false,"id":4099,"mutability":"mutable","name":"result","nameLocation":"6140:6:24","nodeType":"VariableDeclaration","scope":4126,"src":"6132:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4098,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4105,"initialValue":{"arguments":[{"id":4101,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"6156:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4102,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"6159:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4103,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"6162:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4100,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4083,4127],"referencedDeclaration":4083,"src":"6149:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4106,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4093,"src":"6188:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4107,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"6200:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3876_$","typeString":"type(enum Math.Rounding)"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"6200:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"src":"6188:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4111,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"6222:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4112,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"6225:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4113,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"6228:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4110,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4123,"nodeType":"IfStatement","src":"6184:98:24","trueBody":{"id":4122,"nodeType":"Block","src":"6246:36:24","statements":[{"expression":{"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"6260:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4121,"nodeType":"ExpressionStatement","src":"6260:11:24"}]}},{"expression":{"id":4124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"6298:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4097,"id":4125,"nodeType":"Return","src":"6291:13:24"}]},"documentation":{"id":4084,"nodeType":"StructuredDocumentation","src":"5886:121:24","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4127,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:24","nodeType":"FunctionDefinition","parameters":{"id":4094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"x","nameLocation":"6036:1:24","nodeType":"VariableDeclaration","scope":4127,"src":"6028:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4085,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4088,"mutability":"mutable","name":"y","nameLocation":"6047:1:24","nodeType":"VariableDeclaration","scope":4127,"src":"6039:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4090,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:24","nodeType":"VariableDeclaration","scope":4127,"src":"6050:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4089,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4093,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:24","nodeType":"VariableDeclaration","scope":4127,"src":"6071:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"typeName":{"id":4092,"nodeType":"UserDefinedTypeName","pathNode":{"id":4091,"name":"Rounding","nameLocations":["6071:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"6071:8:24"},"referencedDeclaration":3876,"src":"6071:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:24"},"returnParameters":{"id":4097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4127,"src":"6113:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4095,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:24"},"scope":4735,"src":"6012:299:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4238,"nodeType":"Block","src":"6587:1585:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4135,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"6601:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4141,"nodeType":"IfStatement","src":"6597:45:24","trueBody":{"id":4140,"nodeType":"Block","src":"6609:33:24","statements":[{"expression":{"hexValue":"30","id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4134,"id":4139,"nodeType":"Return","src":"6623:8:24"}]}},{"assignments":[4143],"declarations":[{"constant":false,"id":4143,"mutability":"mutable","name":"result","nameLocation":"7329:6:24","nodeType":"VariableDeclaration","scope":4238,"src":"7321:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4142,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4152,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7349:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4145,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4407,4443],"referencedDeclaration":4407,"src":"7344:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4150,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:24"},{"id":4237,"nodeType":"UncheckedBlock","src":"7758:408:24","statements":[{"expression":{"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4153,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7782:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4154,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7792:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4155,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7801:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4156,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7805:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4159,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4163,"nodeType":"ExpressionStatement","src":"7782:35:24"},{"expression":{"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4164,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7831:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7841:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4166,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7850:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4167,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7854:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4174,"nodeType":"ExpressionStatement","src":"7831:35:24"},{"expression":{"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4175,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7880:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4176,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7890:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4177,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7899:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4178,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7903:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4185,"nodeType":"ExpressionStatement","src":"7880:35:24"},{"expression":{"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4186,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7929:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4187,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7939:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4188,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7948:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7952:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4196,"nodeType":"ExpressionStatement","src":"7929:35:24"},{"expression":{"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4197,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7978:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4198,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"7988:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"7997:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8001:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4207,"nodeType":"ExpressionStatement","src":"7978:35:24"},{"expression":{"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8027:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4209,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8037:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4210,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"8046:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4211,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8050:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4214,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4218,"nodeType":"ExpressionStatement","src":"8027:35:24"},{"expression":{"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8076:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4220,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8086:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4221,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"8095:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4222,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8099:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4225,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4229,"nodeType":"ExpressionStatement","src":"8076:35:24"},{"expression":{"arguments":[{"id":4231,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8136:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"8144:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"8148:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4230,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"8132:3:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4134,"id":4236,"nodeType":"Return","src":"8125:30:24"}]}]},"documentation":{"id":4128,"nodeType":"StructuredDocumentation","src":"6317:208:24","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4239,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:24","nodeType":"FunctionDefinition","parameters":{"id":4131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4130,"mutability":"mutable","name":"a","nameLocation":"6552:1:24","nodeType":"VariableDeclaration","scope":4239,"src":"6544:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4129,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:24"},"returnParameters":{"id":4134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4239,"src":"6578:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4132,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:24"},"scope":4735,"src":"6530:1642:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4274,"nodeType":"Block","src":"8348:161:24","statements":[{"id":4273,"nodeType":"UncheckedBlock","src":"8358:145:24","statements":[{"assignments":[4251],"declarations":[{"constant":false,"id":4251,"mutability":"mutable","name":"result","nameLocation":"8390:6:24","nodeType":"VariableDeclaration","scope":4273,"src":"8382:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4250,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4255,"initialValue":{"arguments":[{"id":4253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"8404:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4252,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4239,4275],"referencedDeclaration":4239,"src":"8399:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4256,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"8427:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4257,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"8437:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4258,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"8449:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3876_$","typeString":"type(enum Math.Rounding)"}},"id":4259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"8449:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"src":"8437:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"8464:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4262,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"8473:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4264,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"8482:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:24","trueExpression":{"hexValue":"31","id":4267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4249,"id":4272,"nodeType":"Return","src":"8420:72:24"}]}]},"documentation":{"id":4240,"nodeType":"StructuredDocumentation","src":"8178:89:24","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4275,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:24","nodeType":"FunctionDefinition","parameters":{"id":4246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"a","nameLocation":"8294:1:24","nodeType":"VariableDeclaration","scope":4275,"src":"8286:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4241,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4245,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:24","nodeType":"VariableDeclaration","scope":4275,"src":"8297:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"typeName":{"id":4244,"nodeType":"UserDefinedTypeName","pathNode":{"id":4243,"name":"Rounding","nameLocations":["8297:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"8297:8:24"},"referencedDeclaration":3876,"src":"8297:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:24"},"returnParameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4275,"src":"8339:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4247,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:24"},"scope":4735,"src":"8272:237:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4406,"nodeType":"Block","src":"8694:922:24","statements":[{"assignments":[4284],"declarations":[{"constant":false,"id":4284,"mutability":"mutable","name":"result","nameLocation":"8712:6:24","nodeType":"VariableDeclaration","scope":4406,"src":"8704:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4283,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4286,"initialValue":{"hexValue":"30","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:24"},{"id":4403,"nodeType":"UncheckedBlock","src":"8732:855:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"8760:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4301,"nodeType":"IfStatement","src":"8756:99:24","trueBody":{"id":4300,"nodeType":"Block","src":"8778:77:24","statements":[{"expression":{"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"8796:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4295,"nodeType":"ExpressionStatement","src":"8796:13:24"},{"expression":{"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8827:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4299,"nodeType":"ExpressionStatement","src":"8827:13:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"8872:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4316,"nodeType":"IfStatement","src":"8868:96:24","trueBody":{"id":4315,"nodeType":"Block","src":"8889:75:24","statements":[{"expression":{"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"8907:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4310,"nodeType":"ExpressionStatement","src":"8907:12:24"},{"expression":{"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8937:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4314,"nodeType":"ExpressionStatement","src":"8937:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"8981:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4331,"nodeType":"IfStatement","src":"8977:96:24","trueBody":{"id":4330,"nodeType":"Block","src":"8998:75:24","statements":[{"expression":{"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9016:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4325,"nodeType":"ExpressionStatement","src":"9016:12:24"},{"expression":{"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9046:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4329,"nodeType":"ExpressionStatement","src":"9046:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9090:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4346,"nodeType":"IfStatement","src":"9086:96:24","trueBody":{"id":4345,"nodeType":"Block","src":"9107:75:24","statements":[{"expression":{"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9125:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4340,"nodeType":"ExpressionStatement","src":"9125:12:24"},{"expression":{"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9155:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4344,"nodeType":"ExpressionStatement","src":"9155:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9199:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4361,"nodeType":"IfStatement","src":"9195:93:24","trueBody":{"id":4360,"nodeType":"Block","src":"9215:73:24","statements":[{"expression":{"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9233:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4355,"nodeType":"ExpressionStatement","src":"9233:11:24"},{"expression":{"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9262:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4359,"nodeType":"ExpressionStatement","src":"9262:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9305:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4376,"nodeType":"IfStatement","src":"9301:93:24","trueBody":{"id":4375,"nodeType":"Block","src":"9321:73:24","statements":[{"expression":{"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9339:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4370,"nodeType":"ExpressionStatement","src":"9339:11:24"},{"expression":{"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9368:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4374,"nodeType":"ExpressionStatement","src":"9368:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9411:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4391,"nodeType":"IfStatement","src":"9407:93:24","trueBody":{"id":4390,"nodeType":"Block","src":"9427:73:24","statements":[{"expression":{"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9445:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4385,"nodeType":"ExpressionStatement","src":"9445:11:24"},{"expression":{"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4386,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9474:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4389,"nodeType":"ExpressionStatement","src":"9474:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"9517:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4402,"nodeType":"IfStatement","src":"9513:64:24","trueBody":{"id":4401,"nodeType":"Block","src":"9533:44:24","statements":[{"expression":{"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4397,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9551:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4400,"nodeType":"ExpressionStatement","src":"9551:11:24"}]}}]},{"expression":{"id":4404,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"9603:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4282,"id":4405,"nodeType":"Return","src":"9596:13:24"}]},"documentation":{"id":4276,"nodeType":"StructuredDocumentation","src":"8515:113:24","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4407,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:24","nodeType":"FunctionDefinition","parameters":{"id":4279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4278,"mutability":"mutable","name":"value","nameLocation":"8655:5:24","nodeType":"VariableDeclaration","scope":4407,"src":"8647:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4277,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:24"},"returnParameters":{"id":4282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4407,"src":"8685:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4280,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:24"},"scope":4735,"src":"8633:983:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4442,"nodeType":"Block","src":"9849:165:24","statements":[{"id":4441,"nodeType":"UncheckedBlock","src":"9859:149:24","statements":[{"assignments":[4419],"declarations":[{"constant":false,"id":4419,"mutability":"mutable","name":"result","nameLocation":"9891:6:24","nodeType":"VariableDeclaration","scope":4441,"src":"9883:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4418,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4423,"initialValue":{"arguments":[{"id":4421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"9905:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4420,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4407,4443],"referencedDeclaration":4407,"src":"9900:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4424,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"9932:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4425,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"9942:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4426,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"9954:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3876_$","typeString":"type(enum Math.Rounding)"}},"id":4427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"9954:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"src":"9942:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"9974:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"9983:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:24","trueExpression":{"hexValue":"31","id":4435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4438,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4417,"id":4440,"nodeType":"Return","src":"9925:72:24"}]}]},"documentation":{"id":4408,"nodeType":"StructuredDocumentation","src":"9622:142:24","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4443,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:24","nodeType":"FunctionDefinition","parameters":{"id":4414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4410,"mutability":"mutable","name":"value","nameLocation":"9791:5:24","nodeType":"VariableDeclaration","scope":4443,"src":"9783:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4409,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4413,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:24","nodeType":"VariableDeclaration","scope":4443,"src":"9798:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"typeName":{"id":4412,"nodeType":"UserDefinedTypeName","pathNode":{"id":4411,"name":"Rounding","nameLocations":["9798:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"9798:8:24"},"referencedDeclaration":3876,"src":"9798:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:24"},"returnParameters":{"id":4417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4443,"src":"9840:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4415,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:24"},"scope":4735,"src":"9769:245:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4571,"nodeType":"Block","src":"10201:854:24","statements":[{"assignments":[4452],"declarations":[{"constant":false,"id":4452,"mutability":"mutable","name":"result","nameLocation":"10219:6:24","nodeType":"VariableDeclaration","scope":4571,"src":"10211:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4454,"initialValue":{"hexValue":"30","id":4453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:24"},{"id":4568,"nodeType":"UncheckedBlock","src":"10239:787:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10267:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4471,"nodeType":"IfStatement","src":"10263:103:24","trueBody":{"id":4470,"nodeType":"Block","src":"10286:80:24","statements":[{"expression":{"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10304:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4465,"nodeType":"ExpressionStatement","src":"10304:17:24"},{"expression":{"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10339:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4469,"nodeType":"ExpressionStatement","src":"10339:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10383:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"nodeType":"IfStatement","src":"10379:103:24","trueBody":{"id":4487,"nodeType":"Block","src":"10402:80:24","statements":[{"expression":{"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10420:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4482,"nodeType":"ExpressionStatement","src":"10420:17:24"},{"expression":{"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10455:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4486,"nodeType":"ExpressionStatement","src":"10455:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10499:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4505,"nodeType":"IfStatement","src":"10495:103:24","trueBody":{"id":4504,"nodeType":"Block","src":"10518:80:24","statements":[{"expression":{"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10536:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4499,"nodeType":"ExpressionStatement","src":"10536:17:24"},{"expression":{"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10571:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4503,"nodeType":"ExpressionStatement","src":"10571:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10615:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4522,"nodeType":"IfStatement","src":"10611:100:24","trueBody":{"id":4521,"nodeType":"Block","src":"10633:78:24","statements":[{"expression":{"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10651:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4516,"nodeType":"ExpressionStatement","src":"10651:16:24"},{"expression":{"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4517,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10685:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4520,"nodeType":"ExpressionStatement","src":"10685:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10728:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4539,"nodeType":"IfStatement","src":"10724:100:24","trueBody":{"id":4538,"nodeType":"Block","src":"10746:78:24","statements":[{"expression":{"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10764:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4533,"nodeType":"ExpressionStatement","src":"10764:16:24"},{"expression":{"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10798:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4537,"nodeType":"ExpressionStatement","src":"10798:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4540,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10841:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4556,"nodeType":"IfStatement","src":"10837:100:24","trueBody":{"id":4555,"nodeType":"Block","src":"10859:78:24","statements":[{"expression":{"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4545,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10877:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4550,"nodeType":"ExpressionStatement","src":"10877:16:24"},{"expression":{"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4551,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10911:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4554,"nodeType":"ExpressionStatement","src":"10911:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"10954:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4567,"nodeType":"IfStatement","src":"10950:66:24","trueBody":{"id":4566,"nodeType":"Block","src":"10972:44:24","statements":[{"expression":{"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"10990:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4565,"nodeType":"ExpressionStatement","src":"10990:11:24"}]}}]},{"expression":{"id":4569,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"11042:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4450,"id":4570,"nodeType":"Return","src":"11035:13:24"}]},"documentation":{"id":4444,"nodeType":"StructuredDocumentation","src":"10020:114:24","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4572,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:24","nodeType":"FunctionDefinition","parameters":{"id":4447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4446,"mutability":"mutable","name":"value","nameLocation":"10162:5:24","nodeType":"VariableDeclaration","scope":4572,"src":"10154:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4445,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:24"},"returnParameters":{"id":4450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4572,"src":"10192:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4448,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:24"},"scope":4735,"src":"10139:916:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4607,"nodeType":"Block","src":"11290:167:24","statements":[{"id":4606,"nodeType":"UncheckedBlock","src":"11300:151:24","statements":[{"assignments":[4584],"declarations":[{"constant":false,"id":4584,"mutability":"mutable","name":"result","nameLocation":"11332:6:24","nodeType":"VariableDeclaration","scope":4606,"src":"11324:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4588,"initialValue":{"arguments":[{"id":4586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"11347:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4585,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4572,4608],"referencedDeclaration":4572,"src":"11341:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4589,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"11374:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4590,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"11384:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4591,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"11396:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3876_$","typeString":"type(enum Math.Rounding)"}},"id":4592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"11396:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"src":"11384:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"11417:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"11426:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:24","trueExpression":{"hexValue":"31","id":4600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4603,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4582,"id":4605,"nodeType":"Return","src":"11367:73:24"}]}]},"documentation":{"id":4573,"nodeType":"StructuredDocumentation","src":"11061:143:24","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4608,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:24","nodeType":"FunctionDefinition","parameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4575,"mutability":"mutable","name":"value","nameLocation":"11232:5:24","nodeType":"VariableDeclaration","scope":4608,"src":"11224:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4574,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4578,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:24","nodeType":"VariableDeclaration","scope":4608,"src":"11239:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"typeName":{"id":4577,"nodeType":"UserDefinedTypeName","pathNode":{"id":4576,"name":"Rounding","nameLocations":["11239:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"11239:8:24"},"referencedDeclaration":3876,"src":"11239:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:24"},"returnParameters":{"id":4582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4608,"src":"11281:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4580,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:24"},"scope":4735,"src":"11209:248:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4694,"nodeType":"Block","src":"11771:600:24","statements":[{"assignments":[4617],"declarations":[{"constant":false,"id":4617,"mutability":"mutable","name":"result","nameLocation":"11789:6:24","nodeType":"VariableDeclaration","scope":4694,"src":"11781:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4616,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4619,"initialValue":{"hexValue":"30","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:24"},{"id":4691,"nodeType":"UncheckedBlock","src":"11809:533:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"11837:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4634,"nodeType":"IfStatement","src":"11833:98:24","trueBody":{"id":4633,"nodeType":"Block","src":"11855:76:24","statements":[{"expression":{"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"11873:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4628,"nodeType":"ExpressionStatement","src":"11873:13:24"},{"expression":{"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"11904:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4632,"nodeType":"ExpressionStatement","src":"11904:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"11948:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4649,"nodeType":"IfStatement","src":"11944:95:24","trueBody":{"id":4648,"nodeType":"Block","src":"11965:74:24","statements":[{"expression":{"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"11983:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4643,"nodeType":"ExpressionStatement","src":"11983:12:24"},{"expression":{"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"12013:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4647,"nodeType":"ExpressionStatement","src":"12013:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"12056:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4664,"nodeType":"IfStatement","src":"12052:95:24","trueBody":{"id":4663,"nodeType":"Block","src":"12073:74:24","statements":[{"expression":{"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"12091:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4658,"nodeType":"ExpressionStatement","src":"12091:12:24"},{"expression":{"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4659,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"12121:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4662,"nodeType":"ExpressionStatement","src":"12121:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"12164:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4679,"nodeType":"IfStatement","src":"12160:95:24","trueBody":{"id":4678,"nodeType":"Block","src":"12181:74:24","statements":[{"expression":{"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"12199:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4673,"nodeType":"ExpressionStatement","src":"12199:12:24"},{"expression":{"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"12229:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4677,"nodeType":"ExpressionStatement","src":"12229:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"12272:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4690,"nodeType":"IfStatement","src":"12268:64:24","trueBody":{"id":4689,"nodeType":"Block","src":"12288:44:24","statements":[{"expression":{"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"12306:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4688,"nodeType":"ExpressionStatement","src":"12306:11:24"}]}}]},{"expression":{"id":4692,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"12358:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4615,"id":4693,"nodeType":"Return","src":"12351:13:24"}]},"documentation":{"id":4609,"nodeType":"StructuredDocumentation","src":"11463:240:24","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4695,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:24","nodeType":"FunctionDefinition","parameters":{"id":4612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4611,"mutability":"mutable","name":"value","nameLocation":"11732:5:24","nodeType":"VariableDeclaration","scope":4695,"src":"11724:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4610,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:24"},"returnParameters":{"id":4615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4695,"src":"11762:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4613,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:24"},"scope":4735,"src":"11708:663:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4733,"nodeType":"Block","src":"12608:174:24","statements":[{"id":4732,"nodeType":"UncheckedBlock","src":"12618:158:24","statements":[{"assignments":[4707],"declarations":[{"constant":false,"id":4707,"mutability":"mutable","name":"result","nameLocation":"12650:6:24","nodeType":"VariableDeclaration","scope":4732,"src":"12642:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4706,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4711,"initialValue":{"arguments":[{"id":4709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"12666:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4708,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4695,4734],"referencedDeclaration":4695,"src":"12659:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4712,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"12693:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4713,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"12703:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4714,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"12715:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3876_$","typeString":"type(enum Math.Rounding)"}},"id":4715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:24","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3874,"src":"12715:11:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"src":"12703:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"12736:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"12751:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:24","trueExpression":{"hexValue":"31","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4729,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4705,"id":4731,"nodeType":"Return","src":"12686:79:24"}]}]},"documentation":{"id":4696,"nodeType":"StructuredDocumentation","src":"12377:144:24","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4734,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:24","nodeType":"FunctionDefinition","parameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4698,"mutability":"mutable","name":"value","nameLocation":"12550:5:24","nodeType":"VariableDeclaration","scope":4734,"src":"12542:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4697,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4701,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:24","nodeType":"VariableDeclaration","scope":4734,"src":"12557:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"},"typeName":{"id":4700,"nodeType":"UserDefinedTypeName","pathNode":{"id":4699,"name":"Rounding","nameLocations":["12557:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"12557:8:24"},"referencedDeclaration":3876,"src":"12557:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3876","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:24"},"returnParameters":{"id":4705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4734,"src":"12599:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4703,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:24"},"scope":4735,"src":"12526:256:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4736,"src":"202:12582:24","usedErrors":[]}],"src":"103:12682:24"},"id":24},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[4840]},"id":4841,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4737,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4738,"nodeType":"StructuredDocumentation","src":"134:80:25","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4840,"linearizedBaseContracts":[4840],"name":"SignedMath","nameLocation":"223:10:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":4755,"nodeType":"Block","src":"375:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4741,"src":"392:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4749,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"396:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4752,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"404:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:25","trueExpression":{"id":4751,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4741,"src":"400:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4747,"id":4754,"nodeType":"Return","src":"385:20:25"}]},"documentation":{"id":4739,"nodeType":"StructuredDocumentation","src":"240:66:25","text":" @dev Returns the largest of two signed numbers."},"id":4756,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:25","nodeType":"FunctionDefinition","parameters":{"id":4744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4741,"mutability":"mutable","name":"a","nameLocation":"331:1:25","nodeType":"VariableDeclaration","scope":4756,"src":"324:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4740,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4743,"mutability":"mutable","name":"b","nameLocation":"341:1:25","nodeType":"VariableDeclaration","scope":4756,"src":"334:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4742,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:25"},"returnParameters":{"id":4747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4756,"src":"367:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4745,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:25"},"scope":4840,"src":"311:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4773,"nodeType":"Block","src":"554:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4766,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4759,"src":"571:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4767,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4761,"src":"575:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4770,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4761,"src":"583:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:25","trueExpression":{"id":4769,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4759,"src":"579:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4765,"id":4772,"nodeType":"Return","src":"564:20:25"}]},"documentation":{"id":4757,"nodeType":"StructuredDocumentation","src":"418:67:25","text":" @dev Returns the smallest of two signed numbers."},"id":4774,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:25","nodeType":"FunctionDefinition","parameters":{"id":4762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4759,"mutability":"mutable","name":"a","nameLocation":"510:1:25","nodeType":"VariableDeclaration","scope":4774,"src":"503:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4758,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4761,"mutability":"mutable","name":"b","nameLocation":"520:1:25","nodeType":"VariableDeclaration","scope":4774,"src":"513:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4760,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:25"},"returnParameters":{"id":4765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4774,"src":"546:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4763,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:25"},"scope":4840,"src":"490:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4817,"nodeType":"Block","src":"796:162:25","statements":[{"assignments":[4785],"declarations":[{"constant":false,"id":4785,"mutability":"mutable","name":"x","nameLocation":"865:1:25","nodeType":"VariableDeclaration","scope":4817,"src":"858:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4784,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4798,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4786,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"870:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4787,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"874:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"881:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4791,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"885:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4793,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4796,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:25"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4799,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"910:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4804,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"930:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4802,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:25","typeDescriptions":{}}},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:25","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4800,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:25","typeDescriptions":{}}},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4809,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"944:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4810,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"948:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4812,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4814,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4783,"id":4816,"nodeType":"Return","src":"903:48:25"}]},"documentation":{"id":4775,"nodeType":"StructuredDocumentation","src":"597:126:25","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4818,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:25","nodeType":"FunctionDefinition","parameters":{"id":4780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4777,"mutability":"mutable","name":"a","nameLocation":"752:1:25","nodeType":"VariableDeclaration","scope":4818,"src":"745:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4776,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4779,"mutability":"mutable","name":"b","nameLocation":"762:1:25","nodeType":"VariableDeclaration","scope":4818,"src":"755:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4778,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:25"},"returnParameters":{"id":4783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4818,"src":"788:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4781,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:25"},"scope":4840,"src":"728:230:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4838,"nodeType":"Block","src":"1102:158:25","statements":[{"id":4837,"nodeType":"UncheckedBlock","src":"1112:142:25","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4828,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"1227:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:25","subExpression":{"id":4832,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"1241:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:25","trueExpression":{"id":4831,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"1236:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4826,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:25","typeDescriptions":{}}},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4825,"id":4836,"nodeType":"Return","src":"1212:31:25"}]}]},"documentation":{"id":4819,"nodeType":"StructuredDocumentation","src":"964:78:25","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4839,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:25","nodeType":"FunctionDefinition","parameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"n","nameLocation":"1067:1:25","nodeType":"VariableDeclaration","scope":4839,"src":"1060:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4820,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:25"},"returnParameters":{"id":4825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4839,"src":"1093:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4823,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:25"},"scope":4840,"src":"1047:213:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4841,"src":"215:1047:25","usedErrors":[]}],"src":"109:1154:25"},"id":25},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[5453]},"id":5454,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4842,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":4843,"nodeType":"StructuredDocumentation","src":"230:1098:26","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":5453,"linearizedBaseContracts":[5453],"name":"EnumerableSet","nameLocation":"1337:13:26","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":4851,"members":[{"constant":false,"id":4846,"mutability":"mutable","name":"_values","nameLocation":"1861:7:26","nodeType":"VariableDeclaration","scope":4851,"src":"1851:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4845,"nodeType":"ArrayTypeName","src":"1851:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4850,"mutability":"mutable","name":"_indexes","nameLocation":"2029:8:26","nodeType":"VariableDeclaration","scope":4851,"src":"2001:36:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":4849,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2001:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2020:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1804:3:26","nodeType":"StructDefinition","scope":5453,"src":"1797:247:26","visibility":"public"},{"body":{"id":4892,"nodeType":"Block","src":"2283:335:26","statements":[{"condition":{"id":4866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2297:22:26","subExpression":{"arguments":[{"id":4863,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2308:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":4864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2313:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4862,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"2298:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4890,"nodeType":"Block","src":"2575:37:26","statements":[{"expression":{"hexValue":"66616c7365","id":4888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2596:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4861,"id":4889,"nodeType":"Return","src":"2589:12:26"}]},"id":4891,"nodeType":"IfStatement","src":"2293:319:26","trueBody":{"id":4887,"nodeType":"Block","src":"2321:248:26","statements":[{"expression":{"arguments":[{"id":4872,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2352:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":4867,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2335:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2339:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"2335:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2347:4:26","memberName":"push","nodeType":"MemberAccess","src":"2335:16:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4874,"nodeType":"ExpressionStatement","src":"2335:23:26"},{"expression":{"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4875,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2493:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2497:8:26","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"2493:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4879,"indexExpression":{"id":4877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2506:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2493:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4880,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2515:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2519:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"2515:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2527:6:26","memberName":"length","nodeType":"MemberAccess","src":"2515:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2493:40:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4884,"nodeType":"ExpressionStatement","src":"2493:40:26"},{"expression":{"hexValue":"74727565","id":4885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2554:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4861,"id":4886,"nodeType":"Return","src":"2547:11:26"}]}}]},"documentation":{"id":4852,"nodeType":"StructuredDocumentation","src":"2050:159:26","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4893,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2223:4:26","nodeType":"FunctionDefinition","parameters":{"id":4858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4855,"mutability":"mutable","name":"set","nameLocation":"2240:3:26","nodeType":"VariableDeclaration","scope":4893,"src":"2228:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4854,"nodeType":"UserDefinedTypeName","pathNode":{"id":4853,"name":"Set","nameLocations":["2228:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"2228:3:26"},"referencedDeclaration":4851,"src":"2228:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4857,"mutability":"mutable","name":"value","nameLocation":"2253:5:26","nodeType":"VariableDeclaration","scope":4893,"src":"2245:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2245:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2227:32:26"},"returnParameters":{"id":4861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4893,"src":"2277:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4859,"name":"bool","nodeType":"ElementaryTypeName","src":"2277:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2276:6:26"},"scope":5453,"src":"2214:404:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4976,"nodeType":"Block","src":"2858:1316:26","statements":[{"assignments":[4905],"declarations":[{"constant":false,"id":4905,"mutability":"mutable","name":"valueIndex","nameLocation":"2976:10:26","nodeType":"VariableDeclaration","scope":4976,"src":"2968:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4904,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4910,"initialValue":{"baseExpression":{"expression":{"id":4906,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"2989:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4907,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:8:26","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"2989:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4909,"indexExpression":{"id":4908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"3002:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2989:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2968:40:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4911,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3023:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3023:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4974,"nodeType":"Block","src":"4131:37:26","statements":[{"expression":{"hexValue":"66616c7365","id":4972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4152:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4903,"id":4973,"nodeType":"Return","src":"4145:12:26"}]},"id":4975,"nodeType":"IfStatement","src":"3019:1149:26","trueBody":{"id":4971,"nodeType":"Block","src":"3040:1085:26","statements":[{"assignments":[4915],"declarations":[{"constant":false,"id":4915,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3400:13:26","nodeType":"VariableDeclaration","scope":4971,"src":"3392:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4914,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4919,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4916,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3416:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3416:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3392:38:26"},{"assignments":[4921],"declarations":[{"constant":false,"id":4921,"mutability":"mutable","name":"lastIndex","nameLocation":"3452:9:26","nodeType":"VariableDeclaration","scope":4971,"src":"3444:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4920,"name":"uint256","nodeType":"ElementaryTypeName","src":"3444:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4927,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4922,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"3464:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3468:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"3464:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3476:6:26","memberName":"length","nodeType":"MemberAccess","src":"3464:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3464:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3444:42:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4928,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"3505:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4929,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"3518:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3505:26:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4955,"nodeType":"IfStatement","src":"3501:398:26","trueBody":{"id":4954,"nodeType":"Block","src":"3533:366:26","statements":[{"assignments":[4932],"declarations":[{"constant":false,"id":4932,"mutability":"mutable","name":"lastValue","nameLocation":"3559:9:26","nodeType":"VariableDeclaration","scope":4954,"src":"3551:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3551:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4937,"initialValue":{"baseExpression":{"expression":{"id":4933,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"3571:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3575:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"3571:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4936,"indexExpression":{"id":4935,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"3583:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:22:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3551:42:26"},{"expression":{"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4938,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"3693:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3697:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"3693:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4942,"indexExpression":{"id":4940,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"3705:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3693:26:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4943,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"3722:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3693:38:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4945,"nodeType":"ExpressionStatement","src":"3693:38:26"},{"expression":{"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4946,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"3805:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3809:8:26","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"3805:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4950,"indexExpression":{"id":4948,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"3818:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4951,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3831:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3805:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4953,"nodeType":"ExpressionStatement","src":"3805:36:26"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4956,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"3977:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3981:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"3977:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3989:3:26","memberName":"pop","nodeType":"MemberAccess","src":"3977:15:26","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3977:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4962,"nodeType":"ExpressionStatement","src":"3977:17:26"},{"expression":{"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4062:26:26","subExpression":{"baseExpression":{"expression":{"id":4963,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"4069:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4073:8:26","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"4069:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4966,"indexExpression":{"id":4965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"4082:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4069:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4968,"nodeType":"ExpressionStatement","src":"4062:26:26"},{"expression":{"hexValue":"74727565","id":4969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4903,"id":4970,"nodeType":"Return","src":"4103:11:26"}]}}]},"documentation":{"id":4894,"nodeType":"StructuredDocumentation","src":"2624:157:26","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4977,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2795:7:26","nodeType":"FunctionDefinition","parameters":{"id":4900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4897,"mutability":"mutable","name":"set","nameLocation":"2815:3:26","nodeType":"VariableDeclaration","scope":4977,"src":"2803:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4896,"nodeType":"UserDefinedTypeName","pathNode":{"id":4895,"name":"Set","nameLocations":["2803:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"2803:3:26"},"referencedDeclaration":4851,"src":"2803:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4899,"mutability":"mutable","name":"value","nameLocation":"2828:5:26","nodeType":"VariableDeclaration","scope":4977,"src":"2820:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4898,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2820:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2802:32:26"},"returnParameters":{"id":4903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4977,"src":"2852:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4901,"name":"bool","nodeType":"ElementaryTypeName","src":"2852:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2851:6:26"},"scope":5453,"src":"2786:1388:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4995,"nodeType":"Block","src":"4334:48:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4988,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"4351:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4355:8:26","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"4351:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4991,"indexExpression":{"id":4990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"4364:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4351:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4374:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4351:24:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4987,"id":4994,"nodeType":"Return","src":"4344:31:26"}]},"documentation":{"id":4978,"nodeType":"StructuredDocumentation","src":"4180:70:26","text":" @dev Returns true if the value is in the set. O(1)."},"id":4996,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4264:9:26","nodeType":"FunctionDefinition","parameters":{"id":4984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4981,"mutability":"mutable","name":"set","nameLocation":"4286:3:26","nodeType":"VariableDeclaration","scope":4996,"src":"4274:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4980,"nodeType":"UserDefinedTypeName","pathNode":{"id":4979,"name":"Set","nameLocations":["4274:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"4274:3:26"},"referencedDeclaration":4851,"src":"4274:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4983,"mutability":"mutable","name":"value","nameLocation":"4299:5:26","nodeType":"VariableDeclaration","scope":4996,"src":"4291:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4291:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4273:32:26"},"returnParameters":{"id":4987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4996,"src":"4328:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4985,"name":"bool","nodeType":"ElementaryTypeName","src":"4328:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4327:6:26"},"scope":5453,"src":"4255:127:26","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5009,"nodeType":"Block","src":"4528:42:26","statements":[{"expression":{"expression":{"expression":{"id":5005,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"4545:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4549:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"4545:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4557:6:26","memberName":"length","nodeType":"MemberAccess","src":"4545:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5004,"id":5008,"nodeType":"Return","src":"4538:25:26"}]},"documentation":{"id":4997,"nodeType":"StructuredDocumentation","src":"4388:70:26","text":" @dev Returns the number of values on the set. O(1)."},"id":5010,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4472:7:26","nodeType":"FunctionDefinition","parameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"set","nameLocation":"4492:3:26","nodeType":"VariableDeclaration","scope":5010,"src":"4480:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4999,"nodeType":"UserDefinedTypeName","pathNode":{"id":4998,"name":"Set","nameLocations":["4480:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"4480:3:26"},"referencedDeclaration":4851,"src":"4480:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4479:17:26"},"returnParameters":{"id":5004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5010,"src":"4519:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5002,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:9:26"},"scope":5453,"src":"4463:107:26","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5026,"nodeType":"Block","src":"4988:42:26","statements":[{"expression":{"baseExpression":{"expression":{"id":5021,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5014,"src":"5005:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5022,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5009:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"5005:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5024,"indexExpression":{"id":5023,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5016,"src":"5017:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5005:18:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5020,"id":5025,"nodeType":"Return","src":"4998:25:26"}]},"documentation":{"id":5011,"nodeType":"StructuredDocumentation","src":"4576:331:26","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5027,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4921:3:26","nodeType":"FunctionDefinition","parameters":{"id":5017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5014,"mutability":"mutable","name":"set","nameLocation":"4937:3:26","nodeType":"VariableDeclaration","scope":5027,"src":"4925:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5013,"nodeType":"UserDefinedTypeName","pathNode":{"id":5012,"name":"Set","nameLocations":["4925:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"4925:3:26"},"referencedDeclaration":4851,"src":"4925:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":5016,"mutability":"mutable","name":"index","nameLocation":"4950:5:26","nodeType":"VariableDeclaration","scope":5027,"src":"4942:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5015,"name":"uint256","nodeType":"ElementaryTypeName","src":"4942:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:32:26"},"returnParameters":{"id":5020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5027,"src":"4979:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4979:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4978:9:26"},"scope":5453,"src":"4912:118:26","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5040,"nodeType":"Block","src":"5644:35:26","statements":[{"expression":{"expression":{"id":5037,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5031,"src":"5661:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5038,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5665:7:26","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"5661:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":5036,"id":5039,"nodeType":"Return","src":"5654:18:26"}]},"documentation":{"id":5028,"nodeType":"StructuredDocumentation","src":"5036:529:26","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5041,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5579:7:26","nodeType":"FunctionDefinition","parameters":{"id":5032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5031,"mutability":"mutable","name":"set","nameLocation":"5599:3:26","nodeType":"VariableDeclaration","scope":5041,"src":"5587:15:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5030,"nodeType":"UserDefinedTypeName","pathNode":{"id":5029,"name":"Set","nameLocations":["5587:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"5587:3:26"},"referencedDeclaration":4851,"src":"5587:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5586:17:26"},"returnParameters":{"id":5036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5041,"src":"5626:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5626:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5034,"nodeType":"ArrayTypeName","src":"5626:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5625:18:26"},"scope":5453,"src":"5570:109:26","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":5045,"members":[{"constant":false,"id":5044,"mutability":"mutable","name":"_inner","nameLocation":"5736:6:26","nodeType":"VariableDeclaration","scope":5045,"src":"5732:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5043,"nodeType":"UserDefinedTypeName","pathNode":{"id":5042,"name":"Set","nameLocations":["5732:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"5732:3:26"},"referencedDeclaration":4851,"src":"5732:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5711:10:26","nodeType":"StructDefinition","scope":5453,"src":"5704:45:26","visibility":"public"},{"body":{"id":5062,"nodeType":"Block","src":"5995:47:26","statements":[{"expression":{"arguments":[{"expression":{"id":5057,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"6017:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5058,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"6017:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"6029:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5056,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"6012:4:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6012:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5055,"id":5061,"nodeType":"Return","src":"6005:30:26"}]},"documentation":{"id":5046,"nodeType":"StructuredDocumentation","src":"5755:159:26","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5063,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5928:3:26","nodeType":"FunctionDefinition","parameters":{"id":5052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5049,"mutability":"mutable","name":"set","nameLocation":"5951:3:26","nodeType":"VariableDeclaration","scope":5063,"src":"5932:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5048,"nodeType":"UserDefinedTypeName","pathNode":{"id":5047,"name":"Bytes32Set","nameLocations":["5932:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"5932:10:26"},"referencedDeclaration":5045,"src":"5932:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5051,"mutability":"mutable","name":"value","nameLocation":"5964:5:26","nodeType":"VariableDeclaration","scope":5063,"src":"5956:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5956:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5931:39:26"},"returnParameters":{"id":5055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5063,"src":"5989:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5053,"name":"bool","nodeType":"ElementaryTypeName","src":"5989:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5988:6:26"},"scope":5453,"src":"5919:123:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5080,"nodeType":"Block","src":"6289:50:26","statements":[{"expression":{"arguments":[{"expression":{"id":5075,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"6314:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6318:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"6314:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5069,"src":"6326:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5074,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"6306:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6306:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5073,"id":5079,"nodeType":"Return","src":"6299:33:26"}]},"documentation":{"id":5064,"nodeType":"StructuredDocumentation","src":"6048:157:26","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5081,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6219:6:26","nodeType":"FunctionDefinition","parameters":{"id":5070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5067,"mutability":"mutable","name":"set","nameLocation":"6245:3:26","nodeType":"VariableDeclaration","scope":5081,"src":"6226:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5066,"nodeType":"UserDefinedTypeName","pathNode":{"id":5065,"name":"Bytes32Set","nameLocations":["6226:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"6226:10:26"},"referencedDeclaration":5045,"src":"6226:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5069,"mutability":"mutable","name":"value","nameLocation":"6258:5:26","nodeType":"VariableDeclaration","scope":5081,"src":"6250:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6225:39:26"},"returnParameters":{"id":5073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5081,"src":"6283:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5071,"name":"bool","nodeType":"ElementaryTypeName","src":"6283:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6282:6:26"},"scope":5453,"src":"6210:129:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5098,"nodeType":"Block","src":"6506:52:26","statements":[{"expression":{"arguments":[{"expression":{"id":5093,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"6533:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6537:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"6533:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5087,"src":"6545:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5092,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"6523:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6523:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5091,"id":5097,"nodeType":"Return","src":"6516:35:26"}]},"documentation":{"id":5082,"nodeType":"StructuredDocumentation","src":"6345:70:26","text":" @dev Returns true if the value is in the set. O(1)."},"id":5099,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6429:8:26","nodeType":"FunctionDefinition","parameters":{"id":5088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5085,"mutability":"mutable","name":"set","nameLocation":"6457:3:26","nodeType":"VariableDeclaration","scope":5099,"src":"6438:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5084,"nodeType":"UserDefinedTypeName","pathNode":{"id":5083,"name":"Bytes32Set","nameLocations":["6438:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"6438:10:26"},"referencedDeclaration":5045,"src":"6438:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5087,"mutability":"mutable","name":"value","nameLocation":"6470:5:26","nodeType":"VariableDeclaration","scope":5099,"src":"6462:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6437:39:26"},"returnParameters":{"id":5091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5099,"src":"6500:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5089,"name":"bool","nodeType":"ElementaryTypeName","src":"6500:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6499:6:26"},"scope":5453,"src":"6420:138:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5113,"nodeType":"Block","src":"6711:43:26","statements":[{"expression":{"arguments":[{"expression":{"id":5109,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"6736:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"6736:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5108,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5010,"src":"6728:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6728:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5107,"id":5112,"nodeType":"Return","src":"6721:26:26"}]},"documentation":{"id":5100,"nodeType":"StructuredDocumentation","src":"6564:70:26","text":" @dev Returns the number of values in the set. O(1)."},"id":5114,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6648:6:26","nodeType":"FunctionDefinition","parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"set","nameLocation":"6674:3:26","nodeType":"VariableDeclaration","scope":5114,"src":"6655:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5102,"nodeType":"UserDefinedTypeName","pathNode":{"id":5101,"name":"Bytes32Set","nameLocations":["6655:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"6655:10:26"},"referencedDeclaration":5045,"src":"6655:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6654:24:26"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5114,"src":"6702:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5105,"name":"uint256","nodeType":"ElementaryTypeName","src":"6702:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6701:9:26"},"scope":5453,"src":"6639:115:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5131,"nodeType":"Block","src":"7179:46:26","statements":[{"expression":{"arguments":[{"expression":{"id":5126,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"7200:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7204:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"7200:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5128,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5120,"src":"7212:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5125,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"7196:3:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5124,"id":5130,"nodeType":"Return","src":"7189:29:26"}]},"documentation":{"id":5115,"nodeType":"StructuredDocumentation","src":"6760:331:26","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5132,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7105:2:26","nodeType":"FunctionDefinition","parameters":{"id":5121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5118,"mutability":"mutable","name":"set","nameLocation":"7127:3:26","nodeType":"VariableDeclaration","scope":5132,"src":"7108:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5117,"nodeType":"UserDefinedTypeName","pathNode":{"id":5116,"name":"Bytes32Set","nameLocations":["7108:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"7108:10:26"},"referencedDeclaration":5045,"src":"7108:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5120,"mutability":"mutable","name":"index","nameLocation":"7140:5:26","nodeType":"VariableDeclaration","scope":5132,"src":"7132:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5119,"name":"uint256","nodeType":"ElementaryTypeName","src":"7132:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:39:26"},"returnParameters":{"id":5124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5132,"src":"7170:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7170:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7169:9:26"},"scope":5453,"src":"7096:129:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5161,"nodeType":"Block","src":"7846:219:26","statements":[{"assignments":[5146],"declarations":[{"constant":false,"id":5146,"mutability":"mutable","name":"store","nameLocation":"7873:5:26","nodeType":"VariableDeclaration","scope":5161,"src":"7856:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7856:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5145,"nodeType":"ArrayTypeName","src":"7856:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5151,"initialValue":{"arguments":[{"expression":{"id":5148,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"7889:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7893:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5044,"src":"7889:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5147,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"7881:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7881:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7856:44:26"},{"assignments":[5156],"declarations":[{"constant":false,"id":5156,"mutability":"mutable","name":"result","nameLocation":"7927:6:26","nodeType":"VariableDeclaration","scope":5161,"src":"7910:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5154,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5155,"nodeType":"ArrayTypeName","src":"7910:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5157,"nodeType":"VariableDeclarationStatement","src":"7910:23:26"},{"AST":{"nodeType":"YulBlock","src":"7996:39:26","statements":[{"nodeType":"YulAssignment","src":"8010:15:26","value":{"name":"store","nodeType":"YulIdentifier","src":"8020:5:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8010:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5156,"isOffset":false,"isSlot":false,"src":"8010:6:26","valueSize":1},{"declaration":5146,"isOffset":false,"isSlot":false,"src":"8020:5:26","valueSize":1}],"id":5158,"nodeType":"InlineAssembly","src":"7987:48:26"},{"expression":{"id":5159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"8052:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":5141,"id":5160,"nodeType":"Return","src":"8045:13:26"}]},"documentation":{"id":5133,"nodeType":"StructuredDocumentation","src":"7231:529:26","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5162,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7774:6:26","nodeType":"FunctionDefinition","parameters":{"id":5137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5136,"mutability":"mutable","name":"set","nameLocation":"7800:3:26","nodeType":"VariableDeclaration","scope":5162,"src":"7781:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5135,"nodeType":"UserDefinedTypeName","pathNode":{"id":5134,"name":"Bytes32Set","nameLocations":["7781:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5045,"src":"7781:10:26"},"referencedDeclaration":5045,"src":"7781:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5045_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7780:24:26"},"returnParameters":{"id":5141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5162,"src":"7828:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7828:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5139,"nodeType":"ArrayTypeName","src":"7828:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7827:18:26"},"scope":5453,"src":"7765:300:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":5166,"members":[{"constant":false,"id":5165,"mutability":"mutable","name":"_inner","nameLocation":"8122:6:26","nodeType":"VariableDeclaration","scope":5166,"src":"8118:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5164,"nodeType":"UserDefinedTypeName","pathNode":{"id":5163,"name":"Set","nameLocations":["8118:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"8118:3:26"},"referencedDeclaration":4851,"src":"8118:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8097:10:26","nodeType":"StructDefinition","scope":5453,"src":"8090:45:26","visibility":"public"},{"body":{"id":5192,"nodeType":"Block","src":"8381:74:26","statements":[{"expression":{"arguments":[{"expression":{"id":5178,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"8403:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8407:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"8403:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"8439:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8431:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5184,"name":"uint160","nodeType":"ElementaryTypeName","src":"8431:7:26","typeDescriptions":{}}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8431:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5182,"name":"uint256","nodeType":"ElementaryTypeName","src":"8423:7:26","typeDescriptions":{}}},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8415:7:26","typeDescriptions":{}}},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5177,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"8398:4:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8398:50:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5176,"id":5191,"nodeType":"Return","src":"8391:57:26"}]},"documentation":{"id":5167,"nodeType":"StructuredDocumentation","src":"8141:159:26","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5193,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8314:3:26","nodeType":"FunctionDefinition","parameters":{"id":5173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"mutability":"mutable","name":"set","nameLocation":"8337:3:26","nodeType":"VariableDeclaration","scope":5193,"src":"8318:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5169,"nodeType":"UserDefinedTypeName","pathNode":{"id":5168,"name":"AddressSet","nameLocations":["8318:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"8318:10:26"},"referencedDeclaration":5166,"src":"8318:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5172,"mutability":"mutable","name":"value","nameLocation":"8350:5:26","nodeType":"VariableDeclaration","scope":5193,"src":"8342:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5171,"name":"address","nodeType":"ElementaryTypeName","src":"8342:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8317:39:26"},"returnParameters":{"id":5176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5193,"src":"8375:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5174,"name":"bool","nodeType":"ElementaryTypeName","src":"8375:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8374:6:26"},"scope":5453,"src":"8305:150:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5219,"nodeType":"Block","src":"8702:77:26","statements":[{"expression":{"arguments":[{"expression":{"id":5205,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"8727:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8731:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"8727:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"8763:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8755:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5211,"name":"uint160","nodeType":"ElementaryTypeName","src":"8755:7:26","typeDescriptions":{}}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8755:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5209,"name":"uint256","nodeType":"ElementaryTypeName","src":"8747:7:26","typeDescriptions":{}}},"id":5215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8739:7:26","typeDescriptions":{}}},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5204,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"8719:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8719:53:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5203,"id":5218,"nodeType":"Return","src":"8712:60:26"}]},"documentation":{"id":5194,"nodeType":"StructuredDocumentation","src":"8461:157:26","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5220,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8632:6:26","nodeType":"FunctionDefinition","parameters":{"id":5200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5197,"mutability":"mutable","name":"set","nameLocation":"8658:3:26","nodeType":"VariableDeclaration","scope":5220,"src":"8639:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5196,"nodeType":"UserDefinedTypeName","pathNode":{"id":5195,"name":"AddressSet","nameLocations":["8639:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"8639:10:26"},"referencedDeclaration":5166,"src":"8639:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5199,"mutability":"mutable","name":"value","nameLocation":"8671:5:26","nodeType":"VariableDeclaration","scope":5220,"src":"8663:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5198,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8638:39:26"},"returnParameters":{"id":5203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5220,"src":"8696:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5201,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:6:26"},"scope":5453,"src":"8623:156:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5246,"nodeType":"Block","src":"8946:79:26","statements":[{"expression":{"arguments":[{"expression":{"id":5232,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5224,"src":"8973:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8977:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"8973:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"9009:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9001:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5238,"name":"uint160","nodeType":"ElementaryTypeName","src":"9001:7:26","typeDescriptions":{}}},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9001:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5236,"name":"uint256","nodeType":"ElementaryTypeName","src":"8993:7:26","typeDescriptions":{}}},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8985:7:26","typeDescriptions":{}}},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5231,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"8963:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8963:55:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5230,"id":5245,"nodeType":"Return","src":"8956:62:26"}]},"documentation":{"id":5221,"nodeType":"StructuredDocumentation","src":"8785:70:26","text":" @dev Returns true if the value is in the set. O(1)."},"id":5247,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8869:8:26","nodeType":"FunctionDefinition","parameters":{"id":5227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5224,"mutability":"mutable","name":"set","nameLocation":"8897:3:26","nodeType":"VariableDeclaration","scope":5247,"src":"8878:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5223,"nodeType":"UserDefinedTypeName","pathNode":{"id":5222,"name":"AddressSet","nameLocations":["8878:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"8878:10:26"},"referencedDeclaration":5166,"src":"8878:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5226,"mutability":"mutable","name":"value","nameLocation":"8910:5:26","nodeType":"VariableDeclaration","scope":5247,"src":"8902:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5225,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8877:39:26"},"returnParameters":{"id":5230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5247,"src":"8940:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5228,"name":"bool","nodeType":"ElementaryTypeName","src":"8940:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8939:6:26"},"scope":5453,"src":"8860:165:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5261,"nodeType":"Block","src":"9178:43:26","statements":[{"expression":{"arguments":[{"expression":{"id":5257,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5251,"src":"9203:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9207:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"9203:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5256,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5010,"src":"9195:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5255,"id":5260,"nodeType":"Return","src":"9188:26:26"}]},"documentation":{"id":5248,"nodeType":"StructuredDocumentation","src":"9031:70:26","text":" @dev Returns the number of values in the set. O(1)."},"id":5262,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9115:6:26","nodeType":"FunctionDefinition","parameters":{"id":5252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5251,"mutability":"mutable","name":"set","nameLocation":"9141:3:26","nodeType":"VariableDeclaration","scope":5262,"src":"9122:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5250,"nodeType":"UserDefinedTypeName","pathNode":{"id":5249,"name":"AddressSet","nameLocations":["9122:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"9122:10:26"},"referencedDeclaration":5166,"src":"9122:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9121:24:26"},"returnParameters":{"id":5255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5262,"src":"9169:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5253,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:26"},"scope":5453,"src":"9106:115:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5288,"nodeType":"Block","src":"9646:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":5280,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"9691:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"9691:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5282,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"9703:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5279,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"9687:3:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9687:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9679:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5277,"name":"uint256","nodeType":"ElementaryTypeName","src":"9679:7:26","typeDescriptions":{}}},"id":5284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5275,"name":"uint160","nodeType":"ElementaryTypeName","src":"9671:7:26","typeDescriptions":{}}},"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5273,"name":"address","nodeType":"ElementaryTypeName","src":"9663:7:26","typeDescriptions":{}}},"id":5286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:49:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5272,"id":5287,"nodeType":"Return","src":"9656:56:26"}]},"documentation":{"id":5263,"nodeType":"StructuredDocumentation","src":"9227:331:26","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5289,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9572:2:26","nodeType":"FunctionDefinition","parameters":{"id":5269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5266,"mutability":"mutable","name":"set","nameLocation":"9594:3:26","nodeType":"VariableDeclaration","scope":5289,"src":"9575:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5265,"nodeType":"UserDefinedTypeName","pathNode":{"id":5264,"name":"AddressSet","nameLocations":["9575:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"9575:10:26"},"referencedDeclaration":5166,"src":"9575:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5268,"mutability":"mutable","name":"index","nameLocation":"9607:5:26","nodeType":"VariableDeclaration","scope":5289,"src":"9599:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5267,"name":"uint256","nodeType":"ElementaryTypeName","src":"9599:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9574:39:26"},"returnParameters":{"id":5272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5289,"src":"9637:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5270,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9636:9:26"},"scope":5453,"src":"9563:156:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5318,"nodeType":"Block","src":"10340:219:26","statements":[{"assignments":[5303],"declarations":[{"constant":false,"id":5303,"mutability":"mutable","name":"store","nameLocation":"10367:5:26","nodeType":"VariableDeclaration","scope":5318,"src":"10350:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10350:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5302,"nodeType":"ArrayTypeName","src":"10350:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5308,"initialValue":{"arguments":[{"expression":{"id":5305,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"10383:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5306,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10387:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5165,"src":"10383:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5304,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"10375:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10375:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10350:44:26"},{"assignments":[5313],"declarations":[{"constant":false,"id":5313,"mutability":"mutable","name":"result","nameLocation":"10421:6:26","nodeType":"VariableDeclaration","scope":5318,"src":"10404:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5311,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5312,"nodeType":"ArrayTypeName","src":"10404:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":5314,"nodeType":"VariableDeclarationStatement","src":"10404:23:26"},{"AST":{"nodeType":"YulBlock","src":"10490:39:26","statements":[{"nodeType":"YulAssignment","src":"10504:15:26","value":{"name":"store","nodeType":"YulIdentifier","src":"10514:5:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10504:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5313,"isOffset":false,"isSlot":false,"src":"10504:6:26","valueSize":1},{"declaration":5303,"isOffset":false,"isSlot":false,"src":"10514:5:26","valueSize":1}],"id":5315,"nodeType":"InlineAssembly","src":"10481:48:26"},{"expression":{"id":5316,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"10546:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":5298,"id":5317,"nodeType":"Return","src":"10539:13:26"}]},"documentation":{"id":5290,"nodeType":"StructuredDocumentation","src":"9725:529:26","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5319,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10268:6:26","nodeType":"FunctionDefinition","parameters":{"id":5294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5293,"mutability":"mutable","name":"set","nameLocation":"10294:3:26","nodeType":"VariableDeclaration","scope":5319,"src":"10275:22:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5292,"nodeType":"UserDefinedTypeName","pathNode":{"id":5291,"name":"AddressSet","nameLocations":["10275:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"10275:10:26"},"referencedDeclaration":5166,"src":"10275:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10274:24:26"},"returnParameters":{"id":5298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5319,"src":"10322:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5295,"name":"address","nodeType":"ElementaryTypeName","src":"10322:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5296,"nodeType":"ArrayTypeName","src":"10322:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10321:18:26"},"scope":5453,"src":"10259:300:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":5323,"members":[{"constant":false,"id":5322,"mutability":"mutable","name":"_inner","nameLocation":"10610:6:26","nodeType":"VariableDeclaration","scope":5323,"src":"10606:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5321,"nodeType":"UserDefinedTypeName","pathNode":{"id":5320,"name":"Set","nameLocations":["10606:3:26"],"nodeType":"IdentifierPath","referencedDeclaration":4851,"src":"10606:3:26"},"referencedDeclaration":4851,"src":"10606:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10588:7:26","nodeType":"StructDefinition","scope":5453,"src":"10581:42:26","visibility":"public"},{"body":{"id":5343,"nodeType":"Block","src":"10866:56:26","statements":[{"expression":{"arguments":[{"expression":{"id":5335,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"10888:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5336,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10892:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"10888:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"10908:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10900:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10900:7:26","typeDescriptions":{}}},"id":5340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10900:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5334,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"10883:4:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10883:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5333,"id":5342,"nodeType":"Return","src":"10876:39:26"}]},"documentation":{"id":5324,"nodeType":"StructuredDocumentation","src":"10629:159:26","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5344,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10802:3:26","nodeType":"FunctionDefinition","parameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5327,"mutability":"mutable","name":"set","nameLocation":"10822:3:26","nodeType":"VariableDeclaration","scope":5344,"src":"10806:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5326,"nodeType":"UserDefinedTypeName","pathNode":{"id":5325,"name":"UintSet","nameLocations":["10806:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"10806:7:26"},"referencedDeclaration":5323,"src":"10806:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5329,"mutability":"mutable","name":"value","nameLocation":"10835:5:26","nodeType":"VariableDeclaration","scope":5344,"src":"10827:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5328,"name":"uint256","nodeType":"ElementaryTypeName","src":"10827:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10805:36:26"},"returnParameters":{"id":5333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5344,"src":"10860:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5331,"name":"bool","nodeType":"ElementaryTypeName","src":"10860:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10859:6:26"},"scope":5453,"src":"10793:129:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5364,"nodeType":"Block","src":"11166:59:26","statements":[{"expression":{"arguments":[{"expression":{"id":5356,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"11191:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11195:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"11191:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5350,"src":"11211:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11203:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:26","typeDescriptions":{}}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5355,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"11183:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11183:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5354,"id":5363,"nodeType":"Return","src":"11176:42:26"}]},"documentation":{"id":5345,"nodeType":"StructuredDocumentation","src":"10928:157:26","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5365,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11099:6:26","nodeType":"FunctionDefinition","parameters":{"id":5351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5348,"mutability":"mutable","name":"set","nameLocation":"11122:3:26","nodeType":"VariableDeclaration","scope":5365,"src":"11106:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5347,"nodeType":"UserDefinedTypeName","pathNode":{"id":5346,"name":"UintSet","nameLocations":["11106:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"11106:7:26"},"referencedDeclaration":5323,"src":"11106:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5350,"mutability":"mutable","name":"value","nameLocation":"11135:5:26","nodeType":"VariableDeclaration","scope":5365,"src":"11127:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5349,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11105:36:26"},"returnParameters":{"id":5354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5365,"src":"11160:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5352,"name":"bool","nodeType":"ElementaryTypeName","src":"11160:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11159:6:26"},"scope":5453,"src":"11090:135:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5385,"nodeType":"Block","src":"11389:61:26","statements":[{"expression":{"arguments":[{"expression":{"id":5377,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"11416:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11420:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"11416:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"11436:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11428:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11428:7:26","typeDescriptions":{}}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11428:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5376,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"11406:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11406:37:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5375,"id":5384,"nodeType":"Return","src":"11399:44:26"}]},"documentation":{"id":5366,"nodeType":"StructuredDocumentation","src":"11231:70:26","text":" @dev Returns true if the value is in the set. O(1)."},"id":5386,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11315:8:26","nodeType":"FunctionDefinition","parameters":{"id":5372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5369,"mutability":"mutable","name":"set","nameLocation":"11340:3:26","nodeType":"VariableDeclaration","scope":5386,"src":"11324:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5368,"nodeType":"UserDefinedTypeName","pathNode":{"id":5367,"name":"UintSet","nameLocations":["11324:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"11324:7:26"},"referencedDeclaration":5323,"src":"11324:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5371,"mutability":"mutable","name":"value","nameLocation":"11353:5:26","nodeType":"VariableDeclaration","scope":5386,"src":"11345:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5370,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11323:36:26"},"returnParameters":{"id":5375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5386,"src":"11383:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5373,"name":"bool","nodeType":"ElementaryTypeName","src":"11383:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11382:6:26"},"scope":5453,"src":"11306:144:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5400,"nodeType":"Block","src":"11600:43:26","statements":[{"expression":{"arguments":[{"expression":{"id":5396,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"11625:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11629:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"11625:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5395,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5010,"src":"11617:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11617:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5394,"id":5399,"nodeType":"Return","src":"11610:26:26"}]},"documentation":{"id":5387,"nodeType":"StructuredDocumentation","src":"11456:70:26","text":" @dev Returns the number of values in the set. O(1)."},"id":5401,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11540:6:26","nodeType":"FunctionDefinition","parameters":{"id":5391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"set","nameLocation":"11563:3:26","nodeType":"VariableDeclaration","scope":5401,"src":"11547:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5389,"nodeType":"UserDefinedTypeName","pathNode":{"id":5388,"name":"UintSet","nameLocations":["11547:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"11547:7:26"},"referencedDeclaration":5323,"src":"11547:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11546:21:26"},"returnParameters":{"id":5394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5401,"src":"11591:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5392,"name":"uint256","nodeType":"ElementaryTypeName","src":"11591:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11590:9:26"},"scope":5453,"src":"11531:112:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5421,"nodeType":"Block","src":"12065:55:26","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5415,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"12094:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12098:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"12094:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5417,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5407,"src":"12106:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5414,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"12090:3:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12090:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12082:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5412,"name":"uint256","nodeType":"ElementaryTypeName","src":"12082:7:26","typeDescriptions":{}}},"id":5419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5411,"id":5420,"nodeType":"Return","src":"12075:38:26"}]},"documentation":{"id":5402,"nodeType":"StructuredDocumentation","src":"11649:331:26","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5422,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11994:2:26","nodeType":"FunctionDefinition","parameters":{"id":5408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5405,"mutability":"mutable","name":"set","nameLocation":"12013:3:26","nodeType":"VariableDeclaration","scope":5422,"src":"11997:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5404,"nodeType":"UserDefinedTypeName","pathNode":{"id":5403,"name":"UintSet","nameLocations":["11997:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"11997:7:26"},"referencedDeclaration":5323,"src":"11997:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5407,"mutability":"mutable","name":"index","nameLocation":"12026:5:26","nodeType":"VariableDeclaration","scope":5422,"src":"12018:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5406,"name":"uint256","nodeType":"ElementaryTypeName","src":"12018:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11996:36:26"},"returnParameters":{"id":5411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5422,"src":"12056:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5409,"name":"uint256","nodeType":"ElementaryTypeName","src":"12056:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12055:9:26"},"scope":5453,"src":"11985:135:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5451,"nodeType":"Block","src":"12738:219:26","statements":[{"assignments":[5436],"declarations":[{"constant":false,"id":5436,"mutability":"mutable","name":"store","nameLocation":"12765:5:26","nodeType":"VariableDeclaration","scope":5451,"src":"12748:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12748:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5435,"nodeType":"ArrayTypeName","src":"12748:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5441,"initialValue":{"arguments":[{"expression":{"id":5438,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"12781:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12785:6:26","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5322,"src":"12781:10:26","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4851_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5437,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12773:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4851_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12773:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12748:44:26"},{"assignments":[5446],"declarations":[{"constant":false,"id":5446,"mutability":"mutable","name":"result","nameLocation":"12819:6:26","nodeType":"VariableDeclaration","scope":5451,"src":"12802:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5444,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5445,"nodeType":"ArrayTypeName","src":"12802:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5447,"nodeType":"VariableDeclarationStatement","src":"12802:23:26"},{"AST":{"nodeType":"YulBlock","src":"12888:39:26","statements":[{"nodeType":"YulAssignment","src":"12902:15:26","value":{"name":"store","nodeType":"YulIdentifier","src":"12912:5:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12902:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5446,"isOffset":false,"isSlot":false,"src":"12902:6:26","valueSize":1},{"declaration":5436,"isOffset":false,"isSlot":false,"src":"12912:5:26","valueSize":1}],"id":5448,"nodeType":"InlineAssembly","src":"12879:48:26"},{"expression":{"id":5449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5446,"src":"12944:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5431,"id":5450,"nodeType":"Return","src":"12937:13:26"}]},"documentation":{"id":5423,"nodeType":"StructuredDocumentation","src":"12126:529:26","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5452,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12669:6:26","nodeType":"FunctionDefinition","parameters":{"id":5427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5426,"mutability":"mutable","name":"set","nameLocation":"12692:3:26","nodeType":"VariableDeclaration","scope":5452,"src":"12676:19:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5425,"nodeType":"UserDefinedTypeName","pathNode":{"id":5424,"name":"UintSet","nameLocations":["12676:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5323,"src":"12676:7:26"},"referencedDeclaration":5323,"src":"12676:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5323_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12675:21:26"},"returnParameters":{"id":5431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5452,"src":"12720:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5428,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5429,"nodeType":"ArrayTypeName","src":"12720:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12719:18:26"},"scope":5453,"src":"12660:297:26","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5454,"src":"1329:11630:26","usedErrors":[]}],"src":"205:12755:26"},"id":26},"contracts/interfaces/ISwapHelper.sol":{"ast":{"absolutePath":"contracts/interfaces/ISwapHelper.sol","exportedSymbols":{"ISwapHelper":[5479]},"id":5480,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5455,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"35:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"ISwapHelper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5479,"linearizedBaseContracts":[5479],"name":"ISwapHelper","nameLocation":"73:11:27","nodeType":"ContractDefinition","nodes":[{"functionSelector":"1a5b4207","id":5464,"implemented":false,"kind":"function","modifiers":[],"name":"requestQuote","nameLocation":"101:12:27","nodeType":"FunctionDefinition","parameters":{"id":5462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5457,"mutability":"mutable","name":"src","nameLocation":"132:3:27","nodeType":"VariableDeclaration","scope":5464,"src":"124:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5456,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5459,"mutability":"mutable","name":"dst","nameLocation":"154:3:27","nodeType":"VariableDeclaration","scope":5464,"src":"146:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5458,"name":"address","nodeType":"ElementaryTypeName","src":"146:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5461,"mutability":"mutable","name":"amount","nameLocation":"176:6:27","nodeType":"VariableDeclaration","scope":5464,"src":"168:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5460,"name":"uint256","nodeType":"ElementaryTypeName","src":"168:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"113:76:27"},"returnParameters":{"id":5463,"nodeType":"ParameterList","parameters":[],"src":"198:0:27"},"scope":5479,"src":"92:107:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f09922ff","id":5475,"implemented":false,"kind":"function","modifiers":[],"name":"requestSwap","nameLocation":"214:11:27","nodeType":"FunctionDefinition","parameters":{"id":5473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5466,"mutability":"mutable","name":"src","nameLocation":"244:3:27","nodeType":"VariableDeclaration","scope":5475,"src":"236:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5465,"name":"address","nodeType":"ElementaryTypeName","src":"236:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5468,"mutability":"mutable","name":"dst","nameLocation":"266:3:27","nodeType":"VariableDeclaration","scope":5475,"src":"258:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5467,"name":"address","nodeType":"ElementaryTypeName","src":"258:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5470,"mutability":"mutable","name":"amount","nameLocation":"288:6:27","nodeType":"VariableDeclaration","scope":5475,"src":"280:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5469,"name":"uint256","nodeType":"ElementaryTypeName","src":"280:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5472,"mutability":"mutable","name":"slippage","nameLocation":"311:8:27","nodeType":"VariableDeclaration","scope":5475,"src":"305:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5471,"name":"uint8","nodeType":"ElementaryTypeName","src":"305:5:27","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"225:101:27"},"returnParameters":{"id":5474,"nodeType":"ParameterList","parameters":[],"src":"343:0:27"},"scope":5479,"src":"205:139:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"eaad47b2","id":5478,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillSwap","nameLocation":"359:11:27","nodeType":"FunctionDefinition","parameters":{"id":5476,"nodeType":"ParameterList","parameters":[],"src":"370:2:27"},"returnParameters":{"id":5477,"nodeType":"ParameterList","parameters":[],"src":"381:0:27"},"scope":5479,"src":"350:32:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5480,"src":"63:322:27","usedErrors":[]}],"src":"35:350:27"},"id":27},"contracts/interfaces/ISwapHelperSubscriber.sol":{"ast":{"absolutePath":"contracts/interfaces/ISwapHelperSubscriber.sol","exportedSymbols":{"ISwapHelperSubscriber":[5493]},"id":5494,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5481,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"35:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"ISwapHelperSubscriber","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5493,"linearizedBaseContracts":[5493],"name":"ISwapHelperSubscriber","nameLocation":"73:21:28","nodeType":"ContractDefinition","nodes":[{"functionSelector":"b91dc4bb","id":5492,"implemented":false,"kind":"function","modifiers":[],"name":"notify","nameLocation":"111:6:28","nodeType":"FunctionDefinition","parameters":{"id":5490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5483,"mutability":"mutable","name":"src","nameLocation":"126:3:28","nodeType":"VariableDeclaration","scope":5492,"src":"118:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5482,"name":"address","nodeType":"ElementaryTypeName","src":"118:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5485,"mutability":"mutable","name":"dst","nameLocation":"139:3:28","nodeType":"VariableDeclaration","scope":5492,"src":"131:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5484,"name":"address","nodeType":"ElementaryTypeName","src":"131:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5487,"mutability":"mutable","name":"amountOut","nameLocation":"152:9:28","nodeType":"VariableDeclaration","scope":5492,"src":"144:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5486,"name":"uint256","nodeType":"ElementaryTypeName","src":"144:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5489,"mutability":"mutable","name":"amountIn","nameLocation":"171:8:28","nodeType":"VariableDeclaration","scope":5492,"src":"163:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5488,"name":"uint256","nodeType":"ElementaryTypeName","src":"163:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"117:63:28"},"returnParameters":{"id":5491,"nodeType":"ParameterList","parameters":[],"src":"189:0:28"},"scope":5493,"src":"102:88:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5494,"src":"63:130:28","usedErrors":[]}],"src":"35:158:28"},"id":28},"contracts/utils/SwapHelper.sol":{"ast":{"absolutePath":"contracts/utils/SwapHelper.sol","exportedSymbols":{"AccessControl":[2689],"Address":[3582],"BufferChainlink":[1916],"CBORChainlink":[2363],"Chainlink":[268],"ChainlinkClient":[861],"ChainlinkRequestInterface":[1076],"ConfirmedOwner":[881],"ConfirmedOwnerWithProposal":[1043],"Context":[3604],"ENSInterface":[1156],"ENSResolver_Chainlink":[2373],"ERC165":[3857],"EnumerableSet":[5453],"IAccessControl":[2762],"IERC165":[3869],"IERC20":[2840],"IERC20Permit":[2876],"ISwapHelperSubscriber":[5493],"LinkTokenInterface":[1251],"Math":[4735],"OperatorInterface":[1331],"OracleInterface":[1370],"OwnableInterface":[1386],"PointerInterface":[1394],"SafeERC20":[3252],"SignedMath":[4840],"Strings":[3833],"SwapHelper":[6193]},"id":6194,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5495,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"35:24:29"},{"absolutePath":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol","file":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol","id":5496,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":862,"src":"63:59:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","file":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","id":5497,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":882,"src":"124:58:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":5498,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":3834,"src":"186:51:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":5499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":3583,"src":"239:51:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":5500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":5454,"src":"292:65:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":5501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":2841,"src":"359:56:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":5502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":3253,"src":"417:65:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":5503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":2690,"src":"484:58:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISwapHelperSubscriber.sol","file":"../interfaces/ISwapHelperSubscriber.sol","id":5504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6194,"sourceUnit":5494,"src":"546:49:29","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5505,"name":"AccessControl","nameLocations":["622:13:29"],"nodeType":"IdentifierPath","referencedDeclaration":2689,"src":"622:13:29"},"id":5506,"nodeType":"InheritanceSpecifier","src":"622:13:29"},{"baseName":{"id":5507,"name":"ChainlinkClient","nameLocations":["637:15:29"],"nodeType":"IdentifierPath","referencedDeclaration":861,"src":"637:15:29"},"id":5508,"nodeType":"InheritanceSpecifier","src":"637:15:29"},{"baseName":{"id":5509,"name":"ConfirmedOwner","nameLocations":["654:14:29"],"nodeType":"IdentifierPath","referencedDeclaration":881,"src":"654:14:29"},"id":5510,"nodeType":"InheritanceSpecifier","src":"654:14:29"}],"canonicalName":"SwapHelper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6193,"linearizedBaseContracts":[6193,881,1043,1386,861,2689,3857,3869,2762,3604],"name":"SwapHelper","nameLocation":"608:10:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5513,"libraryName":{"id":5511,"name":"Address","nameLocations":["682:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":3582,"src":"682:7:29"},"nodeType":"UsingForDirective","src":"676:26:29","typeName":{"id":5512,"name":"address","nodeType":"ElementaryTypeName","src":"694:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":5517,"libraryName":{"id":5514,"name":"SafeERC20","nameLocations":["714:9:29"],"nodeType":"IdentifierPath","referencedDeclaration":3252,"src":"714:9:29"},"nodeType":"UsingForDirective","src":"708:27:29","typeName":{"id":5516,"nodeType":"UserDefinedTypeName","pathNode":{"id":5515,"name":"IERC20","nameLocations":["728:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"728:6:29"},"referencedDeclaration":2840,"src":"728:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}}},{"global":false,"id":5521,"libraryName":{"id":5518,"name":"Chainlink","nameLocations":["747:9:29"],"nodeType":"IdentifierPath","referencedDeclaration":268,"src":"747:9:29"},"nodeType":"UsingForDirective","src":"741:38:29","typeName":{"id":5520,"nodeType":"UserDefinedTypeName","pathNode":{"id":5519,"name":"Chainlink.Request","nameLocations":["761:9:29","771:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"761:17:29"},"referencedDeclaration":25,"src":"761:17:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}}},{"global":false,"id":5525,"libraryName":{"id":5522,"name":"EnumerableSet","nameLocations":["791:13:29"],"nodeType":"IdentifierPath","referencedDeclaration":5453,"src":"791:13:29"},"nodeType":"UsingForDirective","src":"785:49:29","typeName":{"id":5524,"nodeType":"UserDefinedTypeName","pathNode":{"id":5523,"name":"EnumerableSet.AddressSet","nameLocations":["809:13:29","823:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"809:24:29"},"referencedDeclaration":5166,"src":"809:24:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"errorSelector":"4ffddc7c","id":5527,"name":"TransferError","nameLocation":"848:13:29","nodeType":"ErrorDefinition","parameters":{"id":5526,"nodeType":"ParameterList","parameters":[],"src":"861:2:29"},"src":"842:22:29"},{"errorSelector":"dbb8dfec","id":5529,"name":"SlippageIsTooBig","nameLocation":"876:16:29","nodeType":"ErrorDefinition","parameters":{"id":5528,"nodeType":"ParameterList","parameters":[],"src":"892:2:29"},"src":"870:25:29"},{"errorSelector":"1bb0dea6","id":5531,"name":"NotEnoughNativeTokensSent","nameLocation":"907:25:29","nodeType":"ErrorDefinition","parameters":{"id":5530,"nodeType":"ParameterList","parameters":[],"src":"932:2:29"},"src":"901:34:29"},{"errorSelector":"2e237b38","id":5533,"name":"CannotAddSubscriber","nameLocation":"947:19:29","nodeType":"ErrorDefinition","parameters":{"id":5532,"nodeType":"ParameterList","parameters":[],"src":"966:2:29"},"src":"941:28:29"},{"errorSelector":"374b8dd8","id":5535,"name":"CannotRemoveSubscriber","nameLocation":"981:22:29","nodeType":"ErrorDefinition","parameters":{"id":5534,"nodeType":"ParameterList","parameters":[],"src":"1003:2:29"},"src":"975:31:29"},{"errorSelector":"7d683d53","id":5537,"name":"SwapOperationIsNotReady","nameLocation":"1018:23:29","nodeType":"ErrorDefinition","parameters":{"id":5536,"nodeType":"ParameterList","parameters":[],"src":"1041:2:29"},"src":"1012:32:29"},{"anonymous":false,"eventSelector":"c6ef891de9793cb5acefea4d38d25452da06c1b8a922180eeb0f324523b326a0","id":5547,"name":"QuoteReceived","nameLocation":"1058:13:29","nodeType":"EventDefinition","parameters":{"id":5546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5539,"indexed":true,"mutability":"mutable","name":"src","nameLocation":"1098:3:29","nodeType":"VariableDeclaration","scope":5547,"src":"1082:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5538,"name":"address","nodeType":"ElementaryTypeName","src":"1082:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5541,"indexed":true,"mutability":"mutable","name":"dst","nameLocation":"1129:3:29","nodeType":"VariableDeclaration","scope":5547,"src":"1113:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5540,"name":"address","nodeType":"ElementaryTypeName","src":"1113:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5543,"indexed":true,"mutability":"mutable","name":"amountOut","nameLocation":"1160:9:29","nodeType":"VariableDeclaration","scope":5547,"src":"1144:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1144:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5545,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"1189:8:29","nodeType":"VariableDeclaration","scope":5547,"src":"1181:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1071:133:29"},"src":"1052:153:29"},{"anonymous":false,"eventSelector":"e8a8f43c967965902142e0f7bd4b7b3c55fc5b1a0df5e84fa8ded5cafe927706","id":5555,"name":"SwapPerformed","nameLocation":"1217:13:29","nodeType":"EventDefinition","parameters":{"id":5554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5549,"indexed":true,"mutability":"mutable","name":"src","nameLocation":"1257:3:29","nodeType":"VariableDeclaration","scope":5555,"src":"1241:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5548,"name":"address","nodeType":"ElementaryTypeName","src":"1241:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5551,"indexed":true,"mutability":"mutable","name":"dst","nameLocation":"1288:3:29","nodeType":"VariableDeclaration","scope":5555,"src":"1272:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5550,"name":"address","nodeType":"ElementaryTypeName","src":"1272:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5553,"indexed":true,"mutability":"mutable","name":"amountIn","nameLocation":"1319:8:29","nodeType":"VariableDeclaration","scope":5555,"src":"1303:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5552,"name":"uint256","nodeType":"ElementaryTypeName","src":"1303:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1230:104:29"},"src":"1211:124:29"},{"anonymous":false,"eventSelector":"a6b78fc047486d5add927aa53ba0d4fc8eb23a5811e0052aebeba21469f51df8","id":5559,"name":"SwapRegistered","nameLocation":"1347:14:29","nodeType":"EventDefinition","parameters":{"id":5558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5557,"indexed":true,"mutability":"mutable","name":"swapCalldata","nameLocation":"1376:12:29","nodeType":"VariableDeclaration","scope":5559,"src":"1362:26:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5556,"name":"bytes","nodeType":"ElementaryTypeName","src":"1362:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1361:28:29"},"src":"1341:49:29"},{"constant":true,"functionSelector":"aaeafd56","id":5562,"mutability":"constant","name":"ONE_INCH_ETH_ADDRESS","nameLocation":"1422:20:29","nodeType":"VariableDeclaration","scope":6193,"src":"1398:89:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5560,"name":"address","nodeType":"ElementaryTypeName","src":"1398:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307845656565654565656545654565654565456545656545454565656565456565656565656545456545","id":5561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1445:42:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"},"visibility":"public"},{"constant":true,"functionSelector":"4e0c6133","id":5567,"mutability":"constant","name":"SWAP_AUTHORIZED_ROLE","nameLocation":"1518:20:29","nodeType":"VariableDeclaration","scope":6193,"src":"1494:80:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1494:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"535741505f415554484f52495a45445f524f4c45","id":5565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1551:22:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_fab00a984754950c7187fb98f39da0ae224abbbee017c1699445ad0e19474a4d","typeString":"literal_string \"SWAP_AUTHORIZED_ROLE\""},"value":"SWAP_AUTHORIZED_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fab00a984754950c7187fb98f39da0ae224abbbee017c1699445ad0e19474a4d","typeString":"literal_string \"SWAP_AUTHORIZED_ROLE\""}],"id":5564,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1541:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1541:33:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"a378a324","id":5572,"mutability":"constant","name":"STRATEGIST_ROLE","nameLocation":"1605:15:29","nodeType":"VariableDeclaration","scope":6193,"src":"1581:70:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1581:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"535452415445474953545f524f4c45","id":5570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1633:17:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_17a8e30262c1f919c33056d877a3c22b95c2f5e4dac44683c1c2323cd79fbdb0","typeString":"literal_string \"STRATEGIST_ROLE\""},"value":"STRATEGIST_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_17a8e30262c1f919c33056d877a3c22b95c2f5e4dac44683c1c2323cd79fbdb0","typeString":"literal_string \"STRATEGIST_ROLE\""}],"id":5569,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1623:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1623:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"fcdfd946","id":5574,"mutability":"immutable","name":"aggregationRouter","nameLocation":"1685:17:29","nodeType":"VariableDeclaration","scope":6193,"src":"1660:42:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5573,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"7ec14de8","id":5576,"mutability":"immutable","name":"quoteJobId","nameLocation":"1782:10:29","nodeType":"VariableDeclaration","scope":6193,"src":"1757:35:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1757:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"53881b66","id":5578,"mutability":"immutable","name":"quoteJobFee","nameLocation":"1870:11:29","nodeType":"VariableDeclaration","scope":6193,"src":"1845:36:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5577,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"2547db8d","id":5580,"mutability":"immutable","name":"swapCalldataJobId","nameLocation":"1915:17:29","nodeType":"VariableDeclaration","scope":6193,"src":"1890:42:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1890:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"a6ccef3e","id":5582,"mutability":"immutable","name":"swapCalldataJobFee","nameLocation":"2009:18:29","nodeType":"VariableDeclaration","scope":6193,"src":"1984:43:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5581,"name":"uint256","nodeType":"ElementaryTypeName","src":"1984:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"c87457db","id":5584,"mutability":"mutable","name":"lastQuotedSrcToken","nameLocation":"2051:18:29","nodeType":"VariableDeclaration","scope":6193,"src":"2036:33:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5583,"name":"address","nodeType":"ElementaryTypeName","src":"2036:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"c02e5bc7","id":5586,"mutability":"mutable","name":"lastQuotedDstToken","nameLocation":"2091:18:29","nodeType":"VariableDeclaration","scope":6193,"src":"2076:33:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5585,"name":"address","nodeType":"ElementaryTypeName","src":"2076:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"3662dd35","id":5588,"mutability":"mutable","name":"lastQuotedSrcTokenAmount","nameLocation":"2131:24:29","nodeType":"VariableDeclaration","scope":6193,"src":"2116:39:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5587,"name":"uint256","nodeType":"ElementaryTypeName","src":"2116:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"271e390a","id":5590,"mutability":"mutable","name":"lastSwapSrcToken","nameLocation":"2179:16:29","nodeType":"VariableDeclaration","scope":6193,"src":"2164:31:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5589,"name":"address","nodeType":"ElementaryTypeName","src":"2164:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"36868f0e","id":5592,"mutability":"mutable","name":"lastSwapDstToken","nameLocation":"2217:16:29","nodeType":"VariableDeclaration","scope":6193,"src":"2202:31:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5591,"name":"address","nodeType":"ElementaryTypeName","src":"2202:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"b56269a0","id":5594,"mutability":"mutable","name":"lastSwapSrcTokenAmount","nameLocation":"2255:22:29","nodeType":"VariableDeclaration","scope":6193,"src":"2240:37:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5593,"name":"uint256","nodeType":"ElementaryTypeName","src":"2240:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"c0d2e37f","id":5596,"mutability":"mutable","name":"isReadyToFulfillSwap","nameLocation":"2296:20:29","nodeType":"VariableDeclaration","scope":6193,"src":"2284:32:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5595,"name":"bool","nodeType":"ElementaryTypeName","src":"2284:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"id":5598,"mutability":"mutable","name":"_lastSwapCalldata","nameLocation":"2338:17:29","nodeType":"VariableDeclaration","scope":6193,"src":"2323:32:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":5597,"name":"bytes","nodeType":"ElementaryTypeName","src":"2323:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"functionSelector":"7aff3a0c","id":5600,"mutability":"mutable","name":"oneInchApiKey","nameLocation":"2378:13:29","nodeType":"VariableDeclaration","scope":6193,"src":"2364:27:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5599,"name":"string","nodeType":"ElementaryTypeName","src":"2364:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"id":5603,"mutability":"mutable","name":"_subscribers","nameLocation":"2432:12:29","nodeType":"VariableDeclaration","scope":6193,"src":"2398:46:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5602,"nodeType":"UserDefinedTypeName","pathNode":{"id":5601,"name":"EnumerableSet.AddressSet","nameLocations":["2398:13:29","2412:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":5166,"src":"2398:24:29"},"referencedDeclaration":5166,"src":"2398:24:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"body":{"id":5691,"nodeType":"Block","src":"3032:672:29","statements":[{"expression":{"arguments":[{"id":5632,"name":"chainlinkTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"3061:21:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5631,"name":"setChainlinkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"3043:17:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3043:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5634,"nodeType":"ExpressionStatement","src":"3043:40:29"},{"expression":{"arguments":[{"id":5636,"name":"chainlinkOracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5619,"src":"3113:22:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5635,"name":"setChainlinkOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"3094:18:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3094:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5638,"nodeType":"ExpressionStatement","src":"3094:42:29"},{"expression":{"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5639,"name":"quoteJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5578,"src":"3147:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5640,"name":"_quoteJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5605,"src":"3161:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3147:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5642,"nodeType":"ExpressionStatement","src":"3147:26:29"},{"expression":{"id":5645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5643,"name":"swapCalldataJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"3232:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5644,"name":"_swapCalldataJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5607,"src":"3253:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3232:40:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5646,"nodeType":"ExpressionStatement","src":"3232:40:29"},{"expression":{"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5647,"name":"quoteJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5576,"src":"3331:10:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5648,"name":"_quoteJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5609,"src":"3344:11:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3331:24:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5650,"nodeType":"ExpressionStatement","src":"3331:24:29"},{"expression":{"id":5653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5651,"name":"swapCalldataJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5580,"src":"3366:17:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5652,"name":"_swapCalldataJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"3386:18:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3366:38:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5654,"nodeType":"ExpressionStatement","src":"3366:38:29"},{"expression":{"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5655,"name":"oneInchApiKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"3415:13:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5656,"name":"_oneInchApiKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5621,"src":"3431:14:29","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3415:30:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5658,"nodeType":"ExpressionStatement","src":"3415:30:29"},{"expression":{"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5659,"name":"aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"3456:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5660,"name":"_aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3476:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3456:38:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5662,"nodeType":"ExpressionStatement","src":"3456:38:29"},{"body":{"id":5684,"nodeType":"Block","src":"3557:89:29","statements":[{"expression":{"arguments":[{"id":5675,"name":"SWAP_AUTHORIZED_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"3583:20:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":5676,"name":"authorizedToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5624,"src":"3605:16:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5681,"indexExpression":{"arguments":[{"id":5679,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"3630:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3622:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5677,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:29","typeDescriptions":{}}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3622:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3605:28:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5674,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"3572:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:62:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5683,"nodeType":"ExpressionStatement","src":"3572:62:29"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5667,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"3523:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5668,"name":"authorizedToSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5624,"src":"3527:16:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3544:6:29","memberName":"length","nodeType":"MemberAccess","src":"3527:23:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3523:27:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5685,"initializationExpression":{"assignments":[5664],"declarations":[{"constant":false,"id":5664,"mutability":"mutable","name":"i","nameLocation":"3516:1:29","nodeType":"VariableDeclaration","scope":5685,"src":"3510:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5663,"name":"uint8","nodeType":"ElementaryTypeName","src":"3510:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":5666,"initialValue":{"hexValue":"30","id":5665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3520:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3510:11:29"},"loopExpression":{"expression":{"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3552:3:29","subExpression":{"id":5671,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"3552:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":5673,"nodeType":"ExpressionStatement","src":"3552:3:29"},"nodeType":"ForStatement","src":"3505:141:29"},{"expression":{"arguments":[{"id":5687,"name":"STRATEGIST_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"3667:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5688,"name":"_strategist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5613,"src":"3684:11:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5686,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"3656:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3656:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5690,"nodeType":"ExpressionStatement","src":"3656:40:29"}]},"id":5692,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5627,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"3013:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3013:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5629,"kind":"baseConstructorSpecifier","modifierName":{"id":5626,"name":"ConfirmedOwner","nameLocations":["2998:14:29"],"nodeType":"IdentifierPath","referencedDeclaration":881,"src":"2998:14:29"},"nodeType":"ModifierInvocation","src":"2998:28:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5605,"mutability":"mutable","name":"_quoteJobFee","nameLocation":"2487:12:29","nodeType":"VariableDeclaration","scope":5692,"src":"2479:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5604,"name":"uint256","nodeType":"ElementaryTypeName","src":"2479:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5607,"mutability":"mutable","name":"_swapCalldataJobFee","nameLocation":"2518:19:29","nodeType":"VariableDeclaration","scope":5692,"src":"2510:27:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5606,"name":"uint256","nodeType":"ElementaryTypeName","src":"2510:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5609,"mutability":"mutable","name":"_quoteJobId","nameLocation":"2556:11:29","nodeType":"VariableDeclaration","scope":5692,"src":"2548:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2548:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5611,"mutability":"mutable","name":"_swapCalldataJobId","nameLocation":"2586:18:29","nodeType":"VariableDeclaration","scope":5692,"src":"2578:26:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2578:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5613,"mutability":"mutable","name":"_strategist","nameLocation":"2623:11:29","nodeType":"VariableDeclaration","scope":5692,"src":"2615:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5612,"name":"address","nodeType":"ElementaryTypeName","src":"2615:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5615,"mutability":"mutable","name":"_aggregationRouter","nameLocation":"2653:18:29","nodeType":"VariableDeclaration","scope":5692,"src":"2645:26:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5614,"name":"address","nodeType":"ElementaryTypeName","src":"2645:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5617,"mutability":"mutable","name":"chainlinkTokenAddress","nameLocation":"2690:21:29","nodeType":"VariableDeclaration","scope":5692,"src":"2682:29:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5616,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5619,"mutability":"mutable","name":"chainlinkOracleAddress","nameLocation":"2785:22:29","nodeType":"VariableDeclaration","scope":5692,"src":"2777:30:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5618,"name":"address","nodeType":"ElementaryTypeName","src":"2777:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5621,"mutability":"mutable","name":"_oneInchApiKey","nameLocation":"2887:14:29","nodeType":"VariableDeclaration","scope":5692,"src":"2873:28:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5620,"name":"string","nodeType":"ElementaryTypeName","src":"2873:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5624,"mutability":"mutable","name":"authorizedToSwap","nameLocation":"2965:16:29","nodeType":"VariableDeclaration","scope":5692,"src":"2948:33:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5622,"name":"address","nodeType":"ElementaryTypeName","src":"2948:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5623,"nodeType":"ArrayTypeName","src":"2948:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2468:520:29"},"returnParameters":{"id":5630,"nodeType":"ParameterList","parameters":[],"src":"3032:0:29"},"scope":6193,"src":"2457:1247:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5710,"nodeType":"Block","src":"3790:108:29","statements":[{"condition":{"id":5704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3805:29:29","subExpression":{"arguments":[{"id":5702,"name":"subscriber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"3823:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5700,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"3806:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3819:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":5193,"src":"3806:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$5166_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5709,"nodeType":"IfStatement","src":"3801:90:29","trueBody":{"id":5708,"nodeType":"Block","src":"3836:55:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5705,"name":"CannotAddSubscriber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"3858:19:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3858:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5707,"nodeType":"RevertStatement","src":"3851:28:29"}]}}]},"functionSelector":"94555d1a","id":5711,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5697,"name":"STRATEGIST_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"3773:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5698,"kind":"modifierInvocation","modifierName":{"id":5696,"name":"onlyRole","nameLocations":["3764:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"3764:8:29"},"nodeType":"ModifierInvocation","src":"3764:25:29"}],"name":"addSubscriber","nameLocation":"3721:13:29","nodeType":"FunctionDefinition","parameters":{"id":5695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5694,"mutability":"mutable","name":"subscriber","nameLocation":"3743:10:29","nodeType":"VariableDeclaration","scope":5711,"src":"3735:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5693,"name":"address","nodeType":"ElementaryTypeName","src":"3735:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3734:20:29"},"returnParameters":{"id":5699,"nodeType":"ParameterList","parameters":[],"src":"3790:0:29"},"scope":6193,"src":"3712:186:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5729,"nodeType":"Block","src":"3987:114:29","statements":[{"condition":{"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4002:32:29","subExpression":{"arguments":[{"id":5721,"name":"subscriber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5713,"src":"4023:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5719,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"4003:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5720,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4016:6:29","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":5220,"src":"4003:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$5166_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":5722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4003:31:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5728,"nodeType":"IfStatement","src":"3998:96:29","trueBody":{"id":5727,"nodeType":"Block","src":"4036:58:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5724,"name":"CannotRemoveSubscriber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5535,"src":"4058:22:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4058:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5726,"nodeType":"RevertStatement","src":"4051:31:29"}]}}]},"functionSelector":"627c34ad","id":5730,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5716,"name":"STRATEGIST_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"3970:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5717,"kind":"modifierInvocation","modifierName":{"id":5715,"name":"onlyRole","nameLocations":["3961:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"3961:8:29"},"nodeType":"ModifierInvocation","src":"3961:25:29"}],"name":"removeSubscriber","nameLocation":"3915:16:29","nodeType":"FunctionDefinition","parameters":{"id":5714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5713,"mutability":"mutable","name":"subscriber","nameLocation":"3940:10:29","nodeType":"VariableDeclaration","scope":5730,"src":"3932:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5712,"name":"address","nodeType":"ElementaryTypeName","src":"3932:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3931:20:29"},"returnParameters":{"id":5718,"nodeType":"ParameterList","parameters":[],"src":"3987:0:29"},"scope":6193,"src":"3906:195:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5742,"nodeType":"Block","src":"4186:56:29","statements":[{"expression":{"arguments":[{"id":5739,"name":"subscriberIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"4220:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5737,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"4204:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5738,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4217:2:29","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":5289,"src":"4204:15:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5166_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5736,"id":5741,"nodeType":"Return","src":"4197:37:29"}]},"functionSelector":"6ccf5b01","id":5743,"implemented":true,"kind":"function","modifiers":[],"name":"subscriberAt","nameLocation":"4118:12:29","nodeType":"FunctionDefinition","parameters":{"id":5733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5732,"mutability":"mutable","name":"subscriberIdx","nameLocation":"4139:13:29","nodeType":"VariableDeclaration","scope":5743,"src":"4131:21:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5731,"name":"uint256","nodeType":"ElementaryTypeName","src":"4131:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4130:23:29"},"returnParameters":{"id":5736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5743,"src":"4177:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5734,"name":"address","nodeType":"ElementaryTypeName","src":"4177:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4176:9:29"},"scope":6193,"src":"4109:133:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5752,"nodeType":"Block","src":"4311:47:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5748,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"4329:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4342:6:29","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":5262,"src":"4329:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5166_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4329:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5747,"id":5751,"nodeType":"Return","src":"4322:28:29"}]},"functionSelector":"66b8455b","id":5753,"implemented":true,"kind":"function","modifiers":[],"name":"subscribersLength","nameLocation":"4259:17:29","nodeType":"FunctionDefinition","parameters":{"id":5744,"nodeType":"ParameterList","parameters":[],"src":"4276:2:29"},"returnParameters":{"id":5747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5753,"src":"4302:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5745,"name":"uint256","nodeType":"ElementaryTypeName","src":"4302:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4301:9:29"},"scope":6193,"src":"4250:108:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5861,"nodeType":"Block","src":"4504:1058:29","statements":[{"assignments":[5769],"declarations":[{"constant":false,"id":5769,"mutability":"mutable","name":"req","nameLocation":"4540:3:29","nodeType":"VariableDeclaration","scope":5861,"src":"4515:28:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":5768,"nodeType":"UserDefinedTypeName","pathNode":{"id":5767,"name":"Chainlink.Request","nameLocations":["4515:9:29","4525:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"4515:17:29"},"referencedDeclaration":25,"src":"4515:17:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"id":5780,"initialValue":{"arguments":[{"id":5771,"name":"quoteJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5576,"src":"4582:10:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5774,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4615:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}],"id":5773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4607:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5772,"name":"address","nodeType":"ElementaryTypeName","src":"4607:7:29","typeDescriptions":{}}},"id":5775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4607:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"expression":{"id":5776,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4635:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4640:19:29","memberName":"fulfillQuoteRequest","nodeType":"MemberAccess","referencedDeclaration":5911,"src":"4635:24:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) external"}},"id":5778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4660:8:29","memberName":"selector","nodeType":"MemberAccess","src":"4635:33:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5770,"name":"buildChainlinkRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"4546:21:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_address_$_t_bytes4_$returns$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (bytes32,address,bytes4) pure returns (struct Chainlink.Request memory)"}},"id":5779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:133:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"nodeType":"VariableDeclarationStatement","src":"4515:164:29"},{"expression":{"arguments":[{"hexValue":"6d6574686f64","id":5784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4698:8:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_9c87604675c4160b0aac6ee753604a7ebe1728c804a0ac841ff8bb02e543aa3a","typeString":"literal_string \"method\""},"value":"method"},{"hexValue":"474554","id":5785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4708:5:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a61babeb76c554783ca90a1a250e84f1b703409fdff33c217ab64dd51f05199","typeString":"literal_string \"GET\""},"value":"GET"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9c87604675c4160b0aac6ee753604a7ebe1728c804a0ac841ff8bb02e543aa3a","typeString":"literal_string \"method\""},{"typeIdentifier":"t_stringliteral_5a61babeb76c554783ca90a1a250e84f1b703409fdff33c217ab64dd51f05199","typeString":"literal_string \"GET\""}],"expression":{"id":5781,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"4690:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4694:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4690:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4690:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5787,"nodeType":"ExpressionStatement","src":"4690:24:29"},{"expression":{"arguments":[{"hexValue":"75726c","id":5791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4747:5:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0","typeString":"literal_string \"url\""},"value":"url"},{"arguments":[{"arguments":[{"hexValue":"68747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f312f71756f74653f7372633d","id":5796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4832:46:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_329eeb4a4583d7a66e5660cf8367b5fba2de6b1d6f9cec18ada71226f6b376a0","typeString":"literal_string \"https://api.1inch.dev/swap/v5.2/1/quote?src=\""},"value":"https://api.1inch.dev/swap/v5.2/1/quote?src="},{"arguments":[{"id":5799,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5755,"src":"4922:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5797,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4902:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4910:11:29","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"4902:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4902:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"266473743d","id":5801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4949:7:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb","typeString":"literal_string \"&dst=\""},"value":"&dst="},{"arguments":[{"id":5804,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"4999:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5802,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4979:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4987:11:29","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"4979:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4979:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"26616d6f756e743d","id":5806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5026:10:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e","typeString":"literal_string \"&amount=\""},"value":"&amount="},{"arguments":[{"id":5809,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"5076:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5807,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"5059:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5067:8:29","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"5059:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5059:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_329eeb4a4583d7a66e5660cf8367b5fba2de6b1d6f9cec18ada71226f6b376a0","typeString":"literal_string \"https://api.1inch.dev/swap/v5.2/1/quote?src=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb","typeString":"literal_string \"&dst=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e","typeString":"literal_string \"&amount=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5794,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4793:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4797:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"4793:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:309:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4768:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5792,"name":"string","nodeType":"ElementaryTypeName","src":"4768:6:29","typeDescriptions":{}}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:349:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0","typeString":"literal_string \"url\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5788,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"4725:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4729:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4725:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4725:403:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5814,"nodeType":"ExpressionStatement","src":"4725:403:29"},{"expression":{"arguments":[{"hexValue":"68656164657273","id":5818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5147:9:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_3702fcba417a3aace5d80999132d64139d688ffc56c0f87aa12ddf6965fc223e","typeString":"literal_string \"headers\""},"value":"headers"},{"arguments":[{"arguments":[{"hexValue":"5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c2022417574686f72697a6174696f6e222c202242656172657220","id":5823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5196:58:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f","typeString":"literal_string \"[\"accept\", \"application/json\", \"Authorization\", \"Bearer \""},"value":"[\"accept\", \"application/json\", \"Authorization\", \"Bearer "},{"id":5824,"name":"oneInchApiKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"5269:13:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"hexValue":"225d","id":5825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5297:4:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f","typeString":"literal_string \"\"]\""},"value":"\"]"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f","typeString":"literal_string \"[\"accept\", \"application/json\", \"Authorization\", \"Bearer \""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f","typeString":"literal_string \"\"]\""}],"expression":{"id":5821,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5165:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5169:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"5165:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5165:147:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5158:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5819,"name":"string","nodeType":"ElementaryTypeName","src":"5158:6:29","typeDescriptions":{}}},"id":5827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5158:155:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3702fcba417a3aace5d80999132d64139d688ffc56c0f87aa12ddf6965fc223e","typeString":"literal_string \"headers\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5815,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"5139:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5143:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"5139:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:175:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5829,"nodeType":"ExpressionStatement","src":"5139:175:29"},{"expression":{"arguments":[{"hexValue":"636f6e74616374","id":5833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5333:9:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_6be81f44a30913f99d25c9847e7ea48a710e1caeb206d146373760831d834e48","typeString":"literal_string \"contact\""},"value":"contact"},{"hexValue":"6e756d657274","id":5834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5344:8:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_a192b980d744a480fc9568be5f76e5e05b2b3bd1b58c9217fa4f960363e10f0d","typeString":"literal_string \"numert\""},"value":"numert"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6be81f44a30913f99d25c9847e7ea48a710e1caeb206d146373760831d834e48","typeString":"literal_string \"contact\""},{"typeIdentifier":"t_stringliteral_a192b980d744a480fc9568be5f76e5e05b2b3bd1b58c9217fa4f960363e10f0d","typeString":"literal_string \"numert\""}],"expression":{"id":5830,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"5325:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5832,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5329:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"5325:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5325:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5836,"nodeType":"ExpressionStatement","src":"5325:28:29"},{"expression":{"arguments":[{"hexValue":"70617468","id":5840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5372:6:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},"value":"path"},{"hexValue":"746f416d6f756e74","id":5841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5380:10:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a97aa34be06fbf87c9661e8380866403604a2b9fd28167202d116c55596f8fd","typeString":"literal_string \"toAmount\""},"value":"toAmount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},{"typeIdentifier":"t_stringliteral_2a97aa34be06fbf87c9661e8380866403604a2b9fd28167202d116c55596f8fd","typeString":"literal_string \"toAmount\""}],"expression":{"id":5837,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"5364:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5368:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"5364:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":5842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5364:27:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5843,"nodeType":"ExpressionStatement","src":"5364:27:29"},{"expression":{"id":5846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5844,"name":"lastQuotedSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"5402:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5845,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5755,"src":"5423:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5402:24:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5847,"nodeType":"ExpressionStatement","src":"5402:24:29"},{"expression":{"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5848,"name":"lastQuotedDstToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"5437:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5849,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"5458:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5437:24:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5851,"nodeType":"ExpressionStatement","src":"5437:24:29"},{"expression":{"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5852,"name":"lastQuotedSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5588,"src":"5472:24:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5853,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"5499:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5472:33:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5855,"nodeType":"ExpressionStatement","src":"5472:33:29"},{"expression":{"arguments":[{"id":5857,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"5537:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},{"id":5858,"name":"quoteJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5578,"src":"5542:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5856,"name":"sendChainlinkRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"5516:20:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Request_$25_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct Chainlink.Request memory,uint256) returns (bytes32)"}},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5516:38:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5860,"nodeType":"ExpressionStatement","src":"5516:38:29"}]},"functionSelector":"1a5b4207","id":5862,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5762,"name":"SWAP_AUTHORIZED_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"4482:20:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5763,"kind":"modifierInvocation","modifierName":{"id":5761,"name":"onlyRole","nameLocations":["4473:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"4473:8:29"},"nodeType":"ModifierInvocation","src":"4473:30:29"}],"name":"requestQuote","nameLocation":"4375:12:29","nodeType":"FunctionDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5755,"mutability":"mutable","name":"src","nameLocation":"4406:3:29","nodeType":"VariableDeclaration","scope":5862,"src":"4398:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5754,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5757,"mutability":"mutable","name":"dst","nameLocation":"4428:3:29","nodeType":"VariableDeclaration","scope":5862,"src":"4420:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5756,"name":"address","nodeType":"ElementaryTypeName","src":"4420:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5759,"mutability":"mutable","name":"amount","nameLocation":"4450:6:29","nodeType":"VariableDeclaration","scope":5862,"src":"4442:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5758,"name":"uint256","nodeType":"ElementaryTypeName","src":"4442:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4387:76:29"},"returnParameters":{"id":5764,"nodeType":"ParameterList","parameters":[],"src":"4504:0:29"},"scope":6193,"src":"4366:1196:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5910,"nodeType":"Block","src":"5707:510:29","statements":[{"eventCall":{"arguments":[{"id":5873,"name":"lastQuotedSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"5751:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5874,"name":"lastQuotedDstToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"5785:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5875,"name":"toAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"5819:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5876,"name":"lastQuotedSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5588,"src":"5843:24:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5872,"name":"QuoteReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5547,"src":"5723:13:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5723:155:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5878,"nodeType":"EmitStatement","src":"5718:160:29"},{"assignments":[5880],"declarations":[{"constant":false,"id":5880,"mutability":"mutable","name":"length","nameLocation":"5897:6:29","nodeType":"VariableDeclaration","scope":5910,"src":"5889:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5879,"name":"uint256","nodeType":"ElementaryTypeName","src":"5889:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5884,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5881,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"5906:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5919:6:29","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":5262,"src":"5906:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5166_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5906:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5889:38:29"},{"body":{"id":5908,"nodeType":"Block","src":"5976:234:29","statements":[{"expression":{"arguments":[{"id":5902,"name":"lastQuotedSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"6058:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5903,"name":"lastQuotedDstToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"6095:18:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5904,"name":"toAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"6132:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5905,"name":"lastQuotedSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5588,"src":"6159:24:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":5898,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5886,"src":"6029:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5896,"name":"_subscribers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5603,"src":"6013:12:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5166_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":5897,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6026:2:29","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":5289,"src":"6013:15:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5166_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$5166_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":5899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6013:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5895,"name":"ISwapHelperSubscriber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5493,"src":"5991:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapHelperSubscriber_$5493_$","typeString":"type(contract ISwapHelperSubscriber)"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:41:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISwapHelperSubscriber_$5493","typeString":"contract ISwapHelperSubscriber"}},"id":5901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6033:6:29","memberName":"notify","nodeType":"MemberAccess","referencedDeclaration":5492,"src":"5991:48:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) external"}},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:207:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5907,"nodeType":"ExpressionStatement","src":"5991:207:29"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5886,"src":"5959:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5890,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5880,"src":"5963:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5959:10:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5909,"initializationExpression":{"assignments":[5886],"declarations":[{"constant":false,"id":5886,"mutability":"mutable","name":"i","nameLocation":"5952:1:29","nodeType":"VariableDeclaration","scope":5909,"src":"5944:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5885,"name":"uint256","nodeType":"ElementaryTypeName","src":"5944:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5888,"initialValue":{"hexValue":"30","id":5887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5956:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5944:13:29"},"loopExpression":{"expression":{"id":5893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5971:3:29","subExpression":{"id":5892,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5886,"src":"5971:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5894,"nodeType":"ExpressionStatement","src":"5971:3:29"},"nodeType":"ForStatement","src":"5939:271:29"}]},"functionSelector":"459c75d8","id":5911,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5869,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5864,"src":"5695:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5870,"kind":"modifierInvocation","modifierName":{"id":5868,"name":"recordChainlinkFulfillment","nameLocations":["5668:26:29"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"5668:26:29"},"nodeType":"ModifierInvocation","src":"5668:37:29"}],"name":"fulfillQuoteRequest","nameLocation":"5579:19:29","nodeType":"FunctionDefinition","parameters":{"id":5867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5864,"mutability":"mutable","name":"requestId","nameLocation":"5617:9:29","nodeType":"VariableDeclaration","scope":5911,"src":"5609:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5609:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5866,"mutability":"mutable","name":"toAmount","nameLocation":"5645:8:29","nodeType":"VariableDeclaration","scope":5911,"src":"5637:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5865,"name":"uint256","nodeType":"ElementaryTypeName","src":"5637:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5598:62:29"},"returnParameters":{"id":5871,"nodeType":"ParameterList","parameters":[],"src":"5707:0:29"},"scope":6193,"src":"5570:647:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6088,"nodeType":"Block","src":"6395:1829:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5925,"name":"slippage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5919,"src":"6410:8:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3530","id":5926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6421:2:29","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"6410:13:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5932,"nodeType":"IfStatement","src":"6406:126:29","trueBody":{"id":5931,"nodeType":"Block","src":"6425:107:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5928,"name":"SlippageIsTooBig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"6447:16:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6447:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5930,"nodeType":"RevertStatement","src":"6440:25:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5933,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"6546:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5934,"name":"ONE_INCH_ETH_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"6553:20:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6546:27:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5936,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"6577:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5937,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6586:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6590:5:29","memberName":"value","nodeType":"MemberAccess","src":"6586:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6577:18:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6546:49:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5945,"nodeType":"IfStatement","src":"6542:116:29","trueBody":{"id":5944,"nodeType":"Block","src":"6597:61:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5941,"name":"NotEnoughNativeTokensSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5531,"src":"6619:25:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6619:27:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5943,"nodeType":"RevertStatement","src":"6612:34:29"}]}},{"expression":{"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5946,"name":"isReadyToFulfillSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"6668:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6691:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6668:28:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5949,"nodeType":"ExpressionStatement","src":"6668:28:29"},{"assignments":[5952],"declarations":[{"constant":false,"id":5952,"mutability":"mutable","name":"srcErc20","nameLocation":"6752:8:29","nodeType":"VariableDeclaration","scope":6088,"src":"6745:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"},"typeName":{"id":5951,"nodeType":"UserDefinedTypeName","pathNode":{"id":5950,"name":"IERC20","nameLocations":["6745:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2840,"src":"6745:6:29"},"referencedDeclaration":2840,"src":"6745:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"visibility":"internal"}],"id":5956,"initialValue":{"arguments":[{"id":5954,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"6770:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5953,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"6763:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2840_$","typeString":"type(contract IERC20)"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6763:11:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"6745:29:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5961,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6816:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}],"id":5960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6808:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5959,"name":"address","nodeType":"ElementaryTypeName","src":"6808:7:29","typeDescriptions":{}}},"id":5962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6808:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5963,"name":"aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"6823:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5957,"name":"srcErc20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5952,"src":"6789:8:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":5958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6798:9:29","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2817,"src":"6789:18:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6789:52:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5965,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"6844:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6789:61:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5979,"nodeType":"IfStatement","src":"6785:148:29","trueBody":{"id":5978,"nodeType":"Block","src":"6852:81:29","statements":[{"expression":{"arguments":[{"id":5970,"name":"aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"6884:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":5973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6908:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5972,"name":"uint256","nodeType":"ElementaryTypeName","src":"6908:7:29","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":5971,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6903:4:29","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":5975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6917:3:29","memberName":"max","nodeType":"MemberAccess","src":"6903:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5967,"name":"srcErc20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5952,"src":"6867:8:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2840","typeString":"contract IERC20"}},"id":5969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6876:7:29","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"6867:16:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6867:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5977,"nodeType":"ExpressionStatement","src":"6867:54:29"}]}},{"assignments":[5984],"declarations":[{"constant":false,"id":5984,"mutability":"mutable","name":"req","nameLocation":"6978:3:29","nodeType":"VariableDeclaration","scope":6088,"src":"6953:28:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request"},"typeName":{"id":5983,"nodeType":"UserDefinedTypeName","pathNode":{"id":5982,"name":"Chainlink.Request","nameLocations":["6953:9:29","6963:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"6953:17:29"},"referencedDeclaration":25,"src":"6953:17:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_storage_ptr","typeString":"struct Chainlink.Request"}},"visibility":"internal"}],"id":5995,"initialValue":{"arguments":[{"id":5986,"name":"swapCalldataJobId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5580,"src":"7020:17:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5989,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7060:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}],"id":5988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7052:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5987,"name":"address","nodeType":"ElementaryTypeName","src":"7052:7:29","typeDescriptions":{}}},"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7052:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"expression":{"id":5991,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7080:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}},"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7085:20:29","memberName":"registerSwapCalldata","nodeType":"MemberAccess","referencedDeclaration":6112,"src":"7080:25:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory) external"}},"id":5993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7106:8:29","memberName":"selector","nodeType":"MemberAccess","src":"7080:34:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5985,"name":"buildChainlinkRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"6984:21:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_address_$_t_bytes4_$returns$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (bytes32,address,bytes4) pure returns (struct Chainlink.Request memory)"}},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6984:141:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"nodeType":"VariableDeclarationStatement","src":"6953:172:29"},{"expression":{"arguments":[{"hexValue":"6d6574686f64","id":5999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7144:8:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_9c87604675c4160b0aac6ee753604a7ebe1728c804a0ac841ff8bb02e543aa3a","typeString":"literal_string \"method\""},"value":"method"},{"hexValue":"474554","id":6000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7154:5:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a61babeb76c554783ca90a1a250e84f1b703409fdff33c217ab64dd51f05199","typeString":"literal_string \"GET\""},"value":"GET"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9c87604675c4160b0aac6ee753604a7ebe1728c804a0ac841ff8bb02e543aa3a","typeString":"literal_string \"method\""},{"typeIdentifier":"t_stringliteral_5a61babeb76c554783ca90a1a250e84f1b703409fdff33c217ab64dd51f05199","typeString":"literal_string \"GET\""}],"expression":{"id":5996,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"7136:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":5998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7140:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"7136:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":6001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7136:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6002,"nodeType":"ExpressionStatement","src":"7136:24:29"},{"expression":{"arguments":[{"hexValue":"75726c","id":6006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7193:5:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0","typeString":"literal_string \"url\""},"value":"url"},{"arguments":[{"arguments":[{"hexValue":"68747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f312f737761703f7372633d","id":6011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7278:45:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_de9f2498340b248ff2d24f0cdfee064a6725d669d562c5a84279c165693b4e4f","typeString":"literal_string \"https://api.1inch.dev/swap/v5.2/1/swap?src=\""},"value":"https://api.1inch.dev/swap/v5.2/1/swap?src="},{"arguments":[{"id":6014,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"7367:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6012,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7347:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":6013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7355:11:29","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"7347:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7347:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"266473743d","id":6016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7394:7:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb","typeString":"literal_string \"&dst=\""},"value":"&dst="},{"arguments":[{"id":6019,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5915,"src":"7444:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6017,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7424:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7432:11:29","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"7424:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":6020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7424:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"26616d6f756e743d","id":6021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7471:10:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e","typeString":"literal_string \"&amount=\""},"value":"&amount="},{"arguments":[{"id":6024,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"7521:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6022,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7504:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":6023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7512:8:29","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"7504:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7504:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2666726f6d3d","id":6026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7551:8:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_3f49b29f52f0281c51cdb4adae0aadd650f5a622f1a42aa616d480bea7f870d9","typeString":"literal_string \"&from=\""},"value":"&from="},{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":6029,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"7602:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7602:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6027,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7582:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":6028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7590:11:29","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3807,"src":"7582:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7582:33:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"26736c6970706167653d","id":6032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7638:12:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_18aa6a76c2a3ae03dc43fcc080507431bda5b847b0889951f51a99adff468ec9","typeString":"literal_string \"&slippage=\""},"value":"&slippage="},{"arguments":[{"id":6035,"name":"slippage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5919,"src":"7690:8:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":6033,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7673:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3833_$","typeString":"type(library Strings)"}},"id":6034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7681:8:29","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"7673:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7673:26:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2664697361626c65457374696d6174653d74727565","id":6037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7722:23:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_1b914c1d770ee2ed30351e643289a051a6b8142bc26bdcd7f3114c8501286430","typeString":"literal_string \"&disableEstimate=true\""},"value":"&disableEstimate=true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_de9f2498340b248ff2d24f0cdfee064a6725d669d562c5a84279c165693b4e4f","typeString":"literal_string \"https://api.1inch.dev/swap/v5.2/1/swap?src=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb","typeString":"literal_string \"&dst=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e","typeString":"literal_string \"&amount=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3f49b29f52f0281c51cdb4adae0aadd650f5a622f1a42aa616d480bea7f870d9","typeString":"literal_string \"&from=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_18aa6a76c2a3ae03dc43fcc080507431bda5b847b0889951f51a99adff468ec9","typeString":"literal_string \"&slippage=\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_1b914c1d770ee2ed30351e643289a051a6b8142bc26bdcd7f3114c8501286430","typeString":"literal_string \"&disableEstimate=true\""}],"expression":{"id":6009,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7239:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7243:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"7239:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7239:525:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7214:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":6007,"name":"string","nodeType":"ElementaryTypeName","src":"7214:6:29","typeDescriptions":{}}},"id":6039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7214:565:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b68b5f5089998f2978a1dcc681e8ef27962b90d5c26c4c0b9c1945814ffa5ef0","typeString":"literal_string \"url\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":6003,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"7171:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":6005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7175:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"7171:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":6040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7171:619:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6041,"nodeType":"ExpressionStatement","src":"7171:619:29"},{"expression":{"arguments":[{"hexValue":"68656164657273","id":6045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7809:9:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_3702fcba417a3aace5d80999132d64139d688ffc56c0f87aa12ddf6965fc223e","typeString":"literal_string \"headers\""},"value":"headers"},{"arguments":[{"arguments":[{"hexValue":"5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c2022417574686f72697a6174696f6e222c202242656172657220","id":6050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7858:58:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f","typeString":"literal_string \"[\"accept\", \"application/json\", \"Authorization\", \"Bearer \""},"value":"[\"accept\", \"application/json\", \"Authorization\", \"Bearer "},{"id":6051,"name":"oneInchApiKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"7931:13:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"hexValue":"225d","id":6052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7959:4:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f","typeString":"literal_string \"\"]\""},"value":"\"]"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f","typeString":"literal_string \"[\"accept\", \"application/json\", \"Authorization\", \"Bearer \""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f","typeString":"literal_string \"\"]\""}],"expression":{"id":6048,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7827:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7831:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"7827:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7827:147:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7820:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":6046,"name":"string","nodeType":"ElementaryTypeName","src":"7820:6:29","typeDescriptions":{}}},"id":6054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7820:155:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3702fcba417a3aace5d80999132d64139d688ffc56c0f87aa12ddf6965fc223e","typeString":"literal_string \"headers\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":6042,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"7801:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":6044,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7805:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"7801:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":6055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7801:175:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6056,"nodeType":"ExpressionStatement","src":"7801:175:29"},{"expression":{"arguments":[{"hexValue":"636f6e74616374","id":6060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7995:9:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_6be81f44a30913f99d25c9847e7ea48a710e1caeb206d146373760831d834e48","typeString":"literal_string \"contact\""},"value":"contact"},{"hexValue":"6e756d657274","id":6061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8006:8:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_a192b980d744a480fc9568be5f76e5e05b2b3bd1b58c9217fa4f960363e10f0d","typeString":"literal_string \"numert\""},"value":"numert"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6be81f44a30913f99d25c9847e7ea48a710e1caeb206d146373760831d834e48","typeString":"literal_string \"contact\""},{"typeIdentifier":"t_stringliteral_a192b980d744a480fc9568be5f76e5e05b2b3bd1b58c9217fa4f960363e10f0d","typeString":"literal_string \"numert\""}],"expression":{"id":6057,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"7987:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":6059,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7991:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"7987:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":6062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7987:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6063,"nodeType":"ExpressionStatement","src":"7987:28:29"},{"expression":{"arguments":[{"hexValue":"70617468","id":6067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8034:6:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},"value":"path"},{"hexValue":"74782c64617461","id":6068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8042:9:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_071fda0300ad21c54f44103bde3ea158e9b88df8cae9270174c5726792cebaec","typeString":"literal_string \"tx,data\""},"value":"tx,data"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},{"typeIdentifier":"t_stringliteral_071fda0300ad21c54f44103bde3ea158e9b88df8cae9270174c5726792cebaec","typeString":"literal_string \"tx,data\""}],"expression":{"id":6064,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"8026:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},"id":6066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8030:3:29","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":125,"src":"8026:7:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$25_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$25_memory_ptr_$","typeString":"function (struct Chainlink.Request memory,string memory,string memory) pure"}},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8026:26:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6070,"nodeType":"ExpressionStatement","src":"8026:26:29"},{"expression":{"id":6073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6071,"name":"lastSwapSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5590,"src":"8063:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6072,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"8082:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8063:22:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6074,"nodeType":"ExpressionStatement","src":"8063:22:29"},{"expression":{"id":6077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6075,"name":"lastSwapDstToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5592,"src":"8096:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6076,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5915,"src":"8115:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8096:22:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6078,"nodeType":"ExpressionStatement","src":"8096:22:29"},{"expression":{"id":6081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6079,"name":"lastSwapSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"8129:22:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6080,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"8154:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8129:31:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6082,"nodeType":"ExpressionStatement","src":"8129:31:29"},{"expression":{"arguments":[{"id":6084,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5984,"src":"8192:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"}},{"id":6085,"name":"swapCalldataJobFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"8197:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$25_memory_ptr","typeString":"struct Chainlink.Request memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6083,"name":"sendChainlinkRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"8171:20:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Request_$25_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct Chainlink.Request memory,uint256) returns (bytes32)"}},"id":6086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8171:45:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6087,"nodeType":"ExpressionStatement","src":"8171:45:29"}]},"functionSelector":"f09922ff","id":6089,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5922,"name":"SWAP_AUTHORIZED_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5567,"src":"6373:20:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5923,"kind":"modifierInvocation","modifierName":{"id":5921,"name":"onlyRole","nameLocations":["6364:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"6364:8:29"},"nodeType":"ModifierInvocation","src":"6364:30:29"}],"name":"requestSwap","nameLocation":"6234:11:29","nodeType":"FunctionDefinition","parameters":{"id":5920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5913,"mutability":"mutable","name":"src","nameLocation":"6264:3:29","nodeType":"VariableDeclaration","scope":6089,"src":"6256:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5912,"name":"address","nodeType":"ElementaryTypeName","src":"6256:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5915,"mutability":"mutable","name":"dst","nameLocation":"6286:3:29","nodeType":"VariableDeclaration","scope":6089,"src":"6278:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5914,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5917,"mutability":"mutable","name":"amount","nameLocation":"6308:6:29","nodeType":"VariableDeclaration","scope":6089,"src":"6300:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5916,"name":"uint256","nodeType":"ElementaryTypeName","src":"6300:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5919,"mutability":"mutable","name":"slippage","nameLocation":"6331:8:29","nodeType":"VariableDeclaration","scope":6089,"src":"6325:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5918,"name":"uint8","nodeType":"ElementaryTypeName","src":"6325:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6245:101:29"},"returnParameters":{"id":5924,"nodeType":"ParameterList","parameters":[],"src":"6395:0:29"},"scope":6193,"src":"6225:1999:29","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":6111,"nodeType":"Block","src":"8378:133:29","statements":[{"expression":{"id":6101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6099,"name":"_lastSwapCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"8389:17:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6100,"name":"swapCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6093,"src":"8409:12:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"8389:32:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":6102,"nodeType":"ExpressionStatement","src":"8389:32:29"},{"expression":{"id":6105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6103,"name":"isReadyToFulfillSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"8432:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8455:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8432:27:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6106,"nodeType":"ExpressionStatement","src":"8432:27:29"},{"eventCall":{"arguments":[{"id":6108,"name":"swapCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6093,"src":"8490:12:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6107,"name":"SwapRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5559,"src":"8475:14:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":6109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8475:28:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6110,"nodeType":"EmitStatement","src":"8470:33:29"}]},"functionSelector":"02458ad8","id":6112,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6096,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6091,"src":"8367:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6097,"kind":"modifierInvocation","modifierName":{"id":6095,"name":"recordChainlinkFulfillment","nameLocations":["8340:26:29"],"nodeType":"IdentifierPath","referencedDeclaration":841,"src":"8340:26:29"},"nodeType":"ModifierInvocation","src":"8340:37:29"}],"name":"registerSwapCalldata","nameLocation":"8241:20:29","nodeType":"FunctionDefinition","parameters":{"id":6094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6091,"mutability":"mutable","name":"requestId","nameLocation":"8280:9:29","nodeType":"VariableDeclaration","scope":6112,"src":"8272:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6090,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8272:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6093,"mutability":"mutable","name":"swapCalldata","nameLocation":"8313:12:29","nodeType":"VariableDeclaration","scope":6112,"src":"8300:25:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6092,"name":"bytes","nodeType":"ElementaryTypeName","src":"8300:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8261:71:29"},"returnParameters":{"id":6098,"nodeType":"ParameterList","parameters":[],"src":"8378:0:29"},"scope":6193,"src":"8232:279:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6154,"nodeType":"Block","src":"8577:578:29","statements":[{"condition":{"id":6119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8592:21:29","subExpression":{"id":6118,"name":"isReadyToFulfillSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"8593:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6124,"nodeType":"IfStatement","src":"8588:86:29","trueBody":{"id":6123,"nodeType":"Block","src":"8615:59:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6120,"name":"SwapOperationIsNotReady","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5537,"src":"8637:23:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8637:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6122,"nodeType":"RevertStatement","src":"8630:32:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6125,"name":"lastSwapSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5590,"src":"8688:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6126,"name":"ONE_INCH_ETH_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"8708:20:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8688:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6142,"nodeType":"Block","src":"8894:76:29","statements":[{"expression":{"arguments":[{"id":6139,"name":"_lastSwapCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"8940:17:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"expression":{"id":6136,"name":"aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"8909:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8927:12:29","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3322,"src":"8909:30:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":6140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8909:49:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6141,"nodeType":"ExpressionStatement","src":"8909:49:29"}]},"id":6143,"nodeType":"IfStatement","src":"8684:286:29","trueBody":{"id":6135,"nodeType":"Block","src":"8730:158:29","statements":[{"expression":{"arguments":[{"id":6131,"name":"_lastSwapCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"8803:17:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},{"id":6132,"name":"lastSwapSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"8839:22:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6128,"name":"aggregationRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"8745:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8763:21:29","memberName":"functionCallWithValue","nodeType":"MemberAccess","referencedDeclaration":3362,"src":"8745:39:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":6133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8745:131:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6134,"nodeType":"ExpressionStatement","src":"8745:131:29"}]}},{"eventCall":{"arguments":[{"id":6145,"name":"lastSwapSrcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5590,"src":"9013:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6146,"name":"lastSwapDstToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5592,"src":"9044:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6147,"name":"lastSwapSrcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5594,"src":"9075:22:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6144,"name":"SwapPerformed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5555,"src":"8985:13:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:123:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6149,"nodeType":"EmitStatement","src":"8980:128:29"},{"expression":{"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6150,"name":"isReadyToFulfillSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"9119:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9142:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"9119:28:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6153,"nodeType":"ExpressionStatement","src":"9119:28:29"}]},"functionSelector":"eaad47b2","id":6155,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6115,"name":"STRATEGIST_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"8560:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6116,"kind":"modifierInvocation","modifierName":{"id":6114,"name":"onlyRole","nameLocations":["8551:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"8551:8:29"},"nodeType":"ModifierInvocation","src":"8551:25:29"}],"name":"fulfillSwap","nameLocation":"8528:11:29","nodeType":"FunctionDefinition","parameters":{"id":6113,"nodeType":"ParameterList","parameters":[],"src":"8539:2:29"},"returnParameters":{"id":6117,"nodeType":"ParameterList","parameters":[],"src":"8577:0:29"},"scope":6193,"src":"8519:636:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6187,"nodeType":"Block","src":"9228:210:29","statements":[{"assignments":[6163],"declarations":[{"constant":false,"id":6163,"mutability":"mutable","name":"link","nameLocation":"9258:4:29","nodeType":"VariableDeclaration","scope":6187,"src":"9239:23:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"},"typeName":{"id":6162,"nodeType":"UserDefinedTypeName","pathNode":{"id":6161,"name":"LinkTokenInterface","nameLocations":["9239:18:29"],"nodeType":"IdentifierPath","referencedDeclaration":1251,"src":"9239:18:29"},"referencedDeclaration":1251,"src":"9239:18:29","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"visibility":"internal"}],"id":6168,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":6165,"name":"chainlinkTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"9284:21:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9284:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6164,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"9265:18:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$1251_$","typeString":"type(contract LinkTokenInterface)"}},"id":6167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9265:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"nodeType":"VariableDeclarationStatement","src":"9239:69:29"},{"condition":{"id":6181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9323:57:29","subExpression":{"arguments":[{"expression":{"id":6171,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9338:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9342:6:29","memberName":"sender","nodeType":"MemberAccess","src":"9338:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":6177,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9373:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SwapHelper_$6193","typeString":"contract SwapHelper"}],"id":6176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9365:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6175,"name":"address","nodeType":"ElementaryTypeName","src":"9365:7:29","typeDescriptions":{}}},"id":6178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9365:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6173,"name":"link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"9350:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9355:9:29","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1183,"src":"9350:14:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9350:29:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6169,"name":"link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"9324:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1251","typeString":"contract LinkTokenInterface"}},"id":6170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9329:8:29","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1228,"src":"9324:13:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:56:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6186,"nodeType":"IfStatement","src":"9319:112:29","trueBody":{"id":6185,"nodeType":"Block","src":"9382:49:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6182,"name":"TransferError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"9404:13:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:15:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6184,"nodeType":"RevertStatement","src":"9397:22:29"}]}}]},"functionSelector":"5b949dd0","id":6188,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6158,"name":"STRATEGIST_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"9211:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6159,"kind":"modifierInvocation","modifierName":{"id":6157,"name":"onlyRole","nameLocations":["9202:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"9202:8:29"},"nodeType":"ModifierInvocation","src":"9202:25:29"}],"name":"evacuateLinkTokens","nameLocation":"9172:18:29","nodeType":"FunctionDefinition","parameters":{"id":6156,"nodeType":"ParameterList","parameters":[],"src":"9190:2:29"},"returnParameters":{"id":6160,"nodeType":"ParameterList","parameters":[],"src":"9228:0:29"},"scope":6193,"src":"9163:275:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6191,"nodeType":"Block","src":"9473:2:29","statements":[]},"id":6192,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6189,"nodeType":"ParameterList","parameters":[],"src":"9453:2:29"},"returnParameters":{"id":6190,"nodeType":"ParameterList","parameters":[],"src":"9473:0:29"},"scope":6193,"src":"9446:29:29","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6194,"src":"599:8879:29","usedErrors":[5527,5529,5531,5533,5535,5537]}],"src":"35:9443:29"},"id":29}},"contracts":{"@chainlink/contracts/src/v0.8/Chainlink.sol":{"Chainlink":{"abi":[],"devdoc":{"details":"Uses imported CBOR library for encoding to buffer","kind":"dev","methods":{},"title":"Library for common Chainlink functions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037906083e586ecb03854a2b12b813de3642ff724551a78fec2c14e9ff208121b64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY SWAP1 PUSH1 0x83 0xE5 DUP7 0xEC 0xB0 CODESIZE SLOAD LOG2 0xB1 0x2B DUP2 RETURNDATASIZE 0xE3 PUSH5 0x2FF724551A PUSH25 0xFEC2C14E9FF208121B64736F6C634300081300330000000000 ","sourceMap":"293:3494:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;293:3494:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037906083e586ecb03854a2b12b813de3642ff724551a78fec2c14e9ff208121b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY SWAP1 PUSH1 0x83 0xE5 DUP7 0xEC 0xB0 CODESIZE SLOAD LOG2 0xB1 0x2B DUP2 RETURNDATASIZE 0xE3 PUSH5 0x2FF724551A PUSH25 0xFEC2C14E9FF208121B64736F6C634300081300330000000000 ","sourceMap":"293:3494:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(struct Chainlink.Request memory,string memory,string memory)":"infinite","addBytes(struct Chainlink.Request memory,string memory,bytes memory)":"infinite","addInt(struct Chainlink.Request memory,string memory,int256)":"infinite","addStringArray(struct Chainlink.Request memory,string memory,string memory[] memory)":"infinite","addUint(struct Chainlink.Request memory,string memory,uint256)":"infinite","initialize(struct Chainlink.Request memory,bytes32,address,bytes4)":"infinite","setBuffer(struct Chainlink.Request memory,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Uses imported CBOR library for encoding to buffer\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for common Chainlink functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":\"Chainlink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/ChainlinkClient.sol":{"ChainlinkClient":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkRequested","type":"event"}],"devdoc":{"kind":"dev","methods":{},"title":"The ChainlinkClient contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ChainlinkClient contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract writers can inherit this contract in order to create requests for the Chainlink network\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":\"ChainlinkClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":319,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_ens","offset":0,"slot":"0","type":"t_contract(ENSInterface)1156"},{"astId":321,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_ensNode","offset":0,"slot":"1","type":"t_bytes32"},{"astId":324,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_link","offset":0,"slot":"2","type":"t_contract(LinkTokenInterface)1251"},{"astId":327,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_oracle","offset":0,"slot":"3","type":"t_contract(OperatorInterface)1331"},{"astId":330,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_requestCount","offset":0,"slot":"4","type":"t_uint256"},{"astId":334,"contract":"@chainlink/contracts/src/v0.8/ChainlinkClient.sol:ChainlinkClient","label":"s_pendingRequests","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ENSInterface)1156":{"encoding":"inplace","label":"contract ENSInterface","numberOfBytes":"20"},"t_contract(LinkTokenInterface)1251":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"},"t_contract(OperatorInterface)1331":{"encoding":"inplace","label":"contract OperatorInterface","numberOfBytes":"20"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"Contract writers can inherit this contract in order to create requests for the Chainlink network","version":1}}},"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_880":{"entryPoint":null,"id":880,"parameterSlots":1,"returnSlots":0},"@_937":{"entryPoint":null,"id":937,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1021":{"entryPoint":197,"id":1021,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1011:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:30","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:30"},"nodeType":"YulFunctionCall","src":"143:12:30"},"nodeType":"YulExpressionStatement","src":"143:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:30"},"nodeType":"YulFunctionCall","src":"112:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:30"},"nodeType":"YulFunctionCall","src":"108:32:30"},"nodeType":"YulIf","src":"105:52:30"},{"nodeType":"YulVariableDeclaration","src":"166:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:30"},"nodeType":"YulFunctionCall","src":"179:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:30"},"nodeType":"YulFunctionCall","src":"260:12:30"},"nodeType":"YulExpressionStatement","src":"260:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:30"},"nodeType":"YulFunctionCall","src":"239:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:30"},"nodeType":"YulFunctionCall","src":"235:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:30"},"nodeType":"YulFunctionCall","src":"224:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:30"},"nodeType":"YulFunctionCall","src":"214:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:30"},"nodeType":"YulFunctionCall","src":"207:50:30"},"nodeType":"YulIf","src":"204:70:30"},{"nodeType":"YulAssignment","src":"283:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:30"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:30","type":""}],"src":"14:290:30"},{"body":{"nodeType":"YulBlock","src":"483:174:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"500:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"511:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:30"},"nodeType":"YulFunctionCall","src":"493:21:30"},"nodeType":"YulExpressionStatement","src":"493:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"534:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"545:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"530:3:30"},"nodeType":"YulFunctionCall","src":"530:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"550:2:30","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"523:6:30"},"nodeType":"YulFunctionCall","src":"523:30:30"},"nodeType":"YulExpressionStatement","src":"523:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"573:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"584:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"569:3:30"},"nodeType":"YulFunctionCall","src":"569:18:30"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"589:26:30","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"562:6:30"},"nodeType":"YulFunctionCall","src":"562:54:30"},"nodeType":"YulExpressionStatement","src":"562:54:30"},{"nodeType":"YulAssignment","src":"625:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"637:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"648:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"633:3:30"},"nodeType":"YulFunctionCall","src":"633:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"625:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"460:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"474:4:30","type":""}],"src":"309:348:30"},{"body":{"nodeType":"YulBlock","src":"836:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"864:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"846:6:30"},"nodeType":"YulFunctionCall","src":"846:21:30"},"nodeType":"YulExpressionStatement","src":"846:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"898:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"883:3:30"},"nodeType":"YulFunctionCall","src":"883:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:30"},"nodeType":"YulFunctionCall","src":"876:30:30"},"nodeType":"YulExpressionStatement","src":"876:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"926:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"937:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"922:3:30"},"nodeType":"YulFunctionCall","src":"922:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"942:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"915:6:30"},"nodeType":"YulFunctionCall","src":"915:53:30"},"nodeType":"YulExpressionStatement","src":"915:53:30"},{"nodeType":"YulAssignment","src":"977:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"989:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1000:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"985:3:30"},"nodeType":"YulFunctionCall","src":"985:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"977:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"827:4:30","type":""}],"src":"662:347:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161045038038061045083398101604081905261002f9161016e565b8060006001600160a01b03821661008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100bd576100bd816100c5565b50505061019e565b336001600160a01b0382160361011d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561018057600080fd5b81516001600160a01b038116811461019757600080fd5b9392505050565b6102a3806101ad6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461023d565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101ec5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561024f57600080fd5b81356001600160a01b038116811461026657600080fd5b939250505056fea26469706673582212203b0962b9804b6871709bd06e54a000865e3f55b350bf6a9fb55ef34529185ee364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x450 CODESIZE SUB DUP1 PUSH2 0x450 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBD JUMPI PUSH2 0xBD DUP2 PUSH2 0xC5 JUMP JUMPDEST POP POP POP PUSH2 0x19E JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x11D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x84 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2A3 DUP1 PUSH2 0x1AD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE MULMOD PUSH3 0xB9804B PUSH9 0x71709BD06E54A00086 0x5E EXTCODEHASH SSTORE 0xB3 POP 0xBF PUSH11 0x9FB55EF34529185EE36473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"212:141:2:-:0;;;270:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;327:8;345:1;-1:-1:-1;;;;;552:22:3;;544:59;;;;-1:-1:-1;;;544:59:3;;511:2:30;544:59:3;;;493:21:30;550:2;530:18;;;523:30;589:26;569:18;;;562:54;633:18;;544:59:3;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:3;-1:-1:-1;;;;;610:18:3;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;270:81:2;212:141;;1497:188:3;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;864:2:30;1551:52:3;;;846:21:30;903:2;883:18;;;876:30;942:25;922:18;;;915:53;985:18;;1551:52:3;662:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;-1:-1:-1;1668:7:3;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:3;1497:188;:::o;14:290:30:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:30;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:30:o;662:347::-;212:141:2;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_1021":{"entryPoint":410,"id":1021,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1034":{"entryPoint":325,"id":1034,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_987":{"entryPoint":130,"id":987,"parameterSlots":0,"returnSlots":0},"@owner_997":{"entryPoint":null,"id":997,"parameterSlots":0,"returnSlots":1},"@transferOwnership_951":{"entryPoint":305,"id":951,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1564:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:30","statements":[{"nodeType":"YulAssignment","src":"125:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:30"},"nodeType":"YulFunctionCall","src":"133:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:30"},"nodeType":"YulFunctionCall","src":"194:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:30"},"nodeType":"YulFunctionCall","src":"190:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:30"},"nodeType":"YulFunctionCall","src":"178:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:30"},"nodeType":"YulFunctionCall","src":"160:51:30"},"nodeType":"YulExpressionStatement","src":"160:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:30","type":""}],"src":"14:203:30"},{"body":{"nodeType":"YulBlock","src":"292:216:30","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:30"},"nodeType":"YulFunctionCall","src":"340:12:30"},"nodeType":"YulExpressionStatement","src":"340:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:30"},"nodeType":"YulFunctionCall","src":"309:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:30"},"nodeType":"YulFunctionCall","src":"305:32:30"},"nodeType":"YulIf","src":"302:52:30"},{"nodeType":"YulVariableDeclaration","src":"363:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:30"},"nodeType":"YulFunctionCall","src":"376:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:30"},"nodeType":"YulFunctionCall","src":"464:12:30"},"nodeType":"YulExpressionStatement","src":"464:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:30"},"nodeType":"YulFunctionCall","src":"443:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:30"},"nodeType":"YulFunctionCall","src":"439:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:30"},"nodeType":"YulFunctionCall","src":"428:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:30"},"nodeType":"YulFunctionCall","src":"418:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:30"},"nodeType":"YulFunctionCall","src":"411:50:30"},"nodeType":"YulIf","src":"408:70:30"},{"nodeType":"YulAssignment","src":"487:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:30","type":""}],"src":"222:286:30"},{"body":{"nodeType":"YulBlock","src":"687:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:30"},"nodeType":"YulFunctionCall","src":"697:21:30"},"nodeType":"YulExpressionStatement","src":"697:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:30"},"nodeType":"YulFunctionCall","src":"734:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:30"},"nodeType":"YulFunctionCall","src":"727:30:30"},"nodeType":"YulExpressionStatement","src":"727:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:30"},"nodeType":"YulFunctionCall","src":"773:18:30"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:24:30","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:30"},"nodeType":"YulFunctionCall","src":"766:52:30"},"nodeType":"YulExpressionStatement","src":"766:52:30"},{"nodeType":"YulAssignment","src":"827:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"839:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"850:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"835:3:30"},"nodeType":"YulFunctionCall","src":"835:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"827:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:30","type":""}],"src":"513:346:30"},{"body":{"nodeType":"YulBlock","src":"1038:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1048:6:30"},"nodeType":"YulFunctionCall","src":"1048:21:30"},"nodeType":"YulExpressionStatement","src":"1048:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:30"},"nodeType":"YulFunctionCall","src":"1085:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"1105:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:30"},"nodeType":"YulFunctionCall","src":"1078:30:30"},"nodeType":"YulExpressionStatement","src":"1078:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1124:3:30"},"nodeType":"YulFunctionCall","src":"1124:18:30"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1144:24:30","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1117:6:30"},"nodeType":"YulFunctionCall","src":"1117:52:30"},"nodeType":"YulExpressionStatement","src":"1117:52:30"},{"nodeType":"YulAssignment","src":"1178:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1190:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1201:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:30"},"nodeType":"YulFunctionCall","src":"1186:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1178:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:30","type":""}],"src":"864:346:30"},{"body":{"nodeType":"YulBlock","src":"1389:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:30"},"nodeType":"YulFunctionCall","src":"1399:21:30"},"nodeType":"YulExpressionStatement","src":"1399:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1440:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1451:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1436:3:30"},"nodeType":"YulFunctionCall","src":"1436:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1429:6:30"},"nodeType":"YulFunctionCall","src":"1429:30:30"},"nodeType":"YulExpressionStatement","src":"1429:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1479:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1475:3:30"},"nodeType":"YulFunctionCall","src":"1475:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1495:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1468:6:30"},"nodeType":"YulFunctionCall","src":"1468:53:30"},"nodeType":"YulExpressionStatement","src":"1468:53:30"},{"nodeType":"YulAssignment","src":"1530:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1542:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1553:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1538:3:30"},"nodeType":"YulFunctionCall","src":"1538:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1530:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1380:4:30","type":""}],"src":"1215:347:30"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461023d565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101ec5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561024f57600080fd5b81356001600160a01b038116811461026657600080fd5b939250505056fea26469706673582212203b0962b9804b6871709bd06e54a000865e3f55b350bf6a9fb55ef34529185ee364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE MULMOD PUSH3 0xB9804B PUSH9 0x71709BD06E54A00086 0x5E EXTCODEHASH SSTORE 0xB3 POP 0xBF PUSH11 0x9FB55EF34529185EE36473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"212:141:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:265:3;;;:::i;:::-;;1332:81;1379:7;1401;1332:81;;;-1:-1:-1;;;;;1401:7:3;;;160:51:30;;1332:81:3;;;;;148:2:30;1332:81:3;;;826:98;;;;;;:::i;:::-;;:::i;1016:265::-;1089:14;;-1:-1:-1;;;;;1089:14:3;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:3;;715:2:30;1067:63:3;;;697:21:30;754:2;734:18;;;727:30;-1:-1:-1;;;773:18:30;;;766:52;835:18;;1067:63:3;;;;;;;;;1137:16;1156:7;;1179:10;-1:-1:-1;;;;;;1169:20:3;;;;;;;-1:-1:-1;1195:27:3;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:3;;;;1179:10;;1156:7;;1234:42;;;1061:220;1016:265::o;826:98::-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;1730:111::-;1802:7;;-1:-1:-1;;;;;1802:7:3;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:3;;1066:2:30;1780:56:3;;;1048:21:30;1105:2;1085:18;;;1078:30;-1:-1:-1;;;1124:18:30;;;1117:52;1186:18;;1780:56:3;864:346:30;1780:56:3;1730:111::o;1497:188::-;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;1417:2:30;1551:52:3;;;1399:21:30;1456:2;1436:18;;;1429:30;-1:-1:-1;;;1475:18:30;;;1468:53;1538:18;;1551:52:3;1215:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;-1:-1:-1;1668:7:3;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:3;1497:188;:::o;222:286:30:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:30;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"135000","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52277","owner()":"2292","transferOwnership(address)":"30423"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":889,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":891,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_937":{"entryPoint":null,"id":937,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1021":{"entryPoint":193,"id":1021,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":362,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":390,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1196:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:30","statements":[{"nodeType":"YulAssignment","src":"84:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:30"},"nodeType":"YulFunctionCall","src":"93:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:30"}]},{"body":{"nodeType":"YulBlock","src":"169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:30"},"nodeType":"YulFunctionCall","src":"171:12:30"},"nodeType":"YulExpressionStatement","src":"171:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:30"},"nodeType":"YulFunctionCall","src":"150:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:30"},"nodeType":"YulFunctionCall","src":"146:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:30"},"nodeType":"YulFunctionCall","src":"135:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:30"},"nodeType":"YulFunctionCall","src":"125:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:30"},"nodeType":"YulFunctionCall","src":"118:50:30"},"nodeType":"YulIf","src":"115:70:30"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:30","type":""}],"src":"14:177:30"},{"body":{"nodeType":"YulBlock","src":"294:195:30","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:30"},"nodeType":"YulFunctionCall","src":"342:12:30"},"nodeType":"YulExpressionStatement","src":"342:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:30"},"nodeType":"YulFunctionCall","src":"311:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:30"},"nodeType":"YulFunctionCall","src":"307:32:30"},"nodeType":"YulIf","src":"304:52:30"},{"nodeType":"YulAssignment","src":"365:50:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:30"},"nodeType":"YulFunctionCall","src":"375:40:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:30"}]},{"nodeType":"YulAssignment","src":"424:59:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:30"},"nodeType":"YulFunctionCall","src":"464:18:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:30"},"nodeType":"YulFunctionCall","src":"434:49:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:30","type":""}],"src":"196:293:30"},{"body":{"nodeType":"YulBlock","src":"668:174:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"685:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"696:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"678:6:30"},"nodeType":"YulFunctionCall","src":"678:21:30"},"nodeType":"YulExpressionStatement","src":"678:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"719:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"730:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"715:3:30"},"nodeType":"YulFunctionCall","src":"715:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:30","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"708:6:30"},"nodeType":"YulFunctionCall","src":"708:30:30"},"nodeType":"YulExpressionStatement","src":"708:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"758:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"754:3:30"},"nodeType":"YulFunctionCall","src":"754:18:30"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"774:26:30","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"747:6:30"},"nodeType":"YulFunctionCall","src":"747:54:30"},"nodeType":"YulExpressionStatement","src":"747:54:30"},{"nodeType":"YulAssignment","src":"810:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"822:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"833:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"818:3:30"},"nodeType":"YulFunctionCall","src":"818:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"810:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"645:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"659:4:30","type":""}],"src":"494:348:30"},{"body":{"nodeType":"YulBlock","src":"1021:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1038:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1031:6:30"},"nodeType":"YulFunctionCall","src":"1031:21:30"},"nodeType":"YulExpressionStatement","src":"1031:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1072:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1083:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1068:3:30"},"nodeType":"YulFunctionCall","src":"1068:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"1088:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1061:6:30"},"nodeType":"YulFunctionCall","src":"1061:30:30"},"nodeType":"YulExpressionStatement","src":"1061:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1111:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1122:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1107:3:30"},"nodeType":"YulFunctionCall","src":"1107:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1127:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1100:6:30"},"nodeType":"YulFunctionCall","src":"1100:53:30"},"nodeType":"YulExpressionStatement","src":"1100:53:30"},{"nodeType":"YulAssignment","src":"1162:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:30"},"nodeType":"YulFunctionCall","src":"1170:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"998:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1012:4:30","type":""}],"src":"847:347:30"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161046b38038061046b83398101604081905261002f91610186565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100ba576100ba816100c1565b50506101b9565b336001600160a01b038216036101195760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610081565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b038116811461018157600080fd5b919050565b6000806040838503121561019957600080fd5b6101a28361016a565b91506101b06020840161016a565b90509250929050565b6102a3806101c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461023d565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101ec5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561024f57600080fd5b81356001600160a01b038116811461026657600080fd5b939250505056fea26469706673582212200c13ad1f4728c623ec0a493acbb9574aeb62197bd47d133b4d2a2446c3dbdb9964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x46B CODESIZE SUB DUP1 PUSH2 0x46B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x186 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBA JUMPI PUSH2 0xBA DUP2 PUSH2 0xC1 JUMP JUMPDEST POP POP PUSH2 0x1B9 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x119 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A2 DUP4 PUSH2 0x16A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0 PUSH1 0x20 DUP5 ADD PUSH2 0x16A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A3 DUP1 PUSH2 0x1C8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC SGT 0xAD 0x1F SELFBALANCE 0x28 0xC6 0x23 0xEC EXP 0x49 GASPRICE 0xCB 0xB9 JUMPI 0x4A 0xEB PUSH3 0x197BD4 PUSH30 0x133B4D2A2446C3DBDB9964736F6C63430008130033000000000000000000 ","sourceMap":"213:1777:3:-:0;;;486:231;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;552:22:3;;544:59;;;;-1:-1:-1;;;544:59:3;;696:2:30;544:59:3;;;678:21:30;735:2;715:18;;;708:30;774:26;754:18;;;747:54;818:18;;544:59:3;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:3;-1:-1:-1;;;;;610:18:3;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;213:1777;;1497:188;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;1049:2:30;1551:52:3;;;1031:21:30;1088:2;1068:18;;;1061:30;1127:25;1107:18;;;1100:53;1170:18;;1551:52:3;847:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;-1:-1:-1;1668:7:3;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:3;1497:188;:::o;14:177:30:-;93:13;;-1:-1:-1;;;;;135:31:30;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;847:347::-;213:1777:3;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_1021":{"entryPoint":410,"id":1021,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1034":{"entryPoint":325,"id":1034,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_987":{"entryPoint":130,"id":987,"parameterSlots":0,"returnSlots":0},"@owner_997":{"entryPoint":null,"id":997,"parameterSlots":0,"returnSlots":1},"@transferOwnership_951":{"entryPoint":305,"id":951,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1564:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:30","statements":[{"nodeType":"YulAssignment","src":"125:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:30"},"nodeType":"YulFunctionCall","src":"133:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:30"},"nodeType":"YulFunctionCall","src":"194:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:30"},"nodeType":"YulFunctionCall","src":"190:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:30"},"nodeType":"YulFunctionCall","src":"178:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:30"},"nodeType":"YulFunctionCall","src":"160:51:30"},"nodeType":"YulExpressionStatement","src":"160:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:30","type":""}],"src":"14:203:30"},{"body":{"nodeType":"YulBlock","src":"292:216:30","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:30"},"nodeType":"YulFunctionCall","src":"340:12:30"},"nodeType":"YulExpressionStatement","src":"340:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:30"},"nodeType":"YulFunctionCall","src":"309:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:30"},"nodeType":"YulFunctionCall","src":"305:32:30"},"nodeType":"YulIf","src":"302:52:30"},{"nodeType":"YulVariableDeclaration","src":"363:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:30"},"nodeType":"YulFunctionCall","src":"376:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:30"},"nodeType":"YulFunctionCall","src":"464:12:30"},"nodeType":"YulExpressionStatement","src":"464:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:30"},"nodeType":"YulFunctionCall","src":"443:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:30"},"nodeType":"YulFunctionCall","src":"439:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:30"},"nodeType":"YulFunctionCall","src":"428:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:30"},"nodeType":"YulFunctionCall","src":"418:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:30"},"nodeType":"YulFunctionCall","src":"411:50:30"},"nodeType":"YulIf","src":"408:70:30"},{"nodeType":"YulAssignment","src":"487:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:30","type":""}],"src":"222:286:30"},{"body":{"nodeType":"YulBlock","src":"687:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:30"},"nodeType":"YulFunctionCall","src":"697:21:30"},"nodeType":"YulExpressionStatement","src":"697:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:30"},"nodeType":"YulFunctionCall","src":"734:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:30"},"nodeType":"YulFunctionCall","src":"727:30:30"},"nodeType":"YulExpressionStatement","src":"727:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:30"},"nodeType":"YulFunctionCall","src":"773:18:30"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:24:30","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:30"},"nodeType":"YulFunctionCall","src":"766:52:30"},"nodeType":"YulExpressionStatement","src":"766:52:30"},{"nodeType":"YulAssignment","src":"827:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"839:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"850:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"835:3:30"},"nodeType":"YulFunctionCall","src":"835:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"827:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:30","type":""}],"src":"513:346:30"},{"body":{"nodeType":"YulBlock","src":"1038:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1048:6:30"},"nodeType":"YulFunctionCall","src":"1048:21:30"},"nodeType":"YulExpressionStatement","src":"1048:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:30"},"nodeType":"YulFunctionCall","src":"1085:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"1105:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:30"},"nodeType":"YulFunctionCall","src":"1078:30:30"},"nodeType":"YulExpressionStatement","src":"1078:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1124:3:30"},"nodeType":"YulFunctionCall","src":"1124:18:30"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1144:24:30","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1117:6:30"},"nodeType":"YulFunctionCall","src":"1117:52:30"},"nodeType":"YulExpressionStatement","src":"1117:52:30"},{"nodeType":"YulAssignment","src":"1178:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1190:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1201:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:30"},"nodeType":"YulFunctionCall","src":"1186:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1178:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:30","type":""}],"src":"864:346:30"},{"body":{"nodeType":"YulBlock","src":"1389:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:30"},"nodeType":"YulFunctionCall","src":"1399:21:30"},"nodeType":"YulExpressionStatement","src":"1399:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1440:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1451:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1436:3:30"},"nodeType":"YulFunctionCall","src":"1436:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1429:6:30"},"nodeType":"YulFunctionCall","src":"1429:30:30"},"nodeType":"YulExpressionStatement","src":"1429:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1479:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1475:3:30"},"nodeType":"YulFunctionCall","src":"1475:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1495:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1468:6:30"},"nodeType":"YulFunctionCall","src":"1468:53:30"},"nodeType":"YulExpressionStatement","src":"1468:53:30"},{"nodeType":"YulAssignment","src":"1530:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1542:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1553:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1538:3:30"},"nodeType":"YulFunctionCall","src":"1538:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1530:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1380:4:30","type":""}],"src":"1215:347:30"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461023d565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101ec5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561024f57600080fd5b81356001600160a01b038116811461026657600080fd5b939250505056fea26469706673582212200c13ad1f4728c623ec0a493acbb9574aeb62197bd47d133b4d2a2446c3dbdb9964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC SGT 0xAD 0x1F SELFBALANCE 0x28 0xC6 0x23 0xEC EXP 0x49 GASPRICE 0xCB 0xB9 JUMPI 0x4A 0xEB PUSH3 0x197BD4 PUSH30 0x133B4D2A2446C3DBDB9964736F6C63430008130033000000000000000000 ","sourceMap":"213:1777:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:265;;;:::i;:::-;;1332:81;1379:7;1401;1332:81;;;-1:-1:-1;;;;;1401:7:3;;;160:51:30;;1332:81:3;;;;;148:2:30;1332:81:3;;;826:98;;;;;;:::i;:::-;;:::i;1016:265::-;1089:14;;-1:-1:-1;;;;;1089:14:3;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:3;;715:2:30;1067:63:3;;;697:21:30;754:2;734:18;;;727:30;-1:-1:-1;;;773:18:30;;;766:52;835:18;;1067:63:3;;;;;;;;;1137:16;1156:7;;1179:10;-1:-1:-1;;;;;;1169:20:3;;;;;;;-1:-1:-1;1195:27:3;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:3;;;;1179:10;;1156:7;;1234:42;;;1061:220;1016:265::o;826:98::-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;1730:111::-;1802:7;;-1:-1:-1;;;;;1802:7:3;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:3;;1066:2:30;1780:56:3;;;1048:21:30;1105:2;1085:18;;;1078:30;-1:-1:-1;;;1124:18:30;;;1117:52;1186:18;;1780:56:3;864:346:30;1780:56:3;1730:111::o;1497:188::-;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;1417:2:30;1551:52:3;;;1399:21:30;1456:2;1436:18;;;1429:30;-1:-1:-1;;;1475:18:30;;;1468:53;1538:18;;1551:52:3;1215:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;-1:-1:-1;1668:7:3;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:3;1497:188;:::o;222:286:30:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:30;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"135000","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52277","owner()":"2292","transferOwnership(address)":"30423"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":889,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":891,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol":{"ChainlinkRequestInterface":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"expiration","type":"uint256"}],"name":"cancelOracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"requestPrice","type":"uint256"},{"internalType":"bytes32","name":"serviceAgreementID","type":"bytes32"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"dataVersion","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"oracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cancelOracleRequest(bytes32,uint256,bytes4,uint256)":"6ee4d553","oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)":"40429946"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"serviceAgreementID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":\"ChainlinkRequestInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol":{"ENSInterface":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NewOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"NewTTL","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"resolver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setSubnodeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner(bytes32)":"02571be3","resolver(bytes32)":"0178b8bf","setOwner(bytes32,address)":"5b0fc9c3","setResolver(bytes32,address)":"1896f70a","setSubnodeOwner(bytes32,bytes32,address)":"06ab5923","setTTL(bytes32,uint64)":"14ab9038","ttl(bytes32)":"16a25cbd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":\"ENSInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol":{"OperatorInterface":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"expiration","type":"uint256"}],"name":"cancelOracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"receivers","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"distributeFunds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"expiration","type":"uint256"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"fulfillOracleRequest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"expiration","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"fulfillOracleRequest2","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAuthorizedSenders","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getForwarder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"node","type":"address"}],"name":"isAuthorizedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"bytes32","name":"specId","type":"bytes32"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"dataVersion","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"operatorRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"requestPrice","type":"uint256"},{"internalType":"bytes32","name":"serviceAgreementID","type":"bytes32"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"dataVersion","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"oracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"ownerTransferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"senders","type":"address[]"}],"name":"setAuthorizedSenders","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cancelOracleRequest(bytes32,uint256,bytes4,uint256)":"6ee4d553","distributeFunds(address[],uint256[])":"6bd59ec0","fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)":"4ab0d190","fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)":"6ae0bc76","getAuthorizedSenders()":"2408afaa","getForwarder()":"a0042526","isAuthorizedSender(address)":"fa00763a","operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)":"3c6d41b9","oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)":"40429946","ownerTransferAndCall(address,uint256,bytes)":"902fc370","setAuthorizedSenders(address[])":"ee56997b","withdraw(address,uint256)":"f3fef3a3","withdrawable()":"50188301"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfillOracleRequest2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operatorRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"serviceAgreementID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ownerTransferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"setAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":\"OperatorInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol":{"OracleInterface":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"expiration","type":"uint256"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"fulfillOracleRequest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"node","type":"address"}],"name":"isAuthorizedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)":"4ab0d190","isAuthorizedSender(address)":"fa00763a","withdraw(address,uint256)":"f3fef3a3","withdrawable()":"50188301"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":\"OracleInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"OwnableInterface":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":\"OwnableInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol":{"PointerInterface":{"abi":[{"inputs":[],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAddress()":"38cc4831"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":\"PointerInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"BufferChainlink":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207987614c9966dab21e96b0077b982d121e5ea9b586cb6a85c218977fddb48ed564736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0x87614C9966DAB21E96B0077B982D121E5EA9B586CB6A85C21897 PUSH32 0xDDB48ED564736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"441:9632:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;441:9632:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207987614c9966dab21e96b0077b982d121e5ea9b586cb6a85c218977fddb48ed564736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0x87614C9966DAB21E96B0077B982D121E5EA9B586CB6A85C21897 PUSH32 0xDDB48ED564736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"441:9632:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"append(struct BufferChainlink.buffer memory,bytes memory)":"infinite","append(struct BufferChainlink.buffer memory,bytes memory,uint256)":"infinite","appendBytes20(struct BufferChainlink.buffer memory,bytes20)":"infinite","appendBytes32(struct BufferChainlink.buffer memory,bytes32)":"infinite","appendInt(struct BufferChainlink.buffer memory,uint256,uint256)":"infinite","appendUint8(struct BufferChainlink.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct BufferChainlink.buffer memory,uint256)":"infinite","max(uint256,uint256)":"infinite","resize(struct BufferChainlink.buffer memory,uint256)":"infinite","truncate(struct BufferChainlink.buffer memory)":"infinite","write(struct BufferChainlink.buffer memory,uint256,bytes memory,uint256)":"infinite","write(struct BufferChainlink.buffer memory,uint256,bytes32,uint256)":"infinite","writeBytes20(struct BufferChainlink.buffer memory,uint256,bytes20)":"infinite","writeInt(struct BufferChainlink.buffer memory,uint256,uint256,uint256)":"infinite","writeUint8(struct BufferChainlink.buffer memory,uint256,uint8)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":\"BufferChainlink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"CBORChainlink":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d40c7a1bfe02c2bc2685f43b727faeace68b898f4f814252cf4d76367698533264736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xC PUSH27 0x1BFE02C2BC2685F43B727FAEACE68B898F4F814252CF4D76367698 MSTORE8 ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"115:3271:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;115:3271:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d40c7a1bfe02c2bc2685f43b727faeace68b898f4f814252cf4d76367698533264736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xC PUSH27 0x1BFE02C2BC2685F43B727FAEACE68B898F4F814252CF4D76367698 MSTORE8 ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"115:3271:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encodeBigNum(struct BufferChainlink.buffer memory,uint256)":"infinite","encodeBytes(struct BufferChainlink.buffer memory,bytes memory)":"infinite","encodeFixedNumeric(struct BufferChainlink.buffer memory,uint8,uint64)":"infinite","encodeIndefiniteLengthType(struct BufferChainlink.buffer memory,uint8)":"infinite","encodeInt(struct BufferChainlink.buffer memory,int256)":"infinite","encodeSignedBigNum(struct BufferChainlink.buffer memory,int256)":"infinite","encodeString(struct BufferChainlink.buffer memory,string memory)":"infinite","encodeUInt(struct BufferChainlink.buffer memory,uint256)":"infinite","endSequence(struct BufferChainlink.buffer memory)":"infinite","startArray(struct BufferChainlink.buffer memory)":"infinite","startMap(struct BufferChainlink.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":\"CBORChainlink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol":{"ENSResolver":{"abi":[{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addr(bytes32)":"3b3b57de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":\"ENSResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2398,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)2393_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)2393_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)2393_storage"},"t_struct(RoleData)2393_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":2390,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":2392,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220297903615573add3940eb1ef9be0ec1c2fb129a69e761ebd171f093eb8705c5c64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 PUSH26 0x3615573ADD3940EB1EF9BE0EC1C2FB129A69E761EBD171F093E 0xB8 PUSH17 0x5C5C64736F6C6343000813003300000000 ","sourceMap":"701:6234:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220297903615573add3940eb1ef9be0ec1c2fb129a69e761ebd171f093eb8705c5c64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 PUSH26 0x3615573ADD3940EB1EF9BE0EC1C2FB129A69E761EBD171F093E 0xB8 PUSH17 0x5C5C64736F6C6343000813003300000000 ","sourceMap":"701:6234:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e382614e3aef45690d210f0d593a0eb486fac0f3ae4786e472db05d5c852164a64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 DUP3 PUSH2 0x4E3A 0xEF GASLIMIT PUSH10 0xD210F0D593A0EB486FA 0xC0 RETURN 0xAE SELFBALANCE DUP7 0xE4 PUSH19 0xDB05D5C852164A64736F6C6343000813003300 ","sourceMap":"194:9169:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e382614e3aef45690d210f0d593a0eb486fac0f3ae4786e472db05d5c852164a64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 DUP3 PUSH2 0x4E3A 0xEF GASLIMIT PUSH10 0xD210F0D593A0EB486FA 0xC0 RETURN 0xAE SELFBALANCE DUP7 0xE4 PUSH19 0xDB05D5C852164A64736F6C6343000813003300 ","sourceMap":"194:9169:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664743c505bbfa6acfac5cb69e477d0f5441fbf2d8cd0f23c1d305be28bacab664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4743C505BBFA6A 0xCF 0xAC 0x5C 0xB6 SWAP15 SELFBALANCE PUSH30 0xF5441FBF2D8CD0F23C1D305BE28BACAB664736F6C634300081300330000 ","sourceMap":"220:2559:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664743c505bbfa6acfac5cb69e477d0f5441fbf2d8cd0f23c1d305be28bacab664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4743C505BBFA6A 0xCF 0xAC 0x5C 0xB6 SWAP15 SELFBALANCE PUSH30 0xF5441FBF2D8CD0F23C1D305BE28BACAB664736F6C634300081300330000 ","sourceMap":"220:2559:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7499831d1f6db3e9834fb5682d66dfa721706b1aecf2edc76afd0febac6e55e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x49 SWAP9 BALANCE 0xD1 0xF6 0xDB RETURNDATACOPY SWAP9 CALLVALUE 0xFB JUMP DUP3 0xD6 PUSH14 0xFA721706B1AECF2EDC76AFD0FEBA 0xC6 0xE5 0x5E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7499831d1f6db3e9834fb5682d66dfa721706b1aecf2edc76afd0febac6e55e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x49 SWAP9 BALANCE 0xD1 0xF6 0xDB RETURNDATACOPY SWAP9 CALLVALUE 0xFB JUMP DUP3 0xD6 PUSH14 0xFA721706B1AECF2EDC76AFD0FEBA 0xC6 0xE5 0x5E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016fe6515600aac18bb76641b91ec3f1b29758955299277bef24636e296c21e0464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND INVALID PUSH6 0x15600AAC18BB PUSH23 0x641B91EC3F1B29758955299277BEF24636E296C21E0464 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016fe6515600aac18bb76641b91ec3f1b29758955299277bef24636e296c21e0464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND INVALID PUSH6 0x15600AAC18BB PUSH23 0x641B91EC3F1B29758955299277BEF24636E296C21E0464 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220225b45c276d4ba687eec44c8cbe63f6c2bb6e856691432f810d215c61813ccdf64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 JUMPDEST GASLIMIT 0xC2 PUSH23 0xD4BA687EEC44C8CBE63F6C2BB6E856691432F810D215C6 XOR SGT 0xCC 0xDF PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1329:11630:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220225b45c276d4ba687eec44c8cbe63f6c2bb6e856691432f810d215c61813ccdf64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 JUMPDEST GASLIMIT 0xC2 PUSH23 0xD4BA687EEC44C8CBE63F6C2BB6E856691432F810D215C6 XOR SGT 0xCC 0xDF PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISwapHelper.sol":{"ISwapHelper":{"abi":[{"inputs":[],"name":"fulfillSwap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestQuote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint8","name":"slippage","type":"uint8"}],"name":"requestSwap","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fulfillSwap()":"eaad47b2","requestQuote(address,address,uint256)":"1a5b4207","requestSwap(address,address,uint256,uint8)":"f09922ff"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fulfillSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slippage\",\"type\":\"uint8\"}],\"name\":\"requestSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapHelper.sol\":\"ISwapHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/interfaces/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ISwapHelper {\\r\\n    function requestQuote(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n    function requestSwap(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount,\\r\\n        uint8 slippage\\r\\n    ) external payable;\\r\\n    function fulfillSwap() external;\\r\\n}\",\"keccak256\":\"0x7384c77662889d6420e00031d907e16a9d79239bb4aae64acdcb032c4978b95d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISwapHelperSubscriber.sol":{"ISwapHelperSubscriber":{"abi":[{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"notify","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"notify(address,address,uint256,uint256)":"b91dc4bb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"notify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapHelperSubscriber.sol\":\"ISwapHelperSubscriber\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/interfaces/ISwapHelperSubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ISwapHelperSubscriber {\\r\\n    function notify(address src, address dst, uint256 amountOut, uint256 amountIn) external;\\r\\n}\",\"keccak256\":\"0x65749efd3c0d607b0d868f80ebaabdbbabdad3d77f6a9643834afef37a76fb7d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/SwapHelper.sol":{"SwapHelper":{"abi":[{"inputs":[{"internalType":"uint256","name":"_quoteJobFee","type":"uint256"},{"internalType":"uint256","name":"_swapCalldataJobFee","type":"uint256"},{"internalType":"bytes32","name":"_quoteJobId","type":"bytes32"},{"internalType":"bytes32","name":"_swapCalldataJobId","type":"bytes32"},{"internalType":"address","name":"_strategist","type":"address"},{"internalType":"address","name":"_aggregationRouter","type":"address"},{"internalType":"address","name":"chainlinkTokenAddress","type":"address"},{"internalType":"address","name":"chainlinkOracleAddress","type":"address"},{"internalType":"string","name":"_oneInchApiKey","type":"string"},{"internalType":"address[]","name":"authorizedToSwap","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CannotAddSubscriber","type":"error"},{"inputs":[],"name":"CannotRemoveSubscriber","type":"error"},{"inputs":[],"name":"NotEnoughNativeTokensSent","type":"error"},{"inputs":[],"name":"SlippageIsTooBig","type":"error"},{"inputs":[],"name":"SwapOperationIsNotReady","type":"error"},{"inputs":[],"name":"TransferError","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"ChainlinkRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":true,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"QuoteReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":true,"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"SwapPerformed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes","name":"swapCalldata","type":"bytes"}],"name":"SwapRegistered","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ONE_INCH_ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STRATEGIST_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SWAP_AUTHORIZED_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"subscriber","type":"address"}],"name":"addSubscriber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"aggregationRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"evacuateLinkTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"toAmount","type":"uint256"}],"name":"fulfillQuoteRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"fulfillSwap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isReadyToFulfillSwap","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastQuotedDstToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastQuotedSrcToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastQuotedSrcTokenAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastSwapDstToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastSwapSrcToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastSwapSrcTokenAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oneInchApiKey","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteJobFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteJobId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"swapCalldata","type":"bytes"}],"name":"registerSwapCalldata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"subscriber","type":"address"}],"name":"removeSubscriber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestQuote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint8","name":"slippage","type":"uint8"}],"name":"requestSwap","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subscriberIdx","type":"uint256"}],"name":"subscriberAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"subscribersLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapCalldataJobFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapCalldataJobId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5692":{"entryPoint":null,"id":5692,"parameterSlots":10,"returnSlots":0},"@_880":{"entryPoint":null,"id":880,"parameterSlots":1,"returnSlots":0},"@_937":{"entryPoint":null,"id":937,"parameterSlots":2,"returnSlots":0},"@_grantRole_2657":{"entryPoint":677,"id":2657,"parameterSlots":2,"returnSlots":0},"@_msgSender_3594":{"entryPoint":null,"id":3594,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_1021":{"entryPoint":471,"id":1021,"parameterSlots":1,"returnSlots":0},"@hasRole_2453":{"entryPoint":null,"id":2453,"parameterSlots":2,"returnSlots":1},"@setChainlinkOracle_656":{"entryPoint":null,"id":656,"parameterSlots":1,"returnSlots":0},"@setChainlinkToken_669":{"entryPoint":643,"id":669,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":838,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn_fromMemory":{"entryPoint":1081,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_bytes32t_bytes32t_addresst_addresst_addresst_addresst_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory":{"entryPoint":1226,"id":null,"parameterSlots":2,"returnSlots":10},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":889,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1508,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1591,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1448,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint8":{"entryPoint":1817,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":1795,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":867,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6885:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:30","statements":[{"nodeType":"YulAssignment","src":"84:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:30"},"nodeType":"YulFunctionCall","src":"93:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:30"}]},{"body":{"nodeType":"YulBlock","src":"169:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:30"},"nodeType":"YulFunctionCall","src":"171:12:30"},"nodeType":"YulExpressionStatement","src":"171:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:30"},"nodeType":"YulFunctionCall","src":"150:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:30"},"nodeType":"YulFunctionCall","src":"146:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:30"},"nodeType":"YulFunctionCall","src":"135:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:30"},"nodeType":"YulFunctionCall","src":"125:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:30"},"nodeType":"YulFunctionCall","src":"118:50:30"},"nodeType":"YulIf","src":"115:70:30"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:30","type":""}],"src":"14:177:30"},{"body":{"nodeType":"YulBlock","src":"228:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"245:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"252:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"257:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"248:3:30"},"nodeType":"YulFunctionCall","src":"248:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"238:6:30"},"nodeType":"YulFunctionCall","src":"238:31:30"},"nodeType":"YulExpressionStatement","src":"238:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"288:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:30"},"nodeType":"YulFunctionCall","src":"278:15:30"},"nodeType":"YulExpressionStatement","src":"278:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:30"},"nodeType":"YulFunctionCall","src":"302:15:30"},"nodeType":"YulExpressionStatement","src":"302:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"196:127:30"},{"body":{"nodeType":"YulBlock","src":"373:230:30","statements":[{"nodeType":"YulAssignment","src":"383:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"399:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:30"},"nodeType":"YulFunctionCall","src":"393:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"383:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"411:58:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"433:6:30"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"449:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"445:3:30"},"nodeType":"YulFunctionCall","src":"445:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"460:3:30"},"nodeType":"YulFunctionCall","src":"460:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"441:3:30"},"nodeType":"YulFunctionCall","src":"441:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"429:3:30"},"nodeType":"YulFunctionCall","src":"429:40:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"415:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"544:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"546:16:30"},"nodeType":"YulFunctionCall","src":"546:18:30"},"nodeType":"YulExpressionStatement","src":"546:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"487:10:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"507:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"511:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"503:3:30"},"nodeType":"YulFunctionCall","src":"503:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"515:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"499:3:30"},"nodeType":"YulFunctionCall","src":"499:18:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"484:2:30"},"nodeType":"YulFunctionCall","src":"484:34:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"523:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"535:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"520:2:30"},"nodeType":"YulFunctionCall","src":"520:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"481:2:30"},"nodeType":"YulFunctionCall","src":"481:62:30"},"nodeType":"YulIf","src":"478:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"582:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"586:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"575:6:30"},"nodeType":"YulFunctionCall","src":"575:22:30"},"nodeType":"YulExpressionStatement","src":"575:22:30"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"353:4:30","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"362:6:30","type":""}],"src":"328:275:30"},{"body":{"nodeType":"YulBlock","src":"672:586:30","statements":[{"body":{"nodeType":"YulBlock","src":"721:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"730:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"733:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"723:6:30"},"nodeType":"YulFunctionCall","src":"723:12:30"},"nodeType":"YulExpressionStatement","src":"723:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"700:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"708:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"696:3:30"},"nodeType":"YulFunctionCall","src":"696:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"715:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"692:3:30"},"nodeType":"YulFunctionCall","src":"692:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"685:6:30"},"nodeType":"YulFunctionCall","src":"685:35:30"},"nodeType":"YulIf","src":"682:55:30"},{"nodeType":"YulVariableDeclaration","src":"746:23:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"762:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"756:5:30"},"nodeType":"YulFunctionCall","src":"756:13:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"750:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"808:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"810:16:30"},"nodeType":"YulFunctionCall","src":"810:18:30"},"nodeType":"YulExpressionStatement","src":"810:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"784:2:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"800:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"792:3:30"},"nodeType":"YulFunctionCall","src":"792:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"804:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"788:3:30"},"nodeType":"YulFunctionCall","src":"788:18:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"781:2:30"},"nodeType":"YulFunctionCall","src":"781:26:30"},"nodeType":"YulIf","src":"778:52:30"},{"nodeType":"YulVariableDeclaration","src":"839:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"849:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"843:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"862:68:30","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"905:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"909:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"901:3:30"},"nodeType":"YulFunctionCall","src":"901:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"920:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"916:3:30"},"nodeType":"YulFunctionCall","src":"916:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"897:3:30"},"nodeType":"YulFunctionCall","src":"897:27:30"},{"name":"_2","nodeType":"YulIdentifier","src":"926:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"893:3:30"},"nodeType":"YulFunctionCall","src":"893:36:30"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"877:15:30"},"nodeType":"YulFunctionCall","src":"877:53:30"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"866:7:30","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"946:7:30"},{"name":"_1","nodeType":"YulIdentifier","src":"955:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"939:6:30"},"nodeType":"YulFunctionCall","src":"939:19:30"},"nodeType":"YulExpressionStatement","src":"939:19:30"},{"body":{"nodeType":"YulBlock","src":"1004:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1013:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1016:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1006:6:30"},"nodeType":"YulFunctionCall","src":"1006:12:30"},"nodeType":"YulExpressionStatement","src":"1006:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"981:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"989:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"977:3:30"},"nodeType":"YulFunctionCall","src":"977:15:30"},{"name":"_2","nodeType":"YulIdentifier","src":"994:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"973:3:30"},"nodeType":"YulFunctionCall","src":"973:24:30"},{"name":"end","nodeType":"YulIdentifier","src":"999:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"970:2:30"},"nodeType":"YulFunctionCall","src":"970:33:30"},"nodeType":"YulIf","src":"967:53:30"},{"nodeType":"YulVariableDeclaration","src":"1029:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1038:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1033:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1094:88:30","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1123:7:30"},{"name":"i","nodeType":"YulIdentifier","src":"1132:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1119:3:30"},"nodeType":"YulFunctionCall","src":"1119:15:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1136:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1115:3:30"},"nodeType":"YulFunctionCall","src":"1115:24:30"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1155:6:30"},{"name":"i","nodeType":"YulIdentifier","src":"1163:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1151:3:30"},"nodeType":"YulFunctionCall","src":"1151:14:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1167:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:30"},"nodeType":"YulFunctionCall","src":"1147:23:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1141:5:30"},"nodeType":"YulFunctionCall","src":"1141:30:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1108:6:30"},"nodeType":"YulFunctionCall","src":"1108:64:30"},"nodeType":"YulExpressionStatement","src":"1108:64:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1059:1:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1062:2:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1056:2:30"},"nodeType":"YulFunctionCall","src":"1056:9:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1066:19:30","statements":[{"nodeType":"YulAssignment","src":"1068:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1077:1:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1080:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1073:3:30"},"nodeType":"YulFunctionCall","src":"1073:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1068:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1052:3:30","statements":[]},"src":"1048:134:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1206:7:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1215:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1202:3:30"},"nodeType":"YulFunctionCall","src":"1202:16:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1220:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1198:3:30"},"nodeType":"YulFunctionCall","src":"1198:25:30"},{"kind":"number","nodeType":"YulLiteral","src":"1225:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1191:6:30"},"nodeType":"YulFunctionCall","src":"1191:36:30"},"nodeType":"YulExpressionStatement","src":"1191:36:30"},{"nodeType":"YulAssignment","src":"1236:16:30","value":{"name":"array_1","nodeType":"YulIdentifier","src":"1245:7:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1236:5:30"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"646:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"654:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"662:5:30","type":""}],"src":"608:650:30"},{"body":{"nodeType":"YulBlock","src":"1338:658:30","statements":[{"body":{"nodeType":"YulBlock","src":"1387:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1396:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1399:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1389:6:30"},"nodeType":"YulFunctionCall","src":"1389:12:30"},"nodeType":"YulExpressionStatement","src":"1389:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1366:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1374:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1362:3:30"},"nodeType":"YulFunctionCall","src":"1362:17:30"},{"name":"end","nodeType":"YulIdentifier","src":"1381:3:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1358:3:30"},"nodeType":"YulFunctionCall","src":"1358:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1351:6:30"},"nodeType":"YulFunctionCall","src":"1351:35:30"},"nodeType":"YulIf","src":"1348:55:30"},{"nodeType":"YulVariableDeclaration","src":"1412:23:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1428:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1422:5:30"},"nodeType":"YulFunctionCall","src":"1422:13:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1416:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1444:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1454:4:30","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1448:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1497:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1499:16:30"},"nodeType":"YulFunctionCall","src":"1499:18:30"},"nodeType":"YulExpressionStatement","src":"1499:18:30"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1473:2:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1485:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1489:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1481:3:30"},"nodeType":"YulFunctionCall","src":"1481:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"1493:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1477:3:30"},"nodeType":"YulFunctionCall","src":"1477:18:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1470:2:30"},"nodeType":"YulFunctionCall","src":"1470:26:30"},"nodeType":"YulIf","src":"1467:52:30"},{"nodeType":"YulVariableDeclaration","src":"1528:20:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1542:1:30","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"1545:2:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1538:3:30"},"nodeType":"YulFunctionCall","src":"1538:10:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1532:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1557:39:30","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1588:2:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1592:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1584:3:30"},"nodeType":"YulFunctionCall","src":"1584:11:30"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1568:15:30"},"nodeType":"YulFunctionCall","src":"1568:28:30"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1561:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1605:16:30","value":{"name":"dst","nodeType":"YulIdentifier","src":"1618:3:30"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1609:5:30","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1637:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1642:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1630:6:30"},"nodeType":"YulFunctionCall","src":"1630:15:30"},"nodeType":"YulExpressionStatement","src":"1630:15:30"},{"nodeType":"YulAssignment","src":"1654:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1665:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1670:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1661:3:30"},"nodeType":"YulFunctionCall","src":"1661:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1654:3:30"}]},{"nodeType":"YulVariableDeclaration","src":"1682:38:30","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1704:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"1712:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1700:3:30"},"nodeType":"YulFunctionCall","src":"1700:15:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1717:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1696:3:30"},"nodeType":"YulFunctionCall","src":"1696:24:30"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1686:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1748:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1757:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1760:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1750:6:30"},"nodeType":"YulFunctionCall","src":"1750:12:30"},"nodeType":"YulExpressionStatement","src":"1750:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1735:6:30"},{"name":"end","nodeType":"YulIdentifier","src":"1743:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1732:2:30"},"nodeType":"YulFunctionCall","src":"1732:15:30"},"nodeType":"YulIf","src":"1729:35:30"},{"nodeType":"YulVariableDeclaration","src":"1773:26:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1788:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1796:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1784:3:30"},"nodeType":"YulFunctionCall","src":"1784:15:30"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1777:3:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1864:103:30","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:30"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1920:3:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1890:29:30"},"nodeType":"YulFunctionCall","src":"1890:34:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1878:6:30"},"nodeType":"YulFunctionCall","src":"1878:47:30"},"nodeType":"YulExpressionStatement","src":"1878:47:30"},{"nodeType":"YulAssignment","src":"1938:19:30","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1949:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1954:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1945:3:30"},"nodeType":"YulFunctionCall","src":"1945:12:30"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1938:3:30"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1819:3:30"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1824:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1816:2:30"},"nodeType":"YulFunctionCall","src":"1816:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1832:23:30","statements":[{"nodeType":"YulAssignment","src":"1834:19:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1845:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"1850:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1841:3:30"},"nodeType":"YulFunctionCall","src":"1841:12:30"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1834:3:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1812:3:30","statements":[]},"src":"1808:159:30"},{"nodeType":"YulAssignment","src":"1976:14:30","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"1985:5:30"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1976:5:30"}]}]},"name":"abi_decode_array_address_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1312:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1320:3:30","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1328:5:30","type":""}],"src":"1263:733:30"},{"body":{"nodeType":"YulBlock","src":"2270:910:30","statements":[{"body":{"nodeType":"YulBlock","src":"2317:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2326:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2329:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2319:6:30"},"nodeType":"YulFunctionCall","src":"2319:12:30"},"nodeType":"YulExpressionStatement","src":"2319:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2291:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2300:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2287:3:30"},"nodeType":"YulFunctionCall","src":"2287:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2312:3:30","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2283:3:30"},"nodeType":"YulFunctionCall","src":"2283:33:30"},"nodeType":"YulIf","src":"2280:53:30"},{"nodeType":"YulAssignment","src":"2342:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2358:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2352:5:30"},"nodeType":"YulFunctionCall","src":"2352:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2342:6:30"}]},{"nodeType":"YulAssignment","src":"2377:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2397:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2408:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2393:3:30"},"nodeType":"YulFunctionCall","src":"2393:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2387:5:30"},"nodeType":"YulFunctionCall","src":"2387:25:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2377:6:30"}]},{"nodeType":"YulAssignment","src":"2421:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2441:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2452:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2437:3:30"},"nodeType":"YulFunctionCall","src":"2437:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2431:5:30"},"nodeType":"YulFunctionCall","src":"2431:25:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2421:6:30"}]},{"nodeType":"YulAssignment","src":"2465:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2485:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:30"},"nodeType":"YulFunctionCall","src":"2481:18:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2475:5:30"},"nodeType":"YulFunctionCall","src":"2475:25:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2465:6:30"}]},{"nodeType":"YulAssignment","src":"2509:60:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2553:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2564:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:30"},"nodeType":"YulFunctionCall","src":"2549:19:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2519:29:30"},"nodeType":"YulFunctionCall","src":"2519:50:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2509:6:30"}]},{"nodeType":"YulAssignment","src":"2578:60:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2622:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2633:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2618:3:30"},"nodeType":"YulFunctionCall","src":"2618:19:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2588:29:30"},"nodeType":"YulFunctionCall","src":"2588:50:30"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2578:6:30"}]},{"nodeType":"YulAssignment","src":"2647:60:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2691:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2702:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2687:3:30"},"nodeType":"YulFunctionCall","src":"2687:19:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2657:29:30"},"nodeType":"YulFunctionCall","src":"2657:50:30"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2647:6:30"}]},{"nodeType":"YulAssignment","src":"2716:60:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2760:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2771:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2756:3:30"},"nodeType":"YulFunctionCall","src":"2756:19:30"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2726:29:30"},"nodeType":"YulFunctionCall","src":"2726:50:30"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"2716:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"2785:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2809:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2820:3:30","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2805:3:30"},"nodeType":"YulFunctionCall","src":"2805:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2799:5:30"},"nodeType":"YulFunctionCall","src":"2799:26:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2789:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2834:28:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2852:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2856:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2848:3:30"},"nodeType":"YulFunctionCall","src":"2848:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"2860:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2844:3:30"},"nodeType":"YulFunctionCall","src":"2844:18:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2838:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"2889:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2898:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2901:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2891:6:30"},"nodeType":"YulFunctionCall","src":"2891:12:30"},"nodeType":"YulExpressionStatement","src":"2891:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2877:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"2885:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2874:2:30"},"nodeType":"YulFunctionCall","src":"2874:14:30"},"nodeType":"YulIf","src":"2871:34:30"},{"nodeType":"YulAssignment","src":"2914:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2957:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2968:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2953:3:30"},"nodeType":"YulFunctionCall","src":"2953:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2977:7:30"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"2924:28:30"},"nodeType":"YulFunctionCall","src":"2924:61:30"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"2914:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"2994:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3020:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3031:3:30","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3016:3:30"},"nodeType":"YulFunctionCall","src":"3016:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3010:5:30"},"nodeType":"YulFunctionCall","src":"3010:26:30"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2998:8:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3065:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3074:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3077:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3067:6:30"},"nodeType":"YulFunctionCall","src":"3067:12:30"},"nodeType":"YulExpressionStatement","src":"3067:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3051:8:30"},{"name":"_1","nodeType":"YulIdentifier","src":"3061:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3048:2:30"},"nodeType":"YulFunctionCall","src":"3048:16:30"},"nodeType":"YulIf","src":"3045:36:30"},{"nodeType":"YulAssignment","src":"3090:84:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3144:9:30"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3155:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3140:3:30"},"nodeType":"YulFunctionCall","src":"3140:24:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3166:7:30"}],"functionName":{"name":"abi_decode_array_address_dyn_fromMemory","nodeType":"YulIdentifier","src":"3100:39:30"},"nodeType":"YulFunctionCall","src":"3100:74:30"},"variableNames":[{"name":"value9","nodeType":"YulIdentifier","src":"3090:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32t_bytes32t_addresst_addresst_addresst_addresst_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2164:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2175:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2187:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2195:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2203:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2211:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2219:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2227:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2235:6:30","type":""},{"name":"value7","nodeType":"YulTypedName","src":"2243:6:30","type":""},{"name":"value8","nodeType":"YulTypedName","src":"2251:6:30","type":""},{"name":"value9","nodeType":"YulTypedName","src":"2259:6:30","type":""}],"src":"2001:1179:30"},{"body":{"nodeType":"YulBlock","src":"3359:174:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3376:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3387:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3369:6:30"},"nodeType":"YulFunctionCall","src":"3369:21:30"},"nodeType":"YulExpressionStatement","src":"3369:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3410:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3421:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:30"},"nodeType":"YulFunctionCall","src":"3406:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"3426:2:30","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3399:6:30"},"nodeType":"YulFunctionCall","src":"3399:30:30"},"nodeType":"YulExpressionStatement","src":"3399:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3449:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3460:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3445:3:30"},"nodeType":"YulFunctionCall","src":"3445:18:30"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"3465:26:30","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3438:6:30"},"nodeType":"YulFunctionCall","src":"3438:54:30"},"nodeType":"YulExpressionStatement","src":"3438:54:30"},{"nodeType":"YulAssignment","src":"3501:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3513:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3524:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3509:3:30"},"nodeType":"YulFunctionCall","src":"3509:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3501:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3336:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3350:4:30","type":""}],"src":"3185:348:30"},{"body":{"nodeType":"YulBlock","src":"3593:325:30","statements":[{"nodeType":"YulAssignment","src":"3603:22:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3617:1:30","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"3620:4:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3613:3:30"},"nodeType":"YulFunctionCall","src":"3613:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3603:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"3634:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3664:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"3670:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3660:3:30"},"nodeType":"YulFunctionCall","src":"3660:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3638:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3711:31:30","statements":[{"nodeType":"YulAssignment","src":"3713:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3727:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3735:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3723:3:30"},"nodeType":"YulFunctionCall","src":"3723:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3713:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3691:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3684:6:30"},"nodeType":"YulFunctionCall","src":"3684:26:30"},"nodeType":"YulIf","src":"3681:61:30"},{"body":{"nodeType":"YulBlock","src":"3801:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3822:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3829:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3834:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3825:3:30"},"nodeType":"YulFunctionCall","src":"3825:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3815:6:30"},"nodeType":"YulFunctionCall","src":"3815:31:30"},"nodeType":"YulExpressionStatement","src":"3815:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3866:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3869:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3859:6:30"},"nodeType":"YulFunctionCall","src":"3859:15:30"},"nodeType":"YulExpressionStatement","src":"3859:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3894:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3897:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3887:6:30"},"nodeType":"YulFunctionCall","src":"3887:15:30"},"nodeType":"YulExpressionStatement","src":"3887:15:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3757:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3780:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"3788:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3777:2:30"},"nodeType":"YulFunctionCall","src":"3777:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3754:2:30"},"nodeType":"YulFunctionCall","src":"3754:38:30"},"nodeType":"YulIf","src":"3751:161:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3573:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3582:6:30","type":""}],"src":"3538:380:30"},{"body":{"nodeType":"YulBlock","src":"3979:65:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3996:1:30","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"3999:3:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:30"},"nodeType":"YulFunctionCall","src":"3989:14:30"},"nodeType":"YulExpressionStatement","src":"3989:14:30"},{"nodeType":"YulAssignment","src":"4012:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4030:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4033:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4020:9:30"},"nodeType":"YulFunctionCall","src":"4020:18:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4012:4:30"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3962:3:30","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3970:4:30","type":""}],"src":"3923:121:30"},{"body":{"nodeType":"YulBlock","src":"4130:464:30","statements":[{"body":{"nodeType":"YulBlock","src":"4163:425:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4177:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4187:1:30","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4181:2:30","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4208:2:30"},{"name":"array","nodeType":"YulIdentifier","src":"4212:5:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4201:6:30"},"nodeType":"YulFunctionCall","src":"4201:17:30"},"nodeType":"YulExpressionStatement","src":"4201:17:30"},{"nodeType":"YulVariableDeclaration","src":"4231:31:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4253:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"4257:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4243:9:30"},"nodeType":"YulFunctionCall","src":"4243:19:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"4235:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4275:57:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4298:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4308:1:30","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4315:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"4327:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4311:3:30"},"nodeType":"YulFunctionCall","src":"4311:19:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4304:3:30"},"nodeType":"YulFunctionCall","src":"4304:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4294:3:30"},"nodeType":"YulFunctionCall","src":"4294:38:30"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"4279:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4369:23:30","statements":[{"nodeType":"YulAssignment","src":"4371:19:30","value":{"name":"data","nodeType":"YulIdentifier","src":"4386:4:30"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"4371:11:30"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4351:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"4363:4:30","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4348:2:30"},"nodeType":"YulFunctionCall","src":"4348:20:30"},"nodeType":"YulIf","src":"4345:47:30"},{"nodeType":"YulVariableDeclaration","src":"4405:41:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4419:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4429:1:30","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4436:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4441:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4432:3:30"},"nodeType":"YulFunctionCall","src":"4432:12:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4425:3:30"},"nodeType":"YulFunctionCall","src":"4425:20:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:30"},"nodeType":"YulFunctionCall","src":"4415:31:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4409:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4459:24:30","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"4472:11:30"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"4463:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4557:21:30","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4566:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"4573:2:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4559:6:30"},"nodeType":"YulFunctionCall","src":"4559:17:30"},"nodeType":"YulExpressionStatement","src":"4559:17:30"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4507:5:30"},{"name":"_2","nodeType":"YulIdentifier","src":"4514:2:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4504:2:30"},"nodeType":"YulFunctionCall","src":"4504:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4518:26:30","statements":[{"nodeType":"YulAssignment","src":"4520:22:30","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4533:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4540:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4529:3:30"},"nodeType":"YulFunctionCall","src":"4529:13:30"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"4520:5:30"}]}]},"pre":{"nodeType":"YulBlock","src":"4500:3:30","statements":[]},"src":"4496:82:30"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4146:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4151:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4143:2:30"},"nodeType":"YulFunctionCall","src":"4143:11:30"},"nodeType":"YulIf","src":"4140:448:30"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"4102:5:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"4109:3:30","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"4114:10:30","type":""}],"src":"4049:545:30"},{"body":{"nodeType":"YulBlock","src":"4684:81:30","statements":[{"nodeType":"YulAssignment","src":"4694:65:30","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4709:4:30"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4727:1:30","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"4730:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4723:3:30"},"nodeType":"YulFunctionCall","src":"4723:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4740:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4736:3:30"},"nodeType":"YulFunctionCall","src":"4736:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4719:3:30"},"nodeType":"YulFunctionCall","src":"4719:24:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4715:3:30"},"nodeType":"YulFunctionCall","src":"4715:29:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4705:3:30"},"nodeType":"YulFunctionCall","src":"4705:40:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4751:1:30","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"4754:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4747:3:30"},"nodeType":"YulFunctionCall","src":"4747:11:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4702:2:30"},"nodeType":"YulFunctionCall","src":"4702:57:30"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"4694:4:30"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4661:4:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"4667:3:30","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"4675:4:30","type":""}],"src":"4599:166:30"},{"body":{"nodeType":"YulBlock","src":"4866:1256:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4876:24:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4896:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4890:5:30"},"nodeType":"YulFunctionCall","src":"4890:10:30"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"4880:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4943:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4945:16:30"},"nodeType":"YulFunctionCall","src":"4945:18:30"},"nodeType":"YulExpressionStatement","src":"4945:18:30"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4915:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4931:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4935:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4927:3:30"},"nodeType":"YulFunctionCall","src":"4927:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"4939:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4923:3:30"},"nodeType":"YulFunctionCall","src":"4923:18:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4912:2:30"},"nodeType":"YulFunctionCall","src":"4912:30:30"},"nodeType":"YulIf","src":"4909:56:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5018:4:30"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5056:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5050:5:30"},"nodeType":"YulFunctionCall","src":"5050:11:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"5024:25:30"},"nodeType":"YulFunctionCall","src":"5024:38:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"5064:6:30"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"4974:43:30"},"nodeType":"YulFunctionCall","src":"4974:97:30"},"nodeType":"YulExpressionStatement","src":"4974:97:30"},{"nodeType":"YulVariableDeclaration","src":"5080:18:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5097:1:30","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"5084:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5107:23:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5126:4:30","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"5111:11:30","type":""}]},{"nodeType":"YulAssignment","src":"5139:24:30","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"5152:11:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"5139:9:30"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"5209:656:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5223:35:30","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"5242:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5254:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5250:3:30"},"nodeType":"YulFunctionCall","src":"5250:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5238:3:30"},"nodeType":"YulFunctionCall","src":"5238:20:30"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"5227:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5271:49:30","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5315:4:30"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"5285:29:30"},"nodeType":"YulFunctionCall","src":"5285:35:30"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"5275:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5333:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5342:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5337:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5420:172:30","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"5445:6:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5463:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5468:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5459:3:30"},"nodeType":"YulFunctionCall","src":"5459:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5453:5:30"},"nodeType":"YulFunctionCall","src":"5453:26:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5438:6:30"},"nodeType":"YulFunctionCall","src":"5438:42:30"},"nodeType":"YulExpressionStatement","src":"5438:42:30"},{"nodeType":"YulAssignment","src":"5497:24:30","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"5511:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5519:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5507:3:30"},"nodeType":"YulFunctionCall","src":"5507:14:30"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"5497:6:30"}]},{"nodeType":"YulAssignment","src":"5538:40:30","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"5555:9:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"5566:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:30"},"nodeType":"YulFunctionCall","src":"5551:27:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"5538:9:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5367:1:30"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"5370:7:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5364:2:30"},"nodeType":"YulFunctionCall","src":"5364:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5379:28:30","statements":[{"nodeType":"YulAssignment","src":"5381:24:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5390:1:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"5393:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5386:3:30"},"nodeType":"YulFunctionCall","src":"5386:19:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5381:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"5360:3:30","statements":[]},"src":"5356:236:30"},{"body":{"nodeType":"YulBlock","src":"5640:166:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5658:43:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5685:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5690:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5681:3:30"},"nodeType":"YulFunctionCall","src":"5681:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5675:5:30"},"nodeType":"YulFunctionCall","src":"5675:26:30"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"5662:9:30","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"5725:6:30"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"5737:9:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5764:1:30","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"5767:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5760:3:30"},"nodeType":"YulFunctionCall","src":"5760:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"5776:3:30","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5756:3:30"},"nodeType":"YulFunctionCall","src":"5756:24:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5786:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5782:3:30"},"nodeType":"YulFunctionCall","src":"5782:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5752:3:30"},"nodeType":"YulFunctionCall","src":"5752:37:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5748:3:30"},"nodeType":"YulFunctionCall","src":"5748:42:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5733:3:30"},"nodeType":"YulFunctionCall","src":"5733:58:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5718:6:30"},"nodeType":"YulFunctionCall","src":"5718:74:30"},"nodeType":"YulExpressionStatement","src":"5718:74:30"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"5611:7:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"5620:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5608:2:30"},"nodeType":"YulFunctionCall","src":"5608:19:30"},"nodeType":"YulIf","src":"5605:201:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5826:4:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5840:1:30","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"5843:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5836:3:30"},"nodeType":"YulFunctionCall","src":"5836:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"5852:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5832:3:30"},"nodeType":"YulFunctionCall","src":"5832:22:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5819:6:30"},"nodeType":"YulFunctionCall","src":"5819:36:30"},"nodeType":"YulExpressionStatement","src":"5819:36:30"}]},"nodeType":"YulCase","src":"5202:663:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5207:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5882:234:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5896:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5909:1:30","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5900:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5945:67:30","statements":[{"nodeType":"YulAssignment","src":"5963:35:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5982:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5987:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5978:3:30"},"nodeType":"YulFunctionCall","src":"5978:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5972:5:30"},"nodeType":"YulFunctionCall","src":"5972:26:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5963:5:30"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5926:6:30"},"nodeType":"YulIf","src":"5923:89:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6032:4:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6091:5:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"6098:6:30"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"6038:52:30"},"nodeType":"YulFunctionCall","src":"6038:67:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6025:6:30"},"nodeType":"YulFunctionCall","src":"6025:81:30"},"nodeType":"YulExpressionStatement","src":"6025:81:30"}]},"nodeType":"YulCase","src":"5874:242:30","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"5182:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5190:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5179:2:30"},"nodeType":"YulFunctionCall","src":"5179:14:30"},"nodeType":"YulSwitch","src":"5172:944:30"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"4851:4:30","type":""},{"name":"src","nodeType":"YulTypedName","src":"4857:3:30","type":""}],"src":"4770:1352:30"},{"body":{"nodeType":"YulBlock","src":"6159:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6176:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6183:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6188:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6179:3:30"},"nodeType":"YulFunctionCall","src":"6179:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6169:6:30"},"nodeType":"YulFunctionCall","src":"6169:31:30"},"nodeType":"YulExpressionStatement","src":"6169:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6216:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6219:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6209:6:30"},"nodeType":"YulFunctionCall","src":"6209:15:30"},"nodeType":"YulExpressionStatement","src":"6209:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6240:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6243:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6233:6:30"},"nodeType":"YulFunctionCall","src":"6233:15:30"},"nodeType":"YulExpressionStatement","src":"6233:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6127:127:30"},{"body":{"nodeType":"YulBlock","src":"6304:227:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6314:31:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6333:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"6340:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6329:3:30"},"nodeType":"YulFunctionCall","src":"6329:16:30"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6318:7:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6383:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6404:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6411:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6416:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6407:3:30"},"nodeType":"YulFunctionCall","src":"6407:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6397:6:30"},"nodeType":"YulFunctionCall","src":"6397:31:30"},"nodeType":"YulExpressionStatement","src":"6397:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6448:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6451:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6441:6:30"},"nodeType":"YulFunctionCall","src":"6441:15:30"},"nodeType":"YulExpressionStatement","src":"6441:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6476:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6479:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6469:6:30"},"nodeType":"YulFunctionCall","src":"6469:15:30"},"nodeType":"YulExpressionStatement","src":"6469:15:30"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6360:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"6369:4:30","type":"","value":"0xff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6357:2:30"},"nodeType":"YulFunctionCall","src":"6357:17:30"},"nodeType":"YulIf","src":"6354:140:30"},{"nodeType":"YulAssignment","src":"6503:22:30","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6514:7:30"},{"kind":"number","nodeType":"YulLiteral","src":"6523:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6510:3:30"},"nodeType":"YulFunctionCall","src":"6510:15:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6503:3:30"}]}]},"name":"increment_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6286:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6296:3:30","type":""}],"src":"6259:272:30"},{"body":{"nodeType":"YulBlock","src":"6710:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6727:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6738:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6720:6:30"},"nodeType":"YulFunctionCall","src":"6720:21:30"},"nodeType":"YulExpressionStatement","src":"6720:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6772:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:30"},"nodeType":"YulFunctionCall","src":"6757:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"6777:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6750:6:30"},"nodeType":"YulFunctionCall","src":"6750:30:30"},"nodeType":"YulExpressionStatement","src":"6750:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6800:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6811:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6796:3:30"},"nodeType":"YulFunctionCall","src":"6796:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"6816:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:30"},"nodeType":"YulFunctionCall","src":"6789:53:30"},"nodeType":"YulExpressionStatement","src":"6789:53:30"},{"nodeType":"YulAssignment","src":"6851:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6863:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6874:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6859:3:30"},"nodeType":"YulFunctionCall","src":"6859:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6851:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6687:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6701:4:30","type":""}],"src":"6536:347:30"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        if gt(_1, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let _2 := 0x20\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), _2))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), _2), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _2) }\n        {\n            mstore(add(add(array_1, i), _2), mload(add(add(offset, i), _2)))\n        }\n        mstore(add(add(array_1, _1), _2), 0)\n        array := array_1\n    }\n    function abi_decode_array_address_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        if gt(_1, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let _3 := shl(5, _1)\n        let dst := allocate_memory(add(_3, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _3), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address_fromMemory(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32t_bytes32t_addresst_addresst_addresst_addresst_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n        value6 := abi_decode_address_fromMemory(add(headStart, 192))\n        value7 := abi_decode_address_fromMemory(add(headStart, 224))\n        let offset := mload(add(headStart, 256))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value8 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 288))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value9 := abi_decode_array_address_dyn_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405260016005553480156200001757600080fd5b506040516200373b3803806200373b8339810160408190526200003a91620004ca565b3380600081620000915760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600780546001600160a01b0319166001600160a01b0384811691909117909155811615620000c457620000c481620001d7565b505050620000d8846200028360201b60201c565b600480546001600160a01b0319166001600160a01b03851617905560c08a905261010089905260a088905260e0879052601162000116838262000637565b506001600160a01b03851660805260005b81518160ff1610156200019a57620001857ffab00a984754950c7187fb98f39da0ae224abbbee017c1699445ad0e19474a4d838360ff168151811062000171576200017162000703565b6020026020010151620002a560201b60201c565b80620001918162000719565b91505062000127565b50620001c77f17a8e30262c1f919c33056d877a3c22b95c2f5e4dac44683c1c2323cd79fbdb087620002a5565b5050505050505050505062000747565b336001600160a01b03821603620002315760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000088565b600880546001600160a01b0319166001600160a01b03838116918217909255600754604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000342576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003013390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200035e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003a457620003a462000363565b604052919050565b600082601f830112620003be57600080fd5b81516001600160401b03811115620003da57620003da62000363565b6020620003f0601f8301601f1916820162000379565b82815285828487010111156200040557600080fd5b60005b838110156200042557858101830151828201840152820162000408565b506000928101909101919091529392505050565b600082601f8301126200044b57600080fd5b815160206001600160401b0382111562000469576200046962000363565b8160051b6200047a82820162000379565b92835284810182019282810190878511156200049557600080fd5b83870192505b84831015620004bf57620004af8362000346565b825291830191908301906200049b565b979650505050505050565b6000806000806000806000806000806101408b8d031215620004eb57600080fd5b8a51995060208b0151985060408b0151975060608b015196506200051260808c0162000346565b95506200052260a08c0162000346565b94506200053260c08c0162000346565b93506200054260e08c0162000346565b6101008c01519093506001600160401b03808211156200056157600080fd5b6200056f8e838f01620003ac565b93506101208d01519150808211156200058757600080fd5b50620005968d828e0162000439565b9150509295989b9194979a5092959850565b600181811c90821680620005bd57607f821691505b602082108103620005de57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200063257600081815260208120601f850160051c810160208610156200060d5750805b601f850160051c820191505b818110156200062e5782815560010162000619565b5050505b505050565b81516001600160401b0381111562000653576200065362000363565b6200066b81620006648454620005a8565b84620005e4565b602080601f831160018114620006a357600084156200068a5750858301515b600019600386901b1c1916600185901b1785556200062e565b600085815260208120601f198616915b82811015620006d457888601518255948401946001909101908401620006b3565b5085821015620006f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036200073e57634e487b7160e01b600052601160045260246000fd5b60010192915050565b60805160a05160c05160e05161010051612f77620007c46000396000818161051d0152611517015260008181610266015261132601526000818161037f015261098c015260008181610454015261079801526000818161065101528181611018015281816110d90152818161120d01526112ae0152612f776000f3fe6080604052600436106101a35760003560e01c806301ffc9a7146101af57806302458ad8146101e45780631a5b420714610206578063248a9ca3146102265780632547db8d14610254578063271e390a146102885780632f2ff15d146102b557806336568abe146102d55780633662dd35146102f557806336868f0e1461030b578063459c75d81461032b5780634e0c61331461034b57806353881b661461036d5780635b949dd0146103a1578063627c34ad146103b657806366b8455b146103d65780636ccf5b01146103eb57806379ba50971461040b5780637aff3a0c146104205780637ec14de8146104425780638da5cb5b1461047657806391d148541461049457806394555d1a146104b4578063a217fddf146104d4578063a378a324146104e9578063a6ccef3e1461050b578063aaeafd561461053f578063b56269a014610567578063c02e5bc71461057d578063c0d2e37f1461059d578063c87457db146105b7578063d547741f146105d7578063eaad47b2146105f7578063f09922ff1461060c578063f2fde38b1461061f578063fcdfd9461461063f57600080fd5b366101aa57005b600080fd5b3480156101bb57600080fd5b506101cf6101ca3660046124c3565b610673565b60405190151581526020015b60405180910390f35b3480156101f057600080fd5b506102046101ff366004612503565b6106aa565b005b34801561021257600080fd5b506102046102213660046125d9565b610779565b34801561023257600080fd5b50610246610241366004612615565b6109b8565b6040519081526020016101db565b34801561026057600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561029457600080fd5b50600c546102a8906001600160a01b031681565b6040516101db919061262e565b3480156102c157600080fd5b506102046102d0366004612642565b6109cd565b3480156102e157600080fd5b506102046102f0366004612642565b6109ee565b34801561030157600080fd5b50610246600b5481565b34801561031757600080fd5b50600d546102a8906001600160a01b031681565b34801561033757600080fd5b5061020461034636600461266e565b610a6c565b34801561035757600080fd5b50610246600080516020612f2283398151915281565b34801561037957600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ad57600080fd5b50610204610bd7565b3480156103c257600080fd5b506102046103d1366004612690565b610cff565b3480156103e257600080fd5b50610246610d3f565b3480156103f757600080fd5b506102a8610406366004612615565b610d50565b34801561041757600080fd5b50610204610d5d565b34801561042c57600080fd5b50610435610e0b565b6040516101db91906126fb565b34801561044e57600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561048257600080fd5b506007546001600160a01b03166102a8565b3480156104a057600080fd5b506101cf6104af366004612642565b610e99565b3480156104c057600080fd5b506102046104cf366004612690565b610ec2565b3480156104e057600080fd5b50610246600081565b3480156104f557600080fd5b50610246600080516020612ee283398151915281565b34801561051757600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561054b57600080fd5b506102a873eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561057357600080fd5b50610246600e5481565b34801561058957600080fd5b50600a546102a8906001600160a01b031681565b3480156105a957600080fd5b50600f546101cf9060ff1681565b3480156105c357600080fd5b506009546102a8906001600160a01b031681565b3480156105e357600080fd5b506102046105f2366004612642565b610f02565b34801561060357600080fd5b50610204610f1e565b61020461061a36600461270e565b611160565b34801561062b57600080fd5b5061020461063a366004612690565b611545565b34801561064b57600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b14806106a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526006602052604090205482906001600160a01b031633146106eb5760405162461bcd60e51b81526004016106e290612763565b60405180910390fd5b60008181526006602052604080822080546001600160a01b0319169055518291600080516020612f0283398151915291a260106107288382612825565b50600f805460ff19166001179055604051610744908390612900565b604051908190038120907fa6b78fc047486d5add927aa53ba0d4fc8eb23a5811e0052aebeba21469f51df890600090a2505050565b600080516020612f2283398151915261079181611559565b60006107c57f0000000000000000000000000000000000000000000000000000000000000000306308b38ebb60e31b611563565b9050610815604051806040016040528060068152602001651b595d1a1bd960d21b8152506040518060400160405280600381526020016211d15560ea1b815250836115889092919063ffffffff16565b610879604051806040016040528060038152602001621d5c9b60ea1b81525061083d876115a6565b610846876115a6565b61084f876115bc565b6040516020016108619392919061291c565b60408051601f19818403018152919052839190611588565b6108ae604051806040016040528060078152602001666865616465727360c81b815250601160405160200161086191906129b2565b6109006040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060068152602001651b9d5b595c9d60d21b815250836115889092919063ffffffff16565b610951604051806040016040528060048152602001630e0c2e8d60e31b815250604051806040016040528060088152602001671d1bd05b5bdd5b9d60c21b815250836115889092919063ffffffff16565b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556109b0817f000000000000000000000000000000000000000000000000000000000000000061164e565b505050505050565b60009081526020819052604090206001015490565b6109d6826109b8565b6109df81611559565b6109e9838361166f565b505050565b6001600160a01b0381163314610a5e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e2565b610a6882826116f3565b5050565b60008281526006602052604090205482906001600160a01b03163314610aa45760405162461bcd60e51b81526004016106e290612763565b60008181526006602052604080822080546001600160a01b0319169055518291600080516020612f0283398151915291a2600a54600954600b5460405190815284926001600160a01b039081169216907fc6ef891de9793cb5acefea4d38d25452da06c1b8a922180eeb0f324523b326a09060200160405180910390a46000610b2d6012611758565b905060005b81811015610bd057610b45601282611762565b600954600a54600b5460405163b91dc4bb60e01b81526001600160a01b039384166004820152918316602483015260448201889052606482015291169063b91dc4bb90608401600060405180830381600087803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b505050508080610bc890612a97565b915050610b32565b5050505050565b600080516020612ee2833981519152610bef81611559565b6000610c036003546001600160a01b031690565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c41919061262e565b602060405180830381865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190612ab0565b6040518363ffffffff1660e01b8152600401610c9f929190612ac9565b6020604051808303816000875af1158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190612ae2565b610a68576040516313ff771f60e21b815260040160405180910390fd5b600080516020612ee2833981519152610d1781611559565b610d2260128361176e565b610a68576040516306e971bb60e31b815260040160405180910390fd5b6000610d4b6012611758565b905090565b60006106a4601283611762565b6008546001600160a01b03163314610db05760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016106e2565b600780546001600160a01b0319808216339081179093556008805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60118054610e18906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610e44906127ab565b8015610e915780601f10610e6657610100808354040283529160200191610e91565b820191906000526020600020905b815481529060010190602001808311610e7457829003601f168201915b505050505081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612ee2833981519152610eda81611559565b610ee5601283611783565b610a68576040516305c46f6760e31b815260040160405180910390fd5b610f0b826109b8565b610f1481611559565b6109e983836116f3565b600080516020612ee2833981519152610f3681611559565b600f5460ff16610f5957604051637d683d5360e01b815260040160405180910390fd5b600c546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed19016110495761104360108054610f90906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc906127ab565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b5050600e546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016949350915050611798565b50611111565b61110f60108054611059906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611085906127ab565b80156110d25780601f106110a7576101008083540402835291602001916110d2565b820191906000526020600020905b8154815290600101906020018083116110b557829003601f168201915b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166117c690919063ffffffff16565b505b600e54600d54600c546040516001600160a01b0392831692909116907fe8a8f43c967965902142e0f7bd4b7b3c55fc5b1a0df5e84fa8ded5cafe92770690600090a450600f805460ff19169055565b600080516020612f2283398151915261117881611559565b60328260ff16111561119d576040516336ee37fb60e21b815260040160405180910390fd5b6001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480156111c857503483105b156111e657604051630dd86f5360e11b815260040160405180910390fd5b600f805460ff19169055604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528691859183169063dd62ed3e90604401602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612ab0565b101561131f5760405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906112da907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612ac9565b6020604051808303816000875af11580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190612ae2565b505b60006113527f0000000000000000000000000000000000000000000000000000000000000000306248b15b60e31b611563565b90506113a2604051806040016040528060068152602001651b595d1a1bd960d21b8152506040518060400160405280600381526020016211d15560ea1b815250836115889092919063ffffffff16565b611405604051806040016040528060038152602001621d5c9b60ea1b8152506113ca896115a6565b6113d3896115a6565b6113dc896115bc565b6113e5336115a6565b6113f18a60ff166115bc565b604051602001610861959493929190612b04565b61143a604051806040016040528060078152602001666865616465727360c81b815250601160405160200161086191906129b2565b61148c6040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060068152602001651b9d5b595c9d60d21b815250836115889092919063ffffffff16565b6114dc604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600781526020016674782c6461746160c81b815250836115889092919063ffffffff16565b600c80546001600160a01b03808a166001600160a01b031992831617909255600d805492891692909116919091179055600e85905561153b817f000000000000000000000000000000000000000000000000000000000000000061164e565b5050505050505050565b61154d61180a565b6115568161185f565b50565b6115568133611903565b61156b612474565b611573612474565b61157f8186868661195c565b95945050505050565b60808301516115979083611999565b60808301516109e99082611999565b60606106a46001600160a01b03831660146119b0565b606060006115c983611b4b565b60010190506000816001600160401b038111156115e8576115e86124ed565b6040519080825280601f01601f191660200182016040528015611612576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461161c57509392505050565b600454600090611668906001600160a01b03168484611c21565b9392505050565b6116798282610e99565b610a68576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116af3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116fd8282610e99565b15610a68576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106a4825490565b60006116688383611cb4565b6000611668836001600160a01b038416611cde565b6000611668836001600160a01b038416611dd1565b60606117be848484604051806060016040528060298152602001612e9960299139611e20565b949350505050565b6060611668838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250611e20565b6007546001600160a01b0316331461185d5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016106e2565b565b336001600160a01b038216036118b15760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016106e2565b600880546001600160a01b0319166001600160a01b03838116918217909255600754604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b61190d8282610e99565b610a685761191a816115a6565b6119258360206119b0565b604051602001611936929190612c08565b60408051601f198184030181529082905262461bcd60e51b82526106e2916004016126fb565b611964612474565b6119748560800151610100611efb565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6119a68260038351611f53565b6109e98282612060565b606060006119bf836002612c77565b6119ca906002612c8e565b6001600160401b038111156119e1576119e16124ed565b6040519080825280601f01601f191660200182016040528015611a0b576020820181803683370190505b509050600360fc1b81600081518110611a2657611a26612ca1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5557611a55612ca1565b60200101906001600160f81b031916908160001a9053506000611a79846002612c77565b611a84906001612c8e565b90505b6001811115611afc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab857611ab8612ca1565b1a60f81b828281518110611ace57611ace612ca1565b60200101906001600160f81b031916908160001a90535060049490941c93611af581612cb7565b9050611a87565b5083156116685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611b8a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310611bb4576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310611bd257662386f26fc10000830492506010015b6305f5e1008310611bea576305f5e100830492506008015b6127108310611bfe57612710830492506004015b60648310611c10576064830492506002015b600a83106106a45760010192915050565b600554600090611c32816001612c8e565b600555835160408086015160808701515191516000936320214ca360e11b93611c6a9386938493923092918a91600191602401612cce565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611caa8683868461207a565b9695505050505050565b6000826000018281548110611ccb57611ccb612ca1565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611dc7576000611d02600183612d36565b8554909150600090611d1690600190612d36565b9050818114611d7b576000866000018281548110611d3657611d36612ca1565b9060005260206000200154905080876000018481548110611d5957611d59612ca1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d8c57611d8c612d49565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106a4565b60009150506106a4565b6000818152600183016020526040812054611e18575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106a4565b5060006106a4565b606082471015611e815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e2565b600080866001600160a01b03168587604051611e9d9190612900565b60006040518083038185875af1925050503d8060008114611eda576040519150601f19603f3d011682016040523d82523d6000602084013e611edf565b606091505b5091509150611ef0878383876121d3565b979650505050505050565b611f036124a9565b611f0e602083612d5f565b15611f3657611f1e602083612d5f565b611f29906020612d36565b611f339083612c8e565b91505b506020828101829052604080518085526000815290920101905290565b6017816001600160401b031611611f7d57611f778360e0600585901b16831761224c565b50505050565b60ff816001600160401b031611611fb957611fa3836018611fe0600586901b161761224c565b50611f77836001600160401b0383166001612264565b61ffff816001600160401b031611611ff657611fe0836019611fe0600586901b161761224c565b50611f77836001600160401b0383166002612264565b63ffffffff816001600160401b0316116120355761201f83601a611fe0600586901b161761224c565b50611f77836001600160401b0383166004612264565b61204a83601b611fe0600586901b161761224c565b50611f77836001600160401b0383166008612264565b6120686124a9565b6116688384600001515184855161227d565b6040516001600160601b03193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600690925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600354604051630200057560e51b81526001600160a01b0390911690634000aea09061213890889087908790600401612d81565b6020604051808303816000875af1158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b9190612ae2565b6117be5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b60648201526084016106e2565b6060831561224257825160000361223b576001600160a01b0385163b61223b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e2565b50816117be565b6117be838361235a565b6122546124a9565b6116688384600001515184612384565b61226c6124a9565b6117be8485600001515185856123d2565b6122856124a9565b825182111561229357600080fd5b60208501516122a28386612c8e565b11156122d5576122d5856122c5876020015187866122c09190612c8e565b612446565b6122d0906002612c77565b61245d565b6000808651805187602083010193508088870111156122f45787860182525b505050602084015b602084106123345780518252612313602083612c8e565b9150612320602082612c8e565b905061232d602085612d36565b93506122fc565b51815160001960208690036101000a019081169019919091161790525083949350505050565b81511561236a5781518083602001fd5b8060405162461bcd60e51b81526004016106e291906126fb565b61238c6124a9565b836020015183106123ac576123ac84856020015160026122d09190612c77565b83518051602085830101848153508085036123c8576001810182525b5093949350505050565b6123da6124a9565b60208501516123e98584612c8e565b11156123fd576123fd856122c58685612c8e565b6000600161240d84610100612e8c565b6124179190612d36565b905085518386820101858319825116178152508051848701111561243b5783860181525b509495945050505050565b6000818311156124575750816106a4565b50919050565b81516124698383611efb565b50611f778382612060565b6040805160a0810182526000808252602082018190529181018290526060810191909152608081016124a46124a9565b905290565b604051806040016040528060608152602001600081525090565b6000602082840312156124d557600080fd5b81356001600160e01b03198116811461166857600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561251657600080fd5b8235915060208301356001600160401b038082111561253457600080fd5b818501915085601f83011261254857600080fd5b81358181111561255a5761255a6124ed565b604051601f8201601f19908116603f01168101908382118183101715612582576125826124ed565b8160405282815288602084870101111561259b57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b80356001600160a01b03811681146125d457600080fd5b919050565b6000806000606084860312156125ee57600080fd5b6125f7846125bd565b9250612605602085016125bd565b9150604084013590509250925092565b60006020828403121561262757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806040838503121561265557600080fd5b82359150612665602084016125bd565b90509250929050565b6000806040838503121561268157600080fd5b50508035926020909101359150565b6000602082840312156126a257600080fd5b611668826125bd565b60005b838110156126c65781810151838201526020016126ae565b50506000910152565b600081518084526126e78160208601602086016126ab565b601f01601f19169290920160200192915050565b60208152600061166860208301846126cf565b6000806000806080858703121561272457600080fd5b61272d856125bd565b935061273b602086016125bd565b925060408501359150606085013560ff8116811461275857600080fd5b939692955090935050565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b600181811c908216806127bf57607f821691505b60208210810361245757634e487b7160e01b600052602260045260246000fd5b601f8211156109e957600081815260208120601f850160051c810160208610156128065750805b601f850160051c820191505b818110156109b057828155600101612812565b81516001600160401b0381111561283e5761283e6124ed565b6128528161284c84546127ab565b846127df565b602080601f831160018114612887576000841561286f5750858301515b600019600386901b1c1916600185901b1785556109b0565b600085815260208120601f198616915b828110156128b657888601518255948401946001909101908401612897565b50858210156128d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081516128f68185602086016126ab565b9290920192915050565b600082516129128184602087016126ab565b9190910192915050565b600080516020612ec283398151915281526b312f71756f74653f7372633d60a01b60208201526000845161295781602c8501602089016126ab565b64266473743d60d81b602c91840191820152845161297c8160318401602089016126ab565b6726616d6f756e743d60c01b6031929091019182015283516129a58160398401602088016126ab565b0160390195945050505050565b7f5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c202281526000602077020baba3437b934bd30ba34b7b7111610112132b0b932b9160451b81840152603860008554612a08816127ab565b60018281168015612a205760018114612a3957612a69565b60ff198416898701528215158302890186019450612a69565b896000528660002060005b84811015612a5f5781548b8201890152908301908801612a44565b505085838a010194505b505061225d60f01b8352505060020195945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612aa957612aa9612a81565b5060010190565b600060208284031215612ac257600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b600060208284031215612af457600080fd5b8151801515811461166857600080fd5b600080516020612ec283398151915281526a312f737761703f7372633d60a81b602082015260008651612b3e81602b850160208b016126ab565b64266473743d60d81b602b918401918201528651612b63816030840160208b016126ab565b6726616d6f756e743d60c01b603092909101918201528551612b8c816038840160208a016126ab565b652666726f6d3d60d01b603892909101918201528451612bb381603e8401602089016126ab565b6926736c6970706167653d60b01b603e9290910191820152612bfc612bdb60488301866128e4565b742664697361626c65457374696d6174653d7472756560581b815260150190565b98975050505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612c3a8160178501602088016126ab565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c6b8160288401602088016126ab565b01602801949350505050565b80820281158282048414176106a4576106a4612a81565b808201808211156106a4576106a4612a81565b634e487b7160e01b600052603260045260246000fd5b600081612cc657612cc6612a81565b506000190190565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e08201819052600090612d27838201856126cf565b9b9a5050505050505050505050565b818103818111156106a4576106a4612a81565b634e487b7160e01b600052603160045260246000fd5b600082612d7c57634e487b7160e01b600052601260045260246000fd5b500690565b60018060a01b038416815282602082015260606040820152600061157f60608301846126cf565b600181815b80851115612de3578160001904821115612dc957612dc9612a81565b80851615612dd657918102915b93841c9390800290612dad565b509250929050565b600082612dfa575060016106a4565b81612e07575060006106a4565b8160018114612e1d5760028114612e2757612e43565b60019150506106a4565b60ff841115612e3857612e38612a81565b50506001821b6106a4565b5060208310610133831016604e8410600b8410161715612e66575081810a6106a4565b612e708383612da8565b8060001904821115612e8457612e84612a81565b029392505050565b60006116688383612deb56fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c656468747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f17a8e30262c1f919c33056d877a3c22b95c2f5e4dac44683c1c2323cd79fbdb07cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63afab00a984754950c7187fb98f39da0ae224abbbee017c1699445ad0e19474a4da26469706673582212205de94e55c5faba2fed3eebfa2068fbd1ea3d8d48b6a4117fb133a57f94a8553b64736f6c63430008130033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x373B CODESIZE SUB DUP1 PUSH3 0x373B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3A SWAP2 PUSH3 0x4CA JUMP JUMPDEST CALLER DUP1 PUSH1 0x0 DUP2 PUSH3 0x91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH3 0xC4 JUMPI PUSH3 0xC4 DUP2 PUSH3 0x1D7 JUMP JUMPDEST POP POP POP PUSH3 0xD8 DUP5 PUSH3 0x283 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE PUSH1 0xC0 DUP11 SWAP1 MSTORE PUSH2 0x100 DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP9 SWAP1 MSTORE PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH1 0x11 PUSH3 0x116 DUP4 DUP3 PUSH3 0x637 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x80 MSTORE PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH3 0x19A JUMPI PUSH3 0x185 PUSH32 0xFAB00A984754950C7187FB98F39DA0AE224ABBBEE017C1699445AD0E19474A4D DUP4 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x171 JUMPI PUSH3 0x171 PUSH3 0x703 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x2A5 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH3 0x191 DUP2 PUSH3 0x719 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x127 JUMP JUMPDEST POP PUSH3 0x1C7 PUSH32 0x17A8E30262C1F919C33056D877A3C22B95C2F5E4DAC44683C1C2323CD79FBDB0 DUP8 PUSH3 0x2A5 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH3 0x747 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH3 0x231 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x88 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x342 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x301 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x3A4 JUMPI PUSH3 0x3A4 PUSH3 0x363 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3DA JUMPI PUSH3 0x3DA PUSH3 0x363 JUMP JUMPDEST PUSH1 0x20 PUSH3 0x3F0 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH3 0x379 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 DUP3 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x425 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP3 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x408 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 DUP2 ADD SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0x469 JUMPI PUSH3 0x469 PUSH3 0x363 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH3 0x47A DUP3 DUP3 ADD PUSH3 0x379 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH3 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0x4BF JUMPI PUSH3 0x4AF DUP4 PUSH3 0x346 JUMP JUMPDEST DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH3 0x49B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 MLOAD SWAP10 POP PUSH1 0x20 DUP12 ADD MLOAD SWAP9 POP PUSH1 0x40 DUP12 ADD MLOAD SWAP8 POP PUSH1 0x60 DUP12 ADD MLOAD SWAP7 POP PUSH3 0x512 PUSH1 0x80 DUP13 ADD PUSH3 0x346 JUMP JUMPDEST SWAP6 POP PUSH3 0x522 PUSH1 0xA0 DUP13 ADD PUSH3 0x346 JUMP JUMPDEST SWAP5 POP PUSH3 0x532 PUSH1 0xC0 DUP13 ADD PUSH3 0x346 JUMP JUMPDEST SWAP4 POP PUSH3 0x542 PUSH1 0xE0 DUP13 ADD PUSH3 0x346 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x56F DUP15 DUP4 DUP16 ADD PUSH3 0x3AC JUMP JUMPDEST SWAP4 POP PUSH2 0x120 DUP14 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x596 DUP14 DUP3 DUP15 ADD PUSH3 0x439 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x5BD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x5DE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x632 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x60D JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x62E JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x619 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x653 JUMPI PUSH3 0x653 PUSH3 0x363 JUMP JUMPDEST PUSH3 0x66B DUP2 PUSH3 0x664 DUP5 SLOAD PUSH3 0x5A8 JUMP JUMPDEST DUP5 PUSH3 0x5E4 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x6A3 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x68A JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x62E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x6D4 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x6B3 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x6F3 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH3 0x73E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x2F77 PUSH3 0x7C4 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x51D ADD MSTORE PUSH2 0x1517 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x266 ADD MSTORE PUSH2 0x1326 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x37F ADD MSTORE PUSH2 0x98C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x454 ADD MSTORE PUSH2 0x798 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x651 ADD MSTORE DUP2 DUP2 PUSH2 0x1018 ADD MSTORE DUP2 DUP2 PUSH2 0x10D9 ADD MSTORE DUP2 DUP2 PUSH2 0x120D ADD MSTORE PUSH2 0x12AE ADD MSTORE PUSH2 0x2F77 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x2458AD8 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x1A5B4207 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x2547DB8D EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x271E390A EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x3662DD35 EQ PUSH2 0x2F5 JUMPI DUP1 PUSH4 0x36868F0E EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x459C75D8 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x4E0C6133 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x53881B66 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x5B949DD0 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x627C34AD EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x66B8455B EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x6CCF5B01 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x7AFF3A0C EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x7EC14DE8 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0x94555D1A EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0xA378A324 EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xA6CCEF3E EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xAAEAFD56 EQ PUSH2 0x53F JUMPI DUP1 PUSH4 0xB56269A0 EQ PUSH2 0x567 JUMPI DUP1 PUSH4 0xC02E5BC7 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0xC0D2E37F EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xC87457DB EQ PUSH2 0x5B7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xEAAD47B2 EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0xF09922FF EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x61F JUMPI DUP1 PUSH4 0xFCDFD946 EQ PUSH2 0x63F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1AA JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x24C3 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D9 JUMP JUMPDEST PUSH2 0x779 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH2 0x241 CALLDATASIZE PUSH1 0x4 PUSH2 0x2615 JUMP JUMPDEST PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x262E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0x9EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x266E JUMP JUMPDEST PUSH2 0xA6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xBD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH2 0xD3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2615 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xD5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x26FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0xEC2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SLOAD PUSH2 0x1CF SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x5F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0xF02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x204 PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x270E JUMP JUMPDEST PUSH2 0x1160 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x63A CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0x1545 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x6A4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F02 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG2 PUSH1 0x10 PUSH2 0x728 DUP4 DUP3 PUSH2 0x2825 JUMP JUMPDEST POP PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x744 SWAP1 DUP4 SWAP1 PUSH2 0x2900 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0xA6B78FC047486D5ADD927AA53BA0D4FC8EB23A5811E0052AEBEBA21469F51DF8 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x791 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 PUSH32 0x0 ADDRESS PUSH4 0x8B38EBB PUSH1 0xE3 SHL PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x815 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B595D1A1BD9 PUSH1 0xD2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x11D155 PUSH1 0xEA SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x879 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1D5C9B PUSH1 0xEA SHL DUP2 MSTORE POP PUSH2 0x83D DUP8 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x846 DUP8 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x84F DUP8 PUSH2 0x15BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x291C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP4 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0x8AE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x68656164657273 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x900 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x18DBDB9D1858DD PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B9D5B595C9D PUSH1 0xD2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x951 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xE0C2E8D PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x1D1BD05B5BDD5B9D PUSH1 0xC2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xA DUP1 SLOAD SWAP3 DUP8 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xB DUP4 SWAP1 SSTORE PUSH2 0x9B0 DUP2 PUSH32 0x0 PUSH2 0x164E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x9D6 DUP3 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9DF DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x166F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xA68 DUP3 DUP3 PUSH2 0x16F3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F02 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG2 PUSH1 0xA SLOAD PUSH1 0x9 SLOAD PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 AND SWAP1 PUSH32 0xC6EF891DE9793CB5ACEFEA4D38D25452DA06C1B8A922180EEB0F324523B326A0 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH2 0xB2D PUSH1 0x12 PUSH2 0x1758 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBD0 JUMPI PUSH2 0xB45 PUSH1 0x12 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xB91DC4BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0xB91DC4BB SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xBC8 SWAP1 PUSH2 0x2A97 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB32 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBEF DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC03 PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC41 SWAP2 SWAP1 PUSH2 0x262E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x2AB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9F SWAP3 SWAP2 SWAP1 PUSH2 0x2AC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE2 SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x13FF771F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD17 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0xD22 PUSH1 0x12 DUP4 PUSH2 0x176E JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6E971BB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD4B PUSH1 0x12 PUSH2 0x1758 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A4 PUSH1 0x12 DUP4 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH2 0xE18 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE44 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE91 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE66 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE91 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE74 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xEDA DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0xEE5 PUSH1 0x12 DUP4 PUSH2 0x1783 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C46F67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF0B DUP3 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0xF14 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF36 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND PUSH2 0xF59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D683D53 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT ADD PUSH2 0x1049 JUMPI PUSH2 0x1043 PUSH1 0x10 DUP1 SLOAD PUSH2 0xF90 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFBC SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1009 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFDE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1009 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFEC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP5 SWAP4 POP SWAP2 POP POP PUSH2 0x1798 JUMP JUMPDEST POP PUSH2 0x1111 JUMP JUMPDEST PUSH2 0x110F PUSH1 0x10 DUP1 SLOAD PUSH2 0x1059 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1085 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x10B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17C6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH1 0xE SLOAD PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH32 0xE8A8F43C967965902142E0F7BD4B7B3C55FC5B1A0DF5E84FA8DED5CAFE927706 SWAP1 PUSH1 0x0 SWAP1 LOG4 POP PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1178 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x32 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x119D JUMPI PUSH1 0x40 MLOAD PUSH4 0x36EE37FB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 ISZERO PUSH2 0x11C8 JUMPI POP CALLVALUE DUP4 LT JUMPDEST ISZERO PUSH2 0x11E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDD86F53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 SWAP2 DUP6 SWAP2 DUP4 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1260 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1284 SWAP2 SWAP1 PUSH2 0x2AB0 JUMP JUMPDEST LT ISZERO PUSH2 0x131F JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0x12DA SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x2AC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x131D SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x1352 PUSH32 0x0 ADDRESS PUSH3 0x48B15B PUSH1 0xE3 SHL PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x13A2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B595D1A1BD9 PUSH1 0xD2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x11D155 PUSH1 0xEA SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1405 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1D5C9B PUSH1 0xEA SHL DUP2 MSTORE POP PUSH2 0x13CA DUP10 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13D3 DUP10 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13DC DUP10 PUSH2 0x15BC JUMP JUMPDEST PUSH2 0x13E5 CALLER PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13F1 DUP11 PUSH1 0xFF AND PUSH2 0x15BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B04 JUMP JUMPDEST PUSH2 0x143A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x68656164657273 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x148C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x18DBDB9D1858DD PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B9D5B595C9D PUSH1 0xD2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14DC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xE0C2E8D PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x74782C64617461 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xD DUP1 SLOAD SWAP3 DUP10 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xE DUP6 SWAP1 SSTORE PUSH2 0x153B DUP2 PUSH32 0x0 PUSH2 0x164E JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x154D PUSH2 0x180A JUMP JUMPDEST PUSH2 0x1556 DUP2 PUSH2 0x185F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1556 DUP2 CALLER PUSH2 0x1903 JUMP JUMPDEST PUSH2 0x156B PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x1573 PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x157F DUP2 DUP7 DUP7 DUP7 PUSH2 0x195C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1597 SWAP1 DUP4 PUSH2 0x1999 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x9E9 SWAP1 DUP3 PUSH2 0x1999 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6A4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x15C9 DUP4 PUSH2 0x1B4B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1612 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x161C JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1668 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH2 0x1C21 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1679 DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16AF CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x16FD DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST ISZERO PUSH2 0xA68 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A4 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 DUP4 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1CDE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17BE DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E99 PUSH1 0x29 SWAP2 CODECOPY PUSH2 0x1E20 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1668 DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x416464726573733A206C6F772D6C6576656C2063616C6C206661696C65640000 DUP2 MSTORE POP PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x190D DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH2 0x191A DUP2 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x1925 DUP4 PUSH1 0x20 PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1936 SWAP3 SWAP2 SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6E2 SWAP2 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH2 0x1964 PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x1974 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x100 PUSH2 0x1EFB JUMP JUMPDEST POP POP SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x19A6 DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0x1F53 JUMP JUMPDEST PUSH2 0x9E9 DUP3 DUP3 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x19BF DUP4 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x19CA SWAP1 PUSH1 0x2 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x19E1 JUMPI PUSH2 0x19E1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A0B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A26 JUMPI PUSH2 0x1A26 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A55 JUMPI PUSH2 0x1A55 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1A79 DUP5 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x1A84 SWAP1 PUSH1 0x1 PUSH2 0x2C8E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1AFC JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1AB8 JUMPI PUSH2 0x1AB8 PUSH2 0x2CA1 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1ACE JUMPI PUSH2 0x1ACE PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1AF5 DUP2 PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A87 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x1668 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1B8A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0x1BB4 JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1BD2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1BEA JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1BFE JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1C10 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x6A4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1C32 DUP2 PUSH1 0x1 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x5 SSTORE DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD MLOAD SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x20214CA3 PUSH1 0xE1 SHL SWAP4 PUSH2 0x1C6A SWAP4 DUP7 SWAP4 DUP5 SWAP4 SWAP3 ADDRESS SWAP3 SWAP2 DUP11 SWAP2 PUSH1 0x1 SWAP2 PUSH1 0x24 ADD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1CAA DUP7 DUP4 DUP7 DUP5 PUSH2 0x207A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1CCB JUMPI PUSH2 0x1CCB PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1DC7 JUMPI PUSH1 0x0 PUSH2 0x1D02 PUSH1 0x1 DUP4 PUSH2 0x2D36 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1D16 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1D7B JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1D36 JUMPI PUSH2 0x1D36 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1D59 JUMPI PUSH2 0x1D59 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1D8C JUMPI PUSH2 0x1D8C PUSH2 0x2D49 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1E18 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E9D SWAP2 SWAP1 PUSH2 0x2900 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EF0 DUP8 DUP4 DUP4 DUP8 PUSH2 0x21D3 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1F03 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1F0E PUSH1 0x20 DUP4 PUSH2 0x2D5F JUMP JUMPDEST ISZERO PUSH2 0x1F36 JUMPI PUSH2 0x1F1E PUSH1 0x20 DUP4 PUSH2 0x2D5F JUMP JUMPDEST PUSH2 0x1F29 SWAP1 PUSH1 0x20 PUSH2 0x2D36 JUMP JUMPDEST PUSH2 0x1F33 SWAP1 DUP4 PUSH2 0x2C8E JUMP JUMPDEST SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 SWAP3 ADD ADD SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1F7D JUMPI PUSH2 0x1F77 DUP4 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x224C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1FB9 JUMPI PUSH2 0x1FA3 DUP4 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x1 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1FF6 JUMPI PUSH2 0x1FE0 DUP4 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x2 PUSH2 0x2264 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2035 JUMPI PUSH2 0x201F DUP4 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x204A DUP4 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x8 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x2068 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1668 DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 DUP6 MLOAD PUSH2 0x227D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT ADDRESS PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR SWAP1 SSTORE SWAP1 SWAP3 POP DUP3 SWAP2 PUSH32 0xB5E6E01E79F91267DC17B4E6314D5D4D03593D2CEEE0FBB452B750BD70EA5AF9 SWAP2 SWAP1 LOG2 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2000575 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4000AEA0 SWAP1 PUSH2 0x2138 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D81 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2157 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x217B SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST PUSH2 0x17BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x756E61626C6520746F207472616E73666572416E6443616C6C20746F206F7261 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x636C65 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2242 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x223B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x223B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST POP DUP2 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x17BE DUP4 DUP4 PUSH2 0x235A JUMP JUMPDEST PUSH2 0x2254 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1668 DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x226C PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x17BE DUP5 DUP6 PUSH1 0x0 ADD MLOAD MLOAD DUP6 DUP6 PUSH2 0x23D2 JUMP JUMPDEST PUSH2 0x2285 PUSH2 0x24A9 JUMP JUMPDEST DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x2293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x22A2 DUP4 DUP7 PUSH2 0x2C8E JUMP JUMPDEST GT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D5 DUP6 PUSH2 0x22C5 DUP8 PUSH1 0x20 ADD MLOAD DUP8 DUP7 PUSH2 0x22C0 SWAP2 SWAP1 PUSH2 0x2C8E JUMP JUMPDEST PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x22D0 SWAP1 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x245D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD DUP1 MLOAD DUP8 PUSH1 0x20 DUP4 ADD ADD SWAP4 POP DUP1 DUP9 DUP8 ADD GT ISZERO PUSH2 0x22F4 JUMPI DUP8 DUP7 ADD DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP5 ADD JUMPDEST PUSH1 0x20 DUP5 LT PUSH2 0x2334 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x2313 PUSH1 0x20 DUP4 PUSH2 0x2C8E JUMP JUMPDEST SWAP2 POP PUSH2 0x2320 PUSH1 0x20 DUP3 PUSH2 0x2C8E JUMP JUMPDEST SWAP1 POP PUSH2 0x232D PUSH1 0x20 DUP6 PUSH2 0x2D36 JUMP JUMPDEST SWAP4 POP PUSH2 0x22FC JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP7 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x236A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x26FB JUMP JUMPDEST PUSH2 0x238C PUSH2 0x24A9 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD DUP4 LT PUSH2 0x23AC JUMPI PUSH2 0x23AC DUP5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0x22D0 SWAP2 SWAP1 PUSH2 0x2C77 JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 DUP6 DUP4 ADD ADD DUP5 DUP2 MSTORE8 POP DUP1 DUP6 SUB PUSH2 0x23C8 JUMPI PUSH1 0x1 DUP2 ADD DUP3 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x23DA PUSH2 0x24A9 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x23E9 DUP6 DUP5 PUSH2 0x2C8E JUMP JUMPDEST GT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FD DUP6 PUSH2 0x22C5 DUP7 DUP6 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x240D DUP5 PUSH2 0x100 PUSH2 0x2E8C JUMP JUMPDEST PUSH2 0x2417 SWAP2 SWAP1 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD DUP4 DUP7 DUP3 ADD ADD DUP6 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP5 DUP8 ADD GT ISZERO PUSH2 0x243B JUMPI DUP4 DUP7 ADD DUP2 MSTORE JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x2457 JUMPI POP DUP2 PUSH2 0x6A4 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2469 DUP4 DUP4 PUSH2 0x1EFB JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 DUP3 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x24A4 PUSH2 0x24A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x255A JUMPI PUSH2 0x255A PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2582 JUMPI PUSH2 0x2582 PUSH2 0x24ED JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25F7 DUP5 PUSH2 0x25BD JUMP JUMPDEST SWAP3 POP PUSH2 0x2605 PUSH1 0x20 DUP6 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2665 PUSH1 0x20 DUP5 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1668 DUP3 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26C6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26AE JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x26E7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1668 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x272D DUP6 PUSH2 0x25BD JUMP JUMPDEST SWAP4 POP PUSH2 0x273B PUSH1 0x20 DUP7 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x536F75726365206D75737420626520746865206F7261636C65206F6620746865 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x81C995C5D595CDD PUSH1 0xC2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x27BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2457 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2806 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B0 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2812 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x283E JUMPI PUSH2 0x283E PUSH2 0x24ED JUMP JUMPDEST PUSH2 0x2852 DUP2 PUSH2 0x284C DUP5 SLOAD PUSH2 0x27AB JUMP JUMPDEST DUP5 PUSH2 0x27DF JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2887 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x286F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x28B6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2897 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x28D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x28F6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2912 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EC2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH12 0x312F71756F74653F7372633D PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP5 MLOAD PUSH2 0x2957 DUP2 PUSH1 0x2C DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH5 0x266473743D PUSH1 0xD8 SHL PUSH1 0x2C SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x297C DUP2 PUSH1 0x31 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH8 0x26616D6F756E743D PUSH1 0xC0 SHL PUSH1 0x31 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x29A5 DUP2 PUSH1 0x39 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST ADD PUSH1 0x39 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5B22616363657074222C20226170706C69636174696F6E2F6A736F6E222C2022 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH24 0x20BABA3437B934BD30BA34B7B7111610112132B0B932B91 PUSH1 0x45 SHL DUP2 DUP5 ADD MSTORE PUSH1 0x38 PUSH1 0x0 DUP6 SLOAD PUSH2 0x2A08 DUP2 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2A20 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2A39 JUMPI PUSH2 0x2A69 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP10 DUP8 ADD MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP10 ADD DUP7 ADD SWAP5 POP PUSH2 0x2A69 JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2A5F JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP10 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x2A44 JUMP JUMPDEST POP POP DUP6 DUP4 DUP11 ADD ADD SWAP5 POP JUMPDEST POP POP PUSH2 0x225D PUSH1 0xF0 SHL DUP4 MSTORE POP POP PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2AA9 JUMPI PUSH2 0x2AA9 PUSH2 0x2A81 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EC2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH11 0x312F737761703F7372633D PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP7 MLOAD PUSH2 0x2B3E DUP2 PUSH1 0x2B DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH5 0x266473743D PUSH1 0xD8 SHL PUSH1 0x2B SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP7 MLOAD PUSH2 0x2B63 DUP2 PUSH1 0x30 DUP5 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH8 0x26616D6F756E743D PUSH1 0xC0 SHL PUSH1 0x30 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP6 MLOAD PUSH2 0x2B8C DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH6 0x2666726F6D3D PUSH1 0xD0 SHL PUSH1 0x38 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x2BB3 DUP2 PUSH1 0x3E DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH10 0x26736C6970706167653D PUSH1 0xB0 SHL PUSH1 0x3E SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH2 0x2BFC PUSH2 0x2BDB PUSH1 0x48 DUP4 ADD DUP7 PUSH2 0x28E4 JUMP JUMPDEST PUSH21 0x2664697361626C65457374696D6174653D74727565 PUSH1 0x58 SHL DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C3A DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2C6B DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2CC6 JUMPI PUSH2 0x2CC6 PUSH2 0x2A81 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP9 SWAP1 MSTORE DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2D27 DUP4 DUP3 ADD DUP6 PUSH2 0x26CF JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D7C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x157F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2DE3 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2DC9 JUMPI PUSH2 0x2DC9 PUSH2 0x2A81 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2DD6 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2DAD JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2DFA JUMPI POP PUSH1 0x1 PUSH2 0x6A4 JUMP JUMPDEST DUP2 PUSH2 0x2E07 JUMPI POP PUSH1 0x0 PUSH2 0x6A4 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2E1D JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2E27 JUMPI PUSH2 0x2E43 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2E38 JUMPI PUSH2 0x2E38 PUSH2 0x2A81 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2E66 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x2E70 DUP4 DUP4 PUSH2 0x2DA8 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2E84 JUMPI PUSH2 0x2E84 PUSH2 0x2A81 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 DUP4 PUSH2 0x2DEB JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2063616C6C KECCAK256 PUSH24 0x6974682076616C7565206661696C656468747470733A2F2F PUSH2 0x7069 0x2E BALANCE PUSH10 0x6E63682E6465762F7377 PUSH2 0x702F PUSH23 0x352E322F17A8E30262C1F919C33056D877A3C22B95C2F5 0xE4 0xDA 0xC4 CHAINID DUP4 0xC1 0xC2 ORIGIN EXTCODECOPY 0xD7 SWAP16 0xBD 0xB0 PUSH29 0xC135E0CEBB02C3480AE5D74D377283180A2601F8F644EDF7987B009316 0xC6 GASPRICE STATICCALL 0xB0 EXP SWAP9 SELFBALANCE SLOAD SWAP6 0xC PUSH18 0x87FB98F39DA0AE224ABBBEE017C1699445AD 0xE NOT SELFBALANCE 0x4A 0x4D LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xE9 0x4E SSTORE 0xC5 STATICCALL 0xBA 0x2F 0xED RETURNDATACOPY 0xEB STATICCALL KECCAK256 PUSH9 0xFBD1EA3D8D48B6A411 PUSH32 0xB133A57F94A8553B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"599:8879:29:-:0;;;1291:1:1;1258:34;;2457:1247:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;719:10:20;;345:1:2;719:10:20;544:59:3;;;;-1:-1:-1;;;544:59:3;;3387:2:30;544:59:3;;;3369:21:30;3426:2;3406:18;;;3399:30;3465:26;3445:18;;;3438:54;3509:18;;544:59:3;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:3;-1:-1:-1;;;;;610:18:3;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;270:81:2;3043:40:29::1;3061:21;3043:17;;;:40;;:::i;:::-;8457:8:1::0;:43;;-1:-1:-1;;;;;;8457:43:1;-1:-1:-1;;;;;8457:43:1;;;;;3147:26:29::1;::::0;;;3232:40:::1;::::0;;;3331:24:::1;::::0;;;3366:38:::1;::::0;;;3415:13:::1;:30;3431:14:::0;3415:13;:30:::1;:::i;:::-;-1:-1:-1::0;;;;;;3456:38:29;::::1;;::::0;3510:7:::1;3505:141;3527:16;:23;3523:1;:27;;;3505:141;;;3572:62;1541:33;3605:16;3630:1;3622:10;;3605:28;;;;;;;;:::i;:::-;;;;;;;3572:10;;;:62;;:::i;:::-;3552:3:::0;::::1;::::0;::::1;:::i;:::-;;;;3505:141;;;-1:-1:-1::0;3656:40:29::1;1623:28;3684:11:::0;3656:10:::1;:40::i;:::-;2457:1247:::0;;;;;;;;;;599:8879;;1497:188:3;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;6738:2:30;1551:52:3;;;6720:21:30;6777:2;6757:18;;;6750:30;6816:25;6796:18;;;6789:53;6859:18;;1551:52:3;6536:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;1668:7;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;;1641:39:3;1497:188;:::o;8625:108:1:-;8688:6;:40;;-1:-1:-1;;;;;;8688:40:1;-1:-1:-1;;;;;8688:40:1;;;;;;;;;;8625:108::o;7587:233:14:-;3107:4;3130:12;;;;;;;;;;;-1:-1:-1;;;;;3130:29:14;;;;;;;;;;;;7665:149;;7708:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7708:29:14;;;;;;;;;:36;;-1:-1:-1;;7708:36:14;7740:4;7708:36;;;7790:12;719:10:20;;640:96;7790:12:14;-1:-1:-1;;;;;7763:40:14;7781:7;-1:-1:-1;;;;;7763:40:14;7775:4;7763:40;;;;;;;;;;7665:149;7587:233;;:::o;14:177:30:-;93:13;;-1:-1:-1;;;;;135:31:30;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:275;399:2;393:9;464:2;445:13;;-1:-1:-1;;441:27:30;429:40;;-1:-1:-1;;;;;484:34:30;;520:22;;;481:62;478:88;;;546:18;;:::i;:::-;582:2;575:22;328:275;;-1:-1:-1;328:275:30:o;608:650::-;662:5;715:3;708:4;700:6;696:17;692:27;682:55;;733:1;730;723:12;682:55;756:13;;-1:-1:-1;;;;;781:26:30;;778:52;;;810:18;;:::i;:::-;849:4;877:53;920:2;901:13;;-1:-1:-1;;897:27:30;893:36;;877:53;:::i;:::-;955:2;946:7;939:19;999:3;994:2;989;981:6;977:15;973:24;970:33;967:53;;;1016:1;1013;1006:12;967:53;1038:1;1048:134;1062:2;1059:1;1056:9;1048:134;;;1151:14;;;1147:23;;1141:30;1119:15;;;1115:24;;1108:64;1073:10;;1048:134;;;-1:-1:-1;1225:1:30;1202:16;;;1198:25;;;1191:36;;;;1206:7;608:650;-1:-1:-1;;;608:650:30:o;1263:733::-;1328:5;1381:3;1374:4;1366:6;1362:17;1358:27;1348:55;;1399:1;1396;1389:12;1348:55;1422:13;;1454:4;-1:-1:-1;;;;;1470:26:30;;1467:52;;;1499:18;;:::i;:::-;1545:2;1542:1;1538:10;1568:28;1592:2;1588;1584:11;1568:28;:::i;:::-;1630:15;;;1700;;;1696:24;;;1661:12;;;;1732:15;;;1729:35;;;1760:1;1757;1750:12;1729:35;1796:2;1788:6;1784:15;1773:26;;1808:159;1824:6;1819:3;1816:15;1808:159;;;1890:34;1920:3;1890:34;:::i;:::-;1878:47;;1841:12;;;;1945;;;;1808:159;;;1985:5;1263:733;-1:-1:-1;;;;;;;1263:733:30:o;2001:1179::-;2187:6;2195;2203;2211;2219;2227;2235;2243;2251;2259;2312:3;2300:9;2291:7;2287:23;2283:33;2280:53;;;2329:1;2326;2319:12;2280:53;2358:9;2352:16;2342:26;;2408:2;2397:9;2393:18;2387:25;2377:35;;2452:2;2441:9;2437:18;2431:25;2421:35;;2496:2;2485:9;2481:18;2475:25;2465:35;;2519:50;2564:3;2553:9;2549:19;2519:50;:::i;:::-;2509:60;;2588:50;2633:3;2622:9;2618:19;2588:50;:::i;:::-;2578:60;;2657:50;2702:3;2691:9;2687:19;2657:50;:::i;:::-;2647:60;;2726:50;2771:3;2760:9;2756:19;2726:50;:::i;:::-;2820:3;2805:19;;2799:26;2716:60;;-1:-1:-1;;;;;;2874:14:30;;;2871:34;;;2901:1;2898;2891:12;2871:34;2924:61;2977:7;2968:6;2957:9;2953:22;2924:61;:::i;:::-;2914:71;;3031:3;3020:9;3016:19;3010:26;2994:42;;3061:2;3051:8;3048:16;3045:36;;;3077:1;3074;3067:12;3045:36;;3100:74;3166:7;3155:8;3144:9;3140:24;3100:74;:::i;:::-;3090:84;;;2001:1179;;;;;;;;;;;;;:::o;3538:380::-;3617:1;3613:12;;;;3660;;;3681:61;;3735:4;3727:6;3723:17;3713:27;;3681:61;3788:2;3780:6;3777:14;3757:18;3754:38;3751:161;;3834:10;3829:3;3825:20;3822:1;3815:31;3869:4;3866:1;3859:15;3897:4;3894:1;3887:15;3751:161;;3538:380;;;:::o;4049:545::-;4151:2;4146:3;4143:11;4140:448;;;4187:1;4212:5;4208:2;4201:17;4257:4;4253:2;4243:19;4327:2;4315:10;4311:19;4308:1;4304:27;4298:4;4294:38;4363:4;4351:10;4348:20;4345:47;;;-1:-1:-1;4386:4:30;4345:47;4441:2;4436:3;4432:12;4429:1;4425:20;4419:4;4415:31;4405:41;;4496:82;4514:2;4507:5;4504:13;4496:82;;;4559:17;;;4540:1;4529:13;4496:82;;;4500:3;;;4140:448;4049:545;;;:::o;4770:1352::-;4890:10;;-1:-1:-1;;;;;4912:30:30;;4909:56;;;4945:18;;:::i;:::-;4974:97;5064:6;5024:38;5056:4;5050:11;5024:38;:::i;:::-;5018:4;4974:97;:::i;:::-;5126:4;;5190:2;5179:14;;5207:1;5202:663;;;;5909:1;5926:6;5923:89;;;-1:-1:-1;5978:19:30;;;5972:26;5923:89;-1:-1:-1;;4727:1:30;4723:11;;;4719:24;4715:29;4705:40;4751:1;4747:11;;;4702:57;6025:81;;5172:944;;5202:663;3996:1;3989:14;;;4033:4;4020:18;;-1:-1:-1;;5238:20:30;;;5356:236;5370:7;5367:1;5364:14;5356:236;;;5459:19;;;5453:26;5438:42;;5551:27;;;;5519:1;5507:14;;;;5386:19;;5356:236;;;5360:3;5620:6;5611:7;5608:19;5605:201;;;5681:19;;;5675:26;-1:-1:-1;;5764:1:30;5760:14;;;5776:3;5756:24;5752:37;5748:42;5733:58;5718:74;;5605:201;-1:-1:-1;;;;;5852:1:30;5836:14;;;5832:22;5819:36;;-1:-1:-1;4770:1352:30:o;6127:127::-;6188:10;6183:3;6179:20;6176:1;6169:31;6219:4;6216:1;6209:15;6243:4;6240:1;6233:15;6259:272;6296:3;6340:4;6333:5;6329:16;6369:4;6360:7;6357:17;6354:140;;6416:10;6411:3;6407:20;6404:1;6397:31;6451:4;6448:1;6441:15;6479:4;6476:1;6469:15;6354:140;6523:1;6510:15;;6259:272;-1:-1:-1;;6259:272:30:o;6536:347::-;599:8879:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_2401":{"entryPoint":null,"id":2401,"parameterSlots":0,"returnSlots":0},"@ONE_INCH_ETH_ADDRESS_5562":{"entryPoint":null,"id":5562,"parameterSlots":0,"returnSlots":0},"@STRATEGIST_ROLE_5572":{"entryPoint":null,"id":5572,"parameterSlots":0,"returnSlots":0},"@SWAP_AUTHORIZED_ROLE_5567":{"entryPoint":null,"id":5567,"parameterSlots":0,"returnSlots":0},"@_6192":{"entryPoint":null,"id":6192,"parameterSlots":0,"returnSlots":0},"@_add_4893":{"entryPoint":7633,"id":4893,"parameterSlots":2,"returnSlots":1},"@_at_5027":{"entryPoint":7348,"id":5027,"parameterSlots":2,"returnSlots":1},"@_checkRole_2466":{"entryPoint":5465,"id":2466,"parameterSlots":1,"returnSlots":0},"@_checkRole_2505":{"entryPoint":6403,"id":2505,"parameterSlots":2,"returnSlots":0},"@_contains_4996":{"entryPoint":null,"id":4996,"parameterSlots":2,"returnSlots":1},"@_grantRole_2657":{"entryPoint":5743,"id":2657,"parameterSlots":2,"returnSlots":0},"@_length_5010":{"entryPoint":null,"id":5010,"parameterSlots":1,"returnSlots":1},"@_msgSender_3594":{"entryPoint":null,"id":3594,"parameterSlots":0,"returnSlots":1},"@_rawRequest_594":{"entryPoint":8314,"id":594,"parameterSlots":4,"returnSlots":1},"@_remove_4977":{"entryPoint":7390,"id":4977,"parameterSlots":2,"returnSlots":1},"@_revert_3581":{"entryPoint":9050,"id":3581,"parameterSlots":2,"returnSlots":0},"@_revokeRole_2688":{"entryPoint":5875,"id":2688,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1021":{"entryPoint":6239,"id":1021,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1034":{"entryPoint":6154,"id":1034,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_987":{"entryPoint":3421,"id":987,"parameterSlots":0,"returnSlots":0},"@addSubscriber_5711":{"entryPoint":3778,"id":5711,"parameterSlots":1,"returnSlots":0},"@add_125":{"entryPoint":5512,"id":125,"parameterSlots":3,"returnSlots":0},"@add_5193":{"entryPoint":6019,"id":5193,"parameterSlots":2,"returnSlots":1},"@aggregationRouter_5574":{"entryPoint":null,"id":5574,"parameterSlots":0,"returnSlots":0},"@appendInt_1915":{"entryPoint":8804,"id":1915,"parameterSlots":3,"returnSlots":1},"@appendUint8_1712":{"entryPoint":8780,"id":1712,"parameterSlots":2,"returnSlots":1},"@append_1659":{"entryPoint":8288,"id":1659,"parameterSlots":2,"returnSlots":1},"@at_5289":{"entryPoint":5986,"id":5289,"parameterSlots":2,"returnSlots":1},"@buildChainlinkRequest_373":{"entryPoint":5475,"id":373,"parameterSlots":3,"returnSlots":1},"@chainlinkTokenAddress_694":{"entryPoint":null,"id":694,"parameterSlots":0,"returnSlots":1},"@encodeFixedNumeric_2084":{"entryPoint":8019,"id":2084,"parameterSlots":3,"returnSlots":0},"@encodeString_2326":{"entryPoint":6553,"id":2326,"parameterSlots":2,"returnSlots":0},"@evacuateLinkTokens_6188":{"entryPoint":3031,"id":6188,"parameterSlots":0,"returnSlots":0},"@fulfillQuoteRequest_5911":{"entryPoint":2668,"id":5911,"parameterSlots":2,"returnSlots":0},"@fulfillSwap_6155":{"entryPoint":3870,"id":6155,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_3362":{"entryPoint":6040,"id":3362,"parameterSlots":3,"returnSlots":1},"@functionCallWithValue_3406":{"entryPoint":7712,"id":3406,"parameterSlots":4,"returnSlots":1},"@functionCall_3322":{"entryPoint":6086,"id":3322,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_2520":{"entryPoint":2488,"id":2520,"parameterSlots":1,"returnSlots":1},"@grantRole_2540":{"entryPoint":2509,"id":2540,"parameterSlots":2,"returnSlots":0},"@hasRole_2453":{"entryPoint":3737,"id":2453,"parameterSlots":2,"returnSlots":1},"@init_1440":{"entryPoint":7931,"id":1440,"parameterSlots":2,"returnSlots":1},"@initialize_70":{"entryPoint":6492,"id":70,"parameterSlots":4,"returnSlots":1},"@isContract_3270":{"entryPoint":null,"id":3270,"parameterSlots":1,"returnSlots":1},"@isReadyToFulfillSwap_5596":{"entryPoint":null,"id":5596,"parameterSlots":0,"returnSlots":0},"@lastQuotedDstToken_5586":{"entryPoint":null,"id":5586,"parameterSlots":0,"returnSlots":0},"@lastQuotedSrcTokenAmount_5588":{"entryPoint":null,"id":5588,"parameterSlots":0,"returnSlots":0},"@lastQuotedSrcToken_5584":{"entryPoint":null,"id":5584,"parameterSlots":0,"returnSlots":0},"@lastSwapDstToken_5592":{"entryPoint":null,"id":5592,"parameterSlots":0,"returnSlots":0},"@lastSwapSrcTokenAmount_5594":{"entryPoint":null,"id":5594,"parameterSlots":0,"returnSlots":0},"@lastSwapSrcToken_5590":{"entryPoint":null,"id":5590,"parameterSlots":0,"returnSlots":0},"@length_5262":{"entryPoint":5976,"id":5262,"parameterSlots":1,"returnSlots":1},"@log10_4572":{"entryPoint":6987,"id":4572,"parameterSlots":1,"returnSlots":1},"@max_1512":{"entryPoint":9286,"id":1512,"parameterSlots":2,"returnSlots":1},"@oneInchApiKey_5600":{"entryPoint":3595,"id":5600,"parameterSlots":0,"returnSlots":0},"@owner_997":{"entryPoint":null,"id":997,"parameterSlots":0,"returnSlots":1},"@quoteJobFee_5578":{"entryPoint":null,"id":5578,"parameterSlots":0,"returnSlots":0},"@quoteJobId_5576":{"entryPoint":null,"id":5576,"parameterSlots":0,"returnSlots":0},"@registerSwapCalldata_6112":{"entryPoint":1706,"id":6112,"parameterSlots":2,"returnSlots":0},"@removeSubscriber_5730":{"entryPoint":3327,"id":5730,"parameterSlots":1,"returnSlots":0},"@remove_5220":{"entryPoint":5998,"id":5220,"parameterSlots":2,"returnSlots":1},"@renounceRole_2583":{"entryPoint":2542,"id":2583,"parameterSlots":2,"returnSlots":0},"@requestQuote_5862":{"entryPoint":1913,"id":5862,"parameterSlots":3,"returnSlots":0},"@requestSwap_6089":{"entryPoint":4448,"id":6089,"parameterSlots":4,"returnSlots":0},"@resize_1493":{"entryPoint":9309,"id":1493,"parameterSlots":2,"returnSlots":0},"@revokeRole_2560":{"entryPoint":3842,"id":2560,"parameterSlots":2,"returnSlots":0},"@sendChainlinkRequestTo_477":{"entryPoint":7201,"id":477,"parameterSlots":3,"returnSlots":1},"@sendChainlinkRequest_422":{"entryPoint":5710,"id":422,"parameterSlots":2,"returnSlots":1},"@subscriberAt_5743":{"entryPoint":3408,"id":5743,"parameterSlots":1,"returnSlots":1},"@subscribersLength_5753":{"entryPoint":3391,"id":5753,"parameterSlots":0,"returnSlots":1},"@supportsInterface_2434":{"entryPoint":1651,"id":2434,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3856":{"entryPoint":null,"id":3856,"parameterSlots":1,"returnSlots":1},"@swapCalldataJobFee_5582":{"entryPoint":null,"id":5582,"parameterSlots":0,"returnSlots":0},"@swapCalldataJobId_5580":{"entryPoint":null,"id":5580,"parameterSlots":0,"returnSlots":0},"@toHexString_3787":{"entryPoint":6576,"id":3787,"parameterSlots":2,"returnSlots":1},"@toHexString_3807":{"entryPoint":5542,"id":3807,"parameterSlots":1,"returnSlots":1},"@toString_3663":{"entryPoint":5564,"id":3663,"parameterSlots":1,"returnSlots":1},"@transferOwnership_951":{"entryPoint":5445,"id":951,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_3537":{"entryPoint":8659,"id":3537,"parameterSlots":4,"returnSlots":1},"@writeInt_1891":{"entryPoint":9170,"id":1891,"parameterSlots":4,"returnSlots":1},"@writeUint8_1691":{"entryPoint":9092,"id":1691,"parameterSlots":3,"returnSlots":1},"@write_1612":{"entryPoint":8829,"id":1612,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":9661,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9872,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9689,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint8":{"entryPoint":9998,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10978,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9749,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9794,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":9475,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":9838,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":10468,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":9935,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral_1b91":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_7c02":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10496,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_contract$_ChainlinkClient_$861_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_329eeb4a4583d7a66e5660cf8367b5fba2de6b1d6f9cec18ada71226f6b376a0_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10524,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f_t_string_storage_t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11272,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_de9f2498340b248ff2d24f0cdfee064a6725d669d562c5a84279c165693b4e4f_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr_t_stringliteral_3f49b29f52f0281c51cdb4adae0aadd650f5a622f1a42aa616d480bea7f870d9_t_string_memory_ptr_t_stringliteral_18aa6a76c2a3ae03dc43fcc080507431bda5b847b0889951f51a99adff468ec9_t_string_memory_ptr_t_stringliteral_1b914c1d770ee2ed30351e643289a051a6b8142bc26bdcd7f3114c8501286430__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11012,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9774,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":10953,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11470,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11649,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9979,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b3efd608222b424e5ed8427d7f6a272069793e6a1f5930c93db5c7960c3ce96__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d5cafe2745dab6273b51cca76f8727c7664db74ede49af049a5b5ca6a3b184e4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10083,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11406,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":11688,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":11916,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":11755,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11383,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11574,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":10207,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":10277,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9899,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11447,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":10155,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":10903,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":11615,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":10881,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11593,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11425,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9453,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:22896:30","statements":[{"nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:30","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:30"},"nodeType":"YulFunctionCall","src":"131:12:30"},"nodeType":"YulExpressionStatement","src":"131:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:30"},"nodeType":"YulFunctionCall","src":"100:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:30"},"nodeType":"YulFunctionCall","src":"96:32:30"},"nodeType":"YulIf","src":"93:52:30"},{"nodeType":"YulVariableDeclaration","src":"154:36:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:30"},"nodeType":"YulFunctionCall","src":"167:23:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:30"},"nodeType":"YulFunctionCall","src":"256:12:30"},"nodeType":"YulExpressionStatement","src":"256:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:30","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:30"},"nodeType":"YulFunctionCall","src":"230:20:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:30"},"nodeType":"YulFunctionCall","src":"219:32:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:30"},"nodeType":"YulFunctionCall","src":"209:43:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:30"},"nodeType":"YulFunctionCall","src":"202:51:30"},"nodeType":"YulIf","src":"199:71:30"},{"nodeType":"YulAssignment","src":"279:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:30","type":""}],"src":"14:286:30"},{"body":{"nodeType":"YulBlock","src":"400:92:30","statements":[{"nodeType":"YulAssignment","src":"410:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:30"},"nodeType":"YulFunctionCall","src":"418:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:30"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:30"},"nodeType":"YulFunctionCall","src":"470:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:30"},"nodeType":"YulFunctionCall","src":"463:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:30"},"nodeType":"YulFunctionCall","src":"445:41:30"},"nodeType":"YulExpressionStatement","src":"445:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:30","type":""}],"src":"305:187:30"},{"body":{"nodeType":"YulBlock","src":"529:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"553:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"558:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"549:3:30"},"nodeType":"YulFunctionCall","src":"549:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"539:6:30"},"nodeType":"YulFunctionCall","src":"539:31:30"},"nodeType":"YulExpressionStatement","src":"539:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"586:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"589:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"579:6:30"},"nodeType":"YulFunctionCall","src":"579:15:30"},"nodeType":"YulExpressionStatement","src":"579:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"610:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"613:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"603:6:30"},"nodeType":"YulFunctionCall","src":"603:15:30"},"nodeType":"YulExpressionStatement","src":"603:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"497:127:30"},{"body":{"nodeType":"YulBlock","src":"725:893:30","statements":[{"body":{"nodeType":"YulBlock","src":"771:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"780:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"783:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"773:6:30"},"nodeType":"YulFunctionCall","src":"773:12:30"},"nodeType":"YulExpressionStatement","src":"773:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"746:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"755:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"742:3:30"},"nodeType":"YulFunctionCall","src":"742:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"767:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"738:3:30"},"nodeType":"YulFunctionCall","src":"738:32:30"},"nodeType":"YulIf","src":"735:52:30"},{"nodeType":"YulAssignment","src":"796:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"819:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"806:12:30"},"nodeType":"YulFunctionCall","src":"806:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"796:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"838:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"869:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"880:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"865:3:30"},"nodeType":"YulFunctionCall","src":"865:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"852:12:30"},"nodeType":"YulFunctionCall","src":"852:32:30"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"842:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"893:28:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"911:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"907:3:30"},"nodeType":"YulFunctionCall","src":"907:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"919:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"903:3:30"},"nodeType":"YulFunctionCall","src":"903:18:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"897:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"948:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"957:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"960:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"950:6:30"},"nodeType":"YulFunctionCall","src":"950:12:30"},"nodeType":"YulExpressionStatement","src":"950:12:30"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"936:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"933:2:30"},"nodeType":"YulFunctionCall","src":"933:14:30"},"nodeType":"YulIf","src":"930:34:30"},{"nodeType":"YulVariableDeclaration","src":"973:32:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"987:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"998:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"983:3:30"},"nodeType":"YulFunctionCall","src":"983:22:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"977:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1053:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1062:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1065:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1055:6:30"},"nodeType":"YulFunctionCall","src":"1055:12:30"},"nodeType":"YulExpressionStatement","src":"1055:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1032:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1036:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1028:3:30"},"nodeType":"YulFunctionCall","src":"1028:13:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1043:7:30"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1024:3:30"},"nodeType":"YulFunctionCall","src":"1024:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1017:6:30"},"nodeType":"YulFunctionCall","src":"1017:35:30"},"nodeType":"YulIf","src":"1014:55:30"},{"nodeType":"YulVariableDeclaration","src":"1078:26:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1101:2:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1088:12:30"},"nodeType":"YulFunctionCall","src":"1088:16:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1082:2:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1127:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1129:16:30"},"nodeType":"YulFunctionCall","src":"1129:18:30"},"nodeType":"YulExpressionStatement","src":"1129:18:30"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1119:2:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1123:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1116:2:30"},"nodeType":"YulFunctionCall","src":"1116:10:30"},"nodeType":"YulIf","src":"1113:36:30"},{"nodeType":"YulVariableDeclaration","src":"1158:17:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1172:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1168:3:30"},"nodeType":"YulFunctionCall","src":"1168:7:30"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1162:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1184:23:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1204:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1198:5:30"},"nodeType":"YulFunctionCall","src":"1198:9:30"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1188:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1216:71:30","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1238:6:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1262:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1266:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1258:3:30"},"nodeType":"YulFunctionCall","src":"1258:13:30"},{"name":"_4","nodeType":"YulIdentifier","src":"1273:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1254:3:30"},"nodeType":"YulFunctionCall","src":"1254:22:30"},{"kind":"number","nodeType":"YulLiteral","src":"1278:2:30","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:30"},"nodeType":"YulFunctionCall","src":"1250:31:30"},{"name":"_4","nodeType":"YulIdentifier","src":"1283:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1246:3:30"},"nodeType":"YulFunctionCall","src":"1246:40:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1234:3:30"},"nodeType":"YulFunctionCall","src":"1234:53:30"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1220:10:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1346:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1348:16:30"},"nodeType":"YulFunctionCall","src":"1348:18:30"},"nodeType":"YulExpressionStatement","src":"1348:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1305:10:30"},{"name":"_1","nodeType":"YulIdentifier","src":"1317:2:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1302:2:30"},"nodeType":"YulFunctionCall","src":"1302:18:30"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1325:10:30"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1337:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1322:2:30"},"nodeType":"YulFunctionCall","src":"1322:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1299:2:30"},"nodeType":"YulFunctionCall","src":"1299:46:30"},"nodeType":"YulIf","src":"1296:72:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1384:2:30","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1388:10:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1377:6:30"},"nodeType":"YulFunctionCall","src":"1377:22:30"},"nodeType":"YulExpressionStatement","src":"1377:22:30"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1415:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"1423:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1408:6:30"},"nodeType":"YulFunctionCall","src":"1408:18:30"},"nodeType":"YulExpressionStatement","src":"1408:18:30"},{"body":{"nodeType":"YulBlock","src":"1472:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1481:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1484:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1474:6:30"},"nodeType":"YulFunctionCall","src":"1474:12:30"},"nodeType":"YulExpressionStatement","src":"1474:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1449:2:30"},{"name":"_3","nodeType":"YulIdentifier","src":"1453:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1445:3:30"},"nodeType":"YulFunctionCall","src":"1445:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"1458:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1441:3:30"},"nodeType":"YulFunctionCall","src":"1441:20:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1463:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1438:2:30"},"nodeType":"YulFunctionCall","src":"1438:33:30"},"nodeType":"YulIf","src":"1435:53:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1514:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"1522:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1510:3:30"},"nodeType":"YulFunctionCall","src":"1510:15:30"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1531:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"1535:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1527:3:30"},"nodeType":"YulFunctionCall","src":"1527:11:30"},{"name":"_3","nodeType":"YulIdentifier","src":"1540:2:30"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1497:12:30"},"nodeType":"YulFunctionCall","src":"1497:46:30"},"nodeType":"YulExpressionStatement","src":"1497:46:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1567:6:30"},{"name":"_3","nodeType":"YulIdentifier","src":"1575:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1563:3:30"},"nodeType":"YulFunctionCall","src":"1563:15:30"},{"kind":"number","nodeType":"YulLiteral","src":"1580:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1559:3:30"},"nodeType":"YulFunctionCall","src":"1559:24:30"},{"kind":"number","nodeType":"YulLiteral","src":"1585:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1552:6:30"},"nodeType":"YulFunctionCall","src":"1552:35:30"},"nodeType":"YulExpressionStatement","src":"1552:35:30"},{"nodeType":"YulAssignment","src":"1596:16:30","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1606:6:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1596:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"683:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"694:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"706:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"714:6:30","type":""}],"src":"629:989:30"},{"body":{"nodeType":"YulBlock","src":"1672:124:30","statements":[{"nodeType":"YulAssignment","src":"1682:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1704:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1691:12:30"},"nodeType":"YulFunctionCall","src":"1691:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1682:5:30"}]},{"body":{"nodeType":"YulBlock","src":"1774:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1783:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1786:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1776:6:30"},"nodeType":"YulFunctionCall","src":"1776:12:30"},"nodeType":"YulExpressionStatement","src":"1776:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1733:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1744:5:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1759:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1764:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1755:3:30"},"nodeType":"YulFunctionCall","src":"1755:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"1768:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1751:3:30"},"nodeType":"YulFunctionCall","src":"1751:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1740:3:30"},"nodeType":"YulFunctionCall","src":"1740:31:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1730:2:30"},"nodeType":"YulFunctionCall","src":"1730:42:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1723:6:30"},"nodeType":"YulFunctionCall","src":"1723:50:30"},"nodeType":"YulIf","src":"1720:70:30"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1651:6:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1662:5:30","type":""}],"src":"1623:173:30"},{"body":{"nodeType":"YulBlock","src":"1905:224:30","statements":[{"body":{"nodeType":"YulBlock","src":"1951:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1960:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1963:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1953:6:30"},"nodeType":"YulFunctionCall","src":"1953:12:30"},"nodeType":"YulExpressionStatement","src":"1953:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1926:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1935:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1922:3:30"},"nodeType":"YulFunctionCall","src":"1922:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1947:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1918:3:30"},"nodeType":"YulFunctionCall","src":"1918:32:30"},"nodeType":"YulIf","src":"1915:52:30"},{"nodeType":"YulAssignment","src":"1976:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2005:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1986:18:30"},"nodeType":"YulFunctionCall","src":"1986:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1976:6:30"}]},{"nodeType":"YulAssignment","src":"2024:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2057:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2068:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2053:3:30"},"nodeType":"YulFunctionCall","src":"2053:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2034:18:30"},"nodeType":"YulFunctionCall","src":"2034:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2024:6:30"}]},{"nodeType":"YulAssignment","src":"2081:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2108:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2119:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2104:3:30"},"nodeType":"YulFunctionCall","src":"2104:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2091:12:30"},"nodeType":"YulFunctionCall","src":"2091:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2081:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1855:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1866:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1878:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1886:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1894:6:30","type":""}],"src":"1801:328:30"},{"body":{"nodeType":"YulBlock","src":"2204:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"2250:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2259:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2262:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2252:6:30"},"nodeType":"YulFunctionCall","src":"2252:12:30"},"nodeType":"YulExpressionStatement","src":"2252:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2225:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2234:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2221:3:30"},"nodeType":"YulFunctionCall","src":"2221:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2246:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2217:3:30"},"nodeType":"YulFunctionCall","src":"2217:32:30"},"nodeType":"YulIf","src":"2214:52:30"},{"nodeType":"YulAssignment","src":"2275:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2298:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2285:12:30"},"nodeType":"YulFunctionCall","src":"2285:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2275:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2170:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2181:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2193:6:30","type":""}],"src":"2134:180:30"},{"body":{"nodeType":"YulBlock","src":"2420:76:30","statements":[{"nodeType":"YulAssignment","src":"2430:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2442:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2453:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2438:3:30"},"nodeType":"YulFunctionCall","src":"2438:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2430:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2472:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"2483:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2465:6:30"},"nodeType":"YulFunctionCall","src":"2465:25:30"},"nodeType":"YulExpressionStatement","src":"2465:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2389:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2400:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2411:4:30","type":""}],"src":"2319:177:30"},{"body":{"nodeType":"YulBlock","src":"2602:102:30","statements":[{"nodeType":"YulAssignment","src":"2612:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2624:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2635:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2620:3:30"},"nodeType":"YulFunctionCall","src":"2620:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2612:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2654:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2669:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2685:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2690:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2681:3:30"},"nodeType":"YulFunctionCall","src":"2681:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"2694:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2677:3:30"},"nodeType":"YulFunctionCall","src":"2677:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2665:3:30"},"nodeType":"YulFunctionCall","src":"2665:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2647:6:30"},"nodeType":"YulFunctionCall","src":"2647:51:30"},"nodeType":"YulExpressionStatement","src":"2647:51:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2571:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2582:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2593:4:30","type":""}],"src":"2501:203:30"},{"body":{"nodeType":"YulBlock","src":"2796:167:30","statements":[{"body":{"nodeType":"YulBlock","src":"2842:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2851:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2854:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2844:6:30"},"nodeType":"YulFunctionCall","src":"2844:12:30"},"nodeType":"YulExpressionStatement","src":"2844:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2817:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2826:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2813:3:30"},"nodeType":"YulFunctionCall","src":"2813:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2838:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2809:3:30"},"nodeType":"YulFunctionCall","src":"2809:32:30"},"nodeType":"YulIf","src":"2806:52:30"},{"nodeType":"YulAssignment","src":"2867:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2890:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2877:12:30"},"nodeType":"YulFunctionCall","src":"2877:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2867:6:30"}]},{"nodeType":"YulAssignment","src":"2909:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2942:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2953:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2938:3:30"},"nodeType":"YulFunctionCall","src":"2938:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2919:18:30"},"nodeType":"YulFunctionCall","src":"2919:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2909:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2754:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2765:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2777:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2785:6:30","type":""}],"src":"2709:254:30"},{"body":{"nodeType":"YulBlock","src":"3069:76:30","statements":[{"nodeType":"YulAssignment","src":"3079:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3091:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3102:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3087:3:30"},"nodeType":"YulFunctionCall","src":"3087:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3079:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3121:9:30"},{"name":"value0","nodeType":"YulIdentifier","src":"3132:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3114:6:30"},"nodeType":"YulFunctionCall","src":"3114:25:30"},"nodeType":"YulExpressionStatement","src":"3114:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3038:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3049:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3060:4:30","type":""}],"src":"2968:177:30"},{"body":{"nodeType":"YulBlock","src":"3237:161:30","statements":[{"body":{"nodeType":"YulBlock","src":"3283:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3295:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3285:6:30"},"nodeType":"YulFunctionCall","src":"3285:12:30"},"nodeType":"YulExpressionStatement","src":"3285:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3258:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3267:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3254:3:30"},"nodeType":"YulFunctionCall","src":"3254:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3279:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3250:3:30"},"nodeType":"YulFunctionCall","src":"3250:32:30"},"nodeType":"YulIf","src":"3247:52:30"},{"nodeType":"YulAssignment","src":"3308:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3318:12:30"},"nodeType":"YulFunctionCall","src":"3318:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3308:6:30"}]},{"nodeType":"YulAssignment","src":"3350:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3377:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3388:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3373:3:30"},"nodeType":"YulFunctionCall","src":"3373:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3360:12:30"},"nodeType":"YulFunctionCall","src":"3360:32:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3350:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3195:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3206:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3218:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3226:6:30","type":""}],"src":"3150:248:30"},{"body":{"nodeType":"YulBlock","src":"3473:116:30","statements":[{"body":{"nodeType":"YulBlock","src":"3519:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3528:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3531:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3521:6:30"},"nodeType":"YulFunctionCall","src":"3521:12:30"},"nodeType":"YulExpressionStatement","src":"3521:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3494:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3503:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3490:3:30"},"nodeType":"YulFunctionCall","src":"3490:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3515:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3486:3:30"},"nodeType":"YulFunctionCall","src":"3486:32:30"},"nodeType":"YulIf","src":"3483:52:30"},{"nodeType":"YulAssignment","src":"3544:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3573:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3554:18:30"},"nodeType":"YulFunctionCall","src":"3554:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3544:6:30"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3439:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3450:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3462:6:30","type":""}],"src":"3403:186:30"},{"body":{"nodeType":"YulBlock","src":"3664:110:30","statements":[{"body":{"nodeType":"YulBlock","src":"3710:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3719:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3722:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3712:6:30"},"nodeType":"YulFunctionCall","src":"3712:12:30"},"nodeType":"YulExpressionStatement","src":"3712:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3685:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3694:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3681:3:30"},"nodeType":"YulFunctionCall","src":"3681:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3677:3:30"},"nodeType":"YulFunctionCall","src":"3677:32:30"},"nodeType":"YulIf","src":"3674:52:30"},{"nodeType":"YulAssignment","src":"3735:33:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3758:9:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3745:12:30"},"nodeType":"YulFunctionCall","src":"3745:23:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3735:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3630:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3641:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3653:6:30","type":""}],"src":"3594:180:30"},{"body":{"nodeType":"YulBlock","src":"3845:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3855:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3864:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3859:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"3924:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3949:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"3954:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3945:3:30"},"nodeType":"YulFunctionCall","src":"3945:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3968:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"3973:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3964:3:30"},"nodeType":"YulFunctionCall","src":"3964:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3958:5:30"},"nodeType":"YulFunctionCall","src":"3958:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3938:6:30"},"nodeType":"YulFunctionCall","src":"3938:39:30"},"nodeType":"YulExpressionStatement","src":"3938:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3885:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"3888:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3882:2:30"},"nodeType":"YulFunctionCall","src":"3882:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3896:19:30","statements":[{"nodeType":"YulAssignment","src":"3898:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3907:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"3910:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3903:3:30"},"nodeType":"YulFunctionCall","src":"3903:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3898:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"3878:3:30","statements":[]},"src":"3874:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4007:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"4012:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4003:3:30"},"nodeType":"YulFunctionCall","src":"4003:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"4021:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3996:6:30"},"nodeType":"YulFunctionCall","src":"3996:27:30"},"nodeType":"YulExpressionStatement","src":"3996:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3823:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3828:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"3833:6:30","type":""}],"src":"3779:250:30"},{"body":{"nodeType":"YulBlock","src":"4084:221:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4094:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4114:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4108:5:30"},"nodeType":"YulFunctionCall","src":"4108:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4098:6:30","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4136:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"4141:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4129:6:30"},"nodeType":"YulFunctionCall","src":"4129:19:30"},"nodeType":"YulExpressionStatement","src":"4129:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4196:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4203:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4192:3:30"},"nodeType":"YulFunctionCall","src":"4192:16:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4214:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4219:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4210:3:30"},"nodeType":"YulFunctionCall","src":"4210:14:30"},{"name":"length","nodeType":"YulIdentifier","src":"4226:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4157:34:30"},"nodeType":"YulFunctionCall","src":"4157:76:30"},"nodeType":"YulExpressionStatement","src":"4157:76:30"},{"nodeType":"YulAssignment","src":"4242:57:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4257:3:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4270:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4278:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4266:3:30"},"nodeType":"YulFunctionCall","src":"4266:15:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4287:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4283:3:30"},"nodeType":"YulFunctionCall","src":"4283:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4262:3:30"},"nodeType":"YulFunctionCall","src":"4262:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4253:3:30"},"nodeType":"YulFunctionCall","src":"4253:39:30"},{"kind":"number","nodeType":"YulLiteral","src":"4294:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4249:3:30"},"nodeType":"YulFunctionCall","src":"4249:50:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4242:3:30"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4061:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4068:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4076:3:30","type":""}],"src":"4034:271:30"},{"body":{"nodeType":"YulBlock","src":"4431:99:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4448:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4459:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4441:6:30"},"nodeType":"YulFunctionCall","src":"4441:21:30"},"nodeType":"YulExpressionStatement","src":"4441:21:30"},{"nodeType":"YulAssignment","src":"4471:53:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4497:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4509:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4520:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4505:3:30"},"nodeType":"YulFunctionCall","src":"4505:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4479:17:30"},"nodeType":"YulFunctionCall","src":"4479:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4471:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4400:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4411:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4422:4:30","type":""}],"src":"4310:220:30"},{"body":{"nodeType":"YulBlock","src":"4654:367:30","statements":[{"body":{"nodeType":"YulBlock","src":"4701:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4710:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4713:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4703:6:30"},"nodeType":"YulFunctionCall","src":"4703:12:30"},"nodeType":"YulExpressionStatement","src":"4703:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4675:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4684:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4671:3:30"},"nodeType":"YulFunctionCall","src":"4671:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4696:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4667:3:30"},"nodeType":"YulFunctionCall","src":"4667:33:30"},"nodeType":"YulIf","src":"4664:53:30"},{"nodeType":"YulAssignment","src":"4726:39:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4755:9:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4736:18:30"},"nodeType":"YulFunctionCall","src":"4736:29:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4726:6:30"}]},{"nodeType":"YulAssignment","src":"4774:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4807:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4818:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4803:3:30"},"nodeType":"YulFunctionCall","src":"4803:18:30"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4784:18:30"},"nodeType":"YulFunctionCall","src":"4784:38:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4774:6:30"}]},{"nodeType":"YulAssignment","src":"4831:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4858:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4869:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4854:3:30"},"nodeType":"YulFunctionCall","src":"4854:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4841:12:30"},"nodeType":"YulFunctionCall","src":"4841:32:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4831:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"4882:45:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4912:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4923:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4908:3:30"},"nodeType":"YulFunctionCall","src":"4908:18:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4895:12:30"},"nodeType":"YulFunctionCall","src":"4895:32:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4886:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"4975:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4984:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4987:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4977:6:30"},"nodeType":"YulFunctionCall","src":"4977:12:30"},"nodeType":"YulExpressionStatement","src":"4977:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4949:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4960:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4967:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4956:3:30"},"nodeType":"YulFunctionCall","src":"4956:16:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4946:2:30"},"nodeType":"YulFunctionCall","src":"4946:27:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4939:6:30"},"nodeType":"YulFunctionCall","src":"4939:35:30"},"nodeType":"YulIf","src":"4936:55:30"},{"nodeType":"YulAssignment","src":"5000:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"5010:5:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5000:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4596:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4607:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4619:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4627:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4635:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4643:6:30","type":""}],"src":"4535:486:30"},{"body":{"nodeType":"YulBlock","src":"5200:230:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5217:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5228:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5210:6:30"},"nodeType":"YulFunctionCall","src":"5210:21:30"},"nodeType":"YulExpressionStatement","src":"5210:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5251:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5262:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5247:3:30"},"nodeType":"YulFunctionCall","src":"5247:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"5267:2:30","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5240:6:30"},"nodeType":"YulFunctionCall","src":"5240:30:30"},"nodeType":"YulExpressionStatement","src":"5240:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5290:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5301:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5286:3:30"},"nodeType":"YulFunctionCall","src":"5286:18:30"},{"hexValue":"536f75726365206d75737420626520746865206f7261636c65206f6620746865","kind":"string","nodeType":"YulLiteral","src":"5306:34:30","type":"","value":"Source must be the oracle of the"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5279:6:30"},"nodeType":"YulFunctionCall","src":"5279:62:30"},"nodeType":"YulExpressionStatement","src":"5279:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5361:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5372:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5357:3:30"},"nodeType":"YulFunctionCall","src":"5357:18:30"},{"hexValue":"2072657175657374","kind":"string","nodeType":"YulLiteral","src":"5377:10:30","type":"","value":" request"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5350:6:30"},"nodeType":"YulFunctionCall","src":"5350:38:30"},"nodeType":"YulExpressionStatement","src":"5350:38:30"},{"nodeType":"YulAssignment","src":"5397:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5409:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5420:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5405:3:30"},"nodeType":"YulFunctionCall","src":"5405:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5397:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d5cafe2745dab6273b51cca76f8727c7664db74ede49af049a5b5ca6a3b184e4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5177:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5191:4:30","type":""}],"src":"5026:404:30"},{"body":{"nodeType":"YulBlock","src":"5490:325:30","statements":[{"nodeType":"YulAssignment","src":"5500:22:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5514:1:30","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5517:4:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5510:3:30"},"nodeType":"YulFunctionCall","src":"5510:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5500:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5531:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5561:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"5567:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5557:3:30"},"nodeType":"YulFunctionCall","src":"5557:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5535:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"5608:31:30","statements":[{"nodeType":"YulAssignment","src":"5610:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5624:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5632:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5620:3:30"},"nodeType":"YulFunctionCall","src":"5620:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5610:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5588:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5581:6:30"},"nodeType":"YulFunctionCall","src":"5581:26:30"},"nodeType":"YulIf","src":"5578:61:30"},{"body":{"nodeType":"YulBlock","src":"5698:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5719:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5726:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5731:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5722:3:30"},"nodeType":"YulFunctionCall","src":"5722:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5712:6:30"},"nodeType":"YulFunctionCall","src":"5712:31:30"},"nodeType":"YulExpressionStatement","src":"5712:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5763:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5766:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5756:6:30"},"nodeType":"YulFunctionCall","src":"5756:15:30"},"nodeType":"YulExpressionStatement","src":"5756:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5791:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5794:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5784:6:30"},"nodeType":"YulFunctionCall","src":"5784:15:30"},"nodeType":"YulExpressionStatement","src":"5784:15:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5654:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5677:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5685:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5674:2:30"},"nodeType":"YulFunctionCall","src":"5674:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5651:2:30"},"nodeType":"YulFunctionCall","src":"5651:38:30"},"nodeType":"YulIf","src":"5648:161:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5470:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5479:6:30","type":""}],"src":"5435:380:30"},{"body":{"nodeType":"YulBlock","src":"5875:65:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5892:1:30","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"5895:3:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5885:6:30"},"nodeType":"YulFunctionCall","src":"5885:14:30"},"nodeType":"YulExpressionStatement","src":"5885:14:30"},{"nodeType":"YulAssignment","src":"5908:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5926:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5929:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"5916:9:30"},"nodeType":"YulFunctionCall","src":"5916:18:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5908:4:30"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"5858:3:30","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"5866:4:30","type":""}],"src":"5820:120:30"},{"body":{"nodeType":"YulBlock","src":"6025:464:30","statements":[{"body":{"nodeType":"YulBlock","src":"6058:425:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6072:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6082:1:30","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6076:2:30","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6103:2:30"},{"name":"array","nodeType":"YulIdentifier","src":"6107:5:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6096:6:30"},"nodeType":"YulFunctionCall","src":"6096:17:30"},"nodeType":"YulExpressionStatement","src":"6096:17:30"},{"nodeType":"YulVariableDeclaration","src":"6126:31:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6148:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"6152:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"6138:9:30"},"nodeType":"YulFunctionCall","src":"6138:19:30"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"6130:4:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6170:57:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6193:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6203:1:30","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6210:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"6222:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6206:3:30"},"nodeType":"YulFunctionCall","src":"6206:19:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6199:3:30"},"nodeType":"YulFunctionCall","src":"6199:27:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6189:3:30"},"nodeType":"YulFunctionCall","src":"6189:38:30"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6174:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6264:23:30","statements":[{"nodeType":"YulAssignment","src":"6266:19:30","value":{"name":"data","nodeType":"YulIdentifier","src":"6281:4:30"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6266:11:30"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6246:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"6258:4:30","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6243:2:30"},"nodeType":"YulFunctionCall","src":"6243:20:30"},"nodeType":"YulIf","src":"6240:47:30"},{"nodeType":"YulVariableDeclaration","src":"6300:41:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6314:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6324:1:30","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6331:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6336:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6327:3:30"},"nodeType":"YulFunctionCall","src":"6327:12:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6320:3:30"},"nodeType":"YulFunctionCall","src":"6320:20:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6310:3:30"},"nodeType":"YulFunctionCall","src":"6310:31:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6304:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6354:24:30","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"6367:11:30"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"6358:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6452:21:30","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6461:5:30"},{"name":"_1","nodeType":"YulIdentifier","src":"6468:2:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6454:6:30"},"nodeType":"YulFunctionCall","src":"6454:17:30"},"nodeType":"YulExpressionStatement","src":"6454:17:30"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6402:5:30"},{"name":"_2","nodeType":"YulIdentifier","src":"6409:2:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6399:2:30"},"nodeType":"YulFunctionCall","src":"6399:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6413:26:30","statements":[{"nodeType":"YulAssignment","src":"6415:22:30","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6428:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"6435:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6424:3:30"},"nodeType":"YulFunctionCall","src":"6424:13:30"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"6415:5:30"}]}]},"pre":{"nodeType":"YulBlock","src":"6395:3:30","statements":[]},"src":"6391:82:30"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6041:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6046:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6038:2:30"},"nodeType":"YulFunctionCall","src":"6038:11:30"},"nodeType":"YulIf","src":"6035:448:30"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"5997:5:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"6004:3:30","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6009:10:30","type":""}],"src":"5945:544:30"},{"body":{"nodeType":"YulBlock","src":"6579:81:30","statements":[{"nodeType":"YulAssignment","src":"6589:65:30","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6604:4:30"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6622:1:30","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"6625:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6618:3:30"},"nodeType":"YulFunctionCall","src":"6618:11:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6635:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6631:3:30"},"nodeType":"YulFunctionCall","src":"6631:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6614:3:30"},"nodeType":"YulFunctionCall","src":"6614:24:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6610:3:30"},"nodeType":"YulFunctionCall","src":"6610:29:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6600:3:30"},"nodeType":"YulFunctionCall","src":"6600:40:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6646:1:30","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"6649:3:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6642:3:30"},"nodeType":"YulFunctionCall","src":"6642:11:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6597:2:30"},"nodeType":"YulFunctionCall","src":"6597:57:30"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"6589:4:30"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6556:4:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"6562:3:30","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6570:4:30","type":""}],"src":"6494:166:30"},{"body":{"nodeType":"YulBlock","src":"6759:1254:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6769:24:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6789:3:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6783:5:30"},"nodeType":"YulFunctionCall","src":"6783:10:30"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"6773:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6836:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6838:16:30"},"nodeType":"YulFunctionCall","src":"6838:18:30"},"nodeType":"YulExpressionStatement","src":"6838:18:30"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6808:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6824:2:30","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"6828:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6820:3:30"},"nodeType":"YulFunctionCall","src":"6820:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"6832:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6816:3:30"},"nodeType":"YulFunctionCall","src":"6816:18:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6805:2:30"},"nodeType":"YulFunctionCall","src":"6805:30:30"},"nodeType":"YulIf","src":"6802:56:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6910:4:30"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6948:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6942:5:30"},"nodeType":"YulFunctionCall","src":"6942:11:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"6916:25:30"},"nodeType":"YulFunctionCall","src":"6916:38:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"6956:6:30"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"6867:42:30"},"nodeType":"YulFunctionCall","src":"6867:96:30"},"nodeType":"YulExpressionStatement","src":"6867:96:30"},{"nodeType":"YulVariableDeclaration","src":"6972:18:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6989:1:30","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"6976:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6999:23:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7018:4:30","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"7003:11:30","type":""}]},{"nodeType":"YulAssignment","src":"7031:24:30","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"7044:11:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7031:9:30"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7101:655:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7115:35:30","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7134:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7146:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7142:3:30"},"nodeType":"YulFunctionCall","src":"7142:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7130:3:30"},"nodeType":"YulFunctionCall","src":"7130:20:30"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7119:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7163:48:30","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7206:4:30"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"7177:28:30"},"nodeType":"YulFunctionCall","src":"7177:34:30"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7167:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7224:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7233:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7228:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7311:172:30","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7336:6:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7354:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7359:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7350:3:30"},"nodeType":"YulFunctionCall","src":"7350:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7344:5:30"},"nodeType":"YulFunctionCall","src":"7344:26:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7329:6:30"},"nodeType":"YulFunctionCall","src":"7329:42:30"},"nodeType":"YulExpressionStatement","src":"7329:42:30"},{"nodeType":"YulAssignment","src":"7388:24:30","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7402:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7410:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7398:3:30"},"nodeType":"YulFunctionCall","src":"7398:14:30"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7388:6:30"}]},{"nodeType":"YulAssignment","src":"7429:40:30","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7446:9:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"7457:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7442:3:30"},"nodeType":"YulFunctionCall","src":"7442:27:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7429:9:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7258:1:30"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7261:7:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7255:2:30"},"nodeType":"YulFunctionCall","src":"7255:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7270:28:30","statements":[{"nodeType":"YulAssignment","src":"7272:24:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7281:1:30"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"7284:11:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7277:3:30"},"nodeType":"YulFunctionCall","src":"7277:19:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7272:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"7251:3:30","statements":[]},"src":"7247:236:30"},{"body":{"nodeType":"YulBlock","src":"7531:166:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7549:43:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7576:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7581:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7572:3:30"},"nodeType":"YulFunctionCall","src":"7572:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7566:5:30"},"nodeType":"YulFunctionCall","src":"7566:26:30"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"7553:9:30","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7616:6:30"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"7628:9:30"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7655:1:30","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"7658:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7651:3:30"},"nodeType":"YulFunctionCall","src":"7651:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"7667:3:30","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7647:3:30"},"nodeType":"YulFunctionCall","src":"7647:24:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7673:3:30"},"nodeType":"YulFunctionCall","src":"7673:6:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7643:3:30"},"nodeType":"YulFunctionCall","src":"7643:37:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7639:3:30"},"nodeType":"YulFunctionCall","src":"7639:42:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7624:3:30"},"nodeType":"YulFunctionCall","src":"7624:58:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7609:6:30"},"nodeType":"YulFunctionCall","src":"7609:74:30"},"nodeType":"YulExpressionStatement","src":"7609:74:30"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"7502:7:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"7511:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7499:2:30"},"nodeType":"YulFunctionCall","src":"7499:19:30"},"nodeType":"YulIf","src":"7496:201:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7717:4:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7731:1:30","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"7734:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7727:3:30"},"nodeType":"YulFunctionCall","src":"7727:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"7743:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7723:3:30"},"nodeType":"YulFunctionCall","src":"7723:22:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7710:6:30"},"nodeType":"YulFunctionCall","src":"7710:36:30"},"nodeType":"YulExpressionStatement","src":"7710:36:30"}]},"nodeType":"YulCase","src":"7094:662:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7099:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"7773:234:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7787:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7800:1:30","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7791:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7836:67:30","statements":[{"nodeType":"YulAssignment","src":"7854:35:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7873:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7878:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7869:3:30"},"nodeType":"YulFunctionCall","src":"7869:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7863:5:30"},"nodeType":"YulFunctionCall","src":"7863:26:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7854:5:30"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"7817:6:30"},"nodeType":"YulIf","src":"7814:89:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7923:4:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7982:5:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"7989:6:30"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"7929:52:30"},"nodeType":"YulFunctionCall","src":"7929:67:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7916:6:30"},"nodeType":"YulFunctionCall","src":"7916:81:30"},"nodeType":"YulExpressionStatement","src":"7916:81:30"}]},"nodeType":"YulCase","src":"7765:242:30","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7074:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7082:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7071:2:30"},"nodeType":"YulFunctionCall","src":"7071:14:30"},"nodeType":"YulSwitch","src":"7064:943:30"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"6744:4:30","type":""},{"name":"src","nodeType":"YulTypedName","src":"6750:3:30","type":""}],"src":"6665:1348:30"},{"body":{"nodeType":"YulBlock","src":"8067:148:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8077:26:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8097:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8091:5:30"},"nodeType":"YulFunctionCall","src":"8091:12:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8081:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8151:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"8158:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8147:3:30"},"nodeType":"YulFunctionCall","src":"8147:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"8165:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"8170:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8112:34:30"},"nodeType":"YulFunctionCall","src":"8112:65:30"},"nodeType":"YulExpressionStatement","src":"8112:65:30"},{"nodeType":"YulAssignment","src":"8186:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8197:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"8202:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8193:3:30"},"nodeType":"YulFunctionCall","src":"8193:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8186:3:30"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8044:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8051:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8059:3:30","type":""}],"src":"8018:197:30"},{"body":{"nodeType":"YulBlock","src":"8357:150:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8367:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8387:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8381:5:30"},"nodeType":"YulFunctionCall","src":"8381:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8371:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8442:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8450:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8438:3:30"},"nodeType":"YulFunctionCall","src":"8438:17:30"},{"name":"pos","nodeType":"YulIdentifier","src":"8457:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"8462:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8403:34:30"},"nodeType":"YulFunctionCall","src":"8403:66:30"},"nodeType":"YulExpressionStatement","src":"8403:66:30"},{"nodeType":"YulAssignment","src":"8478:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8489:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"8494:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8485:3:30"},"nodeType":"YulFunctionCall","src":"8485:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8478:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8333:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8338:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8349:3:30","type":""}],"src":"8220:287:30"},{"body":{"nodeType":"YulBlock","src":"9050:658:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9067:3:30"},{"hexValue":"68747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f","kind":"string","nodeType":"YulLiteral","src":"9072:34:30","type":"","value":"https://api.1inch.dev/swap/v5.2/"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9060:6:30"},"nodeType":"YulFunctionCall","src":"9060:47:30"},"nodeType":"YulExpressionStatement","src":"9060:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9127:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9132:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9123:3:30"},"nodeType":"YulFunctionCall","src":"9123:12:30"},{"hexValue":"312f71756f74653f7372633d","kind":"string","nodeType":"YulLiteral","src":"9137:14:30","type":"","value":"1/quote?src="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9116:6:30"},"nodeType":"YulFunctionCall","src":"9116:36:30"},"nodeType":"YulExpressionStatement","src":"9116:36:30"},{"nodeType":"YulVariableDeclaration","src":"9161:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9181:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9175:5:30"},"nodeType":"YulFunctionCall","src":"9175:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9165:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9236:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9244:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9232:3:30"},"nodeType":"YulFunctionCall","src":"9232:15:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9253:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9258:2:30","type":"","value":"44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9249:3:30"},"nodeType":"YulFunctionCall","src":"9249:12:30"},{"name":"length","nodeType":"YulIdentifier","src":"9263:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9197:34:30"},"nodeType":"YulFunctionCall","src":"9197:73:30"},"nodeType":"YulExpressionStatement","src":"9197:73:30"},{"nodeType":"YulVariableDeclaration","src":"9279:26:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9293:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"9298:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9289:3:30"},"nodeType":"YulFunctionCall","src":"9289:16:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9283:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9325:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"9329:2:30","type":"","value":"44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9321:3:30"},"nodeType":"YulFunctionCall","src":"9321:11:30"},{"hexValue":"266473743d","kind":"string","nodeType":"YulLiteral","src":"9334:7:30","type":"","value":"&dst="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9314:6:30"},"nodeType":"YulFunctionCall","src":"9314:28:30"},"nodeType":"YulExpressionStatement","src":"9314:28:30"},{"nodeType":"YulVariableDeclaration","src":"9351:29:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9373:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9367:5:30"},"nodeType":"YulFunctionCall","src":"9367:13:30"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"9355:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9428:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9436:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9424:3:30"},"nodeType":"YulFunctionCall","src":"9424:15:30"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9445:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"9449:2:30","type":"","value":"49"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9441:3:30"},"nodeType":"YulFunctionCall","src":"9441:11:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"9454:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9389:34:30"},"nodeType":"YulFunctionCall","src":"9389:74:30"},"nodeType":"YulExpressionStatement","src":"9389:74:30"},{"nodeType":"YulVariableDeclaration","src":"9472:27:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9486:2:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"9490:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9482:3:30"},"nodeType":"YulFunctionCall","src":"9482:17:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9476:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9519:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"9523:2:30","type":"","value":"49"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9515:3:30"},"nodeType":"YulFunctionCall","src":"9515:11:30"},{"hexValue":"26616d6f756e743d","kind":"string","nodeType":"YulLiteral","src":"9528:10:30","type":"","value":"&amount="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9508:6:30"},"nodeType":"YulFunctionCall","src":"9508:31:30"},"nodeType":"YulExpressionStatement","src":"9508:31:30"},{"nodeType":"YulVariableDeclaration","src":"9548:29:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9570:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9564:5:30"},"nodeType":"YulFunctionCall","src":"9564:13:30"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"9552:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9625:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9633:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9621:3:30"},"nodeType":"YulFunctionCall","src":"9621:15:30"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9642:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"9646:2:30","type":"","value":"57"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9638:3:30"},"nodeType":"YulFunctionCall","src":"9638:11:30"},{"name":"length_2","nodeType":"YulIdentifier","src":"9651:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9586:34:30"},"nodeType":"YulFunctionCall","src":"9586:74:30"},"nodeType":"YulExpressionStatement","src":"9586:74:30"},{"nodeType":"YulAssignment","src":"9669:33:30","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9684:2:30"},{"name":"length_2","nodeType":"YulIdentifier","src":"9688:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9680:3:30"},"nodeType":"YulFunctionCall","src":"9680:17:30"},{"kind":"number","nodeType":"YulLiteral","src":"9699:2:30","type":"","value":"57"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9676:3:30"},"nodeType":"YulFunctionCall","src":"9676:26:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9669:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_329eeb4a4583d7a66e5660cf8367b5fba2de6b1d6f9cec18ada71226f6b376a0_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9010:3:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9015:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9023:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9031:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9042:3:30","type":""}],"src":"8512:1196:30"},{"body":{"nodeType":"YulBlock","src":"9768:70:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9785:3:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9794:3:30","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"9799:4:30","type":"","value":"8797"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9790:3:30"},"nodeType":"YulFunctionCall","src":"9790:14:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9778:6:30"},"nodeType":"YulFunctionCall","src":"9778:27:30"},"nodeType":"YulExpressionStatement","src":"9778:27:30"},{"nodeType":"YulAssignment","src":"9814:18:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9825:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9830:1:30","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9821:3:30"},"nodeType":"YulFunctionCall","src":"9821:11:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9814:3:30"}]}]},"name":"abi_encode_stringliteral_7c02","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9752:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9760:3:30","type":""}],"src":"9713:125:30"},{"body":{"nodeType":"YulBlock","src":"10181:966:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10198:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10203:66:30","type":"","value":"0x5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c2022"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10191:6:30"},"nodeType":"YulFunctionCall","src":"10191:79:30"},"nodeType":"YulExpressionStatement","src":"10191:79:30"},{"nodeType":"YulVariableDeclaration","src":"10279:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10289:2:30","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10283:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10311:3:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10316:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10307:3:30"},"nodeType":"YulFunctionCall","src":"10307:12:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10325:2:30","type":"","value":"69"},{"kind":"number","nodeType":"YulLiteral","src":"10329:50:30","type":"","value":"0x020baba3437b934bd30ba34b7b7111610112132b0b932b91"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10321:3:30"},"nodeType":"YulFunctionCall","src":"10321:59:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10300:6:30"},"nodeType":"YulFunctionCall","src":"10300:81:30"},"nodeType":"YulExpressionStatement","src":"10300:81:30"},{"nodeType":"YulVariableDeclaration","src":"10390:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10400:2:30","type":"","value":"56"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10394:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10411:12:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10422:1:30","type":"","value":"0"},"variables":[{"name":"ret","nodeType":"YulTypedName","src":"10415:3:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10432:30:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10455:6:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10449:5:30"},"nodeType":"YulFunctionCall","src":"10449:13:30"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"10436:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10471:50:30","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"10511:9:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"10485:25:30"},"nodeType":"YulFunctionCall","src":"10485:36:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10475:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10530:11:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10540:1:30","type":"","value":"1"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"10534:2:30","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"10591:144:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10616:3:30"},{"name":"_2","nodeType":"YulIdentifier","src":"10621:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10612:3:30"},"nodeType":"YulFunctionCall","src":"10612:12:30"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"10630:9:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10645:3:30","type":"","value":"255"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10641:3:30"},"nodeType":"YulFunctionCall","src":"10641:8:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10626:3:30"},"nodeType":"YulFunctionCall","src":"10626:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10605:6:30"},"nodeType":"YulFunctionCall","src":"10605:46:30"},"nodeType":"YulExpressionStatement","src":"10605:46:30"},{"nodeType":"YulAssignment","src":"10664:61:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10679:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10688:6:30"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10710:6:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10703:6:30"},"nodeType":"YulFunctionCall","src":"10703:14:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10696:6:30"},"nodeType":"YulFunctionCall","src":"10696:22:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10684:3:30"},"nodeType":"YulFunctionCall","src":"10684:35:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10675:3:30"},"nodeType":"YulFunctionCall","src":"10675:45:30"},{"name":"_2","nodeType":"YulIdentifier","src":"10722:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10671:3:30"},"nodeType":"YulFunctionCall","src":"10671:54:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10664:3:30"}]}]},"nodeType":"YulCase","src":"10584:151:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10589:1:30","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"10751:340:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10772:1:30","type":"","value":"0"},{"name":"value0","nodeType":"YulIdentifier","src":"10775:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10765:6:30"},"nodeType":"YulFunctionCall","src":"10765:17:30"},"nodeType":"YulExpressionStatement","src":"10765:17:30"},{"nodeType":"YulVariableDeclaration","src":"10795:31:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10820:1:30","type":"","value":"0"},{"name":"_1","nodeType":"YulIdentifier","src":"10823:2:30"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10810:9:30"},"nodeType":"YulFunctionCall","src":"10810:16:30"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"10799:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10839:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10848:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10843:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"10916:120:30","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10949:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"10954:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10945:3:30"},"nodeType":"YulFunctionCall","src":"10945:11:30"},{"name":"_2","nodeType":"YulIdentifier","src":"10958:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10941:3:30"},"nodeType":"YulFunctionCall","src":"10941:20:30"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"10969:7:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10963:5:30"},"nodeType":"YulFunctionCall","src":"10963:14:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10934:6:30"},"nodeType":"YulFunctionCall","src":"10934:44:30"},"nodeType":"YulExpressionStatement","src":"10934:44:30"},{"nodeType":"YulAssignment","src":"10995:27:30","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"11010:7:30"},{"name":"_3","nodeType":"YulIdentifier","src":"11019:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11006:3:30"},"nodeType":"YulFunctionCall","src":"11006:16:30"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"10995:7:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10873:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"10876:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10870:2:30"},"nodeType":"YulFunctionCall","src":"10870:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10884:19:30","statements":[{"nodeType":"YulAssignment","src":"10886:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10895:1:30"},{"name":"_1","nodeType":"YulIdentifier","src":"10898:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10891:3:30"},"nodeType":"YulFunctionCall","src":"10891:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10886:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"10866:3:30","statements":[]},"src":"10862:174:30"},{"nodeType":"YulAssignment","src":"11049:32:30","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11064:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"11069:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11060:3:30"},"nodeType":"YulFunctionCall","src":"11060:16:30"},{"name":"_2","nodeType":"YulIdentifier","src":"11078:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11056:3:30"},"nodeType":"YulFunctionCall","src":"11056:25:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11049:3:30"}]}]},"nodeType":"YulCase","src":"10744:347:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10749:1:30","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"10561:9:30"},{"name":"_3","nodeType":"YulIdentifier","src":"10572:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10557:3:30"},"nodeType":"YulFunctionCall","src":"10557:18:30"},"nodeType":"YulSwitch","src":"10550:541:30"},{"nodeType":"YulAssignment","src":"11100:41:30","value":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"11137:3:30"}],"functionName":{"name":"abi_encode_stringliteral_7c02","nodeType":"YulIdentifier","src":"11107:29:30"},"nodeType":"YulFunctionCall","src":"11107:34:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11100:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f_t_string_storage_t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10157:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10162:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10173:3:30","type":""}],"src":"9843:1304:30"},{"body":{"nodeType":"YulBlock","src":"11326:237:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11343:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11354:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11336:6:30"},"nodeType":"YulFunctionCall","src":"11336:21:30"},"nodeType":"YulExpressionStatement","src":"11336:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11377:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11388:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11373:3:30"},"nodeType":"YulFunctionCall","src":"11373:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"11393:2:30","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11366:6:30"},"nodeType":"YulFunctionCall","src":"11366:30:30"},"nodeType":"YulExpressionStatement","src":"11366:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11427:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11412:3:30"},"nodeType":"YulFunctionCall","src":"11412:18:30"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"11432:34:30","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11405:6:30"},"nodeType":"YulFunctionCall","src":"11405:62:30"},"nodeType":"YulExpressionStatement","src":"11405:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11487:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11498:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11483:3:30"},"nodeType":"YulFunctionCall","src":"11483:18:30"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"11503:17:30","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11476:6:30"},"nodeType":"YulFunctionCall","src":"11476:45:30"},"nodeType":"YulExpressionStatement","src":"11476:45:30"},{"nodeType":"YulAssignment","src":"11530:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11542:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11553:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11538:3:30"},"nodeType":"YulFunctionCall","src":"11538:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11530:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11303:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11317:4:30","type":""}],"src":"11152:411:30"},{"body":{"nodeType":"YulBlock","src":"11753:262:30","statements":[{"nodeType":"YulAssignment","src":"11763:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11775:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11786:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11771:3:30"},"nodeType":"YulFunctionCall","src":"11771:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11763:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"11799:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11817:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11822:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11813:3:30"},"nodeType":"YulFunctionCall","src":"11813:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"11826:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11809:3:30"},"nodeType":"YulFunctionCall","src":"11809:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11803:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11844:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11859:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"11867:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11855:3:30"},"nodeType":"YulFunctionCall","src":"11855:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11837:6:30"},"nodeType":"YulFunctionCall","src":"11837:34:30"},"nodeType":"YulExpressionStatement","src":"11837:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11891:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11902:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11887:3:30"},"nodeType":"YulFunctionCall","src":"11887:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11911:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"11919:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11907:3:30"},"nodeType":"YulFunctionCall","src":"11907:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11880:6:30"},"nodeType":"YulFunctionCall","src":"11880:43:30"},"nodeType":"YulExpressionStatement","src":"11880:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11943:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11954:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11939:3:30"},"nodeType":"YulFunctionCall","src":"11939:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"11959:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11932:6:30"},"nodeType":"YulFunctionCall","src":"11932:34:30"},"nodeType":"YulExpressionStatement","src":"11932:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11986:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11997:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11982:3:30"},"nodeType":"YulFunctionCall","src":"11982:18:30"},{"name":"value3","nodeType":"YulIdentifier","src":"12002:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11975:6:30"},"nodeType":"YulFunctionCall","src":"11975:34:30"},"nodeType":"YulExpressionStatement","src":"11975:34:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11698:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11709:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11717:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11725:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11733:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11744:4:30","type":""}],"src":"11568:447:30"},{"body":{"nodeType":"YulBlock","src":"12052:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12069:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12076:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12081:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12072:3:30"},"nodeType":"YulFunctionCall","src":"12072:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12062:6:30"},"nodeType":"YulFunctionCall","src":"12062:31:30"},"nodeType":"YulExpressionStatement","src":"12062:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12109:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12112:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12102:6:30"},"nodeType":"YulFunctionCall","src":"12102:15:30"},"nodeType":"YulExpressionStatement","src":"12102:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12133:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12136:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12126:6:30"},"nodeType":"YulFunctionCall","src":"12126:15:30"},"nodeType":"YulExpressionStatement","src":"12126:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12020:127:30"},{"body":{"nodeType":"YulBlock","src":"12199:88:30","statements":[{"body":{"nodeType":"YulBlock","src":"12230:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12232:16:30"},"nodeType":"YulFunctionCall","src":"12232:18:30"},"nodeType":"YulExpressionStatement","src":"12232:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12215:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12226:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12222:3:30"},"nodeType":"YulFunctionCall","src":"12222:6:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12212:2:30"},"nodeType":"YulFunctionCall","src":"12212:17:30"},"nodeType":"YulIf","src":"12209:43:30"},{"nodeType":"YulAssignment","src":"12261:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12272:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"12279:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12268:3:30"},"nodeType":"YulFunctionCall","src":"12268:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12261:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12181:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12191:3:30","type":""}],"src":"12152:135:30"},{"body":{"nodeType":"YulBlock","src":"12373:103:30","statements":[{"body":{"nodeType":"YulBlock","src":"12419:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12428:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12431:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12421:6:30"},"nodeType":"YulFunctionCall","src":"12421:12:30"},"nodeType":"YulExpressionStatement","src":"12421:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12394:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12403:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12390:3:30"},"nodeType":"YulFunctionCall","src":"12390:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"12415:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12386:3:30"},"nodeType":"YulFunctionCall","src":"12386:32:30"},"nodeType":"YulIf","src":"12383:52:30"},{"nodeType":"YulAssignment","src":"12444:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12460:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12454:5:30"},"nodeType":"YulFunctionCall","src":"12454:16:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12444:6:30"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12339:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12350:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12362:6:30","type":""}],"src":"12292:184:30"},{"body":{"nodeType":"YulBlock","src":"12610:145:30","statements":[{"nodeType":"YulAssignment","src":"12620:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12632:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12643:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12628:3:30"},"nodeType":"YulFunctionCall","src":"12628:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12620:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12662:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12677:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12693:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12698:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12689:3:30"},"nodeType":"YulFunctionCall","src":"12689:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"12702:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12685:3:30"},"nodeType":"YulFunctionCall","src":"12685:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12673:3:30"},"nodeType":"YulFunctionCall","src":"12673:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12655:6:30"},"nodeType":"YulFunctionCall","src":"12655:51:30"},"nodeType":"YulExpressionStatement","src":"12655:51:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12726:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12737:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12722:3:30"},"nodeType":"YulFunctionCall","src":"12722:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"12742:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12715:6:30"},"nodeType":"YulFunctionCall","src":"12715:34:30"},"nodeType":"YulExpressionStatement","src":"12715:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12571:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12582:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12590:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12601:4:30","type":""}],"src":"12481:274:30"},{"body":{"nodeType":"YulBlock","src":"12838:199:30","statements":[{"body":{"nodeType":"YulBlock","src":"12884:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12893:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12896:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12886:6:30"},"nodeType":"YulFunctionCall","src":"12886:12:30"},"nodeType":"YulExpressionStatement","src":"12886:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12859:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12868:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12855:3:30"},"nodeType":"YulFunctionCall","src":"12855:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"12880:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12851:3:30"},"nodeType":"YulFunctionCall","src":"12851:32:30"},"nodeType":"YulIf","src":"12848:52:30"},{"nodeType":"YulVariableDeclaration","src":"12909:29:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12928:9:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12922:5:30"},"nodeType":"YulFunctionCall","src":"12922:16:30"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12913:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"12991:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13000:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13003:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12993:6:30"},"nodeType":"YulFunctionCall","src":"12993:12:30"},"nodeType":"YulExpressionStatement","src":"12993:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12960:5:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12981:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12974:6:30"},"nodeType":"YulFunctionCall","src":"12974:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12967:6:30"},"nodeType":"YulFunctionCall","src":"12967:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12957:2:30"},"nodeType":"YulFunctionCall","src":"12957:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12950:6:30"},"nodeType":"YulFunctionCall","src":"12950:40:30"},"nodeType":"YulIf","src":"12947:60:30"},{"nodeType":"YulAssignment","src":"13016:15:30","value":{"name":"value","nodeType":"YulIdentifier","src":"13026:5:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13016:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12804:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12815:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12827:6:30","type":""}],"src":"12760:277:30"},{"body":{"nodeType":"YulBlock","src":"13216:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13233:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13244:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13226:6:30"},"nodeType":"YulFunctionCall","src":"13226:21:30"},"nodeType":"YulExpressionStatement","src":"13226:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13267:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13278:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13263:3:30"},"nodeType":"YulFunctionCall","src":"13263:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"13283:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13256:6:30"},"nodeType":"YulFunctionCall","src":"13256:30:30"},"nodeType":"YulExpressionStatement","src":"13256:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13306:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13317:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13302:3:30"},"nodeType":"YulFunctionCall","src":"13302:18:30"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"13322:24:30","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13295:6:30"},"nodeType":"YulFunctionCall","src":"13295:52:30"},"nodeType":"YulExpressionStatement","src":"13295:52:30"},{"nodeType":"YulAssignment","src":"13356:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13368:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13379:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13364:3:30"},"nodeType":"YulFunctionCall","src":"13364:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13356:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13193:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13207:4:30","type":""}],"src":"13042:346:30"},{"body":{"nodeType":"YulBlock","src":"13522:175:30","statements":[{"nodeType":"YulAssignment","src":"13532:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13544:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13555:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13540:3:30"},"nodeType":"YulFunctionCall","src":"13540:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13532:4:30"}]},{"nodeType":"YulVariableDeclaration","src":"13567:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13585:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13590:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13581:3:30"},"nodeType":"YulFunctionCall","src":"13581:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"13594:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13577:3:30"},"nodeType":"YulFunctionCall","src":"13577:19:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13571:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13612:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13627:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13635:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13623:3:30"},"nodeType":"YulFunctionCall","src":"13623:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13605:6:30"},"nodeType":"YulFunctionCall","src":"13605:34:30"},"nodeType":"YulExpressionStatement","src":"13605:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13659:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13670:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13655:3:30"},"nodeType":"YulFunctionCall","src":"13655:18:30"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13679:6:30"},{"name":"_1","nodeType":"YulIdentifier","src":"13687:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13675:3:30"},"nodeType":"YulFunctionCall","src":"13675:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13648:6:30"},"nodeType":"YulFunctionCall","src":"13648:43:30"},"nodeType":"YulExpressionStatement","src":"13648:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13483:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13494:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13502:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13513:4:30","type":""}],"src":"13393:304:30"},{"body":{"nodeType":"YulBlock","src":"13757:80:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13774:3:30"},{"hexValue":"2664697361626c65457374696d6174653d74727565","kind":"string","nodeType":"YulLiteral","src":"13779:23:30","type":"","value":"&disableEstimate=true"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13767:6:30"},"nodeType":"YulFunctionCall","src":"13767:36:30"},"nodeType":"YulExpressionStatement","src":"13767:36:30"},{"nodeType":"YulAssignment","src":"13812:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13823:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13828:2:30","type":"","value":"21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13819:3:30"},"nodeType":"YulFunctionCall","src":"13819:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13812:3:30"}]}]},"name":"abi_encode_stringliteral_1b91","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13741:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13749:3:30","type":""}],"src":"13702:135:30"},{"body":{"nodeType":"YulBlock","src":"14779:972:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14796:3:30"},{"hexValue":"68747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f","kind":"string","nodeType":"YulLiteral","src":"14801:34:30","type":"","value":"https://api.1inch.dev/swap/v5.2/"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14789:6:30"},"nodeType":"YulFunctionCall","src":"14789:47:30"},"nodeType":"YulExpressionStatement","src":"14789:47:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14856:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"14861:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14852:3:30"},"nodeType":"YulFunctionCall","src":"14852:12:30"},{"hexValue":"312f737761703f7372633d","kind":"string","nodeType":"YulLiteral","src":"14866:13:30","type":"","value":"1/swap?src="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14845:6:30"},"nodeType":"YulFunctionCall","src":"14845:35:30"},"nodeType":"YulExpressionStatement","src":"14845:35:30"},{"nodeType":"YulVariableDeclaration","src":"14889:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14909:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14903:5:30"},"nodeType":"YulFunctionCall","src":"14903:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14893:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14964:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14972:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14960:3:30"},"nodeType":"YulFunctionCall","src":"14960:15:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14981:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"14986:2:30","type":"","value":"43"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14977:3:30"},"nodeType":"YulFunctionCall","src":"14977:12:30"},{"name":"length","nodeType":"YulIdentifier","src":"14991:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14925:34:30"},"nodeType":"YulFunctionCall","src":"14925:73:30"},"nodeType":"YulExpressionStatement","src":"14925:73:30"},{"nodeType":"YulVariableDeclaration","src":"15007:26:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15021:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"15026:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15017:3:30"},"nodeType":"YulFunctionCall","src":"15017:16:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15011:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15053:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15057:2:30","type":"","value":"43"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15049:3:30"},"nodeType":"YulFunctionCall","src":"15049:11:30"},{"hexValue":"266473743d","kind":"string","nodeType":"YulLiteral","src":"15062:7:30","type":"","value":"&dst="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15042:6:30"},"nodeType":"YulFunctionCall","src":"15042:28:30"},"nodeType":"YulExpressionStatement","src":"15042:28:30"},{"nodeType":"YulVariableDeclaration","src":"15079:29:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15101:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15095:5:30"},"nodeType":"YulFunctionCall","src":"15095:13:30"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"15083:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15156:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15164:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15152:3:30"},"nodeType":"YulFunctionCall","src":"15152:15:30"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15173:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15177:2:30","type":"","value":"48"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15169:3:30"},"nodeType":"YulFunctionCall","src":"15169:11:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"15182:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15117:34:30"},"nodeType":"YulFunctionCall","src":"15117:74:30"},"nodeType":"YulExpressionStatement","src":"15117:74:30"},{"nodeType":"YulVariableDeclaration","src":"15200:27:30","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15214:2:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"15218:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15210:3:30"},"nodeType":"YulFunctionCall","src":"15210:17:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"15204:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15247:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15251:2:30","type":"","value":"48"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15243:3:30"},"nodeType":"YulFunctionCall","src":"15243:11:30"},{"hexValue":"26616d6f756e743d","kind":"string","nodeType":"YulLiteral","src":"15256:10:30","type":"","value":"&amount="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15236:6:30"},"nodeType":"YulFunctionCall","src":"15236:31:30"},"nodeType":"YulExpressionStatement","src":"15236:31:30"},{"nodeType":"YulVariableDeclaration","src":"15276:29:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15298:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15292:5:30"},"nodeType":"YulFunctionCall","src":"15292:13:30"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"15280:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15353:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15361:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15349:3:30"},"nodeType":"YulFunctionCall","src":"15349:15:30"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15370:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15374:2:30","type":"","value":"56"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15366:3:30"},"nodeType":"YulFunctionCall","src":"15366:11:30"},{"name":"length_2","nodeType":"YulIdentifier","src":"15379:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15314:34:30"},"nodeType":"YulFunctionCall","src":"15314:74:30"},"nodeType":"YulExpressionStatement","src":"15314:74:30"},{"nodeType":"YulVariableDeclaration","src":"15397:27:30","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15411:2:30"},{"name":"length_2","nodeType":"YulIdentifier","src":"15415:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15407:3:30"},"nodeType":"YulFunctionCall","src":"15407:17:30"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"15401:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"15444:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15448:2:30","type":"","value":"56"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15440:3:30"},"nodeType":"YulFunctionCall","src":"15440:11:30"},{"hexValue":"2666726f6d3d","kind":"string","nodeType":"YulLiteral","src":"15453:8:30","type":"","value":"&from="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15433:6:30"},"nodeType":"YulFunctionCall","src":"15433:29:30"},"nodeType":"YulExpressionStatement","src":"15433:29:30"},{"nodeType":"YulVariableDeclaration","src":"15471:29:30","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15493:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15487:5:30"},"nodeType":"YulFunctionCall","src":"15487:13:30"},"variables":[{"name":"length_3","nodeType":"YulTypedName","src":"15475:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15548:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15556:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15544:3:30"},"nodeType":"YulFunctionCall","src":"15544:15:30"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"15565:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15569:2:30","type":"","value":"62"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15561:3:30"},"nodeType":"YulFunctionCall","src":"15561:11:30"},{"name":"length_3","nodeType":"YulIdentifier","src":"15574:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15509:34:30"},"nodeType":"YulFunctionCall","src":"15509:74:30"},"nodeType":"YulExpressionStatement","src":"15509:74:30"},{"nodeType":"YulVariableDeclaration","src":"15592:27:30","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"15606:2:30"},{"name":"length_3","nodeType":"YulIdentifier","src":"15610:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15602:3:30"},"nodeType":"YulFunctionCall","src":"15602:17:30"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"15596:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"15639:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15643:2:30","type":"","value":"62"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15635:3:30"},"nodeType":"YulFunctionCall","src":"15635:11:30"},{"hexValue":"26736c6970706167653d","kind":"string","nodeType":"YulLiteral","src":"15648:12:30","type":"","value":"&slippage="}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15628:6:30"},"nodeType":"YulFunctionCall","src":"15628:33:30"},"nodeType":"YulExpressionStatement","src":"15628:33:30"},{"nodeType":"YulAssignment","src":"15670:75:30","value":{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15724:6:30"},{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"15736:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"15740:2:30","type":"","value":"72"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15732:3:30"},"nodeType":"YulFunctionCall","src":"15732:11:30"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"15707:16:30"},"nodeType":"YulFunctionCall","src":"15707:37:30"}],"functionName":{"name":"abi_encode_stringliteral_1b91","nodeType":"YulIdentifier","src":"15677:29:30"},"nodeType":"YulFunctionCall","src":"15677:68:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15670:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_de9f2498340b248ff2d24f0cdfee064a6725d669d562c5a84279c165693b4e4f_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr_t_stringliteral_3f49b29f52f0281c51cdb4adae0aadd650f5a622f1a42aa616d480bea7f870d9_t_string_memory_ptr_t_stringliteral_18aa6a76c2a3ae03dc43fcc080507431bda5b847b0889951f51a99adff468ec9_t_string_memory_ptr_t_stringliteral_1b914c1d770ee2ed30351e643289a051a6b8142bc26bdcd7f3114c8501286430__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14723:3:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14728:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14736:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14744:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14752:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14760:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14771:3:30","type":""}],"src":"13842:1909:30"},{"body":{"nodeType":"YulBlock","src":"15788:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15805:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15812:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15817:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15808:3:30"},"nodeType":"YulFunctionCall","src":"15808:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15798:6:30"},"nodeType":"YulFunctionCall","src":"15798:31:30"},"nodeType":"YulExpressionStatement","src":"15798:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15845:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15848:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15838:6:30"},"nodeType":"YulFunctionCall","src":"15838:15:30"},"nodeType":"YulExpressionStatement","src":"15838:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15869:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15872:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15862:6:30"},"nodeType":"YulFunctionCall","src":"15862:15:30"},"nodeType":"YulExpressionStatement","src":"15862:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"15756:127:30"},{"body":{"nodeType":"YulBlock","src":"16062:172:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16079:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16090:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16072:6:30"},"nodeType":"YulFunctionCall","src":"16072:21:30"},"nodeType":"YulExpressionStatement","src":"16072:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16113:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16124:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16109:3:30"},"nodeType":"YulFunctionCall","src":"16109:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16129:2:30","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16102:6:30"},"nodeType":"YulFunctionCall","src":"16102:30:30"},"nodeType":"YulExpressionStatement","src":"16102:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16152:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16163:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16148:3:30"},"nodeType":"YulFunctionCall","src":"16148:18:30"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"16168:24:30","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16141:6:30"},"nodeType":"YulFunctionCall","src":"16141:52:30"},"nodeType":"YulExpressionStatement","src":"16141:52:30"},{"nodeType":"YulAssignment","src":"16202:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16214:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16225:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16210:3:30"},"nodeType":"YulFunctionCall","src":"16210:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16202:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16039:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16053:4:30","type":""}],"src":"15888:346:30"},{"body":{"nodeType":"YulBlock","src":"16413:173:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16430:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16441:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16423:6:30"},"nodeType":"YulFunctionCall","src":"16423:21:30"},"nodeType":"YulExpressionStatement","src":"16423:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16464:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16475:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16460:3:30"},"nodeType":"YulFunctionCall","src":"16460:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"16480:2:30","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16453:6:30"},"nodeType":"YulFunctionCall","src":"16453:30:30"},"nodeType":"YulExpressionStatement","src":"16453:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16503:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16514:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16499:3:30"},"nodeType":"YulFunctionCall","src":"16499:18:30"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"16519:25:30","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16492:6:30"},"nodeType":"YulFunctionCall","src":"16492:53:30"},"nodeType":"YulExpressionStatement","src":"16492:53:30"},{"nodeType":"YulAssignment","src":"16554:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16566:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16577:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16562:3:30"},"nodeType":"YulFunctionCall","src":"16562:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16554:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16390:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16404:4:30","type":""}],"src":"16239:347:30"},{"body":{"nodeType":"YulBlock","src":"16980:423:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16997:3:30"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"17002:25:30","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16990:6:30"},"nodeType":"YulFunctionCall","src":"16990:38:30"},"nodeType":"YulExpressionStatement","src":"16990:38:30"},{"nodeType":"YulVariableDeclaration","src":"17037:27:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17057:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17051:5:30"},"nodeType":"YulFunctionCall","src":"17051:13:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17041:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17112:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"17120:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17108:3:30"},"nodeType":"YulFunctionCall","src":"17108:17:30"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17131:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"17136:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17127:3:30"},"nodeType":"YulFunctionCall","src":"17127:12:30"},{"name":"length","nodeType":"YulIdentifier","src":"17141:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17073:34:30"},"nodeType":"YulFunctionCall","src":"17073:75:30"},"nodeType":"YulExpressionStatement","src":"17073:75:30"},{"nodeType":"YulVariableDeclaration","src":"17157:26:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17171:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17176:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17167:3:30"},"nodeType":"YulFunctionCall","src":"17167:16:30"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17161:2:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17203:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"17207:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17199:3:30"},"nodeType":"YulFunctionCall","src":"17199:11:30"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"17212:19:30","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17192:6:30"},"nodeType":"YulFunctionCall","src":"17192:40:30"},"nodeType":"YulExpressionStatement","src":"17192:40:30"},{"nodeType":"YulVariableDeclaration","src":"17241:29:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17263:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17257:5:30"},"nodeType":"YulFunctionCall","src":"17257:13:30"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"17245:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17318:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"17326:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17314:3:30"},"nodeType":"YulFunctionCall","src":"17314:17:30"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17337:2:30"},{"kind":"number","nodeType":"YulLiteral","src":"17341:2:30","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17333:3:30"},"nodeType":"YulFunctionCall","src":"17333:11:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"17346:8:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17279:34:30"},"nodeType":"YulFunctionCall","src":"17279:76:30"},"nodeType":"YulExpressionStatement","src":"17279:76:30"},{"nodeType":"YulAssignment","src":"17364:33:30","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17379:2:30"},{"name":"length_1","nodeType":"YulIdentifier","src":"17383:8:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17375:3:30"},"nodeType":"YulFunctionCall","src":"17375:17:30"},{"kind":"number","nodeType":"YulLiteral","src":"17394:2:30","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17371:3:30"},"nodeType":"YulFunctionCall","src":"17371:26:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17364:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16948:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16953:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16961:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16972:3:30","type":""}],"src":"16591:812:30"},{"body":{"nodeType":"YulBlock","src":"17460:116:30","statements":[{"nodeType":"YulAssignment","src":"17470:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17485:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"17488:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17481:3:30"},"nodeType":"YulFunctionCall","src":"17481:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"17470:7:30"}]},{"body":{"nodeType":"YulBlock","src":"17548:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17550:16:30"},"nodeType":"YulFunctionCall","src":"17550:18:30"},"nodeType":"YulExpressionStatement","src":"17550:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17519:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17512:6:30"},"nodeType":"YulFunctionCall","src":"17512:9:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17526:1:30"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"17533:7:30"},{"name":"x","nodeType":"YulIdentifier","src":"17542:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17529:3:30"},"nodeType":"YulFunctionCall","src":"17529:15:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17523:2:30"},"nodeType":"YulFunctionCall","src":"17523:22:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"17509:2:30"},"nodeType":"YulFunctionCall","src":"17509:37:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17502:6:30"},"nodeType":"YulFunctionCall","src":"17502:45:30"},"nodeType":"YulIf","src":"17499:71:30"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17439:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"17442:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"17448:7:30","type":""}],"src":"17408:168:30"},{"body":{"nodeType":"YulBlock","src":"17629:77:30","statements":[{"nodeType":"YulAssignment","src":"17639:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17650:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"17653:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17646:3:30"},"nodeType":"YulFunctionCall","src":"17646:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17639:3:30"}]},{"body":{"nodeType":"YulBlock","src":"17678:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17680:16:30"},"nodeType":"YulFunctionCall","src":"17680:18:30"},"nodeType":"YulExpressionStatement","src":"17680:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17670:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"17673:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17667:2:30"},"nodeType":"YulFunctionCall","src":"17667:10:30"},"nodeType":"YulIf","src":"17664:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17612:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"17615:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17621:3:30","type":""}],"src":"17581:125:30"},{"body":{"nodeType":"YulBlock","src":"17743:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17760:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17767:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17772:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17763:3:30"},"nodeType":"YulFunctionCall","src":"17763:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17753:6:30"},"nodeType":"YulFunctionCall","src":"17753:31:30"},"nodeType":"YulExpressionStatement","src":"17753:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17800:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17803:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17793:6:30"},"nodeType":"YulFunctionCall","src":"17793:15:30"},"nodeType":"YulExpressionStatement","src":"17793:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17824:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17827:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17817:6:30"},"nodeType":"YulFunctionCall","src":"17817:15:30"},"nodeType":"YulExpressionStatement","src":"17817:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"17711:127:30"},{"body":{"nodeType":"YulBlock","src":"17890:89:30","statements":[{"body":{"nodeType":"YulBlock","src":"17917:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17919:16:30"},"nodeType":"YulFunctionCall","src":"17919:18:30"},"nodeType":"YulExpressionStatement","src":"17919:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17910:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17903:6:30"},"nodeType":"YulFunctionCall","src":"17903:13:30"},"nodeType":"YulIf","src":"17900:39:30"},{"nodeType":"YulAssignment","src":"17948:25:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17959:5:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17970:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17966:3:30"},"nodeType":"YulFunctionCall","src":"17966:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17955:3:30"},"nodeType":"YulFunctionCall","src":"17955:18:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"17948:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17872:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"17882:3:30","type":""}],"src":"17843:136:30"},{"body":{"nodeType":"YulBlock","src":"18158:182:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18175:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18186:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18168:6:30"},"nodeType":"YulFunctionCall","src":"18168:21:30"},"nodeType":"YulExpressionStatement","src":"18168:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18209:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18220:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18205:3:30"},"nodeType":"YulFunctionCall","src":"18205:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"18225:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18198:6:30"},"nodeType":"YulFunctionCall","src":"18198:30:30"},"nodeType":"YulExpressionStatement","src":"18198:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18248:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18259:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18244:3:30"},"nodeType":"YulFunctionCall","src":"18244:18:30"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"18264:34:30","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18237:6:30"},"nodeType":"YulFunctionCall","src":"18237:62:30"},"nodeType":"YulExpressionStatement","src":"18237:62:30"},{"nodeType":"YulAssignment","src":"18308:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18320:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18331:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18316:3:30"},"nodeType":"YulFunctionCall","src":"18316:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18308:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18135:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18149:4:30","type":""}],"src":"17984:356:30"},{"body":{"nodeType":"YulBlock","src":"18658:509:30","statements":[{"nodeType":"YulVariableDeclaration","src":"18668:13:30","value":{"kind":"number","nodeType":"YulLiteral","src":"18678:3:30","type":"","value":"256"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18672:2:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18690:29:30","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18708:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18713:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18704:3:30"},"nodeType":"YulFunctionCall","src":"18704:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"18717:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18700:3:30"},"nodeType":"YulFunctionCall","src":"18700:19:30"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"18694:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18735:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18750:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"18758:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18746:3:30"},"nodeType":"YulFunctionCall","src":"18746:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18728:6:30"},"nodeType":"YulFunctionCall","src":"18728:34:30"},"nodeType":"YulExpressionStatement","src":"18728:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18782:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18793:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18778:3:30"},"nodeType":"YulFunctionCall","src":"18778:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"18798:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18771:6:30"},"nodeType":"YulFunctionCall","src":"18771:34:30"},"nodeType":"YulExpressionStatement","src":"18771:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18825:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18836:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18821:3:30"},"nodeType":"YulFunctionCall","src":"18821:18:30"},{"name":"value2","nodeType":"YulIdentifier","src":"18841:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18814:6:30"},"nodeType":"YulFunctionCall","src":"18814:34:30"},"nodeType":"YulExpressionStatement","src":"18814:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18868:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18879:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18864:3:30"},"nodeType":"YulFunctionCall","src":"18864:18:30"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18888:6:30"},{"name":"_2","nodeType":"YulIdentifier","src":"18896:2:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18884:3:30"},"nodeType":"YulFunctionCall","src":"18884:15:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18857:6:30"},"nodeType":"YulFunctionCall","src":"18857:43:30"},"nodeType":"YulExpressionStatement","src":"18857:43:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18920:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18931:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18916:3:30"},"nodeType":"YulFunctionCall","src":"18916:19:30"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"18941:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18953:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18958:10:30","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18949:3:30"},"nodeType":"YulFunctionCall","src":"18949:20:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18937:3:30"},"nodeType":"YulFunctionCall","src":"18937:33:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18909:6:30"},"nodeType":"YulFunctionCall","src":"18909:62:30"},"nodeType":"YulExpressionStatement","src":"18909:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18991:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19002:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18987:3:30"},"nodeType":"YulFunctionCall","src":"18987:19:30"},{"name":"value5","nodeType":"YulIdentifier","src":"19008:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18980:6:30"},"nodeType":"YulFunctionCall","src":"18980:35:30"},"nodeType":"YulExpressionStatement","src":"18980:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19035:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19046:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19031:3:30"},"nodeType":"YulFunctionCall","src":"19031:19:30"},{"name":"value6","nodeType":"YulIdentifier","src":"19052:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19024:6:30"},"nodeType":"YulFunctionCall","src":"19024:35:30"},"nodeType":"YulExpressionStatement","src":"19024:35:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19079:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19090:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19075:3:30"},"nodeType":"YulFunctionCall","src":"19075:19:30"},{"name":"_1","nodeType":"YulIdentifier","src":"19096:2:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19068:6:30"},"nodeType":"YulFunctionCall","src":"19068:31:30"},"nodeType":"YulExpressionStatement","src":"19068:31:30"},{"nodeType":"YulAssignment","src":"19108:53:30","value":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"19134:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19146:9:30"},{"name":"_1","nodeType":"YulIdentifier","src":"19157:2:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19142:3:30"},"nodeType":"YulFunctionCall","src":"19142:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"19116:17:30"},"nodeType":"YulFunctionCall","src":"19116:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19108:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18571:9:30","type":""},{"name":"value7","nodeType":"YulTypedName","src":"18582:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"18590:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"18598:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"18606:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18614:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18622:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18630:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18638:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18649:4:30","type":""}],"src":"18345:822:30"},{"body":{"nodeType":"YulBlock","src":"19221:79:30","statements":[{"nodeType":"YulAssignment","src":"19231:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19243:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"19246:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19239:3:30"},"nodeType":"YulFunctionCall","src":"19239:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"19231:4:30"}]},{"body":{"nodeType":"YulBlock","src":"19272:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19274:16:30"},"nodeType":"YulFunctionCall","src":"19274:18:30"},"nodeType":"YulExpressionStatement","src":"19274:18:30"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"19263:4:30"},{"name":"x","nodeType":"YulIdentifier","src":"19269:1:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19260:2:30"},"nodeType":"YulFunctionCall","src":"19260:11:30"},"nodeType":"YulIf","src":"19257:37:30"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19203:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"19206:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"19212:4:30","type":""}],"src":"19172:128:30"},{"body":{"nodeType":"YulBlock","src":"19337:95:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19354:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19361:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19366:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19357:3:30"},"nodeType":"YulFunctionCall","src":"19357:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19347:6:30"},"nodeType":"YulFunctionCall","src":"19347:31:30"},"nodeType":"YulExpressionStatement","src":"19347:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19394:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19397:4:30","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19387:6:30"},"nodeType":"YulFunctionCall","src":"19387:15:30"},"nodeType":"YulExpressionStatement","src":"19387:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19418:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19421:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19411:6:30"},"nodeType":"YulFunctionCall","src":"19411:15:30"},"nodeType":"YulExpressionStatement","src":"19411:15:30"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"19305:127:30"},{"body":{"nodeType":"YulBlock","src":"19611:228:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19628:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19639:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19621:6:30"},"nodeType":"YulFunctionCall","src":"19621:21:30"},"nodeType":"YulExpressionStatement","src":"19621:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19662:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19673:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19658:3:30"},"nodeType":"YulFunctionCall","src":"19658:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"19678:2:30","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19651:6:30"},"nodeType":"YulFunctionCall","src":"19651:30:30"},"nodeType":"YulExpressionStatement","src":"19651:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19701:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19712:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19697:3:30"},"nodeType":"YulFunctionCall","src":"19697:18:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"19717:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19690:6:30"},"nodeType":"YulFunctionCall","src":"19690:62:30"},"nodeType":"YulExpressionStatement","src":"19690:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19772:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19783:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19768:3:30"},"nodeType":"YulFunctionCall","src":"19768:18:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"19788:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19761:6:30"},"nodeType":"YulFunctionCall","src":"19761:36:30"},"nodeType":"YulExpressionStatement","src":"19761:36:30"},{"nodeType":"YulAssignment","src":"19806:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19818:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19829:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19814:3:30"},"nodeType":"YulFunctionCall","src":"19814:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19806:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19588:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19602:4:30","type":""}],"src":"19437:402:30"},{"body":{"nodeType":"YulBlock","src":"19882:171:30","statements":[{"body":{"nodeType":"YulBlock","src":"19913:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19934:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19941:3:30","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19946:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19937:3:30"},"nodeType":"YulFunctionCall","src":"19937:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19927:6:30"},"nodeType":"YulFunctionCall","src":"19927:31:30"},"nodeType":"YulExpressionStatement","src":"19927:31:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19978:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19981:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19971:6:30"},"nodeType":"YulFunctionCall","src":"19971:15:30"},"nodeType":"YulExpressionStatement","src":"19971:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20006:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20009:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19999:6:30"},"nodeType":"YulFunctionCall","src":"19999:15:30"},"nodeType":"YulExpressionStatement","src":"19999:15:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"19902:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19895:6:30"},"nodeType":"YulFunctionCall","src":"19895:9:30"},"nodeType":"YulIf","src":"19892:132:30"},{"nodeType":"YulAssignment","src":"20033:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20042:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"20045:1:30"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"20038:3:30"},"nodeType":"YulFunctionCall","src":"20038:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"20033:1:30"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19867:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"19870:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"19876:1:30","type":""}],"src":"19844:209:30"},{"body":{"nodeType":"YulBlock","src":"20228:139:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20245:3:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20258:2:30","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"20262:6:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20254:3:30"},"nodeType":"YulFunctionCall","src":"20254:15:30"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20283:2:30","type":"","value":"96"},{"kind":"number","nodeType":"YulLiteral","src":"20287:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20279:3:30"},"nodeType":"YulFunctionCall","src":"20279:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"20291:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20275:3:30"},"nodeType":"YulFunctionCall","src":"20275:18:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20271:3:30"},"nodeType":"YulFunctionCall","src":"20271:23:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20250:3:30"},"nodeType":"YulFunctionCall","src":"20250:45:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20238:6:30"},"nodeType":"YulFunctionCall","src":"20238:58:30"},"nodeType":"YulExpressionStatement","src":"20238:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20316:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20321:2:30","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20312:3:30"},"nodeType":"YulFunctionCall","src":"20312:12:30"},{"name":"value1","nodeType":"YulIdentifier","src":"20326:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20305:6:30"},"nodeType":"YulFunctionCall","src":"20305:28:30"},"nodeType":"YulExpressionStatement","src":"20305:28:30"},{"nodeType":"YulAssignment","src":"20342:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20353:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20358:2:30","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20349:3:30"},"nodeType":"YulFunctionCall","src":"20349:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20342:3:30"}]}]},"name":"abi_encode_tuple_packed_t_contract$_ChainlinkClient_$861_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20196:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20201:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20209:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20220:3:30","type":""}],"src":"20058:309:30"},{"body":{"nodeType":"YulBlock","src":"20547:211:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20564:9:30"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20579:6:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20595:3:30","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20600:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20591:3:30"},"nodeType":"YulFunctionCall","src":"20591:11:30"},{"kind":"number","nodeType":"YulLiteral","src":"20604:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20587:3:30"},"nodeType":"YulFunctionCall","src":"20587:19:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20575:3:30"},"nodeType":"YulFunctionCall","src":"20575:32:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20557:6:30"},"nodeType":"YulFunctionCall","src":"20557:51:30"},"nodeType":"YulExpressionStatement","src":"20557:51:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20628:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20639:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20624:3:30"},"nodeType":"YulFunctionCall","src":"20624:18:30"},{"name":"value1","nodeType":"YulIdentifier","src":"20644:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20617:6:30"},"nodeType":"YulFunctionCall","src":"20617:34:30"},"nodeType":"YulExpressionStatement","src":"20617:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20671:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20682:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20667:3:30"},"nodeType":"YulFunctionCall","src":"20667:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"20687:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20660:6:30"},"nodeType":"YulFunctionCall","src":"20660:30:30"},"nodeType":"YulExpressionStatement","src":"20660:30:30"},{"nodeType":"YulAssignment","src":"20699:53:30","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20725:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20737:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20748:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20733:3:30"},"nodeType":"YulFunctionCall","src":"20733:18:30"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"20707:17:30"},"nodeType":"YulFunctionCall","src":"20707:45:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20699:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20500:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20511:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20519:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20527:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20538:4:30","type":""}],"src":"20372:386:30"},{"body":{"nodeType":"YulBlock","src":"20937:225:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20954:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20965:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20947:6:30"},"nodeType":"YulFunctionCall","src":"20947:21:30"},"nodeType":"YulExpressionStatement","src":"20947:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20988:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20999:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20984:3:30"},"nodeType":"YulFunctionCall","src":"20984:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"21004:2:30","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20977:6:30"},"nodeType":"YulFunctionCall","src":"20977:30:30"},"nodeType":"YulExpressionStatement","src":"20977:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21027:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21038:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21023:3:30"},"nodeType":"YulFunctionCall","src":"21023:18:30"},{"hexValue":"756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261","kind":"string","nodeType":"YulLiteral","src":"21043:34:30","type":"","value":"unable to transferAndCall to ora"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21016:6:30"},"nodeType":"YulFunctionCall","src":"21016:62:30"},"nodeType":"YulExpressionStatement","src":"21016:62:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21098:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21109:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21094:3:30"},"nodeType":"YulFunctionCall","src":"21094:18:30"},{"hexValue":"636c65","kind":"string","nodeType":"YulLiteral","src":"21114:5:30","type":"","value":"cle"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21087:6:30"},"nodeType":"YulFunctionCall","src":"21087:33:30"},"nodeType":"YulExpressionStatement","src":"21087:33:30"},{"nodeType":"YulAssignment","src":"21129:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21141:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21152:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21137:3:30"},"nodeType":"YulFunctionCall","src":"21137:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21129:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b3efd608222b424e5ed8427d7f6a272069793e6a1f5930c93db5c7960c3ce96__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20914:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20928:4:30","type":""}],"src":"20763:399:30"},{"body":{"nodeType":"YulBlock","src":"21341:179:30","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21358:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21369:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21351:6:30"},"nodeType":"YulFunctionCall","src":"21351:21:30"},"nodeType":"YulExpressionStatement","src":"21351:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21392:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21403:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21388:3:30"},"nodeType":"YulFunctionCall","src":"21388:18:30"},{"kind":"number","nodeType":"YulLiteral","src":"21408:2:30","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21381:6:30"},"nodeType":"YulFunctionCall","src":"21381:30:30"},"nodeType":"YulExpressionStatement","src":"21381:30:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21431:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21442:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21427:3:30"},"nodeType":"YulFunctionCall","src":"21427:18:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"21447:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21420:6:30"},"nodeType":"YulFunctionCall","src":"21420:59:30"},"nodeType":"YulExpressionStatement","src":"21420:59:30"},{"nodeType":"YulAssignment","src":"21488:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21500:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21511:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21496:3:30"},"nodeType":"YulFunctionCall","src":"21496:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21488:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21318:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21332:4:30","type":""}],"src":"21167:353:30"},{"body":{"nodeType":"YulBlock","src":"21589:358:30","statements":[{"nodeType":"YulVariableDeclaration","src":"21599:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"21614:1:30","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"21603:7:30","type":""}]},{"nodeType":"YulAssignment","src":"21624:16:30","value":{"name":"power_1","nodeType":"YulIdentifier","src":"21633:7:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21624:5:30"}]},{"nodeType":"YulAssignment","src":"21649:13:30","value":{"name":"_base","nodeType":"YulIdentifier","src":"21657:5:30"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"21649:4:30"}]},{"body":{"nodeType":"YulBlock","src":"21713:228:30","statements":[{"body":{"nodeType":"YulBlock","src":"21758:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21760:16:30"},"nodeType":"YulFunctionCall","src":"21760:18:30"},"nodeType":"YulExpressionStatement","src":"21760:18:30"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"21733:4:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21747:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21743:3:30"},"nodeType":"YulFunctionCall","src":"21743:6:30"},{"name":"base","nodeType":"YulIdentifier","src":"21751:4:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"21739:3:30"},"nodeType":"YulFunctionCall","src":"21739:17:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21730:2:30"},"nodeType":"YulFunctionCall","src":"21730:27:30"},"nodeType":"YulIf","src":"21727:53:30"},{"body":{"nodeType":"YulBlock","src":"21819:29:30","statements":[{"nodeType":"YulAssignment","src":"21821:25:30","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"21834:5:30"},{"name":"base","nodeType":"YulIdentifier","src":"21841:4:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21830:3:30"},"nodeType":"YulFunctionCall","src":"21830:16:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21821:5:30"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"21800:8:30"},{"name":"power_1","nodeType":"YulIdentifier","src":"21810:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21796:3:30"},"nodeType":"YulFunctionCall","src":"21796:22:30"},"nodeType":"YulIf","src":"21793:55:30"},{"nodeType":"YulAssignment","src":"21861:23:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"21873:4:30"},{"name":"base","nodeType":"YulIdentifier","src":"21879:4:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21869:3:30"},"nodeType":"YulFunctionCall","src":"21869:15:30"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"21861:4:30"}]},{"nodeType":"YulAssignment","src":"21897:34:30","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"21913:7:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"21922:8:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21909:3:30"},"nodeType":"YulFunctionCall","src":"21909:22:30"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"21897:8:30"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"21682:8:30"},{"name":"power_1","nodeType":"YulIdentifier","src":"21692:7:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21679:2:30"},"nodeType":"YulFunctionCall","src":"21679:21:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"21701:3:30","statements":[]},"pre":{"nodeType":"YulBlock","src":"21675:3:30","statements":[]},"src":"21671:270:30"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"21553:5:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"21560:8:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"21573:5:30","type":""},{"name":"base","nodeType":"YulTypedName","src":"21580:4:30","type":""}],"src":"21525:422:30"},{"body":{"nodeType":"YulBlock","src":"22011:747:30","statements":[{"body":{"nodeType":"YulBlock","src":"22049:52:30","statements":[{"nodeType":"YulAssignment","src":"22063:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"22072:1:30","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22063:5:30"}]},{"nodeType":"YulLeave","src":"22086:5:30"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22031:8:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22024:6:30"},"nodeType":"YulFunctionCall","src":"22024:16:30"},"nodeType":"YulIf","src":"22021:80:30"},{"body":{"nodeType":"YulBlock","src":"22134:52:30","statements":[{"nodeType":"YulAssignment","src":"22148:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"22157:1:30","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22148:5:30"}]},{"nodeType":"YulLeave","src":"22171:5:30"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22120:4:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22113:6:30"},"nodeType":"YulFunctionCall","src":"22113:12:30"},"nodeType":"YulIf","src":"22110:76:30"},{"cases":[{"body":{"nodeType":"YulBlock","src":"22222:52:30","statements":[{"nodeType":"YulAssignment","src":"22236:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"22245:1:30","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22236:5:30"}]},{"nodeType":"YulLeave","src":"22259:5:30"}]},"nodeType":"YulCase","src":"22215:59:30","value":{"kind":"number","nodeType":"YulLiteral","src":"22220:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"22290:123:30","statements":[{"body":{"nodeType":"YulBlock","src":"22325:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22327:16:30"},"nodeType":"YulFunctionCall","src":"22327:18:30"},"nodeType":"YulExpressionStatement","src":"22327:18:30"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22310:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"22320:3:30","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22307:2:30"},"nodeType":"YulFunctionCall","src":"22307:17:30"},"nodeType":"YulIf","src":"22304:43:30"},{"nodeType":"YulAssignment","src":"22360:25:30","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22373:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"22383:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22369:3:30"},"nodeType":"YulFunctionCall","src":"22369:16:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22360:5:30"}]},{"nodeType":"YulLeave","src":"22398:5:30"}]},"nodeType":"YulCase","src":"22283:130:30","value":{"kind":"number","nodeType":"YulLiteral","src":"22288:1:30","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"22202:4:30"},"nodeType":"YulSwitch","src":"22195:218:30"},{"body":{"nodeType":"YulBlock","src":"22511:70:30","statements":[{"nodeType":"YulAssignment","src":"22525:28:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22538:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"22544:8:30"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"22534:3:30"},"nodeType":"YulFunctionCall","src":"22534:19:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22525:5:30"}]},{"nodeType":"YulLeave","src":"22566:5:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22435:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"22441:2:30","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22432:2:30"},"nodeType":"YulFunctionCall","src":"22432:12:30"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22449:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"22459:2:30","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22446:2:30"},"nodeType":"YulFunctionCall","src":"22446:16:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22428:3:30"},"nodeType":"YulFunctionCall","src":"22428:35:30"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22472:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"22478:3:30","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22469:2:30"},"nodeType":"YulFunctionCall","src":"22469:13:30"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22487:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"22497:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22484:2:30"},"nodeType":"YulFunctionCall","src":"22484:16:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22465:3:30"},"nodeType":"YulFunctionCall","src":"22465:36:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22425:2:30"},"nodeType":"YulFunctionCall","src":"22425:77:30"},"nodeType":"YulIf","src":"22422:159:30"},{"nodeType":"YulVariableDeclaration","src":"22590:57:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22632:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"22638:8:30"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"22613:18:30"},"nodeType":"YulFunctionCall","src":"22613:34:30"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"22594:7:30","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"22603:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"22692:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22694:16:30"},"nodeType":"YulFunctionCall","src":"22694:18:30"},"nodeType":"YulExpressionStatement","src":"22694:18:30"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"22662:7:30"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22679:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22675:3:30"},"nodeType":"YulFunctionCall","src":"22675:6:30"},{"name":"base_1","nodeType":"YulIdentifier","src":"22683:6:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"22671:3:30"},"nodeType":"YulFunctionCall","src":"22671:19:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22659:2:30"},"nodeType":"YulFunctionCall","src":"22659:32:30"},"nodeType":"YulIf","src":"22656:58:30"},{"nodeType":"YulAssignment","src":"22723:29:30","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"22736:7:30"},{"name":"base_1","nodeType":"YulIdentifier","src":"22745:6:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22732:3:30"},"nodeType":"YulFunctionCall","src":"22732:20:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22723:5:30"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"21982:4:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"21988:8:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"22001:5:30","type":""}],"src":"21952:806:30"},{"body":{"nodeType":"YulBlock","src":"22833:61:30","statements":[{"nodeType":"YulAssignment","src":"22843:45:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22873:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"22879:8:30"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"22852:20:30"},"nodeType":"YulFunctionCall","src":"22852:36:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22843:5:30"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"22804:4:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"22810:8:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"22823:5:30","type":""}],"src":"22763:131:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint8(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value3 := value\n    }\n    function abi_encode_tuple_t_stringliteral_d5cafe2745dab6273b51cca76f8727c7664db74ede49af049a5b5ca6a3b184e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"Source must be the oracle of the\")\n        mstore(add(headStart, 96), \" request\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_329eeb4a4583d7a66e5660cf8367b5fba2de6b1d6f9cec18ada71226f6b376a0_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, \"https://api.1inch.dev/swap/v5.2/\")\n        mstore(add(pos, 32), \"1/quote?src=\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 44), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 44), \"&dst=\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(_1, 49), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 49), \"&amount=\")\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 32), add(_2, 57), length_2)\n        end := add(add(_2, length_2), 57)\n    }\n    function abi_encode_stringliteral_7c02(pos) -> end\n    {\n        mstore(pos, shl(240, 8797))\n        end := add(pos, 2)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_cc1fcb09cd005358391348c2ea40c567931b5d7ebca7ef22c834373147c87b7f_t_string_storage_t_stringliteral_7c026ea7fe48f13faaa8401c8d9e13ccd498f73c31e1c1b1c091967ac990972f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c2022)\n        let _1 := 32\n        mstore(add(pos, _1), shl(69, 0x020baba3437b934bd30ba34b7b7111610112132b0b932b91))\n        let _2 := 56\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _3 := 1\n        switch and(slotValue, _3)\n        case 0 {\n            mstore(add(pos, _2), and(slotValue, not(255)))\n            ret := add(add(pos, mul(length, iszero(iszero(length)))), _2)\n        }\n        case 1 {\n            mstore(0, value0)\n            let dataPos := keccak256(0, _1)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(add(pos, i), _2), sload(dataPos))\n                dataPos := add(dataPos, _3)\n            }\n            ret := add(add(pos, length), _2)\n        }\n        end := abi_encode_stringliteral_7c02(ret)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_stringliteral_1b91(pos) -> end\n    {\n        mstore(pos, \"&disableEstimate=true\")\n        end := add(pos, 21)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_de9f2498340b248ff2d24f0cdfee064a6725d669d562c5a84279c165693b4e4f_t_string_memory_ptr_t_stringliteral_4419809f26c9950c84ab623406106d3e6bd3ee9d140c9b69b81b56cc0079bdfb_t_string_memory_ptr_t_stringliteral_b8a1388a822d1d989c35eccf91550e72826493d318305792caa7177506cc0c1e_t_string_memory_ptr_t_stringliteral_3f49b29f52f0281c51cdb4adae0aadd650f5a622f1a42aa616d480bea7f870d9_t_string_memory_ptr_t_stringliteral_18aa6a76c2a3ae03dc43fcc080507431bda5b847b0889951f51a99adff468ec9_t_string_memory_ptr_t_stringliteral_1b914c1d770ee2ed30351e643289a051a6b8142bc26bdcd7f3114c8501286430__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, \"https://api.1inch.dev/swap/v5.2/\")\n        mstore(add(pos, 32), \"1/swap?src=\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 43), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 43), \"&dst=\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(_1, 48), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 48), \"&amount=\")\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 32), add(_2, 56), length_2)\n        let _3 := add(_2, length_2)\n        mstore(add(_3, 56), \"&from=\")\n        let length_3 := mload(value3)\n        copy_memory_to_memory_with_cleanup(add(value3, 32), add(_3, 62), length_3)\n        let _4 := add(_3, length_3)\n        mstore(add(_4, 62), \"&slippage=\")\n        end := abi_encode_stringliteral_1b91(abi_encode_bytes(value4, add(_4, 72)))\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes32_t_address_t_bytes4_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        let _2 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _2))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), and(value4, shl(224, 0xffffffff)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), _1)\n        tail := abi_encode_string(value7, add(headStart, _1))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_packed_t_contract$_ChainlinkClient_$861_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(sub(shl(96, 1), 1))))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_stringliteral_3b3efd608222b424e5ed8427d7f6a272069793e6a1f5930c93db5c7960c3ce96__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"unable to transferAndCall to ora\")\n        mstore(add(headStart, 96), \"cle\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5574":[{"length":32,"start":1617},{"length":32,"start":4120},{"length":32,"start":4313},{"length":32,"start":4621},{"length":32,"start":4782}],"5576":[{"length":32,"start":1108},{"length":32,"start":1944}],"5578":[{"length":32,"start":895},{"length":32,"start":2444}],"5580":[{"length":32,"start":614},{"length":32,"start":4902}],"5582":[{"length":32,"start":1309},{"length":32,"start":5399}]},"linkReferences":{},"object":"6080604052600436106101a35760003560e01c806301ffc9a7146101af57806302458ad8146101e45780631a5b420714610206578063248a9ca3146102265780632547db8d14610254578063271e390a146102885780632f2ff15d146102b557806336568abe146102d55780633662dd35146102f557806336868f0e1461030b578063459c75d81461032b5780634e0c61331461034b57806353881b661461036d5780635b949dd0146103a1578063627c34ad146103b657806366b8455b146103d65780636ccf5b01146103eb57806379ba50971461040b5780637aff3a0c146104205780637ec14de8146104425780638da5cb5b1461047657806391d148541461049457806394555d1a146104b4578063a217fddf146104d4578063a378a324146104e9578063a6ccef3e1461050b578063aaeafd561461053f578063b56269a014610567578063c02e5bc71461057d578063c0d2e37f1461059d578063c87457db146105b7578063d547741f146105d7578063eaad47b2146105f7578063f09922ff1461060c578063f2fde38b1461061f578063fcdfd9461461063f57600080fd5b366101aa57005b600080fd5b3480156101bb57600080fd5b506101cf6101ca3660046124c3565b610673565b60405190151581526020015b60405180910390f35b3480156101f057600080fd5b506102046101ff366004612503565b6106aa565b005b34801561021257600080fd5b506102046102213660046125d9565b610779565b34801561023257600080fd5b50610246610241366004612615565b6109b8565b6040519081526020016101db565b34801561026057600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561029457600080fd5b50600c546102a8906001600160a01b031681565b6040516101db919061262e565b3480156102c157600080fd5b506102046102d0366004612642565b6109cd565b3480156102e157600080fd5b506102046102f0366004612642565b6109ee565b34801561030157600080fd5b50610246600b5481565b34801561031757600080fd5b50600d546102a8906001600160a01b031681565b34801561033757600080fd5b5061020461034636600461266e565b610a6c565b34801561035757600080fd5b50610246600080516020612f2283398151915281565b34801561037957600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ad57600080fd5b50610204610bd7565b3480156103c257600080fd5b506102046103d1366004612690565b610cff565b3480156103e257600080fd5b50610246610d3f565b3480156103f757600080fd5b506102a8610406366004612615565b610d50565b34801561041757600080fd5b50610204610d5d565b34801561042c57600080fd5b50610435610e0b565b6040516101db91906126fb565b34801561044e57600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561048257600080fd5b506007546001600160a01b03166102a8565b3480156104a057600080fd5b506101cf6104af366004612642565b610e99565b3480156104c057600080fd5b506102046104cf366004612690565b610ec2565b3480156104e057600080fd5b50610246600081565b3480156104f557600080fd5b50610246600080516020612ee283398151915281565b34801561051757600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b34801561054b57600080fd5b506102a873eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561057357600080fd5b50610246600e5481565b34801561058957600080fd5b50600a546102a8906001600160a01b031681565b3480156105a957600080fd5b50600f546101cf9060ff1681565b3480156105c357600080fd5b506009546102a8906001600160a01b031681565b3480156105e357600080fd5b506102046105f2366004612642565b610f02565b34801561060357600080fd5b50610204610f1e565b61020461061a36600461270e565b611160565b34801561062b57600080fd5b5061020461063a366004612690565b611545565b34801561064b57600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b14806106a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526006602052604090205482906001600160a01b031633146106eb5760405162461bcd60e51b81526004016106e290612763565b60405180910390fd5b60008181526006602052604080822080546001600160a01b0319169055518291600080516020612f0283398151915291a260106107288382612825565b50600f805460ff19166001179055604051610744908390612900565b604051908190038120907fa6b78fc047486d5add927aa53ba0d4fc8eb23a5811e0052aebeba21469f51df890600090a2505050565b600080516020612f2283398151915261079181611559565b60006107c57f0000000000000000000000000000000000000000000000000000000000000000306308b38ebb60e31b611563565b9050610815604051806040016040528060068152602001651b595d1a1bd960d21b8152506040518060400160405280600381526020016211d15560ea1b815250836115889092919063ffffffff16565b610879604051806040016040528060038152602001621d5c9b60ea1b81525061083d876115a6565b610846876115a6565b61084f876115bc565b6040516020016108619392919061291c565b60408051601f19818403018152919052839190611588565b6108ae604051806040016040528060078152602001666865616465727360c81b815250601160405160200161086191906129b2565b6109006040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060068152602001651b9d5b595c9d60d21b815250836115889092919063ffffffff16565b610951604051806040016040528060048152602001630e0c2e8d60e31b815250604051806040016040528060088152602001671d1bd05b5bdd5b9d60c21b815250836115889092919063ffffffff16565b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556109b0817f000000000000000000000000000000000000000000000000000000000000000061164e565b505050505050565b60009081526020819052604090206001015490565b6109d6826109b8565b6109df81611559565b6109e9838361166f565b505050565b6001600160a01b0381163314610a5e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e2565b610a6882826116f3565b5050565b60008281526006602052604090205482906001600160a01b03163314610aa45760405162461bcd60e51b81526004016106e290612763565b60008181526006602052604080822080546001600160a01b0319169055518291600080516020612f0283398151915291a2600a54600954600b5460405190815284926001600160a01b039081169216907fc6ef891de9793cb5acefea4d38d25452da06c1b8a922180eeb0f324523b326a09060200160405180910390a46000610b2d6012611758565b905060005b81811015610bd057610b45601282611762565b600954600a54600b5460405163b91dc4bb60e01b81526001600160a01b039384166004820152918316602483015260448201889052606482015291169063b91dc4bb90608401600060405180830381600087803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b505050508080610bc890612a97565b915050610b32565b5050505050565b600080516020612ee2833981519152610bef81611559565b6000610c036003546001600160a01b031690565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c41919061262e565b602060405180830381865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190612ab0565b6040518363ffffffff1660e01b8152600401610c9f929190612ac9565b6020604051808303816000875af1158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190612ae2565b610a68576040516313ff771f60e21b815260040160405180910390fd5b600080516020612ee2833981519152610d1781611559565b610d2260128361176e565b610a68576040516306e971bb60e31b815260040160405180910390fd5b6000610d4b6012611758565b905090565b60006106a4601283611762565b6008546001600160a01b03163314610db05760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016106e2565b600780546001600160a01b0319808216339081179093556008805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60118054610e18906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610e44906127ab565b8015610e915780601f10610e6657610100808354040283529160200191610e91565b820191906000526020600020905b815481529060010190602001808311610e7457829003601f168201915b505050505081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612ee2833981519152610eda81611559565b610ee5601283611783565b610a68576040516305c46f6760e31b815260040160405180910390fd5b610f0b826109b8565b610f1481611559565b6109e983836116f3565b600080516020612ee2833981519152610f3681611559565b600f5460ff16610f5957604051637d683d5360e01b815260040160405180910390fd5b600c546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed19016110495761104360108054610f90906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc906127ab565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b5050600e546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016949350915050611798565b50611111565b61110f60108054611059906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611085906127ab565b80156110d25780601f106110a7576101008083540402835291602001916110d2565b820191906000526020600020905b8154815290600101906020018083116110b557829003601f168201915b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166117c690919063ffffffff16565b505b600e54600d54600c546040516001600160a01b0392831692909116907fe8a8f43c967965902142e0f7bd4b7b3c55fc5b1a0df5e84fa8ded5cafe92770690600090a450600f805460ff19169055565b600080516020612f2283398151915261117881611559565b60328260ff16111561119d576040516336ee37fb60e21b815260040160405180910390fd5b6001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480156111c857503483105b156111e657604051630dd86f5360e11b815260040160405180910390fd5b600f805460ff19169055604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528691859183169063dd62ed3e90604401602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612ab0565b101561131f5760405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906112da907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612ac9565b6020604051808303816000875af11580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190612ae2565b505b60006113527f0000000000000000000000000000000000000000000000000000000000000000306248b15b60e31b611563565b90506113a2604051806040016040528060068152602001651b595d1a1bd960d21b8152506040518060400160405280600381526020016211d15560ea1b815250836115889092919063ffffffff16565b611405604051806040016040528060038152602001621d5c9b60ea1b8152506113ca896115a6565b6113d3896115a6565b6113dc896115bc565b6113e5336115a6565b6113f18a60ff166115bc565b604051602001610861959493929190612b04565b61143a604051806040016040528060078152602001666865616465727360c81b815250601160405160200161086191906129b2565b61148c6040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060068152602001651b9d5b595c9d60d21b815250836115889092919063ffffffff16565b6114dc604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600781526020016674782c6461746160c81b815250836115889092919063ffffffff16565b600c80546001600160a01b03808a166001600160a01b031992831617909255600d805492891692909116919091179055600e85905561153b817f000000000000000000000000000000000000000000000000000000000000000061164e565b5050505050505050565b61154d61180a565b6115568161185f565b50565b6115568133611903565b61156b612474565b611573612474565b61157f8186868661195c565b95945050505050565b60808301516115979083611999565b60808301516109e99082611999565b60606106a46001600160a01b03831660146119b0565b606060006115c983611b4b565b60010190506000816001600160401b038111156115e8576115e86124ed565b6040519080825280601f01601f191660200182016040528015611612576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461161c57509392505050565b600454600090611668906001600160a01b03168484611c21565b9392505050565b6116798282610e99565b610a68576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116af3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116fd8282610e99565b15610a68576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106a4825490565b60006116688383611cb4565b6000611668836001600160a01b038416611cde565b6000611668836001600160a01b038416611dd1565b60606117be848484604051806060016040528060298152602001612e9960299139611e20565b949350505050565b6060611668838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250611e20565b6007546001600160a01b0316331461185d5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016106e2565b565b336001600160a01b038216036118b15760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016106e2565b600880546001600160a01b0319166001600160a01b03838116918217909255600754604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b61190d8282610e99565b610a685761191a816115a6565b6119258360206119b0565b604051602001611936929190612c08565b60408051601f198184030181529082905262461bcd60e51b82526106e2916004016126fb565b611964612474565b6119748560800151610100611efb565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6119a68260038351611f53565b6109e98282612060565b606060006119bf836002612c77565b6119ca906002612c8e565b6001600160401b038111156119e1576119e16124ed565b6040519080825280601f01601f191660200182016040528015611a0b576020820181803683370190505b509050600360fc1b81600081518110611a2657611a26612ca1565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5557611a55612ca1565b60200101906001600160f81b031916908160001a9053506000611a79846002612c77565b611a84906001612c8e565b90505b6001811115611afc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab857611ab8612ca1565b1a60f81b828281518110611ace57611ace612ca1565b60200101906001600160f81b031916908160001a90535060049490941c93611af581612cb7565b9050611a87565b5083156116685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611b8a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310611bb4576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310611bd257662386f26fc10000830492506010015b6305f5e1008310611bea576305f5e100830492506008015b6127108310611bfe57612710830492506004015b60648310611c10576064830492506002015b600a83106106a45760010192915050565b600554600090611c32816001612c8e565b600555835160408086015160808701515191516000936320214ca360e11b93611c6a9386938493923092918a91600191602401612cce565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611caa8683868461207a565b9695505050505050565b6000826000018281548110611ccb57611ccb612ca1565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611dc7576000611d02600183612d36565b8554909150600090611d1690600190612d36565b9050818114611d7b576000866000018281548110611d3657611d36612ca1565b9060005260206000200154905080876000018481548110611d5957611d59612ca1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d8c57611d8c612d49565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106a4565b60009150506106a4565b6000818152600183016020526040812054611e18575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106a4565b5060006106a4565b606082471015611e815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e2565b600080866001600160a01b03168587604051611e9d9190612900565b60006040518083038185875af1925050503d8060008114611eda576040519150601f19603f3d011682016040523d82523d6000602084013e611edf565b606091505b5091509150611ef0878383876121d3565b979650505050505050565b611f036124a9565b611f0e602083612d5f565b15611f3657611f1e602083612d5f565b611f29906020612d36565b611f339083612c8e565b91505b506020828101829052604080518085526000815290920101905290565b6017816001600160401b031611611f7d57611f778360e0600585901b16831761224c565b50505050565b60ff816001600160401b031611611fb957611fa3836018611fe0600586901b161761224c565b50611f77836001600160401b0383166001612264565b61ffff816001600160401b031611611ff657611fe0836019611fe0600586901b161761224c565b50611f77836001600160401b0383166002612264565b63ffffffff816001600160401b0316116120355761201f83601a611fe0600586901b161761224c565b50611f77836001600160401b0383166004612264565b61204a83601b611fe0600586901b161761224c565b50611f77836001600160401b0383166008612264565b6120686124a9565b6116688384600001515184855161227d565b6040516001600160601b03193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600690925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600354604051630200057560e51b81526001600160a01b0390911690634000aea09061213890889087908790600401612d81565b6020604051808303816000875af1158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b9190612ae2565b6117be5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b60648201526084016106e2565b6060831561224257825160000361223b576001600160a01b0385163b61223b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e2565b50816117be565b6117be838361235a565b6122546124a9565b6116688384600001515184612384565b61226c6124a9565b6117be8485600001515185856123d2565b6122856124a9565b825182111561229357600080fd5b60208501516122a28386612c8e565b11156122d5576122d5856122c5876020015187866122c09190612c8e565b612446565b6122d0906002612c77565b61245d565b6000808651805187602083010193508088870111156122f45787860182525b505050602084015b602084106123345780518252612313602083612c8e565b9150612320602082612c8e565b905061232d602085612d36565b93506122fc565b51815160001960208690036101000a019081169019919091161790525083949350505050565b81511561236a5781518083602001fd5b8060405162461bcd60e51b81526004016106e291906126fb565b61238c6124a9565b836020015183106123ac576123ac84856020015160026122d09190612c77565b83518051602085830101848153508085036123c8576001810182525b5093949350505050565b6123da6124a9565b60208501516123e98584612c8e565b11156123fd576123fd856122c58685612c8e565b6000600161240d84610100612e8c565b6124179190612d36565b905085518386820101858319825116178152508051848701111561243b5783860181525b509495945050505050565b6000818311156124575750816106a4565b50919050565b81516124698383611efb565b50611f778382612060565b6040805160a0810182526000808252602082018190529181018290526060810191909152608081016124a46124a9565b905290565b604051806040016040528060608152602001600081525090565b6000602082840312156124d557600080fd5b81356001600160e01b03198116811461166857600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561251657600080fd5b8235915060208301356001600160401b038082111561253457600080fd5b818501915085601f83011261254857600080fd5b81358181111561255a5761255a6124ed565b604051601f8201601f19908116603f01168101908382118183101715612582576125826124ed565b8160405282815288602084870101111561259b57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b80356001600160a01b03811681146125d457600080fd5b919050565b6000806000606084860312156125ee57600080fd5b6125f7846125bd565b9250612605602085016125bd565b9150604084013590509250925092565b60006020828403121561262757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806040838503121561265557600080fd5b82359150612665602084016125bd565b90509250929050565b6000806040838503121561268157600080fd5b50508035926020909101359150565b6000602082840312156126a257600080fd5b611668826125bd565b60005b838110156126c65781810151838201526020016126ae565b50506000910152565b600081518084526126e78160208601602086016126ab565b601f01601f19169290920160200192915050565b60208152600061166860208301846126cf565b6000806000806080858703121561272457600080fd5b61272d856125bd565b935061273b602086016125bd565b925060408501359150606085013560ff8116811461275857600080fd5b939692955090935050565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b600181811c908216806127bf57607f821691505b60208210810361245757634e487b7160e01b600052602260045260246000fd5b601f8211156109e957600081815260208120601f850160051c810160208610156128065750805b601f850160051c820191505b818110156109b057828155600101612812565b81516001600160401b0381111561283e5761283e6124ed565b6128528161284c84546127ab565b846127df565b602080601f831160018114612887576000841561286f5750858301515b600019600386901b1c1916600185901b1785556109b0565b600085815260208120601f198616915b828110156128b657888601518255948401946001909101908401612897565b50858210156128d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081516128f68185602086016126ab565b9290920192915050565b600082516129128184602087016126ab565b9190910192915050565b600080516020612ec283398151915281526b312f71756f74653f7372633d60a01b60208201526000845161295781602c8501602089016126ab565b64266473743d60d81b602c91840191820152845161297c8160318401602089016126ab565b6726616d6f756e743d60c01b6031929091019182015283516129a58160398401602088016126ab565b0160390195945050505050565b7f5b22616363657074222c20226170706c69636174696f6e2f6a736f6e222c202281526000602077020baba3437b934bd30ba34b7b7111610112132b0b932b9160451b81840152603860008554612a08816127ab565b60018281168015612a205760018114612a3957612a69565b60ff198416898701528215158302890186019450612a69565b896000528660002060005b84811015612a5f5781548b8201890152908301908801612a44565b505085838a010194505b505061225d60f01b8352505060020195945050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612aa957612aa9612a81565b5060010190565b600060208284031215612ac257600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b600060208284031215612af457600080fd5b8151801515811461166857600080fd5b600080516020612ec283398151915281526a312f737761703f7372633d60a81b602082015260008651612b3e81602b850160208b016126ab565b64266473743d60d81b602b918401918201528651612b63816030840160208b016126ab565b6726616d6f756e743d60c01b603092909101918201528551612b8c816038840160208a016126ab565b652666726f6d3d60d01b603892909101918201528451612bb381603e8401602089016126ab565b6926736c6970706167653d60b01b603e9290910191820152612bfc612bdb60488301866128e4565b742664697361626c65457374696d6174653d7472756560581b815260150190565b98975050505050505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612c3a8160178501602088016126ab565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c6b8160288401602088016126ab565b01602801949350505050565b80820281158282048414176106a4576106a4612a81565b808201808211156106a4576106a4612a81565b634e487b7160e01b600052603260045260246000fd5b600081612cc657612cc6612a81565b506000190190565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e08201819052600090612d27838201856126cf565b9b9a5050505050505050505050565b818103818111156106a4576106a4612a81565b634e487b7160e01b600052603160045260246000fd5b600082612d7c57634e487b7160e01b600052601260045260246000fd5b500690565b60018060a01b038416815282602082015260606040820152600061157f60608301846126cf565b600181815b80851115612de3578160001904821115612dc957612dc9612a81565b80851615612dd657918102915b93841c9390800290612dad565b509250929050565b600082612dfa575060016106a4565b81612e07575060006106a4565b8160018114612e1d5760028114612e2757612e43565b60019150506106a4565b60ff841115612e3857612e38612a81565b50506001821b6106a4565b5060208310610133831016604e8410600b8410161715612e66575081810a6106a4565b612e708383612da8565b8060001904821115612e8457612e84612a81565b029392505050565b60006116688383612deb56fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c656468747470733a2f2f6170692e31696e63682e6465762f737761702f76352e322f17a8e30262c1f919c33056d877a3c22b95c2f5e4dac44683c1c2323cd79fbdb07cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63afab00a984754950c7187fb98f39da0ae224abbbee017c1699445ad0e19474a4da26469706673582212205de94e55c5faba2fed3eebfa2068fbd1ea3d8d48b6a4117fb133a57f94a8553b64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x2458AD8 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x1A5B4207 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x2547DB8D EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x271E390A EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x3662DD35 EQ PUSH2 0x2F5 JUMPI DUP1 PUSH4 0x36868F0E EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x459C75D8 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x4E0C6133 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x53881B66 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0x5B949DD0 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x627C34AD EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x66B8455B EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x6CCF5B01 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x7AFF3A0C EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x7EC14DE8 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x494 JUMPI DUP1 PUSH4 0x94555D1A EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0xA378A324 EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xA6CCEF3E EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xAAEAFD56 EQ PUSH2 0x53F JUMPI DUP1 PUSH4 0xB56269A0 EQ PUSH2 0x567 JUMPI DUP1 PUSH4 0xC02E5BC7 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0xC0D2E37F EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xC87457DB EQ PUSH2 0x5B7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xEAAD47B2 EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0xF09922FF EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x61F JUMPI DUP1 PUSH4 0xFCDFD946 EQ PUSH2 0x63F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1AA JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x24C3 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D9 JUMP JUMPDEST PUSH2 0x779 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH2 0x241 CALLDATASIZE PUSH1 0x4 PUSH2 0x2615 JUMP JUMPDEST PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x262E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0x9EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x266E JUMP JUMPDEST PUSH2 0xA6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xBD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0xCFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH2 0xD3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2615 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xD5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x26FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0xEC2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x246 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SLOAD PUSH2 0x1CF SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x2A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x5F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2642 JUMP JUMPDEST PUSH2 0xF02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x204 PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x270E JUMP JUMPDEST PUSH2 0x1160 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0x63A CALLDATASIZE PUSH1 0x4 PUSH2 0x2690 JUMP JUMPDEST PUSH2 0x1545 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x6A4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F02 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG2 PUSH1 0x10 PUSH2 0x728 DUP4 DUP3 PUSH2 0x2825 JUMP JUMPDEST POP PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x744 SWAP1 DUP4 SWAP1 PUSH2 0x2900 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0xA6B78FC047486D5ADD927AA53BA0D4FC8EB23A5811E0052AEBEBA21469F51DF8 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x791 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 PUSH32 0x0 ADDRESS PUSH4 0x8B38EBB PUSH1 0xE3 SHL PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x815 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B595D1A1BD9 PUSH1 0xD2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x11D155 PUSH1 0xEA SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x879 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1D5C9B PUSH1 0xEA SHL DUP2 MSTORE POP PUSH2 0x83D DUP8 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x846 DUP8 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x84F DUP8 PUSH2 0x15BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x291C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP4 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0x8AE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x68656164657273 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x900 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x18DBDB9D1858DD PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B9D5B595C9D PUSH1 0xD2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x951 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xE0C2E8D PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x1D1BD05B5BDD5B9D PUSH1 0xC2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xA DUP1 SLOAD SWAP3 DUP8 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xB DUP4 SWAP1 SSTORE PUSH2 0x9B0 DUP2 PUSH32 0x0 PUSH2 0x164E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x9D6 DUP3 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9DF DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x166F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xA68 DUP3 DUP3 PUSH2 0x16F3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP1 PUSH2 0x2763 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F02 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG2 PUSH1 0xA SLOAD PUSH1 0x9 SLOAD PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 AND SWAP1 PUSH32 0xC6EF891DE9793CB5ACEFEA4D38D25452DA06C1B8A922180EEB0F324523B326A0 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH2 0xB2D PUSH1 0x12 PUSH2 0x1758 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBD0 JUMPI PUSH2 0xB45 PUSH1 0x12 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xB91DC4BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0xB91DC4BB SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xBC8 SWAP1 PUSH2 0x2A97 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB32 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBEF DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC03 PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC41 SWAP2 SWAP1 PUSH2 0x262E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x2AB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9F SWAP3 SWAP2 SWAP1 PUSH2 0x2AC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE2 SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x13FF771F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD17 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0xD22 PUSH1 0x12 DUP4 PUSH2 0x176E JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6E971BB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD4B PUSH1 0x12 PUSH2 0x1758 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A4 PUSH1 0x12 DUP4 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH2 0xE18 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE44 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE91 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE66 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE91 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE74 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xEDA DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0xEE5 PUSH1 0x12 DUP4 PUSH2 0x1783 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C46F67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF0B DUP3 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0xF14 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EE2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF36 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND PUSH2 0xF59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D683D53 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT ADD PUSH2 0x1049 JUMPI PUSH2 0x1043 PUSH1 0x10 DUP1 SLOAD PUSH2 0xF90 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFBC SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1009 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFDE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1009 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFEC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP5 SWAP4 POP SWAP2 POP POP PUSH2 0x1798 JUMP JUMPDEST POP PUSH2 0x1111 JUMP JUMPDEST PUSH2 0x110F PUSH1 0x10 DUP1 SLOAD PUSH2 0x1059 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1085 SWAP1 PUSH2 0x27AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x10B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17C6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH1 0xE SLOAD PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH32 0xE8A8F43C967965902142E0F7BD4B7B3C55FC5B1A0DF5E84FA8DED5CAFE927706 SWAP1 PUSH1 0x0 SWAP1 LOG4 POP PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2F22 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1178 DUP2 PUSH2 0x1559 JUMP JUMPDEST PUSH1 0x32 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x119D JUMPI PUSH1 0x40 MLOAD PUSH4 0x36EE37FB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 ISZERO PUSH2 0x11C8 JUMPI POP CALLVALUE DUP4 LT JUMPDEST ISZERO PUSH2 0x11E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDD86F53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 SWAP2 DUP6 SWAP2 DUP4 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1260 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1284 SWAP2 SWAP1 PUSH2 0x2AB0 JUMP JUMPDEST LT ISZERO PUSH2 0x131F JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0x12DA SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x2AC9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x131D SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x1352 PUSH32 0x0 ADDRESS PUSH3 0x48B15B PUSH1 0xE3 SHL PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x13A2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B595D1A1BD9 PUSH1 0xD2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x11D155 PUSH1 0xEA SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1405 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1D5C9B PUSH1 0xEA SHL DUP2 MSTORE POP PUSH2 0x13CA DUP10 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13D3 DUP10 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13DC DUP10 PUSH2 0x15BC JUMP JUMPDEST PUSH2 0x13E5 CALLER PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x13F1 DUP11 PUSH1 0xFF AND PUSH2 0x15BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B04 JUMP JUMPDEST PUSH2 0x143A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x68656164657273 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x148C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x18DBDB9D1858DD PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x1B9D5B595C9D PUSH1 0xD2 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14DC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xE0C2E8D PUSH1 0xE3 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x74782C64617461 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP4 PUSH2 0x1588 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xD DUP1 SLOAD SWAP3 DUP10 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xE DUP6 SWAP1 SSTORE PUSH2 0x153B DUP2 PUSH32 0x0 PUSH2 0x164E JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x154D PUSH2 0x180A JUMP JUMPDEST PUSH2 0x1556 DUP2 PUSH2 0x185F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1556 DUP2 CALLER PUSH2 0x1903 JUMP JUMPDEST PUSH2 0x156B PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x1573 PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x157F DUP2 DUP7 DUP7 DUP7 PUSH2 0x195C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1597 SWAP1 DUP4 PUSH2 0x1999 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x9E9 SWAP1 DUP3 PUSH2 0x1999 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6A4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x15C9 DUP4 PUSH2 0x1B4B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1612 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x161C JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1668 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH2 0x1C21 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1679 DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16AF CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x16FD DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST ISZERO PUSH2 0xA68 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A4 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 DUP4 PUSH2 0x1CB4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1CDE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17BE DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E99 PUSH1 0x29 SWAP2 CODECOPY PUSH2 0x1E20 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1668 DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x416464726573733A206C6F772D6C6576656C2063616C6C206661696C65640000 DUP2 MSTORE POP PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B73737BA103A3930B739B332B9103A379039B2B633 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x190D DUP3 DUP3 PUSH2 0xE99 JUMP JUMPDEST PUSH2 0xA68 JUMPI PUSH2 0x191A DUP2 PUSH2 0x15A6 JUMP JUMPDEST PUSH2 0x1925 DUP4 PUSH1 0x20 PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1936 SWAP3 SWAP2 SWAP1 PUSH2 0x2C08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x6E2 SWAP2 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH2 0x1964 PUSH2 0x2474 JUMP JUMPDEST PUSH2 0x1974 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x100 PUSH2 0x1EFB JUMP JUMPDEST POP POP SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x19A6 DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0x1F53 JUMP JUMPDEST PUSH2 0x9E9 DUP3 DUP3 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x19BF DUP4 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x19CA SWAP1 PUSH1 0x2 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x19E1 JUMPI PUSH2 0x19E1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A0B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A26 JUMPI PUSH2 0x1A26 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A55 JUMPI PUSH2 0x1A55 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1A79 DUP5 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x1A84 SWAP1 PUSH1 0x1 PUSH2 0x2C8E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1AFC JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1AB8 JUMPI PUSH2 0x1AB8 PUSH2 0x2CA1 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1ACE JUMPI PUSH2 0x1ACE PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1AF5 DUP2 PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A87 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x1668 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1B8A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0x1BB4 JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1BD2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1BEA JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1BFE JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1C10 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x6A4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1C32 DUP2 PUSH1 0x1 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x5 SSTORE DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD MLOAD SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x20214CA3 PUSH1 0xE1 SHL SWAP4 PUSH2 0x1C6A SWAP4 DUP7 SWAP4 DUP5 SWAP4 SWAP3 ADDRESS SWAP3 SWAP2 DUP11 SWAP2 PUSH1 0x1 SWAP2 PUSH1 0x24 ADD PUSH2 0x2CCE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1CAA DUP7 DUP4 DUP7 DUP5 PUSH2 0x207A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1CCB JUMPI PUSH2 0x1CCB PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1DC7 JUMPI PUSH1 0x0 PUSH2 0x1D02 PUSH1 0x1 DUP4 PUSH2 0x2D36 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1D16 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1D7B JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1D36 JUMPI PUSH2 0x1D36 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1D59 JUMPI PUSH2 0x1D59 PUSH2 0x2CA1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1D8C JUMPI PUSH2 0x1D8C PUSH2 0x2D49 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1E18 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E9D SWAP2 SWAP1 PUSH2 0x2900 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EF0 DUP8 DUP4 DUP4 DUP8 PUSH2 0x21D3 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1F03 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1F0E PUSH1 0x20 DUP4 PUSH2 0x2D5F JUMP JUMPDEST ISZERO PUSH2 0x1F36 JUMPI PUSH2 0x1F1E PUSH1 0x20 DUP4 PUSH2 0x2D5F JUMP JUMPDEST PUSH2 0x1F29 SWAP1 PUSH1 0x20 PUSH2 0x2D36 JUMP JUMPDEST PUSH2 0x1F33 SWAP1 DUP4 PUSH2 0x2C8E JUMP JUMPDEST SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 SWAP3 ADD ADD SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1F7D JUMPI PUSH2 0x1F77 DUP4 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x224C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1FB9 JUMPI PUSH2 0x1FA3 DUP4 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x1 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1FF6 JUMPI PUSH2 0x1FE0 DUP4 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x2 PUSH2 0x2264 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2035 JUMPI PUSH2 0x201F DUP4 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x204A DUP4 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x224C JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x8 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x2068 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1668 DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 DUP6 MLOAD PUSH2 0x227D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT ADDRESS PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR SWAP1 SSTORE SWAP1 SWAP3 POP DUP3 SWAP2 PUSH32 0xB5E6E01E79F91267DC17B4E6314D5D4D03593D2CEEE0FBB452B750BD70EA5AF9 SWAP2 SWAP1 LOG2 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2000575 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4000AEA0 SWAP1 PUSH2 0x2138 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D81 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2157 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x217B SWAP2 SWAP1 PUSH2 0x2AE2 JUMP JUMPDEST PUSH2 0x17BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x756E61626C6520746F207472616E73666572416E6443616C6C20746F206F7261 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x636C65 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2242 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x223B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x223B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST POP DUP2 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x17BE DUP4 DUP4 PUSH2 0x235A JUMP JUMPDEST PUSH2 0x2254 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x1668 DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x226C PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0x17BE DUP5 DUP6 PUSH1 0x0 ADD MLOAD MLOAD DUP6 DUP6 PUSH2 0x23D2 JUMP JUMPDEST PUSH2 0x2285 PUSH2 0x24A9 JUMP JUMPDEST DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x2293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x22A2 DUP4 DUP7 PUSH2 0x2C8E JUMP JUMPDEST GT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D5 DUP6 PUSH2 0x22C5 DUP8 PUSH1 0x20 ADD MLOAD DUP8 DUP7 PUSH2 0x22C0 SWAP2 SWAP1 PUSH2 0x2C8E JUMP JUMPDEST PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x22D0 SWAP1 PUSH1 0x2 PUSH2 0x2C77 JUMP JUMPDEST PUSH2 0x245D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD DUP1 MLOAD DUP8 PUSH1 0x20 DUP4 ADD ADD SWAP4 POP DUP1 DUP9 DUP8 ADD GT ISZERO PUSH2 0x22F4 JUMPI DUP8 DUP7 ADD DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP5 ADD JUMPDEST PUSH1 0x20 DUP5 LT PUSH2 0x2334 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x2313 PUSH1 0x20 DUP4 PUSH2 0x2C8E JUMP JUMPDEST SWAP2 POP PUSH2 0x2320 PUSH1 0x20 DUP3 PUSH2 0x2C8E JUMP JUMPDEST SWAP1 POP PUSH2 0x232D PUSH1 0x20 DUP6 PUSH2 0x2D36 JUMP JUMPDEST SWAP4 POP PUSH2 0x22FC JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP7 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x236A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x26FB JUMP JUMPDEST PUSH2 0x238C PUSH2 0x24A9 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD DUP4 LT PUSH2 0x23AC JUMPI PUSH2 0x23AC DUP5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0x22D0 SWAP2 SWAP1 PUSH2 0x2C77 JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 DUP6 DUP4 ADD ADD DUP5 DUP2 MSTORE8 POP DUP1 DUP6 SUB PUSH2 0x23C8 JUMPI PUSH1 0x1 DUP2 ADD DUP3 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x23DA PUSH2 0x24A9 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x23E9 DUP6 DUP5 PUSH2 0x2C8E JUMP JUMPDEST GT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FD DUP6 PUSH2 0x22C5 DUP7 DUP6 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x240D DUP5 PUSH2 0x100 PUSH2 0x2E8C JUMP JUMPDEST PUSH2 0x2417 SWAP2 SWAP1 PUSH2 0x2D36 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD DUP4 DUP7 DUP3 ADD ADD DUP6 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP5 DUP8 ADD GT ISZERO PUSH2 0x243B JUMPI DUP4 DUP7 ADD DUP2 MSTORE JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x2457 JUMPI POP DUP2 PUSH2 0x6A4 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2469 DUP4 DUP4 PUSH2 0x1EFB JUMP JUMPDEST POP PUSH2 0x1F77 DUP4 DUP3 PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x24A4 PUSH2 0x24A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x255A JUMPI PUSH2 0x255A PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2582 JUMPI PUSH2 0x2582 PUSH2 0x24ED JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25F7 DUP5 PUSH2 0x25BD JUMP JUMPDEST SWAP3 POP PUSH2 0x2605 PUSH1 0x20 DUP6 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2665 PUSH1 0x20 DUP5 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1668 DUP3 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26C6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26AE JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x26E7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1668 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x272D DUP6 PUSH2 0x25BD JUMP JUMPDEST SWAP4 POP PUSH2 0x273B PUSH1 0x20 DUP7 ADD PUSH2 0x25BD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x536F75726365206D75737420626520746865206F7261636C65206F6620746865 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x81C995C5D595CDD PUSH1 0xC2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x27BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2457 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2806 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B0 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2812 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x283E JUMPI PUSH2 0x283E PUSH2 0x24ED JUMP JUMPDEST PUSH2 0x2852 DUP2 PUSH2 0x284C DUP5 SLOAD PUSH2 0x27AB JUMP JUMPDEST DUP5 PUSH2 0x27DF JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2887 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x286F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x28B6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2897 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x28D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x28F6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2912 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EC2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH12 0x312F71756F74653F7372633D PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP5 MLOAD PUSH2 0x2957 DUP2 PUSH1 0x2C DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH5 0x266473743D PUSH1 0xD8 SHL PUSH1 0x2C SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x297C DUP2 PUSH1 0x31 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH8 0x26616D6F756E743D PUSH1 0xC0 SHL PUSH1 0x31 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x29A5 DUP2 PUSH1 0x39 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST ADD PUSH1 0x39 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5B22616363657074222C20226170706C69636174696F6E2F6A736F6E222C2022 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH24 0x20BABA3437B934BD30BA34B7B7111610112132B0B932B91 PUSH1 0x45 SHL DUP2 DUP5 ADD MSTORE PUSH1 0x38 PUSH1 0x0 DUP6 SLOAD PUSH2 0x2A08 DUP2 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2A20 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2A39 JUMPI PUSH2 0x2A69 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP10 DUP8 ADD MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP10 ADD DUP7 ADD SWAP5 POP PUSH2 0x2A69 JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2A5F JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP10 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x2A44 JUMP JUMPDEST POP POP DUP6 DUP4 DUP11 ADD ADD SWAP5 POP JUMPDEST POP POP PUSH2 0x225D PUSH1 0xF0 SHL DUP4 MSTORE POP POP PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2AA9 JUMPI PUSH2 0x2AA9 PUSH2 0x2A81 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2EC2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH11 0x312F737761703F7372633D PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP7 MLOAD PUSH2 0x2B3E DUP2 PUSH1 0x2B DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH5 0x266473743D PUSH1 0xD8 SHL PUSH1 0x2B SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP7 MLOAD PUSH2 0x2B63 DUP2 PUSH1 0x30 DUP5 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH8 0x26616D6F756E743D PUSH1 0xC0 SHL PUSH1 0x30 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP6 MLOAD PUSH2 0x2B8C DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH6 0x2666726F6D3D PUSH1 0xD0 SHL PUSH1 0x38 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x2BB3 DUP2 PUSH1 0x3E DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH10 0x26736C6970706167653D PUSH1 0xB0 SHL PUSH1 0x3E SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH2 0x2BFC PUSH2 0x2BDB PUSH1 0x48 DUP4 ADD DUP7 PUSH2 0x28E4 JUMP JUMPDEST PUSH21 0x2664697361626C65457374696D6174653D74727565 PUSH1 0x58 SHL DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C3A DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2C6B DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x26AB JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2CC6 JUMPI PUSH2 0x2CC6 PUSH2 0x2A81 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP9 SWAP1 MSTORE DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2D27 DUP4 DUP3 ADD DUP6 PUSH2 0x26CF JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A4 JUMPI PUSH2 0x6A4 PUSH2 0x2A81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D7C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x157F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2DE3 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2DC9 JUMPI PUSH2 0x2DC9 PUSH2 0x2A81 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2DD6 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2DAD JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2DFA JUMPI POP PUSH1 0x1 PUSH2 0x6A4 JUMP JUMPDEST DUP2 PUSH2 0x2E07 JUMPI POP PUSH1 0x0 PUSH2 0x6A4 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2E1D JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2E27 JUMPI PUSH2 0x2E43 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2E38 JUMPI PUSH2 0x2E38 PUSH2 0x2A81 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2E66 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x2E70 DUP4 DUP4 PUSH2 0x2DA8 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2E84 JUMPI PUSH2 0x2E84 PUSH2 0x2A81 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1668 DUP4 DUP4 PUSH2 0x2DEB JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2063616C6C KECCAK256 PUSH24 0x6974682076616C7565206661696C656468747470733A2F2F PUSH2 0x7069 0x2E BALANCE PUSH10 0x6E63682E6465762F7377 PUSH2 0x702F PUSH23 0x352E322F17A8E30262C1F919C33056D877A3C22B95C2F5 0xE4 0xDA 0xC4 CHAINID DUP4 0xC1 0xC2 ORIGIN EXTCODECOPY 0xD7 SWAP16 0xBD 0xB0 PUSH29 0xC135E0CEBB02C3480AE5D74D377283180A2601F8F644EDF7987B009316 0xC6 GASPRICE STATICCALL 0xB0 EXP SWAP9 SELFBALANCE SLOAD SWAP6 0xC PUSH18 0x87FB98F39DA0AE224ABBBEE017C1699445AD 0xE NOT SELFBALANCE 0x4A 0x4D LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xE9 0x4E SSTORE 0xC5 STATICCALL 0xBA 0x2F 0xED RETURNDATACOPY 0xEB STATICCALL KECCAK256 PUSH9 0xFBD1EA3D8D48B6A411 PUSH32 0xB133A57F94A8553B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"599:8879:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2732:202:14;;;;;;;;;;-1:-1:-1;2732:202:14;;;;;:::i;:::-;;:::i;:::-;;;470:14:30;;463:22;445:41;;433:2;418:18;2732:202:14;;;;;;;;8232:279:29;;;;;;;;;;-1:-1:-1;8232:279:29;;;;;:::i;:::-;;:::i;:::-;;4366:1196;;;;;;;;;;-1:-1:-1;4366:1196:29;;;;;:::i;:::-;;:::i;4504:129:14:-;;;;;;;;;;-1:-1:-1;4504:129:14;;;;;:::i;:::-;;:::i;:::-;;;2465:25:30;;;2453:2;2438:18;4504:129:14;2319:177:30;1890:42:29;;;;;;;;;;;;;;;2164:31;;;;;;;;;;-1:-1:-1;2164:31:29;;;;-1:-1:-1;;;;;2164:31:29;;;;;;;;;;:::i;4929:145:14:-;;;;;;;;;;-1:-1:-1;4929:145:14;;;;;:::i;:::-;;:::i;6038:214::-;;;;;;;;;;-1:-1:-1;6038:214:14;;;;;:::i;:::-;;:::i;2116:39:29:-;;;;;;;;;;;;;;;;2202:31;;;;;;;;;;-1:-1:-1;2202:31:29;;;;-1:-1:-1;;;;;2202:31:29;;;5570:647;;;;;;;;;;-1:-1:-1;5570:647:29;;;;;:::i;:::-;;:::i;1494:80::-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1494:80:29;;1845:36;;;;;;;;;;;;;;;9163:275;;;;;;;;;;;;;:::i;3906:195::-;;;;;;;;;;-1:-1:-1;3906:195:29;;;;;:::i;:::-;;:::i;4250:108::-;;;;;;;;;;;;;:::i;4109:133::-;;;;;;;;;;-1:-1:-1;4109:133:29;;;;;:::i;:::-;;:::i;1016:265:3:-;;;;;;;;;;;;;:::i;2364:27:29:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1757:35::-;;;;;;;;;;;;;;;1332:81:3;;;;;;;;;;-1:-1:-1;1401:7:3;;-1:-1:-1;;;;;1401:7:3;1332:81;;3021:145:14;;;;;;;;;;-1:-1:-1;3021:145:14;;;;;:::i;:::-;;:::i;3712:186:29:-;;;;;;;;;;-1:-1:-1;3712:186:29;;;;;:::i;:::-;;:::i;2153:49:14:-;;;;;;;;;;-1:-1:-1;2153:49:14;2198:4;2153:49;;1581:70:29;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1581:70:29;;1984:43;;;;;;;;;;;;;;;1398:89;;;;;;;;;;;;1445:42;1398:89;;2240:37;;;;;;;;;;;;;;;;2076:33;;;;;;;;;;-1:-1:-1;2076:33:29;;;;-1:-1:-1;;;;;2076:33:29;;;2284:32;;;;;;;;;;-1:-1:-1;2284:32:29;;;;;;;;2036:33;;;;;;;;;;-1:-1:-1;2036:33:29;;;;-1:-1:-1;;;;;2036:33:29;;;5354:147:14;;;;;;;;;;-1:-1:-1;5354:147:14;;;;;:::i;:::-;;:::i;8519:636:29:-;;;;;;;;;;;;;:::i;6225:1999::-;;;;;;:::i;:::-;;:::i;826:98:3:-;;;;;;;;;;-1:-1:-1;826:98:3;;;;;:::i;:::-;;:::i;1660:42:29:-;;;;;;;;;;;;;;;2732:202:14;2817:4;-1:-1:-1;;;;;;2840:47:14;;-1:-1:-1;;;2840:47:14;;:87;;-1:-1:-1;;;;;;;;;;937:40:22;;;2891:36:14;2833:94;2732:202;-1:-1:-1;;2732:202:14:o;8232:279:29:-;11663:28:1;;;;:17;:28;;;;;;;;-1:-1:-1;;;;;11663:28:1;11649:10;:42;11641:95;;;;-1:-1:-1;;;11641:95:1;;;;;;;:::i;:::-;;;;;;;;;11749:28;;;;:17;:28;;;;;;11742:35;;-1:-1:-1;;;;;;11742:35:1;;;11788:29;11767:9;;-1:-1:-1;;;;;;;;;;;11788:29:1;;8389:17:29::1;:32;8409:12:::0;8389:17;:32:::1;:::i;:::-;-1:-1:-1::0;8432:20:29::1;:27:::0;;-1:-1:-1;;8432:27:29::1;8455:4;8432:27;::::0;;8475:28:::1;::::0;::::1;::::0;8490:12;;8475:28:::1;:::i;:::-;;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;8232:279:::0;;;:::o;4366:1196::-;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;4515:28:29::1;4546:133;4582:10;4615:4;-1:-1:-1::0;;;4546:21:29::1;:133::i;:::-;4515:164;;4690:24;;;;;;;;;;;;;;-1:-1:-1::0;;;4690:24:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;4690:24:29::1;;::::0;:3:::1;:7;;:24;;;;;:::i;:::-;4725:403;;;;;;;;;;;;;;-1:-1:-1::0;;;4725:403:29::1;;::::0;4902:24:::1;4922:3;4902:19;:24::i;:::-;4979;4999:3;4979:19;:24::i;:::-;5059;5076:6;5059:16;:24::i;:::-;4793:309;;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;4793:309:29;;::::1;::::0;;;;;;4725:3;;:403;:7:::1;:403::i;:::-;5139:175;;;;;;;;;;;;;;-1:-1:-1::0;;;5139:175:29::1;;::::0;5269:13:::1;5165:147;;;;;;;;:::i;5139:175::-;5325:28;;;;;;;;;;;;;;-1:-1:-1::0;;;5325:28:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;5325:28:29::1;;::::0;:3:::1;:7;;:28;;;;;:::i;:::-;5364:27;;;;;;;;;;;;;;-1:-1:-1::0;;;5364:27:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;5364:27:29::1;;::::0;:3:::1;:7;;:27;;;;;:::i;:::-;5402:18;:24:::0;;-1:-1:-1;;;;;5402:24:29;;::::1;-1:-1:-1::0;;;;;;5402:24:29;;::::1;;::::0;;;5437:18:::1;:24:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;5472::::1;:33:::0;;;5516:38:::1;5537:3:::0;5542:11:::1;5516:20;:38::i;:::-;;4504:1058;4366:1196:::0;;;;:::o;4504:129:14:-;4578:7;4604:12;;;;;;;;;;:22;;;;4504:129::o;4929:145::-;5012:18;5025:4;5012:12;:18::i;:::-;2631:16;2642:4;2631:10;:16::i;:::-;5042:25:::1;5053:4;5059:7;5042:10;:25::i;:::-;4929:145:::0;;;:::o;6038:214::-;-1:-1:-1;;;;;6133:23:14;;719:10:20;6133:23:14;6125:83;;;;-1:-1:-1;;;6125:83:14;;11354:2:30;6125:83:14;;;11336:21:30;11393:2;11373:18;;;11366:30;11432:34;11412:18;;;11405:62;-1:-1:-1;;;11483:18:30;;;11476:45;11538:19;;6125:83:14;11152:411:30;6125:83:14;6219:26;6231:4;6237:7;6219:11;:26::i;:::-;6038:214;;:::o;5570:647:29:-;11663:28:1;;;;:17;:28;;;;;;;;-1:-1:-1;;;;;11663:28:1;11649:10;:42;11641:95;;;;-1:-1:-1;;;11641:95:1;;;;;;;:::i;:::-;11749:28;;;;:17;:28;;;;;;11742:35;;-1:-1:-1;;;;;;11742:35:1;;;11788:29;11767:9;;-1:-1:-1;;;;;;;;;;;11788:29:1;;5785:18:29::1;::::0;5751::::1;::::0;5843:24:::1;::::0;5723:155:::1;::::0;2465:25:30;;;5819:8:29;;-1:-1:-1;;;;;5785:18:29;;::::1;::::0;5751::::1;::::0;5723:155:::1;::::0;2453:2:30;2438:18;5723:155:29::1;;;;;;;5889:14;5906:21;:12;:19;:21::i;:::-;5889:38;;5944:9;5939:271;5963:6;5959:1;:10;5939:271;;;6013:18;:12;6029:1:::0;6013:15:::1;:18::i;:::-;6058;::::0;6095::::1;::::0;6159:24:::1;::::0;5991:207:::1;::::0;-1:-1:-1;;;5991:207:29;;-1:-1:-1;;;;;6058:18:29;;::::1;5991:207;::::0;::::1;11837:34:30::0;6095:18:29;;::::1;11887::30::0;;;11880:43;11939:18;;;11932:34;;;11982:18;;;11975:34;5991:48:29;::::1;::::0;::::1;::::0;11771:19:30;;5991:207:29::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5971:3;;;;;:::i;:::-;;;;5939:271;;;;5707:510;5570:647:::0;;;:::o;9163:275::-;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;9239:23:29::1;9284;9184:6:1::0;;-1:-1:-1;;;;;9184:6:1;;9098:98;9284:23:29::1;9239:69;;9324:4;-1:-1:-1::0;;;;;9324:13:29::1;;9338:10;9350:4;-1:-1:-1::0;;;;;9350:14:29::1;;9373:4;9350:29;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9324:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9319:112;;9404:15;;-1:-1:-1::0;;;9404:15:29::1;;;;;;;;;;;3906:195:::0;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;4003:31:29::1;:12;4023:10:::0;4003:19:::1;:31::i;:::-;3998:96;;4058:24;;-1:-1:-1::0;;;4058:24:29::1;;;;;;;;;;;4250:108:::0;4302:7;4329:21;:12;:19;:21::i;:::-;4322:28;;4250:108;:::o;4109:133::-;4177:7;4204:30;:12;4220:13;4204:15;:30::i;1016:265:3:-;1089:14;;-1:-1:-1;;;;;1089:14:3;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:3;;13244:2:30;1067:63:3;;;13226:21:30;13283:2;13263:18;;;13256:30;-1:-1:-1;;;13302:18:30;;;13295:52;13364:18;;1067:63:3;13042:346:30;1067:63:3;1156:7;;;-1:-1:-1;;;;;;1169:20:3;;;1179:10;1169:20;;;;;;1195:14;:27;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:3;;;;1179:10;1156:7;;1234:42;;1137:16;;1234:42;1061:220;1016:265::o;2364:27:29:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3021:145:14:-;3107:4;3130:12;;;;;;;;;;;-1:-1:-1;;;;;3130:29:14;;;;;;;;;;;;;;;3021:145::o;3712:186:29:-;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;3806:28:29::1;:12;3823:10:::0;3806:16:::1;:28::i;:::-;3801:90;;3858:21;;-1:-1:-1::0;;;3858:21:29::1;;;;;;;;;;;5354:147:14::0;5438:18;5451:4;5438:12;:18::i;:::-;2631:16;2642:4;2631:10;:16::i;:::-;5468:26:::1;5480:4;5486:7;5468:11;:26::i;8519:636:29:-:0;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;8593:20:29::1;::::0;::::1;;8588:86;;8637:25;;-1:-1:-1::0;;;8637:25:29::1;;;;;;;;;;;8588:86;8688:16;::::0;-1:-1:-1;;;;;8688:16:29::1;-1:-1:-1::0;;8688:40:29;8684:286:::1;;8745:131;8803:17;8745:131;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;8839:22:29::1;::::0;-1:-1:-1;;;;;8745:17:29::1;:39;::::0;:131;-1:-1:-1;8839:22:29;-1:-1:-1;;8745:39:29::1;:131::i;:::-;;8684:286;;;8909:49;8940:17;8909:49;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:17;-1:-1:-1::0;;;;;8909:30:29::1;;;:49;;;;:::i;:::-;;8684:286;9075:22;::::0;9044:16:::1;::::0;9013::::1;::::0;8985:123:::1;::::0;-1:-1:-1;;;;;9044:16:29;;::::1;::::0;9013;;::::1;::::0;8985:123:::1;::::0;9044:16:::1;::::0;8985:123:::1;-1:-1:-1::0;9119:20:29::1;:28:::0;;-1:-1:-1;;9119:28:29::1;::::0;;8519:636::o;6225:1999::-;-1:-1:-1;;;;;;;;;;;2631:16:14;2642:4;2631:10;:16::i;:::-;6421:2:29::1;6410:8;:13;;;6406:126;;;6447:18;;-1:-1:-1::0;;;6447:18:29::1;;;;;;;;;;;6406:126;-1:-1:-1::0;;;;;6546:27:29;::::1;1445:42;6546:27;:49:::0;::::1;;;;6586:9;6577:6;:18;6546:49;6542:116;;;6619:27;;-1:-1:-1::0;;;6619:27:29::1;;;;;;;;;;;6542:116;6668:20;:28:::0;;-1:-1:-1;;6668:28:29::1;::::0;;6789:52:::1;::::0;-1:-1:-1;;;6789:52:29;;6816:4:::1;6789:52;::::0;::::1;13605:34:30::0;-1:-1:-1;;;;;6823:17:29::1;13675:15:30::0;;13655:18;;;13648:43;6770:3:29;;6844:6;;6789:18;::::1;::::0;::::1;::::0;13540::30;;6789:52:29::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;6785:148;;;6867:54;::::0;-1:-1:-1;;;6867:54:29;;-1:-1:-1;;;;;6867:16:29;::::1;::::0;::::1;::::0;:54:::1;::::0;6884:17:::1;::::0;-1:-1:-1;;6903:17:29;6867:54:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6785:148;6953:28;6984:141;7020:17;7060:4;-1:-1:-1::0;;;6984:21:29::1;:141::i;:::-;6953:172;;7136:24;;;;;;;;;;;;;;-1:-1:-1::0;;;7136:24:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;7136:24:29::1;;::::0;:3:::1;:7;;:24;;;;;:::i;:::-;7171:619;;;;;;;;;;;;;;-1:-1:-1::0;;;7171:619:29::1;;::::0;7347:24:::1;7367:3;7347:19;:24::i;:::-;7424;7444:3;7424:19;:24::i;:::-;7504;7521:6;7504:16;:24::i;:::-;7582:33;719:10:20::0;7582:19:29::1;:33::i;:::-;7673:26;7690:8;7673:26;;:16;:26::i;:::-;7239:525;;;;;;;;;;;;:::i;7171:619::-;7801:175;;;;;;;;;;;;;;-1:-1:-1::0;;;7801:175:29::1;;::::0;7931:13:::1;7827:147;;;;;;;;:::i;7801:175::-;7987:28;;;;;;;;;;;;;;-1:-1:-1::0;;;7987:28:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;7987:28:29::1;;::::0;:3:::1;:7;;:28;;;;;:::i;:::-;8026:26;;;;;;;;;;;;;;-1:-1:-1::0;;;8026:26:29::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;8026:26:29::1;;::::0;:3:::1;:7;;:26;;;;;:::i;:::-;8063:16;:22:::0;;-1:-1:-1;;;;;8063:22:29;;::::1;-1:-1:-1::0;;;;;;8063:22:29;;::::1;;::::0;;;8096:16:::1;:22:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;8129::::1;:31:::0;;;8171:45:::1;8192:3:::0;8197:18:::1;8171:20;:45::i;:::-;;6395:1829;;6225:1999:::0;;;;;:::o;826:98:3:-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;3460:103:14:-;3526:30;3537:4;719:10:20;3526::14;:30::i;1850:283:1:-;1992:24;;:::i;:::-;2024:28;;:::i;:::-;2065:63;:3;2080:6;2088:12;2102:25;2065:14;:63::i;:::-;2058:70;1850:283;-1:-1:-1;;;;;1850:283:1:o;1951:175:0:-;2061:8;;;;:26;;2083:3;2061:21;:26::i;:::-;2093:8;;;;:28;;2115:5;2093:21;:28::i;2407:149:21:-;2465:13;2497:52;-1:-1:-1;;;;;2509:22:21;;343:2;2497:11;:52::i;447:696::-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;-1:-1:-1;;;;;627:18:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:21;-1:-1:-1;604:41:21;-1:-1:-1;765:28:21;;;781:2;765:28;820:280;-1:-1:-1;;851:5:21;-1:-1:-1;;;985:2:21;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:21;820:280;1064:21;-1:-1:-1;1120:6:21;447:696;-1:-1:-1;;;447:696:21:o;2992:177:1:-;3140:8;;3087:7;;3109:55;;-1:-1:-1;;;;;3140:8:1;3151:3;3156:7;3109:22;:55::i;:::-;3102:62;2992:177;-1:-1:-1;;;2992:177:1:o;7587:233:14:-;7670:22;7678:4;7684:7;7670;:22::i;:::-;7665:149;;7708:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7708:29:14;;;;;;;;;:36;;-1:-1:-1;;7708:36:14;7740:4;7708:36;;;7790:12;719:10:20;;640:96;7790:12:14;-1:-1:-1;;;;;7763:40:14;7781:7;-1:-1:-1;;;;;7763:40:14;7775:4;7763:40;;;;;;;;;;7587:233;;:::o;7991:234::-;8074:22;8082:4;8088:7;8074;:22::i;:::-;8070:149;;;8144:5;8112:12;;;;;;;;;;;-1:-1:-1;;;;;8112:29:14;;;;;;;;;;:37;;-1:-1:-1;;8112:37:14;;;8168:40;719:10:20;;8112:12:14;;8168:40;;8144:5;8168:40;7991:234;;:::o;9106:115:26:-;9169:7;9195:19;9203:3;4545:18;;4463:107;9563:156;9637:7;9687:22;9691:3;9703:5;9687:3;:22::i;8623:156::-;8696:4;8719:53;8727:3;-1:-1:-1;;;;;8747:23:26;;8719:7;:53::i;8305:150::-;8375:4;8398:50;8403:3;-1:-1:-1;;;;;8423:23:26;;8398:4;:50::i;4693:224:19:-;4792:12;4823:87;4845:6;4853:4;4859:5;4823:87;;;;;;;;;;;;;;;;;:21;:87::i;:::-;4816:94;4693:224;-1:-1:-1;;;;4693:224:19:o;3701:185::-;3776:12;3807:72;3829:6;3837:4;3843:1;3807:72;;;;;;;;;;;;;;;;;:21;:72::i;1730:111:3:-;1802:7;;-1:-1:-1;;;;;1802:7:3;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:3;;16090:2:30;1780:56:3;;;16072:21:30;16129:2;16109:18;;;16102:30;-1:-1:-1;;;16148:18:30;;;16141:52;16210:18;;1780:56:3;15888:346:30;1780:56:3;1730:111::o;1497:188::-;1565:10;-1:-1:-1;;;;;1559:16:3;;;1551:52;;;;-1:-1:-1;;;1551:52:3;;16441:2:30;1551:52:3;;;16423:21:30;16480:2;16460:18;;;16453:30;-1:-1:-1;;;16499:18:30;;;16492:53;16562:18;;1551:52:3;16239:347:30;1551:52:3;1610:14;:19;;-1:-1:-1;;;;;;1610:19:3;-1:-1:-1;;;;;1610:19:3;;;;;;;;;1668:7;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;;1641:39:3;1497:188;:::o;3844:479:14:-;3932:22;3940:4;3946:7;3932;:22::i;:::-;3927:390;;4115:28;4135:7;4115:19;:28::i;:::-;4214:38;4242:4;4249:2;4214:19;:38::i;:::-;4022:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4022:252:14;;;;;;;;;;-1:-1:-1;;;3970:336:14;;;;;;;:::i;987:351:0:-;1129:24;;:::i;:::-;1161:49;1182:4;:8;;;361:3;1161:20;:49::i;:::-;-1:-1:-1;;1216:15:0;;;-1:-1:-1;;;;;1237:35:0;:20;;;:35;-1:-1:-1;;;;;;1278:38:0;:23;;;:38;1216:15;987:351::o;2777:204:12:-;2875:71;2894:3;383:1;2931:5;2925:19;2875:18;:71::i;:::-;2952:24;:3;2969:5;2952:10;:24::i;1818:437:21:-;1893:13;1918:19;1950:10;1954:6;1950:1;:10;:::i;:::-;:14;;1963:1;1950:14;:::i;:::-;-1:-1:-1;;;;;1940:25:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1940:25:21;;1918:47;;-1:-1:-1;;;1975:6:21;1982:1;1975:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1975:15:21;;;;;;;;;-1:-1:-1;;;2000:6:21;2007:1;2000:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2000:15:21;;;;;;;;-1:-1:-1;2030:9:21;2042:10;2046:6;2042:1;:10;:::i;:::-;:14;;2055:1;2042:14;:::i;:::-;2030:26;;2025:128;2062:1;2058;:5;2025:128;;;-1:-1:-1;;;2105:5:21;2113:3;2105:11;2096:21;;;;;;;:::i;:::-;;;;2084:6;2091:1;2084:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2084:33:21;;;;;;;;-1:-1:-1;2141:1:21;2131:11;;;;;2065:3;;;:::i;:::-;;;2025:128;;;-1:-1:-1;2170:10:21;;2162:55;;;;-1:-1:-1;;;2162:55:21;;18186:2:30;2162:55:21;;;18168:21:30;;;18205:18;;;18198:30;18264:34;18244:18;;;18237:62;18316:18;;2162:55:21;17984:356:30;10139:916:24;10192:7;;-1:-1:-1;;;10267:17:24;;10263:103;;-1:-1:-1;;;10304:17:24;;;-1:-1:-1;10349:2:24;10339:12;10263:103;-1:-1:-1;;;10383:5:24;:17;10379:103;;-1:-1:-1;;;10420:17:24;;;-1:-1:-1;10465:2:24;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:24;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:24;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:24;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:24;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:24:o;3687:756:1:-;3864:14;;3823:17;;3901:9;3864:14;3909:1;3901:9;:::i;:::-;3884:14;:26;4245:6;;4280:22;;;;;4350:7;;;;:11;3946:421;;3916:27;;-1:-1:-1;;;3976:48:1;3946:421;;3916:27;;;;4245:6;4267:4;;4280:22;4310:5;;837:1;;3946:421;;;:::i;:::-;;;;-1:-1:-1;;3946:421:1;;;;;;;;;;;;;;-1:-1:-1;;;;;3946:421:1;-1:-1:-1;;;;;;3946:421:1;;;;;;;;;;;-1:-1:-1;4380:58:1;4392:13;4407:5;4414:7;3946:421;4380:11;:58::i;:::-;4373:65;3687:756;-1:-1:-1;;;;;;3687:756:1:o;4912:118:26:-;4979:7;5005:3;:11;;5017:5;5005:18;;;;;;;;:::i;:::-;;;;;;;;;4998:25;;4912:118;;;;:::o;2786:1388::-;2852:4;2989:19;;;:12;;;:19;;;;;;3023:15;;3019:1149;;3392:21;3416:14;3429:1;3416:10;:14;:::i;:::-;3464:18;;3392:38;;-1:-1:-1;3444:17:26;;3464:22;;3485:1;;3464:22;:::i;:::-;3444:42;;3518:13;3505:9;:26;3501:398;;3551:17;3571:3;:11;;3583:9;3571:22;;;;;;;;:::i;:::-;;;;;;;;;3551:42;;3722:9;3693:3;:11;;3705:13;3693:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3805:23;;;:12;;;:23;;;;;:36;;;3501:398;3977:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4069:3;:12;;:19;4082:5;4069:19;;;;;;;;;;;4062:26;;;4110:4;4103:11;;;;;;;3019:1149;4152:5;4145:12;;;;;2214:404;2277:4;4351:19;;;:12;;;:19;;;;;;2293:319;;-1:-1:-1;2335:23:26;;;;;;;;:11;:23;;;;;;;;;;;;;2515:18;;2493:19;;;:12;;;:19;;;;;;:40;;;;2547:11;;2293:319;-1:-1:-1;2596:5:26;2589:12;;5165:446:19;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:19;;19639:2:30;5354:81:19;;;19621:21:30;19678:2;19658:18;;;19651:30;19717:34;19697:18;;;19690:62;-1:-1:-1;;;19768:18:30;;;19761:36;19814:19;;5354:81:19;19437:402:30;5354:81:19;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:19;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:19:o;1001:399:11:-;1075:13;;:::i;:::-;1100;1111:2;1100:8;:13;:::i;:::-;:18;1096:71;;1146:13;1157:2;1146:8;:13;:::i;:::-;1140:20;;:2;:20;:::i;:::-;1128:32;;;;:::i;:::-;;;1096:71;-1:-1:-1;1214:12:11;;;;:23;;;1277:4;1271:11;;1289:16;;;-1:-1:-1;1312:14:11;;1354:18;;;1346:27;1333:41;;1214:12;1001:399::o;682:625:12:-;803:2;794:5;-1:-1:-1;;;;;794:11:12;;791:512;;815:44;:3;837:20;847:1;838:10;;;837:20;;;815:15;:44::i;:::-;;4929:145:14;;;:::o;791:512:12:-;885:4;876:5;-1:-1:-1;;;;;876:13:12;;872:431;;899:41;:3;936:2;922:10;931:1;922:10;;;;921:17;899:15;:41::i;:::-;-1:-1:-1;948:23:12;:3;-1:-1:-1;;;;;948:23:12;;969:1;948:13;:23::i;872:431::-;997:6;988:5;-1:-1:-1;;;;;988:15:12;;984:319;;1013:41;:3;1050:2;1036:10;1045:1;1036:10;;;;1035:17;1013:15;:41::i;:::-;-1:-1:-1;1062:23:12;:3;-1:-1:-1;;;;;1062:23:12;;1083:1;1062:13;:23::i;984:319::-;1111:10;1102:5;-1:-1:-1;;;;;1102:19:12;;1098:205;;1131:41;:3;1168:2;1154:10;1163:1;1154:10;;;;1153:17;1131:15;:41::i;:::-;-1:-1:-1;1180:23:12;:3;-1:-1:-1;;;;;1180:23:12;;1201:1;1180:13;:23::i;1098:205::-;1224:41;:3;1261:2;1247:10;1256:1;1247:10;;;;1246:17;1224:15;:41::i;:::-;-1:-1:-1;1273:23:12;:3;-1:-1:-1;;;;;1273:23:12;;1294:1;1273:13;:23::i;4692:155:11:-;4769:13;;:::i;:::-;4797:45;4803:3;4808;:7;;;:14;4824:4;4830;:11;4797:5;:45::i;6629:430:1:-;6818:29;;-1:-1:-1;;;;;;6835:4:1;20283:2:30;20254:15;20250:45;6818:29:1;;;20238:58:30;20312:12;;;20305:28;;;6771:17:1;;20349:12:30;;6818:29:1;;;;;;-1:-1:-1;;6818:29:1;;;;;;6808:40;;6818:29;6808:40;;;;6854:28;;;;:17;:28;;;;;;:44;;-1:-1:-1;;;;;;6854:44:1;-1:-1:-1;;;;;6854:44:1;;;;;6808:40;;-1:-1:-1;6808:40:1;;6909:29;;6854:28;6909:29;6952:6;;:62;;-1:-1:-1;;;6952:62:1;;-1:-1:-1;;;;;6952:6:1;;;;:22;;:62;;6975:13;;6990:7;;6999:14;;6952:62;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6944:110;;;;-1:-1:-1;;;6944:110:1;;20965:2:30;6944:110:1;;;20947:21:30;21004:2;20984:18;;;20977:30;21043:34;21023:18;;;21016:62;-1:-1:-1;;;21094:18:30;;;21087:33;21137:19;;6944:110:1;20763:399:30;7671:628:19;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;-1:-1:-1;;;;;1702:19:19;;;8113:60;;;;-1:-1:-1;;;8113:60:19;;21369:2:30;8113:60:19;;;21351:21:30;21408:2;21388:18;;;21381:30;21447:31;21427:18;;;21420:59;21496:18;;8113:60:19;21167:353:30;8113:60:19;-1:-1:-1;8208:10:19;8201:17;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;6040:145:11:-;6115:13;;:::i;:::-;6143:37;6154:3;6159;:7;;;:14;6175:4;6143:10;:37::i;9894:177::-;9998:13;;:::i;:::-;10026:40;10035:3;10040;:7;;;:14;10056:4;10062:3;10026:8;:40::i;2745:1210::-;2867:13;;:::i;:::-;2903:4;:11;2896:3;:18;;2888:27;;;;;;2938:12;;;;2926:9;2932:3;2926;:9;:::i;:::-;:24;2922:90;;;2960:45;2967:3;2972:28;2976:3;:12;;;2996:3;2990;:9;;;;:::i;:::-;2972:3;:28::i;:::-;:32;;3003:1;2972:32;:::i;:::-;2960:6;:45::i;:::-;3018:12;3036:11;3133:3;3127:10;3204:6;3198:13;3320:3;3315:2;3307:6;3303:15;3299:25;3291:33;;3404:6;3398:3;3393;3389:13;3386:25;3383:76;;;3446:3;3441;3437:13;3429:6;3422:29;3383:76;-1:-1:-1;;;3483:2:11;3473:13;;3544:129;3558:2;3551:3;:9;3544:129;;3613:10;;3600:24;;3639:10;3647:2;3607:4;3639:10;:::i;:::-;;-1:-1:-1;3657:9:11;3664:2;3657:9;;:::i;:::-;;-1:-1:-1;3562:9:11;3569:2;3562:9;;:::i;:::-;;;3544:129;;;3807:10;3858:11;;-1:-1:-1;;3747:2:11;:8;;;3741:3;:15;3740:21;3854:22;;;3819:9;;3803:26;;;;3898:21;3885:35;;-1:-1:-1;3947:3:11;2745:1210;;;;;;:::o;8821:540:19:-;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:19;;;;;;;;:::i;5148:639:11:-;5251:13;;:::i;:::-;5283:3;:12;;;5276:3;:19;5272:69;;5305:29;5312:3;5317;:12;;;5332:1;5317:16;;;;:::i;5305:29::-;5427:3;5421:10;5498:6;5492:13;5610:2;5604:3;5596:6;5592:16;5588:25;5634:4;5628;5620:19;;5705:6;5700:3;5697:15;5694:67;;5750:1;5742:6;5738:14;5730:6;5723:30;5694:67;-1:-1:-1;5779:3:11;;5148:639;-1:-1:-1;;;;5148:639:11:o;8974:675::-;9093:13;;:::i;:::-;9130:12;;;;9118:9;9124:3;9118;:9;:::i;:::-;:24;9114:73;;;9152:28;9159:3;9165:9;9171:3;9165;:9;:::i;9152:28::-;9193:12;9221:1;9209:8;9214:3;9209;:8;:::i;:::-;9208:14;;;;:::i;:::-;9193:29;;9308:3;9302:10;9423:3;9417;9409:6;9405:16;9401:26;9479:4;9471;9467:9;9460:4;9454:11;9450:27;9447:37;9441:4;9434:51;;9567:6;9561:13;9555:3;9550;9546:13;9543:32;9540:83;;;9610:3;9605;9601:13;9593:6;9586:29;9540:83;-1:-1:-1;9641:3:11;;8974:675;-1:-1:-1;;;;;8974:675:11:o;1961:124::-;2018:7;2041:1;2037;:5;2033:34;;;-1:-1:-1;2059:1:11;2052:8;;2033:34;-1:-1:-1;2079:1:11;1961:124;-1:-1:-1;1961:124:11:o;1801:156::-;1895:7;;1908:19;1895:3;1918:8;1908:4;:19::i;:::-;;1933;1940:3;1945:6;1933;:19::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:286:30:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:30;;209:43;;199:71;;266:1;263;256:12;497:127;558:10;553:3;549:20;546:1;539:31;589:4;586:1;579:15;613:4;610:1;603:15;629:989;706:6;714;767:2;755:9;746:7;742:23;738:32;735:52;;;783:1;780;773:12;735:52;806:23;;;-1:-1:-1;880:2:30;865:18;;852:32;-1:-1:-1;;;;;933:14:30;;;930:34;;;960:1;957;950:12;930:34;998:6;987:9;983:22;973:32;;1043:7;1036:4;1032:2;1028:13;1024:27;1014:55;;1065:1;1062;1055:12;1014:55;1101:2;1088:16;1123:2;1119;1116:10;1113:36;;;1129:18;;:::i;:::-;1204:2;1198:9;1172:2;1258:13;;-1:-1:-1;;1254:22:30;;;1278:2;1250:31;1246:40;1234:53;;;1302:18;;;1322:22;;;1299:46;1296:72;;;1348:18;;:::i;:::-;1388:10;1384:2;1377:22;1423:2;1415:6;1408:18;1463:7;1458:2;1453;1449;1445:11;1441:20;1438:33;1435:53;;;1484:1;1481;1474:12;1435:53;1540:2;1535;1531;1527:11;1522:2;1514:6;1510:15;1497:46;1585:1;1580:2;1575;1567:6;1563:15;1559:24;1552:35;1606:6;1596:16;;;;;;;629:989;;;;;:::o;1623:173::-;1691:20;;-1:-1:-1;;;;;1740:31:30;;1730:42;;1720:70;;1786:1;1783;1776:12;1720:70;1623:173;;;:::o;1801:328::-;1878:6;1886;1894;1947:2;1935:9;1926:7;1922:23;1918:32;1915:52;;;1963:1;1960;1953:12;1915:52;1986:29;2005:9;1986:29;:::i;:::-;1976:39;;2034:38;2068:2;2057:9;2053:18;2034:38;:::i;:::-;2024:48;;2119:2;2108:9;2104:18;2091:32;2081:42;;1801:328;;;;;:::o;2134:180::-;2193:6;2246:2;2234:9;2225:7;2221:23;2217:32;2214:52;;;2262:1;2259;2252:12;2214:52;-1:-1:-1;2285:23:30;;2134:180;-1:-1:-1;2134:180:30:o;2501:203::-;-1:-1:-1;;;;;2665:32:30;;;;2647:51;;2635:2;2620:18;;2501:203::o;2709:254::-;2777:6;2785;2838:2;2826:9;2817:7;2813:23;2809:32;2806:52;;;2854:1;2851;2844:12;2806:52;2890:9;2877:23;2867:33;;2919:38;2953:2;2942:9;2938:18;2919:38;:::i;:::-;2909:48;;2709:254;;;;;:::o;3150:248::-;3218:6;3226;3279:2;3267:9;3258:7;3254:23;3250:32;3247:52;;;3295:1;3292;3285:12;3247:52;-1:-1:-1;;3318:23:30;;;3388:2;3373:18;;;3360:32;;-1:-1:-1;3150:248:30:o;3403:186::-;3462:6;3515:2;3503:9;3494:7;3490:23;3486:32;3483:52;;;3531:1;3528;3521:12;3483:52;3554:29;3573:9;3554:29;:::i;3779:250::-;3864:1;3874:113;3888:6;3885:1;3882:13;3874:113;;;3964:11;;;3958:18;3945:11;;;3938:39;3910:2;3903:10;3874:113;;;-1:-1:-1;;4021:1:30;4003:16;;3996:27;3779:250::o;4034:271::-;4076:3;4114:5;4108:12;4141:6;4136:3;4129:19;4157:76;4226:6;4219:4;4214:3;4210:14;4203:4;4196:5;4192:16;4157:76;:::i;:::-;4287:2;4266:15;-1:-1:-1;;4262:29:30;4253:39;;;;4294:4;4249:50;;4034:271;-1:-1:-1;;4034:271:30:o;4310:220::-;4459:2;4448:9;4441:21;4422:4;4479:45;4520:2;4509:9;4505:18;4497:6;4479:45;:::i;4535:486::-;4619:6;4627;4635;4643;4696:3;4684:9;4675:7;4671:23;4667:33;4664:53;;;4713:1;4710;4703:12;4664:53;4736:29;4755:9;4736:29;:::i;:::-;4726:39;;4784:38;4818:2;4807:9;4803:18;4784:38;:::i;:::-;4774:48;;4869:2;4858:9;4854:18;4841:32;4831:42;;4923:2;4912:9;4908:18;4895:32;4967:4;4960:5;4956:16;4949:5;4946:27;4936:55;;4987:1;4984;4977:12;4936:55;4535:486;;;;-1:-1:-1;4535:486:30;;-1:-1:-1;;4535:486:30:o;5026:404::-;5228:2;5210:21;;;5267:2;5247:18;;;5240:30;5306:34;5301:2;5286:18;;5279:62;-1:-1:-1;;;5372:2:30;5357:18;;5350:38;5420:3;5405:19;;5026:404::o;5435:380::-;5514:1;5510:12;;;;5557;;;5578:61;;5632:4;5624:6;5620:17;5610:27;;5578:61;5685:2;5677:6;5674:14;5654:18;5651:38;5648:161;;5731:10;5726:3;5722:20;5719:1;5712:31;5766:4;5763:1;5756:15;5794:4;5791:1;5784:15;5945:544;6046:2;6041:3;6038:11;6035:448;;;6082:1;6107:5;6103:2;6096:17;6152:4;6148:2;6138:19;6222:2;6210:10;6206:19;6203:1;6199:27;6193:4;6189:38;6258:4;6246:10;6243:20;6240:47;;;-1:-1:-1;6281:4:30;6240:47;6336:2;6331:3;6327:12;6324:1;6320:20;6314:4;6310:31;6300:41;;6391:82;6409:2;6402:5;6399:13;6391:82;;;6454:17;;;6435:1;6424:13;6391:82;;6665:1348;6783:10;;-1:-1:-1;;;;;6805:30:30;;6802:56;;;6838:18;;:::i;:::-;6867:96;6956:6;6916:38;6948:4;6942:11;6916:38;:::i;:::-;6910:4;6867:96;:::i;:::-;7018:4;;7082:2;7071:14;;7099:1;7094:662;;;;7800:1;7817:6;7814:89;;;-1:-1:-1;7869:19:30;;;7863:26;7814:89;-1:-1:-1;;6622:1:30;6618:11;;;6614:24;6610:29;6600:40;6646:1;6642:11;;;6597:57;7916:81;;7064:943;;7094:662;5892:1;5885:14;;;5929:4;5916:18;;-1:-1:-1;;7130:20:30;;;7247:236;7261:7;7258:1;7255:14;7247:236;;;7350:19;;;7344:26;7329:42;;7442:27;;;;7410:1;7398:14;;;;7277:19;;7247:236;;;7251:3;7511:6;7502:7;7499:19;7496:201;;;7572:19;;;7566:26;-1:-1:-1;;7655:1:30;7651:14;;;7667:3;7647:24;7643:37;7639:42;7624:58;7609:74;;7496:201;-1:-1:-1;;;;;7743:1:30;7727:14;;;7723:22;7710:36;;-1:-1:-1;6665:1348:30:o;8018:197::-;8059:3;8097:5;8091:12;8112:65;8170:6;8165:3;8158:4;8151:5;8147:16;8112:65;:::i;:::-;8193:16;;;;;8018:197;-1:-1:-1;;8018:197:30:o;8220:287::-;8349:3;8387:6;8381:13;8403:66;8462:6;8457:3;8450:4;8442:6;8438:17;8403:66;:::i;:::-;8485:16;;;;;8220:287;-1:-1:-1;;8220:287:30:o;8512:1196::-;-1:-1:-1;;;;;;;;;;;9067:3:30;9060:47;-1:-1:-1;;;9132:2:30;9127:3;9123:12;9116:36;9042:3;9181:6;9175:13;9197:73;9263:6;9258:2;9253:3;9249:12;9244:2;9236:6;9232:15;9197:73;:::i;:::-;-1:-1:-1;;;9329:2:30;9289:16;;;9321:11;;;9314:28;9367:13;;9389:74;9367:13;9449:2;9441:11;;9436:2;9424:15;;9389:74;:::i;:::-;-1:-1:-1;;;9523:2:30;9482:17;;;;9515:11;;;9508:31;9564:13;;9586:74;9564:13;9646:2;9638:11;;9633:2;9621:15;;9586:74;:::i;:::-;9680:17;9699:2;9676:26;;8512:1196;-1:-1:-1;;;;;8512:1196:30:o;9843:1304::-;10203:66;10198:3;10191:79;10173:3;10289:2;10329:50;10325:2;10321:59;10316:2;10311:3;10307:12;10300:81;10400:2;10422:1;10455:6;10449:13;10485:36;10511:9;10485:36;:::i;:::-;10540:1;10557:18;;;10584:151;;;;10749:1;10744:347;;;;10550:541;;10584:151;-1:-1:-1;;10626:24:30;;10612:12;;;10605:46;10703:14;;10696:22;10684:35;;10675:45;;10671:54;;;-1:-1:-1;10584:151:30;;10744:347;10775:6;10772:1;10765:17;10823:2;10820:1;10810:16;10848:1;10862:174;10876:6;10873:1;10870:13;10862:174;;;10963:14;;10945:11;;;10941:20;;10934:44;11006:16;;;;10891:10;;10862:174;;;10866:3;;11078:2;11069:6;11064:3;11060:16;11056:25;11049:32;;10550:541;-1:-1:-1;;;;;9778:27:30;;-1:-1:-1;;9830:1:30;9821:11;;11100:41;-1:-1:-1;;;;;9843:1304:30:o;12020:127::-;12081:10;12076:3;12072:20;12069:1;12062:31;12112:4;12109:1;12102:15;12136:4;12133:1;12126:15;12152:135;12191:3;12212:17;;;12209:43;;12232:18;;:::i;:::-;-1:-1:-1;12279:1:30;12268:13;;12152:135::o;12292:184::-;12362:6;12415:2;12403:9;12394:7;12390:23;12386:32;12383:52;;;12431:1;12428;12421:12;12383:52;-1:-1:-1;12454:16:30;;12292:184;-1:-1:-1;12292:184:30:o;12481:274::-;-1:-1:-1;;;;;12673:32:30;;;;12655:51;;12737:2;12722:18;;12715:34;12643:2;12628:18;;12481:274::o;12760:277::-;12827:6;12880:2;12868:9;12859:7;12855:23;12851:32;12848:52;;;12896:1;12893;12886:12;12848:52;12928:9;12922:16;12981:5;12974:13;12967:21;12960:5;12957:32;12947:60;;13003:1;13000;12993:12;13842:1909;-1:-1:-1;;;;;;;;;;;14796:3:30;14789:47;-1:-1:-1;;;14861:2:30;14856:3;14852:12;14845:35;14771:3;14909:6;14903:13;14925:73;14991:6;14986:2;14981:3;14977:12;14972:2;14964:6;14960:15;14925:73;:::i;:::-;-1:-1:-1;;;15057:2:30;15017:16;;;15049:11;;;15042:28;15095:13;;15117:74;15095:13;15177:2;15169:11;;15164:2;15152:15;;15117:74;:::i;:::-;-1:-1:-1;;;15251:2:30;15210:17;;;;15243:11;;;15236:31;15292:13;;15314:74;15292:13;15374:2;15366:11;;15361:2;15349:15;;15314:74;:::i;:::-;-1:-1:-1;;;15448:2:30;15407:17;;;;15440:11;;;15433:29;15487:13;;15509:74;15487:13;15569:2;15561:11;;15556:2;15544:15;;15509:74;:::i;:::-;-1:-1:-1;;;15643:2:30;15602:17;;;;15635:11;;;15628:33;15677:68;15707:37;15740:2;15732:11;;15724:6;15707:37;:::i;:::-;-1:-1:-1;;;13767:36:30;;13828:2;13819:12;;13702:135;15677:68;15670:75;13842:1909;-1:-1:-1;;;;;;;;13842:1909:30:o;16591:812::-;-1:-1:-1;;;16997:3:30;16990:38;16972:3;17057:6;17051:13;17073:75;17141:6;17136:2;17131:3;17127:12;17120:4;17112:6;17108:17;17073:75;:::i;:::-;-1:-1:-1;;;17207:2:30;17167:16;;;17199:11;;;17192:40;17257:13;;17279:76;17257:13;17341:2;17333:11;;17326:4;17314:17;;17279:76;:::i;:::-;17375:17;17394:2;17371:26;;16591:812;-1:-1:-1;;;;16591:812:30:o;17408:168::-;17481:9;;;17512;;17529:15;;;17523:22;;17509:37;17499:71;;17550:18;;:::i;17581:125::-;17646:9;;;17667:10;;;17664:36;;;17680:18;;:::i;17711:127::-;17772:10;17767:3;17763:20;17760:1;17753:31;17803:4;17800:1;17793:15;17827:4;17824:1;17817:15;17843:136;17882:3;17910:5;17900:39;;17919:18;;:::i;:::-;-1:-1:-1;;;17955:18:30;;17843:136::o;18345:822::-;-1:-1:-1;;;;;18746:15:30;;;18728:34;;18793:2;18778:18;;18771:34;;;18836:2;18821:18;;18814:34;;;18884:15;;18879:2;18864:18;;18857:43;-1:-1:-1;;;;;;18937:33:30;;18931:3;18916:19;;18909:62;18708:3;18987:19;;18980:35;;;19046:3;19031:19;;19024:35;;;18678:3;18953;19075:19;;19068:31;;;18649:4;;19116:45;19142:18;;;19134:6;19116:45;:::i;:::-;19108:53;18345:822;-1:-1:-1;;;;;;;;;;;18345:822:30:o;19172:128::-;19239:9;;;19260:11;;;19257:37;;;19274:18;;:::i;19305:127::-;19366:10;19361:3;19357:20;19354:1;19347:31;19397:4;19394:1;19387:15;19421:4;19418:1;19411:15;19844:209;19876:1;19902;19892:132;;19946:10;19941:3;19937:20;19934:1;19927:31;19981:4;19978:1;19971:15;20009:4;20006:1;19999:15;19892:132;-1:-1:-1;20038:9:30;;19844:209::o;20372:386::-;20604:1;20600;20595:3;20591:11;20587:19;20579:6;20575:32;20564:9;20557:51;20644:6;20639:2;20628:9;20624:18;20617:34;20687:2;20682;20671:9;20667:18;20660:30;20538:4;20707:45;20748:2;20737:9;20733:18;20725:6;20707:45;:::i;21525:422::-;21614:1;21657:5;21614:1;21671:270;21692:7;21682:8;21679:21;21671:270;;;21751:4;21747:1;21743:6;21739:17;21733:4;21730:27;21727:53;;;21760:18;;:::i;:::-;21810:7;21800:8;21796:22;21793:55;;;21830:16;;;;21793:55;21909:22;;;;21869:15;;;;21671:270;;;21675:3;21525:422;;;;;:::o;21952:806::-;22001:5;22031:8;22021:80;;-1:-1:-1;22072:1:30;22086:5;;22021:80;22120:4;22110:76;;-1:-1:-1;22157:1:30;22171:5;;22110:76;22202:4;22220:1;22215:59;;;;22288:1;22283:130;;;;22195:218;;22215:59;22245:1;22236:10;;22259:5;;;22283:130;22320:3;22310:8;22307:17;22304:43;;;22327:18;;:::i;:::-;-1:-1:-1;;22383:1:30;22369:16;;22398:5;;22195:218;;22497:2;22487:8;22484:16;22478:3;22472:4;22469:13;22465:36;22459:2;22449:8;22446:16;22441:2;22435:4;22432:12;22428:35;22425:77;22422:159;;;-1:-1:-1;22534:19:30;;;22566:5;;22422:159;22613:34;22638:8;22632:4;22613:34;:::i;:::-;22683:6;22679:1;22675:6;22671:19;22662:7;22659:32;22656:58;;;22694:18;;:::i;:::-;22732:20;;21952:806;-1:-1:-1;;;21952:806:30:o;22763:131::-;22823:5;22852:36;22879:8;22873:4;22852:36;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"2430200","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"679","ONE_INCH_ETH_ADDRESS()":"790","STRATEGIST_ROLE()":"infinite","SWAP_AUTHORIZED_ROLE()":"infinite","acceptOwnership()":"52660","addSubscriber(address)":"infinite","aggregationRouter()":"infinite","evacuateLinkTokens()":"infinite","fulfillQuoteRequest(bytes32,uint256)":"infinite","fulfillSwap()":"infinite","getRoleAdmin(bytes32)":"2503","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3091","isReadyToFulfillSwap()":"2915","lastQuotedDstToken()":"2955","lastQuotedSrcToken()":"2999","lastQuotedSrcTokenAmount()":"2449","lastSwapDstToken()":"2537","lastSwapSrcToken()":"2449","lastSwapSrcTokenAmount()":"2867","oneInchApiKey()":"infinite","owner()":"2773","quoteJobFee()":"infinite","quoteJobId()":"infinite","registerSwapCalldata(bytes32,bytes)":"infinite","removeSubscriber(address)":"infinite","renounceRole(bytes32,address)":"29127","requestQuote(address,address,uint256)":"infinite","requestSwap(address,address,uint256,uint8)":"infinite","revokeRole(bytes32,address)":"infinite","subscriberAt(uint256)":"5048","subscribersLength()":"2678","supportsInterface(bytes4)":"404","swapCalldataJobFee()":"infinite","swapCalldataJobId()":"infinite","transferOwnership(address)":"31162"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","ONE_INCH_ETH_ADDRESS()":"aaeafd56","STRATEGIST_ROLE()":"a378a324","SWAP_AUTHORIZED_ROLE()":"4e0c6133","acceptOwnership()":"79ba5097","addSubscriber(address)":"94555d1a","aggregationRouter()":"fcdfd946","evacuateLinkTokens()":"5b949dd0","fulfillQuoteRequest(bytes32,uint256)":"459c75d8","fulfillSwap()":"eaad47b2","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isReadyToFulfillSwap()":"c0d2e37f","lastQuotedDstToken()":"c02e5bc7","lastQuotedSrcToken()":"c87457db","lastQuotedSrcTokenAmount()":"3662dd35","lastSwapDstToken()":"36868f0e","lastSwapSrcToken()":"271e390a","lastSwapSrcTokenAmount()":"b56269a0","oneInchApiKey()":"7aff3a0c","owner()":"8da5cb5b","quoteJobFee()":"53881b66","quoteJobId()":"7ec14de8","registerSwapCalldata(bytes32,bytes)":"02458ad8","removeSubscriber(address)":"627c34ad","renounceRole(bytes32,address)":"36568abe","requestQuote(address,address,uint256)":"1a5b4207","requestSwap(address,address,uint256,uint8)":"f09922ff","revokeRole(bytes32,address)":"d547741f","subscriberAt(uint256)":"6ccf5b01","subscribersLength()":"66b8455b","supportsInterface(bytes4)":"01ffc9a7","swapCalldataJobFee()":"a6ccef3e","swapCalldataJobId()":"2547db8d","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteJobFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapCalldataJobFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_quoteJobId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_swapCalldataJobId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregationRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_oneInchApiKey\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authorizedToSwap\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotAddSubscriber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveSubscriber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughNativeTokensSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageIsTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapOperationIsNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"QuoteReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"SwapPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"name\":\"SwapRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_INCH_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_AUTHORIZED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"addSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregationRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evacuateLinkTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"fulfillQuoteRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfillSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyToFulfillSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQuotedDstToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQuotedSrcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQuotedSrcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapDstToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapSrcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapSrcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchApiKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteJobFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteJobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"name\":\"registerSwapCalldata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"removeSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slippage\",\"type\":\"uint8\"}],\"name\":\"requestSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriberIdx\",\"type\":\"uint256\"}],\"name\":\"subscriberAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCalldataJobFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCalldataJobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SwapHelper.sol\":\"SwapHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapHelperSubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ISwapHelperSubscriber {\\r\\n    function notify(address src, address dst, uint256 amountOut, uint256 amountIn) external;\\r\\n}\",\"keccak256\":\"0x65749efd3c0d607b0d868f80ebaabdbbabdad3d77f6a9643834afef37a76fb7d\",\"license\":\"MIT\"},\"contracts/utils/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ISwapHelperSubscriber.sol\\\";\\r\\n\\r\\ncontract SwapHelper is AccessControl, ChainlinkClient, ConfirmedOwner {\\r\\n    using Address for address;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Chainlink for Chainlink.Request;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    error TransferError();\\r\\n    error SlippageIsTooBig();\\r\\n    error NotEnoughNativeTokensSent();\\r\\n    error CannotAddSubscriber();\\r\\n    error CannotRemoveSubscriber();\\r\\n    error SwapOperationIsNotReady();\\r\\n\\r\\n    event QuoteReceived(\\r\\n        address indexed src, \\r\\n        address indexed dst, \\r\\n        uint256 indexed amountOut, \\r\\n        uint256 amountIn\\r\\n    );\\r\\n    event SwapPerformed(\\r\\n        address indexed src, \\r\\n        address indexed dst, \\r\\n        uint256 indexed amountIn\\r\\n    );\\r\\n    event SwapRegistered(bytes indexed swapCalldata);\\r\\n\\r\\n    address public constant ONE_INCH_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    bytes32 public constant SWAP_AUTHORIZED_ROLE = keccak256(\\\"SWAP_AUTHORIZED_ROLE\\\");\\r\\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\\\"STRATEGIST_ROLE\\\");\\r\\n\\r\\n    address public immutable aggregationRouter; // 0x1111111254EEB25477B68fb85Ed929f73A960582\\r\\n\\r\\n    bytes32 public immutable quoteJobId; // Mumbai - a8356f48569c434eaa4ac5fcb4db5cc0\\t\\r\\n    uint256 public immutable quoteJobFee;\\r\\n\\r\\n    bytes32 public immutable swapCalldataJobId; // Mumbai - 8ced832954544a3c98543c94a51d6a8d\\r\\n    uint256 public immutable swapCalldataJobFee;\\r\\n\\r\\n    address public lastQuotedSrcToken;\\r\\n    address public lastQuotedDstToken;\\r\\n    uint256 public lastQuotedSrcTokenAmount;\\r\\n\\r\\n    address public lastSwapSrcToken;\\r\\n    address public lastSwapDstToken;\\r\\n    uint256 public lastSwapSrcTokenAmount;\\r\\n    bool public isReadyToFulfillSwap;\\r\\n    bytes internal _lastSwapCalldata;\\r\\n\\r\\n    string public oneInchApiKey;\\r\\n    EnumerableSet.AddressSet internal _subscribers;\\r\\n    \\r\\n    constructor(\\r\\n        uint256 _quoteJobFee,\\r\\n        uint256 _swapCalldataJobFee,\\r\\n        bytes32 _quoteJobId,\\r\\n        bytes32 _swapCalldataJobId,\\r\\n        address _strategist,\\r\\n        address _aggregationRouter,\\r\\n        address chainlinkTokenAddress, // Mumbai - 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\r\\n        address chainlinkOracleAddress, // Mumbai - 0x12A3d7759F745f4cb8EE8a647038c040cB8862A5\\r\\n        string memory _oneInchApiKey, // sc2uJVR5JYtl05ddY2Iryp9tq89jVjnh\\r\\n        address[] memory authorizedToSwap\\r\\n    )\\r\\n        ConfirmedOwner(_msgSender())\\r\\n    {\\r\\n        setChainlinkToken(chainlinkTokenAddress);\\r\\n        setChainlinkOracle(chainlinkOracleAddress);\\r\\n        quoteJobFee = _quoteJobFee; // SHOULD BE PART OF LINK_DIVISIBILITY CONSTANT\\r\\n        swapCalldataJobFee = _swapCalldataJobFee; // SHOULD BE PART OF LINK_DIVISIBILITY CONSTANT\\r\\n        quoteJobId = _quoteJobId;\\r\\n        swapCalldataJobId = _swapCalldataJobId;\\r\\n        oneInchApiKey = _oneInchApiKey;\\r\\n        aggregationRouter = _aggregationRouter;\\r\\n        for (uint8 i = 0; i < authorizedToSwap.length; i++) {\\r\\n            _grantRole(SWAP_AUTHORIZED_ROLE, authorizedToSwap[uint256(i)]);\\r\\n        }\\r\\n        _grantRole(STRATEGIST_ROLE, _strategist);\\r\\n    }\\r\\n\\r\\n    function addSubscriber(address subscriber) external onlyRole(STRATEGIST_ROLE) {\\r\\n        if (!_subscribers.add(subscriber)) {\\r\\n            revert CannotAddSubscriber();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSubscriber(address subscriber) external onlyRole(STRATEGIST_ROLE) {\\r\\n        if (!_subscribers.remove(subscriber)) {\\r\\n            revert CannotRemoveSubscriber();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function subscriberAt(uint256 subscriberIdx) external view returns (address) {\\r\\n        return _subscribers.at(subscriberIdx);\\r\\n    }\\r\\n\\r\\n    function subscribersLength() external view returns (uint256) {\\r\\n        return _subscribers.length();\\r\\n    }\\r\\n\\r\\n    function requestQuote(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(SWAP_AUTHORIZED_ROLE) {\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            quoteJobId,\\r\\n            address(this),\\r\\n            this.fulfillQuoteRequest.selector\\r\\n        );\\r\\n        req.add('method', 'GET');\\r\\n        req.add(\\r\\n            'url', \\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'https://api.1inch.dev/swap/v5.2/1/quote?src=', \\r\\n                    Strings.toHexString(src),\\r\\n                    \\\"&dst=\\\",\\r\\n                    Strings.toHexString(dst),\\r\\n                    \\\"&amount=\\\",\\r\\n                    Strings.toString(amount)\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        req.add('headers', string(abi.encodePacked(\\r\\n            '[\\\"accept\\\", \\\"application/json\\\", \\\"Authorization\\\", \\\"Bearer ',\\r\\n            oneInchApiKey,\\r\\n            '\\\"]'\\r\\n        )));\\r\\n        req.add('contact', 'numert');\\r\\n        req.add('path', \\\"toAmount\\\");\\r\\n        lastQuotedSrcToken = src;\\r\\n        lastQuotedDstToken = dst;\\r\\n        lastQuotedSrcTokenAmount = amount;\\r\\n        sendChainlinkRequest(req, quoteJobFee);\\r\\n    }\\r\\n\\r\\n    function fulfillQuoteRequest(\\r\\n        bytes32 requestId,\\r\\n        uint256 toAmount\\r\\n    ) public recordChainlinkFulfillment(requestId)  {\\r\\n        emit QuoteReceived(\\r\\n            lastQuotedSrcToken, \\r\\n            lastQuotedDstToken, \\r\\n            toAmount, \\r\\n            lastQuotedSrcTokenAmount\\r\\n        );\\r\\n        uint256 length = _subscribers.length(); \\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            ISwapHelperSubscriber(_subscribers.at(i)).notify(\\r\\n                lastQuotedSrcToken,\\r\\n                lastQuotedDstToken,\\r\\n                toAmount,\\r\\n                lastQuotedSrcTokenAmount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function requestSwap(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount,\\r\\n        uint8 slippage\\r\\n    ) external payable onlyRole(SWAP_AUTHORIZED_ROLE) {\\r\\n        if (slippage > 50) {\\r\\n            revert SlippageIsTooBig(); // A constraint dictated by 1inch Aggregation Protocol\\r\\n        }\\r\\n        if (src == ONE_INCH_ETH_ADDRESS && amount < msg.value) {\\r\\n            revert NotEnoughNativeTokensSent();\\r\\n        }\\r\\n        isReadyToFulfillSwap = false; // double check if the flag is down\\r\\n\\r\\n        IERC20 srcErc20 = IERC20(src);\\r\\n        if (srcErc20.allowance(address(this), aggregationRouter) < amount) {\\r\\n            srcErc20.approve(aggregationRouter, type(uint256).max);\\r\\n        }\\r\\n        \\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            swapCalldataJobId,\\r\\n            address(this),\\r\\n            this.registerSwapCalldata.selector\\r\\n        );\\r\\n        req.add('method', 'GET');\\r\\n        req.add(\\r\\n            'url', \\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'https://api.1inch.dev/swap/v5.2/1/swap?src=', \\r\\n                    Strings.toHexString(src),\\r\\n                    \\\"&dst=\\\",\\r\\n                    Strings.toHexString(dst),\\r\\n                    \\\"&amount=\\\",\\r\\n                    Strings.toString(amount),\\r\\n                    \\\"&from=\\\",\\r\\n                    Strings.toHexString(_msgSender()),\\r\\n                    \\\"&slippage=\\\",\\r\\n                    Strings.toString(slippage),\\r\\n                    \\\"&disableEstimate=true\\\"\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        req.add('headers', string(abi.encodePacked(\\r\\n            '[\\\"accept\\\", \\\"application/json\\\", \\\"Authorization\\\", \\\"Bearer ',\\r\\n            oneInchApiKey,\\r\\n            '\\\"]'\\r\\n        )));\\r\\n        req.add('contact', 'numert');\\r\\n        req.add('path', \\\"tx,data\\\");\\r\\n        lastSwapSrcToken = src;\\r\\n        lastSwapDstToken = dst;\\r\\n        lastSwapSrcTokenAmount = amount;\\r\\n        sendChainlinkRequest(req, swapCalldataJobFee);\\r\\n    }\\r\\n\\r\\n    function registerSwapCalldata(\\r\\n        bytes32 requestId,\\r\\n        bytes memory swapCalldata\\r\\n    ) public recordChainlinkFulfillment(requestId) {\\r\\n        _lastSwapCalldata = swapCalldata;\\r\\n        isReadyToFulfillSwap = true;\\r\\n        emit SwapRegistered(swapCalldata);\\r\\n    }\\r\\n\\r\\n    function fulfillSwap() external onlyRole(STRATEGIST_ROLE) {\\r\\n        if (!isReadyToFulfillSwap) {\\r\\n            revert SwapOperationIsNotReady();\\r\\n        }\\r\\n        if (lastSwapSrcToken == ONE_INCH_ETH_ADDRESS) {\\r\\n            aggregationRouter.functionCallWithValue(\\r\\n                _lastSwapCalldata,\\r\\n                lastSwapSrcTokenAmount\\r\\n            );\\r\\n        } else {\\r\\n            aggregationRouter.functionCall(_lastSwapCalldata);\\r\\n        }\\r\\n        emit SwapPerformed(\\r\\n            lastSwapSrcToken,\\r\\n            lastSwapDstToken,\\r\\n            lastSwapSrcTokenAmount\\r\\n        );\\r\\n        isReadyToFulfillSwap = false;\\r\\n    }\\r\\n\\r\\n    function evacuateLinkTokens() external onlyRole(STRATEGIST_ROLE) {\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        if (!link.transfer(msg.sender, link.balanceOf(address(this)))) {\\r\\n            revert TransferError();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x83221e252e0af0eaf4d82d8d224103d20332cd4485c4b673fb13f51ca34bc63b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2398,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)2393_storage)"},{"astId":319,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_ens","offset":0,"slot":"1","type":"t_contract(ENSInterface)1156"},{"astId":321,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_ensNode","offset":0,"slot":"2","type":"t_bytes32"},{"astId":324,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_link","offset":0,"slot":"3","type":"t_contract(LinkTokenInterface)1251"},{"astId":327,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_oracle","offset":0,"slot":"4","type":"t_contract(OperatorInterface)1331"},{"astId":330,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_requestCount","offset":0,"slot":"5","type":"t_uint256"},{"astId":334,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_pendingRequests","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_address)"},{"astId":889,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_owner","offset":0,"slot":"7","type":"t_address"},{"astId":891,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"s_pendingOwner","offset":0,"slot":"8","type":"t_address"},{"astId":5584,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastQuotedSrcToken","offset":0,"slot":"9","type":"t_address"},{"astId":5586,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastQuotedDstToken","offset":0,"slot":"10","type":"t_address"},{"astId":5588,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastQuotedSrcTokenAmount","offset":0,"slot":"11","type":"t_uint256"},{"astId":5590,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastSwapSrcToken","offset":0,"slot":"12","type":"t_address"},{"astId":5592,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastSwapDstToken","offset":0,"slot":"13","type":"t_address"},{"astId":5594,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"lastSwapSrcTokenAmount","offset":0,"slot":"14","type":"t_uint256"},{"astId":5596,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"isReadyToFulfillSwap","offset":0,"slot":"15","type":"t_bool"},{"astId":5598,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_lastSwapCalldata","offset":0,"slot":"16","type":"t_bytes_storage"},{"astId":5600,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"oneInchApiKey","offset":0,"slot":"17","type":"t_string_storage"},{"astId":5603,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_subscribers","offset":0,"slot":"18","type":"t_struct(AddressSet)5166_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(ENSInterface)1156":{"encoding":"inplace","label":"contract ENSInterface","numberOfBytes":"20"},"t_contract(LinkTokenInterface)1251":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"},"t_contract(OperatorInterface)1331":{"encoding":"inplace","label":"contract OperatorInterface","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_bytes32,t_struct(RoleData)2393_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)2393_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AddressSet)5166_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":5165,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4851_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)2393_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":2390,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":2392,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)4851_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":4846,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":4850,"contract":"contracts/utils/SwapHelper.sol:SwapHelper","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"version":1}}}}}}