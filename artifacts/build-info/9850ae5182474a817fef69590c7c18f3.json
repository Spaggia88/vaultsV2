{"id":"9850ae5182474a817fef69590c7c18f3","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"./ILayerZeroUserApplicationConfigUpgradeable.sol\";\n\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface ILayerZeroReceiverUpgradeable {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface ILayerZeroUserApplicationConfigUpgradeable {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../interfaces/ILayerZeroReceiverUpgradeable.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\";\nimport \"../interfaces/ILayerZeroEndpointUpgradeable.sol\";\nimport \"../../util/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\n        __Ownable_init_unchained();\n        __LzAppUpgradeable_init_unchained(_endpoint);\n    }\n\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\n    }\n\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) { // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _path;\n        emit SetTrustedRemote(_srcChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\n        require(_minGas > 0, \"LzApp: invalid minGas\");\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint[45] private __gap;\n}\n"},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"./LzAppUpgradeable.sol\";\nimport \"../../util/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\n    using ExcessivelySafeCall for address;\n\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\n        __Ownable_init_unchained();\n        __LzAppUpgradeable_init_unchained(_endpoint);\n    }\n\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\n        // try-catch all errors/exceptions\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint[49] private __gap;\n}\n"},"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"},"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/integrations/stargate/IStargate.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external;\n}\n\ninterface IStargateRouter {\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        LzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        LzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n\n    struct LzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n}\n"},"contracts/interfaces/ISgBridge.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface ISgBridge {\n    error TokenNotSupported(address token, uint16 destChainId);\n\n    event Bridge(uint16 indexed chainId, uint256 amount);\n\n    function initialize(address _router, uint16 _currentChainId) external;\n\n    function setRouter(address _router) external;\n\n    function setSlippage(uint256 _slippage) external;\n\n    function setDstGasForCall(uint256 _dstGasForCall) external;\n\n    function setCurrentChainId(uint16 _currentChainId) external;\n\n    function setStargatePoolId(\n        address _token,\n        uint16 _chainId,\n        uint256 _poolId\n    ) external;\n\n    function revokeFunds() external;\n\n    function bridge(\n        address _token,\n        uint256 _amount,\n        uint16 _destChainId,\n        address _destinationAddress,\n        bytes memory _message\n    ) external payable;\n\n    function feeForBridge(\n        uint16 _destChainId,\n        address _destinationContract,\n        bytes memory _payload\n    ) external view returns (uint256);\n}\n"},"contracts/interfaces/IStrategyMessages.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\ninterface IStrategyMessages {\n    enum MessageType {\n        WithdrawSomeRequest,\n        WithdrawSomeResponse,\n        StrategyReport,\n        AdjustPositionRequest,\n        MigrateStrategyRequest\n    }\n\n    struct WithdrawSomeRequest {\n        uint256 amount;\n        uint256 id;\n    }\n\n    struct WithdrawSomeResponse {\n        address source;\n        uint256 amount;\n        uint256 loss;\n        uint256 id;\n    }\n\n    struct StrategyReport {\n        address strategy;\n        uint256 timestamp;\n        uint256 profit;\n        uint256 loss;\n        uint256 debtPayment;\n        uint256 giveToStrategy;\n        uint256 requestFromStrategy;\n        uint256 creditAvailable;\n        uint256 totalAssets;\n        uint256 nonce;\n        bytes signature;\n    }\n\n    struct AdjustPositionRequest {\n        uint256 debtOutstanding;\n    }\n\n    struct MigrateStrategyRequest {\n        address newStrategy;\n    }\n}\n"},"contracts/interfaces/IVault.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct StrategyParams {\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n    uint256 lastReport;\n    uint256 performanceFee;\n    address strategist;\n}\n\nstruct WithdrawRequest {\n    address author;\n    address user;\n    uint256 shares;\n    uint256 maxLoss;\n    uint256 expected;\n    bool success;\n}\n\nstruct WithdrawEpoch {\n    WithdrawRequest[] requests;\n    bool inProgress;\n    uint256 approveExpected;\n    uint256 approveActual;\n    mapping(uint16 => mapping(address => bool)) approved;\n    mapping(uint16 => mapping(address => uint256)) requestedAmount;\n}\n\ninterface IVault {\n    error InsufficientFunds(uint256 amount, uint256 balance);\n\n    event SgReceived(address indexed token, uint256 amount, address sender);\n    event StrategyWithdrawnSome(\n        uint16 indexed chainId,\n        address indexed strategy,\n        uint256 amount,\n        uint256 loss,\n        uint256 id\n    );\n    event FulfilledWithdrawEpoch(uint256 epochId, uint256 requestCount);\n    event StrategyReported(\n        uint16 chainId,\n        address strategy,\n        uint256 gain,\n        uint256 loss,\n        uint256 debtPaid,\n        uint256 totalGain,\n        uint256 totalLoss,\n        uint256 totalDebt,\n        uint256 debtAdded,\n        uint256 debtRatio,\n        uint256 tokens\n    );\n\n    function initialize(\n        address _governance,\n        address _lzEndpoint,\n        IERC20 _token,\n        address _sgBridge,\n        address _sgRouter\n    ) external;\n\n    function token() external view returns (IERC20);\n\n    function revokeFunds() external;\n\n    function totalAssets() external view returns (uint256);\n\n    function deposit(\n        uint256 _amount,\n        address _recipient\n    ) external returns (uint256);\n\n    function withdraw(\n        uint256 _maxShares,\n        address _recipient,\n        uint256 _maxLoss\n    ) external;\n\n    function addStrategy(\n        uint16 _chainId,\n        address _strategy,\n        uint256 _debtRatio,\n        uint256 _performanceFee,\n        address _strategist\n    ) external;\n\n    function handleWithdrawals() external;\n\n    function pricePerShare() external view returns (uint256);\n\n    function revokeStrategy(uint16 _chainId, address _strategy) external;\n\n    function updateStrategyDebtRatio(\n        uint16 _chainId,\n        address _strategy,\n        uint256 _debtRatio\n    ) external;\n\n    function governance() external view returns (address);\n}\n"},"contracts/Vault.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {BytesLib, NonblockingLzAppUpgradeable} from \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\";\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport {ISgBridge} from \"./interfaces/ISgBridge.sol\";\nimport {IStargateReceiver} from \"./integrations/stargate/IStargate.sol\";\nimport {IStrategyMessages} from \"./interfaces/IStrategyMessages.sol\";\nimport {StrategyParams, WithdrawRequest, WithdrawEpoch, IVault} from \"./interfaces/IVault.sol\";\n\ncontract Vault is\n    Initializable,\n    ERC20Upgradeable,\n    NonblockingLzAppUpgradeable,\n    IVault,\n    IStrategyMessages,\n    IStargateReceiver\n{\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n    using BytesLib for bytes;\n\n    function initialize(\n        address _governance,\n        address _lzEndpoint,\n        IERC20 _token,\n        address _sgBridge,\n        address _sgRouter\n    ) external override initializer {\n        __NonblockingLzAppUpgradeable_init(_lzEndpoint);\n        __Ownable_init();\n        __ERC20_init(\"Omnichain Vault\", \"OMV\");\n\n        governance = _governance;\n        token = _token;\n        sgBridge = ISgBridge(_sgBridge);\n        sgRouter = _sgRouter;\n\n        token.approve(_sgBridge, type(uint256).max);\n    }\n\n    address public override governance;\n    IERC20 public override token;\n\n    ISgBridge public sgBridge;\n    uint256 public totalDebtRatio;\n    uint256 public totalDebt;\n    bool public emergencyShutdown;\n    mapping(uint16 => mapping(address => StrategyParams)) public strategies;\n    uint256 public withdrawEpoch;\n\n    mapping(uint16 => EnumerableSet.AddressSet) internal _strategiesByChainId;\n    EnumerableSet.UintSet internal _supportedChainIds;\n    mapping(uint256 => WithdrawEpoch) public withdrawEpochs;\n    mapping(uint16 => mapping(address => mapping(uint256 => bool)))\n        internal _usedNonces;\n\n    address public sgRouter;\n\n    modifier onlyAuthorized() {\n        require(msg.sender == governance || msg.sender == owner(), \"V1\");\n        _;\n    }\n\n    modifier isAction(uint16 _chainId, address _strategy) {\n        require(strategies[_chainId][_strategy].activation > 0, \"V2\");\n        _;\n    }\n\n    modifier nonAction(uint16 _chainId, address _strategy) {\n        require(strategies[_chainId][_strategy].activation == 0, \"V3\");\n        _;\n    }\n\n    modifier WithdrawInProgress() {\n        require(!withdrawEpochs[withdrawEpoch].inProgress, \"V4\");\n        _;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return ERC20Upgradeable(address(token)).decimals();\n    }\n\n    function revokeFunds() external override onlyAuthorized {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function setEmergencyShutdown(\n        bool _emergencyShutdown\n    ) external onlyAuthorized {\n        emergencyShutdown = _emergencyShutdown;\n    }\n\n    function setGovernance(address _newGovernance) external onlyAuthorized {\n        governance = _newGovernance;\n    }\n\n\n    function setStrategist(\n        uint16 _chainId,\n        address _strategy,\n        address _newStrategist\n    ) external onlyAuthorized {\n        strategies[_chainId][_strategy].strategist = _newStrategist;\n    }\n\n\n    function totalAssets() public view override returns (uint256) {\n        return totalDebt + totalIdle();\n    }\n\n    function totalIdle() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function deposit(\n        uint256 _amount,\n        address _recipient\n    ) external override returns (uint256) {\n        return _deposit(_amount, _recipient);\n    }\n\n    function withdraw(\n        uint256 _maxShares,\n        address _recipient,\n        uint256 _maxLoss\n    ) external override {\n        _initiateWithdraw(_maxShares, _recipient, _maxLoss);\n    }\n\n    function addStrategy(\n        uint16 _chainId,\n        address _strategy,\n        uint256 _debtRatio,\n        uint256 _performanceFee,\n        address _strategist\n    ) external override onlyAuthorized nonAction(_chainId, _strategy){\n        require(totalDebtRatio + _debtRatio <= 10_000, \"V5\");\n\n        strategies[_chainId][_strategy] = StrategyParams({\n            activation: block.timestamp,\n            debtRatio: _debtRatio,\n            totalDebt: 0,\n            totalGain: 0,\n            totalLoss: 0,\n            lastReport: 0,\n            performanceFee: _performanceFee,\n            strategist: _strategist\n        });\n\n        _strategiesByChainId[_chainId].add(_strategy);\n        _supportedChainIds.add(uint256(_chainId));\n        totalDebtRatio += _debtRatio;\n    }\n\n    function debtOutstanding(\n        uint16 _chainId,\n        address _strategy\n    ) external view returns (uint256) {\n        return _debtOutstanding(_chainId, _strategy);\n    }\n\n    function creditAvailable(\n        uint16 _chainId,\n        address _strategy\n    ) external view returns (uint256) {\n        return _creditAvailable(_chainId, _strategy);\n    }\n\n    function handleWithdrawals() external override onlyAuthorized WithdrawInProgress {\n\n        uint256 withdrawValue = 0;\n        for (\n            uint256 i = 0;\n            i < withdrawEpochs[withdrawEpoch].requests.length;\n            i++\n        ) {\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\n                .requests[i];\n            withdrawValue += _shareValue(request.shares);\n        }\n\n        if (withdrawValue <= totalIdle()) {\n            _fulfillWithdrawEpoch();\n            return;\n        }\n\n        uint256 amountNeeded = withdrawValue - totalIdle();\n        uint256 strategyRequested = 0;\n\n        for (\n            uint256 i = 0;\n            i < _supportedChainIds.length() && amountNeeded > 0;\n            i++\n        ) {\n            uint16 chainId = uint16(_supportedChainIds.at(i));\n            EnumerableSet.AddressSet\n                storage strategiesByChainId = _strategiesByChainId[chainId];\n\n            for (\n                uint256 j = 0;\n                j < strategiesByChainId.length() && amountNeeded > 0;\n                j++\n            ) {\n                address strategy = strategiesByChainId.at(j);\n                StrategyParams storage params = strategies[chainId][strategy];\n\n                if (params.totalDebt == 0) {\n                    continue;\n                }\n\n                uint256 strategyRequest = Math.min(\n                    amountNeeded,\n                    params.totalDebt\n                );\n                withdrawEpochs[withdrawEpoch].requestedAmount[chainId][\n                    strategy\n                ] = strategyRequest;\n                amountNeeded -= strategyRequest;\n\n                _sendMessageToStrategy(\n                    chainId,\n                    strategy,\n                    abi.encode(\n                        MessageType.WithdrawSomeRequest,\n                        WithdrawSomeRequest({\n                            id: withdrawEpoch,\n                            amount: strategyRequest\n                        })\n                    )\n                );\n                strategyRequested++;\n            }\n        }\n\n        withdrawEpochs[withdrawEpoch].approveExpected = strategyRequested;\n        withdrawEpochs[withdrawEpoch].inProgress = true;\n    }\n\n    function pricePerShare() external view override returns (uint256) {\n        return _shareValue(10 ** decimals());\n    }\n\n    function revokeStrategy(\n        uint16 _chainId,\n        address _strategy\n    ) external override onlyAuthorized {\n        _revokeStrategy(_chainId, _strategy);\n    }\n\n    function updateStrategyDebtRatio(\n        uint16 _chainId,\n        address _strategy,\n        uint256 _debtRatio\n    ) external override onlyAuthorized {\n        totalDebtRatio -= strategies[_chainId][_strategy].debtRatio;\n        strategies[_chainId][_strategy].debtRatio = _debtRatio;\n\n        require(totalDebtRatio + _debtRatio <= 10_000, \"V6\");\n        totalDebtRatio += _debtRatio;\n    }\n\n    function migrateStrategy(\n        uint16 _chainId,\n        address _oldStrategy,\n        address _newStrategy\n    ) external onlyAuthorized nonAction(_chainId, _newStrategy){\n        require(_newStrategy != address(0), \"V7\");\n\n        StrategyParams memory params = strategies[_chainId][_oldStrategy];\n        strategies[_chainId][_newStrategy] = StrategyParams({\n            activation: params.lastReport,\n            debtRatio: params.debtRatio,\n            totalDebt: params.totalDebt,\n            totalGain: 0,\n            totalLoss: 0,\n            lastReport: params.lastReport,\n            performanceFee: params.performanceFee,\n            strategist: params.strategist\n        });\n        strategies[_chainId][_oldStrategy].debtRatio = 0;\n        strategies[_chainId][_oldStrategy].totalDebt = 0;\n\n        _sendMessageToStrategy(\n            _chainId,\n            _oldStrategy,\n            abi.encode(\n                MessageType.MigrateStrategyRequest,\n                MigrateStrategyRequest({newStrategy: _newStrategy})\n            )\n        );\n    }\n\n    function sgReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint,\n        address _token,\n        uint256 _amountLD,\n        bytes memory _payload\n    ) external override {\n        require(_token == address(token), \"V8\");\n        require(\n            msg.sender == address(sgRouter) ||\n                msg.sender == address(sgBridge) ||\n                msg.sender == owner(),\n            \"V9\"\n        );\n\n        address srcAddress = address(\n            bytes20(abi.encodePacked(_srcAddress.slice(0, 20)))\n        );\n\n        _handlePayload(_srcChainId, _payload, _amountLD);\n\n        emit SgReceived(_token, _amountLD, srcAddress);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual override {\n        require(msg.sender == address(lzEndpoint), \"V10\");\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    function _deposit(\n        uint256 _amount,\n        address _recipient\n    ) internal returns (uint256) {\n        require(!emergencyShutdown, \"V11\");\n        uint256 shares = _issueSharesForAmount(_recipient, _amount);\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        return shares;\n    }\n\n    function _handlePayload(\n        uint16 _chainId,\n        bytes memory _payload,\n        uint256 _receivedTokens\n    ) internal {\n        MessageType messageType = abi.decode(_payload, (MessageType));\n        if (messageType == MessageType.StrategyReport) {\n            (, StrategyReport memory message) = abi.decode(\n                _payload,\n                (uint256, StrategyReport)\n            );\n            _handleStrategyReport(_chainId, message, _receivedTokens);\n        } else if (messageType == MessageType.WithdrawSomeResponse) {\n            (, WithdrawSomeResponse memory message) = abi.decode(\n                _payload,\n                (uint256, WithdrawSomeResponse)\n            );\n            _handleWithdrawSomeResponse(_chainId, message);\n        }\n    }\n\n    function _handleStrategyReport(\n        uint16 _chainId,\n        StrategyReport memory _message,\n        uint256 _receivedTokens\n    ) internal {\n        _verifySignature(_chainId, _message);\n\n        if (_message.loss > 0) {\n            _reportLoss(_chainId, _message.strategy, _message.loss);\n        }\n\n        strategies[_chainId][_message.strategy].totalGain += _message.profit;\n        uint256 debt = _debtOutstanding(_chainId, _message.strategy);\n        uint256 debtPayment = Math.min(debt, _message.debtPayment);\n\n        if (debtPayment > 0) {\n            strategies[_chainId][_message.strategy].totalDebt -= debtPayment;\n            totalDebt -= debtPayment;\n            debt -= debtPayment;\n        }\n\n        if (_message.creditAvailable > 0) {\n            strategies[_chainId][_message.strategy].totalDebt += _message\n                .creditAvailable;\n            totalDebt += _message.creditAvailable;\n        }\n\n        strategies[_chainId][_message.strategy].lastReport = _message.timestamp;\n\n        if (\n            strategies[_chainId][_message.strategy].debtRatio == 0 ||\n            emergencyShutdown\n        ) {\n            debt = _message.totalAssets;\n        }\n\n        if (_message.giveToStrategy > 0) {\n            _bridge(\n                _message.giveToStrategy,\n                _chainId,\n                _message.strategy,\n                abi.encode(\n                    MessageType.AdjustPositionRequest,\n                    AdjustPositionRequest({debtOutstanding: debt})\n                )\n            );\n        } else {\n            _sendMessageToStrategy(\n                _chainId,\n                _message.strategy,\n                abi.encode(\n                    MessageType.AdjustPositionRequest,\n                    AdjustPositionRequest({debtOutstanding: debt})\n                )\n            );\n        }\n\n        StrategyParams memory params = strategies[_chainId][_message.strategy];\n        emit StrategyReported(\n            _chainId,\n            _message.strategy,\n            _message.profit,\n            _message.loss,\n            _message.debtPayment,\n            params.totalGain,\n            params.totalLoss,\n            params.totalDebt,\n            _message.creditAvailable,\n            params.debtRatio,\n            _receivedTokens\n        );\n    }\n\n    function _reportLoss(\n        uint16 _chainId,\n        address _strategy,\n        uint256 _loss\n    ) internal {\n        require(strategies[_chainId][_strategy].totalDebt >= _loss, \"V12\");\n        strategies[_chainId][_strategy].totalLoss += _loss;\n        strategies[_chainId][_strategy].totalDebt -= _loss;\n        totalDebt -= _loss;\n    }\n\n    function _initiateWithdraw(\n        uint256 _shares,\n        address _recipient,\n        uint256 _maxLoss\n    ) internal WithdrawInProgress{\n\n        _transfer(msg.sender, address(this), _shares);\n        withdrawEpochs[withdrawEpoch].requests.push(\n            WithdrawRequest({\n                author: msg.sender,\n                user: _recipient,\n                shares: _shares,\n                maxLoss: _maxLoss,\n                expected: _shareValue(_shares),\n                success: false\n            })\n        );\n    }\n\n    function _shareValue(uint256 _shares) internal view returns (uint256) {\n        if (totalSupply() == 0) {\n            return _shares;\n        }\n        return (_shares * totalAssets()) / totalSupply();\n    }\n\n    function _issueSharesForAmount(\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / totalAssets();\n        }\n        require(shares > 0, \"V13\");\n        _mint(_to, shares);\n        return shares;\n    }\n\n    function _sendMessageToStrategy(\n        uint16 _chainId,\n        address _strategy,\n        bytes memory _payload\n    ) internal isAction(_chainId, _strategy) {\n\n        bytes memory remoteAndLocalAddresses = abi.encodePacked(\n            _strategy,\n            address(this)\n        );\n\n        (uint256 nativeFee, ) = lzEndpoint.estimateFees(\n            _chainId,\n            address(this),\n            _payload,\n            false,\n            _getAdapterParams()\n        );\n\n        if (address(this).balance < nativeFee) {\n            revert InsufficientFunds(nativeFee, address(this).balance);\n        }\n\n        lzEndpoint.send{value: nativeFee}(\n            _chainId,\n            remoteAndLocalAddresses,\n            _payload,\n            payable(address(this)),\n            address(this),\n            _getAdapterParams()\n        );\n    }\n\n    function _getAdapterParams() internal view virtual returns (bytes memory) {\n        uint16 version = 1;\n        uint256 gasForDestinationLzReceive = 1_000_000;\n        return abi.encodePacked(version, gasForDestinationLzReceive);\n    }\n\n    function _revokeStrategy(uint16 _chainId, address _strategy) internal {\n        totalDebtRatio -= strategies[_chainId][_strategy].debtRatio;\n        strategies[_chainId][_strategy].debtRatio = 0;\n    }\n\n    function _creditAvailable(\n        uint16 _chainId,\n        address _strategy\n    ) internal view returns (uint256) {\n        if (emergencyShutdown) {\n            return 0;\n        }\n\n        uint256 strategyDebtLimit = (strategies[_chainId][_strategy].debtRatio *\n            totalAssets()) / 10_000;\n        uint256 strategyTotalDebt = strategies[_chainId][_strategy].totalDebt;\n\n        if (strategyDebtLimit <= strategyTotalDebt) {\n            return 0;\n        }\n\n        return Math.min(totalIdle(), strategyDebtLimit - strategyTotalDebt);\n    }\n\n    function _debtOutstanding(\n        uint16 _chainId,\n        address _strategy\n    ) internal view returns (uint256) {\n        uint256 strategyDebtLimit = (strategies[_chainId][_strategy].debtRatio *\n            totalAssets()) / 10_000;\n        uint256 strategyTotalDebt = strategies[_chainId][_strategy].totalDebt;\n\n        if (emergencyShutdown) {\n            return strategyTotalDebt;\n        } else if (strategyTotalDebt <= strategyDebtLimit) {\n            return 0;\n        } else {\n            return strategyTotalDebt - strategyDebtLimit;\n        }\n    }\n\n    function _fulfillWithdrawEpoch() internal {\n        uint256 requestsLength = withdrawEpochs[withdrawEpoch].requests.length;\n        require(requestsLength > 0, \"V14\");\n\n        uint256[] memory shareValues = new uint256[](requestsLength);\n\n        for (uint256 i = 0; i < requestsLength; i++) {\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\n                .requests[i];\n            shareValues[i] = _shareValue(request.shares);\n        }\n\n        for (uint256 i = 0; i < requestsLength; i++) {\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\n                .requests[i];\n            uint256 valueToTransfer = Math.min(shareValues[i], totalIdle());\n\n            if (valueToTransfer < request.expected) {\n                uint256 diff = request.expected - valueToTransfer;\n                uint256 diffScaled = (diff * 10_000) / request.expected;\n\n                if (diffScaled > request.maxLoss) {\n                    request.success = false;\n                    this.transfer(request.author, request.shares);\n                    continue;\n                }\n            }\n\n            request.success = true;\n            token.safeTransfer(request.user, valueToTransfer);\n            _burn(address(this), request.shares);\n        }\n\n        emit FulfilledWithdrawEpoch(withdrawEpoch, requestsLength);\n\n        withdrawEpochs[withdrawEpoch].inProgress = false;\n        withdrawEpoch++;\n    }\n\n    function _handleWithdrawSomeResponse(\n        uint16 _chainId,\n        WithdrawSomeResponse memory _message\n    ) internal isAction(_chainId, _message.source){\n\n        if (_message.loss > 0) {\n            _reportLoss(_chainId, _message.source, _message.loss);\n        }\n        strategies[_chainId][_message.source].totalDebt -= _message.amount;\n        totalDebt -= _message.amount;\n\n        withdrawEpochs[_message.id].approveActual++;\n        withdrawEpochs[_message.id].approved[_chainId][_message.source] = true;\n        if (\n            withdrawEpochs[_message.id].approveExpected ==\n            withdrawEpochs[_message.id].approveActual\n        ) {\n            _fulfillWithdrawEpoch();\n        }\n\n        emit StrategyWithdrawnSome(\n            _chainId,\n            _message.source,\n            _message.amount,\n            _message.loss,\n            _message.id\n        );\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64,\n        bytes memory _payload\n    ) internal override {\n        address srcAddress = address(\n            bytes20(abi.encodePacked(_srcAddress.slice(0, 20)))\n        );\n        require(strategies[_srcChainId][srcAddress].activation > 0, \"V15\");\n\n        _handlePayload(_srcChainId, _payload, 0);\n    }\n\n    function _bridge(\n        uint256 _amount,\n        uint16 _destChainId,\n        address _dest,\n        bytes memory _payload\n    ) internal {\n        uint256 fee = sgBridge.feeForBridge(_destChainId, _dest, _payload);\n        sgBridge.bridge{value: fee}(\n            address(token),\n            _amount,\n            _destChainId,\n            _dest,\n            _payload\n        );\n    }\n\n    function _verifySignature(\n        uint16 _chainId,\n        StrategyReport memory _report\n    ) internal {\n        require(\n            _usedNonces[_chainId][_report.strategy][_report.nonce] == false,\n            \"V16\"\n        );\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_report.strategy, _report.nonce, _chainId)\n        );\n        bytes32 ethSignedMessageHash = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)\n        );\n        require(\n            ECDSA.recover(ethSignedMessageHash, _report.signature) ==\n                strategies[_chainId][_report.strategy].strategist,\n            \"V17\"\n        );\n\n        _usedNonces[_chainId][_report.strategy][_report.nonce] = true;\n    }\n\n    receive() external payable {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":10},"outputSelection":{"*":{"*":["storageLayout","abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true},"remappings":["@yearn-protocol/=lib/yearn-vaults/"]}},"output":{"sources":{"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol","exportedSymbols":{"ILayerZeroEndpointUpgradeable":[144],"ILayerZeroUserApplicationConfigUpgradeable":[189]},"id":145,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:0"},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol","file":"./ILayerZeroUserApplicationConfigUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":190,"src":"58:58:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3,"name":"ILayerZeroUserApplicationConfigUpgradeable","nameLocations":["161:42:0"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"161:42:0"},"id":4,"nodeType":"InheritanceSpecifier","src":"161:42:0"}],"canonicalName":"ILayerZeroEndpointUpgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":144,"linearizedBaseContracts":[144,189],"name":"ILayerZeroEndpointUpgradeable","nameLocation":"128:29:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c5803100","id":19,"implemented":false,"kind":"function","modifiers":[],"name":"send","nameLocation":"955:4:0","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6,"mutability":"mutable","name":"_dstChainId","nameLocation":"967:11:0","nodeType":"VariableDeclaration","scope":19,"src":"960:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5,"name":"uint16","nodeType":"ElementaryTypeName","src":"960:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8,"mutability":"mutable","name":"_destination","nameLocation":"995:12:0","nodeType":"VariableDeclaration","scope":19,"src":"980:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7,"name":"bytes","nodeType":"ElementaryTypeName","src":"980:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":10,"mutability":"mutable","name":"_payload","nameLocation":"1024:8:0","nodeType":"VariableDeclaration","scope":19,"src":"1009:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":9,"name":"bytes","nodeType":"ElementaryTypeName","src":"1009:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":12,"mutability":"mutable","name":"_refundAddress","nameLocation":"1050:14:0","nodeType":"VariableDeclaration","scope":19,"src":"1034:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"1034:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":14,"mutability":"mutable","name":"_zroPaymentAddress","nameLocation":"1074:18:0","nodeType":"VariableDeclaration","scope":19,"src":"1066:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"mutability":"mutable","name":"_adapterParams","nameLocation":"1109:14:0","nodeType":"VariableDeclaration","scope":19,"src":"1094:29:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":15,"name":"bytes","nodeType":"ElementaryTypeName","src":"1094:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"959:165:0"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1141:0:0"},"scope":144,"src":"946:196:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"c2fa4813","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"receivePayload","nameLocation":"1634:14:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"_srcChainId","nameLocation":"1656:11:0","nodeType":"VariableDeclaration","scope":34,"src":"1649:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":20,"name":"uint16","nodeType":"ElementaryTypeName","src":"1649:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"_srcAddress","nameLocation":"1684:11:0","nodeType":"VariableDeclaration","scope":34,"src":"1669:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":22,"name":"bytes","nodeType":"ElementaryTypeName","src":"1669:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"_dstAddress","nameLocation":"1705:11:0","nodeType":"VariableDeclaration","scope":34,"src":"1697:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"1697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"_nonce","nameLocation":"1725:6:0","nodeType":"VariableDeclaration","scope":34,"src":"1718:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":26,"name":"uint64","nodeType":"ElementaryTypeName","src":"1718:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"_gasLimit","nameLocation":"1738:9:0","nodeType":"VariableDeclaration","scope":34,"src":"1733:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28,"name":"uint","nodeType":"ElementaryTypeName","src":"1733:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":31,"mutability":"mutable","name":"_payload","nameLocation":"1764:8:0","nodeType":"VariableDeclaration","scope":34,"src":"1749:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":30,"name":"bytes","nodeType":"ElementaryTypeName","src":"1749:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1648:125:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1782:0:0"},"scope":144,"src":"1625:158:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fdc07c70","id":43,"implemented":false,"kind":"function","modifiers":[],"name":"getInboundNonce","nameLocation":"2019:15:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_srcChainId","nameLocation":"2042:11:0","nodeType":"VariableDeclaration","scope":43,"src":"2035:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":35,"name":"uint16","nodeType":"ElementaryTypeName","src":"2035:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_srcAddress","nameLocation":"2070:11:0","nodeType":"VariableDeclaration","scope":43,"src":"2055:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":37,"name":"bytes","nodeType":"ElementaryTypeName","src":"2055:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2034:48:0"},"returnParameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43,"src":"2106:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":40,"name":"uint64","nodeType":"ElementaryTypeName","src":"2106:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2105:8:0"},"scope":144,"src":"2010:104:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7a145748","id":52,"implemented":false,"kind":"function","modifiers":[],"name":"getOutboundNonce","nameLocation":"2289:16:0","nodeType":"FunctionDefinition","parameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"_dstChainId","nameLocation":"2313:11:0","nodeType":"VariableDeclaration","scope":52,"src":"2306:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":44,"name":"uint16","nodeType":"ElementaryTypeName","src":"2306:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":47,"mutability":"mutable","name":"_srcAddress","nameLocation":"2334:11:0","nodeType":"VariableDeclaration","scope":52,"src":"2326:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2305:41:0"},"returnParameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52,"src":"2370:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":49,"name":"uint64","nodeType":"ElementaryTypeName","src":"2370:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2369:8:0"},"scope":144,"src":"2280:98:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"40a7bb10","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"estimateFees","nameLocation":"2901:12:0","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"_dstChainId","nameLocation":"2921:11:0","nodeType":"VariableDeclaration","scope":69,"src":"2914:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":53,"name":"uint16","nodeType":"ElementaryTypeName","src":"2914:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"_userApplication","nameLocation":"2942:16:0","nodeType":"VariableDeclaration","scope":69,"src":"2934:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"2934:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"_payload","nameLocation":"2975:8:0","nodeType":"VariableDeclaration","scope":69,"src":"2960:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":57,"name":"bytes","nodeType":"ElementaryTypeName","src":"2960:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":60,"mutability":"mutable","name":"_payInZRO","nameLocation":"2990:9:0","nodeType":"VariableDeclaration","scope":69,"src":"2985:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":62,"mutability":"mutable","name":"_adapterParam","nameLocation":"3016:13:0","nodeType":"VariableDeclaration","scope":69,"src":"3001:28:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"3001:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2913:117:0"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"nativeFee","nameLocation":"3059:9:0","nodeType":"VariableDeclaration","scope":69,"src":"3054:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":64,"name":"uint","nodeType":"ElementaryTypeName","src":"3054:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"zroFee","nameLocation":"3075:6:0","nodeType":"VariableDeclaration","scope":69,"src":"3070:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint","nodeType":"ElementaryTypeName","src":"3070:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3053:29:0"},"scope":144,"src":"2892:191:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3408e470","id":74,"implemented":false,"kind":"function","modifiers":[],"name":"getChainId","nameLocation":"3161:10:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"3171:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":74,"src":"3197:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":71,"name":"uint16","nodeType":"ElementaryTypeName","src":"3197:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3196:8:0"},"scope":144,"src":"3152:53:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"aaff5f16","id":83,"implemented":false,"kind":"function","modifiers":[],"name":"retryPayload","nameLocation":"3471:12:0","nodeType":"FunctionDefinition","parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"_srcChainId","nameLocation":"3491:11:0","nodeType":"VariableDeclaration","scope":83,"src":"3484:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":75,"name":"uint16","nodeType":"ElementaryTypeName","src":"3484:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"_srcAddress","nameLocation":"3519:11:0","nodeType":"VariableDeclaration","scope":83,"src":"3504:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":77,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"_payload","nameLocation":"3547:8:0","nodeType":"VariableDeclaration","scope":83,"src":"3532:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":79,"name":"bytes","nodeType":"ElementaryTypeName","src":"3532:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3483:73:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[],"src":"3565:0:0"},"scope":144,"src":"3462:104:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0eaf6ea6","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"hasStoredPayload","nameLocation":"3778:16:0","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"_srcChainId","nameLocation":"3802:11:0","nodeType":"VariableDeclaration","scope":92,"src":"3795:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":84,"name":"uint16","nodeType":"ElementaryTypeName","src":"3795:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"_srcAddress","nameLocation":"3830:11:0","nodeType":"VariableDeclaration","scope":92,"src":"3815:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":86,"name":"bytes","nodeType":"ElementaryTypeName","src":"3815:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3794:48:0"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"3866:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":89,"name":"bool","nodeType":"ElementaryTypeName","src":"3866:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3865:6:0"},"scope":144,"src":"3769:103:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9c729da1","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"getSendLibraryAddress","nameLocation":"4030:21:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"_userApplication","nameLocation":"4060:16:0","nodeType":"VariableDeclaration","scope":99,"src":"4052:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"4052:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4051:26:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":99,"src":"4101:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"4101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4100:9:0"},"scope":144,"src":"4021:89:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"71ba2fd6","id":106,"implemented":false,"kind":"function","modifiers":[],"name":"getReceiveLibraryAddress","nameLocation":"4270:24:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"_userApplication","nameLocation":"4303:16:0","nodeType":"VariableDeclaration","scope":106,"src":"4295:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"4295:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4294:26:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":106,"src":"4344:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"4344:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4343:9:0"},"scope":144,"src":"4261:92:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e97a448a","id":111,"implemented":false,"kind":"function","modifiers":[],"name":"isSendingPayload","nameLocation":"4490:16:0","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"4506:2:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":111,"src":"4532:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":108,"name":"bool","nodeType":"ElementaryTypeName","src":"4532:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4531:6:0"},"scope":144,"src":"4481:57:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ca066b35","id":116,"implemented":false,"kind":"function","modifiers":[],"name":"isReceivingPayload","nameLocation":"4678:18:0","nodeType":"FunctionDefinition","parameters":{"id":112,"nodeType":"ParameterList","parameters":[],"src":"4696:2:0"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":116,"src":"4722:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":113,"name":"bool","nodeType":"ElementaryTypeName","src":"4722:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4721:6:0"},"scope":144,"src":"4669:59:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f5ecbdbc","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"5135:9:0","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"_version","nameLocation":"5152:8:0","nodeType":"VariableDeclaration","scope":129,"src":"5145:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":117,"name":"uint16","nodeType":"ElementaryTypeName","src":"5145:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"_chainId","nameLocation":"5169:8:0","nodeType":"VariableDeclaration","scope":129,"src":"5162:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":119,"name":"uint16","nodeType":"ElementaryTypeName","src":"5162:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"_userApplication","nameLocation":"5187:16:0","nodeType":"VariableDeclaration","scope":129,"src":"5179:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"5179:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"_configType","nameLocation":"5210:11:0","nodeType":"VariableDeclaration","scope":129,"src":"5205:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint","nodeType":"ElementaryTypeName","src":"5205:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5144:78:0"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":129,"src":"5246:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":126,"name":"bytes","nodeType":"ElementaryTypeName","src":"5246:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5245:14:0"},"scope":144,"src":"5126:134:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"096568f6","id":136,"implemented":false,"kind":"function","modifiers":[],"name":"getSendVersion","nameLocation":"5419:14:0","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"_userApplication","nameLocation":"5442:16:0","nodeType":"VariableDeclaration","scope":136,"src":"5434:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"5434:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5433:26:0"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"5483:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":133,"name":"uint16","nodeType":"ElementaryTypeName","src":"5483:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5482:8:0"},"scope":144,"src":"5410:81:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"da1a7c9a","id":143,"implemented":false,"kind":"function","modifiers":[],"name":"getReceiveVersion","nameLocation":"5655:17:0","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"_userApplication","nameLocation":"5681:16:0","nodeType":"VariableDeclaration","scope":143,"src":"5673:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"5673:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5672:26:0"},"returnParameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":143,"src":"5722:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":140,"name":"uint16","nodeType":"ElementaryTypeName","src":"5722:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5721:8:0"},"scope":144,"src":"5646:84:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":145,"src":"118:5614:0","usedErrors":[]}],"src":"33:5700:0"},"id":0},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol","exportedSymbols":{"ILayerZeroReceiverUpgradeable":[158]},"id":159,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":146,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"ILayerZeroReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":158,"linearizedBaseContracts":[158],"name":"ILayerZeroReceiverUpgradeable","nameLocation":"68:29:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"001d3567","id":157,"implemented":false,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"492:9:1","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"_srcChainId","nameLocation":"509:11:1","nodeType":"VariableDeclaration","scope":157,"src":"502:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":147,"name":"uint16","nodeType":"ElementaryTypeName","src":"502:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"_srcAddress","nameLocation":"537:11:1","nodeType":"VariableDeclaration","scope":157,"src":"522:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":149,"name":"bytes","nodeType":"ElementaryTypeName","src":"522:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"_nonce","nameLocation":"557:6:1","nodeType":"VariableDeclaration","scope":157,"src":"550:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":151,"name":"uint64","nodeType":"ElementaryTypeName","src":"550:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":154,"mutability":"mutable","name":"_payload","nameLocation":"580:8:1","nodeType":"VariableDeclaration","scope":157,"src":"565:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":153,"name":"bytes","nodeType":"ElementaryTypeName","src":"565:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"501:88:1"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[],"src":"598:0:1"},"scope":158,"src":"483:116:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":159,"src":"58:543:1","usedErrors":[]}],"src":"33:569:1"},"id":1},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol","exportedSymbols":{"ILayerZeroUserApplicationConfigUpgradeable":[189]},"id":190,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":160,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"ILayerZeroUserApplicationConfigUpgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":189,"linearizedBaseContracts":[189],"name":"ILayerZeroUserApplicationConfigUpgradeable","nameLocation":"68:42:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"cbed8b9c","id":171,"implemented":false,"kind":"function","modifiers":[],"name":"setConfig","nameLocation":"522:9:2","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"_version","nameLocation":"539:8:2","nodeType":"VariableDeclaration","scope":171,"src":"532:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":161,"name":"uint16","nodeType":"ElementaryTypeName","src":"532:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"_chainId","nameLocation":"556:8:2","nodeType":"VariableDeclaration","scope":171,"src":"549:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":163,"name":"uint16","nodeType":"ElementaryTypeName","src":"549:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"_configType","nameLocation":"571:11:2","nodeType":"VariableDeclaration","scope":171,"src":"566:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint","nodeType":"ElementaryTypeName","src":"566:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"_config","nameLocation":"599:7:2","nodeType":"VariableDeclaration","scope":171,"src":"584:22:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":167,"name":"bytes","nodeType":"ElementaryTypeName","src":"584:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"531:76:2"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"616:0:2"},"scope":189,"src":"513:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"07e0db17","id":176,"implemented":false,"kind":"function","modifiers":[],"name":"setSendVersion","nameLocation":"765:14:2","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"_version","nameLocation":"787:8:2","nodeType":"VariableDeclaration","scope":176,"src":"780:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":172,"name":"uint16","nodeType":"ElementaryTypeName","src":"780:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"779:17:2"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"805:0:2"},"scope":189,"src":"756:50:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"10ddb137","id":181,"implemented":false,"kind":"function","modifiers":[],"name":"setReceiveVersion","nameLocation":"959:17:2","nodeType":"FunctionDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"_version","nameLocation":"984:8:2","nodeType":"VariableDeclaration","scope":181,"src":"977:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":177,"name":"uint16","nodeType":"ElementaryTypeName","src":"977:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"976:17:2"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[],"src":"1002:0:2"},"scope":189,"src":"950:53:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42d65a8d","id":188,"implemented":false,"kind":"function","modifiers":[],"name":"forceResumeReceive","nameLocation":"1281:18:2","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"_srcChainId","nameLocation":"1307:11:2","nodeType":"VariableDeclaration","scope":188,"src":"1300:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":182,"name":"uint16","nodeType":"ElementaryTypeName","src":"1300:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"_srcAddress","nameLocation":"1335:11:2","nodeType":"VariableDeclaration","scope":188,"src":"1320:26:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":184,"name":"bytes","nodeType":"ElementaryTypeName","src":"1320:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1299:48:2"},"returnParameters":{"id":187,"nodeType":"ParameterList","parameters":[],"src":"1356:0:2"},"scope":189,"src":"1272:85:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":190,"src":"58:1301:2","usedErrors":[]}],"src":"33:1327:2"},"id":2},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"BytesLib":[1357],"ContextUpgradeable":[2842],"ILayerZeroEndpointUpgradeable":[144],"ILayerZeroReceiverUpgradeable":[158],"ILayerZeroUserApplicationConfigUpgradeable":[189],"Initializable":[1755],"LzAppUpgradeable":[762],"OwnableUpgradeable":[1586]},"id":763,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":191,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":763,"sourceUnit":1587,"src":"58:75:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol","file":"../interfaces/ILayerZeroReceiverUpgradeable.sol","id":193,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":763,"sourceUnit":159,"src":"134:57:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol","file":"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol","id":194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":763,"sourceUnit":190,"src":"192:70:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol","file":"../interfaces/ILayerZeroEndpointUpgradeable.sol","id":195,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":763,"sourceUnit":145,"src":"263:57:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol","file":"../../util/BytesLib.sol","id":196,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":763,"sourceUnit":1358,"src":"321:33:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":197,"name":"Initializable","nameLocations":["440:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"440:13:3"},"id":198,"nodeType":"InheritanceSpecifier","src":"440:13:3"},{"baseName":{"id":199,"name":"OwnableUpgradeable","nameLocations":["455:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":1586,"src":"455:18:3"},"id":200,"nodeType":"InheritanceSpecifier","src":"455:18:3"},{"baseName":{"id":201,"name":"ILayerZeroReceiverUpgradeable","nameLocations":["475:29:3"],"nodeType":"IdentifierPath","referencedDeclaration":158,"src":"475:29:3"},"id":202,"nodeType":"InheritanceSpecifier","src":"475:29:3"},{"baseName":{"id":203,"name":"ILayerZeroUserApplicationConfigUpgradeable","nameLocations":["506:42:3"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"506:42:3"},"id":204,"nodeType":"InheritanceSpecifier","src":"506:42:3"}],"canonicalName":"LzAppUpgradeable","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":762,"linearizedBaseContracts":[762,189,158,1586,2842,1755],"name":"LzAppUpgradeable","nameLocation":"420:16:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":207,"libraryName":{"id":205,"name":"BytesLib","nameLocations":["561:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1357,"src":"561:8:3"},"nodeType":"UsingForDirective","src":"555:25:3","typeName":{"id":206,"name":"bytes","nodeType":"ElementaryTypeName","src":"574:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"functionSelector":"c4461834","id":210,"mutability":"constant","name":"DEFAULT_PAYLOAD_SIZE_LIMIT","nameLocation":"705:26:3","nodeType":"VariableDeclaration","scope":762,"src":"684:55:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint","nodeType":"ElementaryTypeName","src":"684:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"734:5:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"public"},{"constant":false,"functionSelector":"b353aaa7","id":213,"mutability":"mutable","name":"lzEndpoint","nameLocation":"783:10:3","nodeType":"VariableDeclaration","scope":762,"src":"746:47:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"},"typeName":{"id":212,"nodeType":"UserDefinedTypeName","pathNode":{"id":211,"name":"ILayerZeroEndpointUpgradeable","nameLocations":["746:29:3"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"746:29:3"},"referencedDeclaration":144,"src":"746:29:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"visibility":"public"},{"constant":false,"functionSelector":"7533d788","id":217,"mutability":"mutable","name":"trustedRemoteLookup","nameLocation":"831:19:3","nodeType":"VariableDeclaration","scope":762,"src":"799:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes)"},"typeName":{"id":216,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":214,"name":"uint16","nodeType":"ElementaryTypeName","src":"807:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"799:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":215,"name":"bytes","nodeType":"ElementaryTypeName","src":"817:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"public"},{"constant":false,"functionSelector":"8cfd8f5c","id":223,"mutability":"mutable","name":"minDstGasLookup","nameLocation":"906:15:3","nodeType":"VariableDeclaration","scope":762,"src":"856:65:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"},"typeName":{"id":222,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":218,"name":"uint16","nodeType":"ElementaryTypeName","src":"864:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"856:42:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":221,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":219,"name":"uint16","nodeType":"ElementaryTypeName","src":"882:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"874:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":220,"name":"uint","nodeType":"ElementaryTypeName","src":"892:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"functionSelector":"3f1f4fa4","id":227,"mutability":"mutable","name":"payloadSizeLimitLookup","nameLocation":"958:22:3","nodeType":"VariableDeclaration","scope":762,"src":"927:53:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"},"typeName":{"id":226,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":224,"name":"uint16","nodeType":"ElementaryTypeName","src":"935:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"927:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":225,"name":"uint","nodeType":"ElementaryTypeName","src":"945:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"950c8a74","id":229,"mutability":"mutable","name":"precrime","nameLocation":"1001:8:3","nodeType":"VariableDeclaration","scope":762,"src":"986:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"986:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b","id":233,"name":"SetPrecrime","nameLocation":"1022:11:3","nodeType":"EventDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"indexed":false,"mutability":"mutable","name":"precrime","nameLocation":"1042:8:3","nodeType":"VariableDeclaration","scope":233,"src":"1034:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"1034:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1033:18:3"},"src":"1016:36:3"},{"anonymous":false,"eventSelector":"fa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab","id":239,"name":"SetTrustedRemote","nameLocation":"1063:16:3","nodeType":"EventDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"indexed":false,"mutability":"mutable","name":"_remoteChainId","nameLocation":"1087:14:3","nodeType":"VariableDeclaration","scope":239,"src":"1080:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":234,"name":"uint16","nodeType":"ElementaryTypeName","src":"1080:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":237,"indexed":false,"mutability":"mutable","name":"_path","nameLocation":"1109:5:3","nodeType":"VariableDeclaration","scope":239,"src":"1103:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":236,"name":"bytes","nodeType":"ElementaryTypeName","src":"1103:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1079:36:3"},"src":"1057:59:3"},{"anonymous":false,"eventSelector":"8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce","id":245,"name":"SetTrustedRemoteAddress","nameLocation":"1127:23:3","nodeType":"EventDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"indexed":false,"mutability":"mutable","name":"_remoteChainId","nameLocation":"1158:14:3","nodeType":"VariableDeclaration","scope":245,"src":"1151:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":240,"name":"uint16","nodeType":"ElementaryTypeName","src":"1151:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":243,"indexed":false,"mutability":"mutable","name":"_remoteAddress","nameLocation":"1180:14:3","nodeType":"VariableDeclaration","scope":245,"src":"1174:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":242,"name":"bytes","nodeType":"ElementaryTypeName","src":"1174:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1150:45:3"},"src":"1121:75:3"},{"anonymous":false,"eventSelector":"9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac0","id":253,"name":"SetMinDstGas","nameLocation":"1207:12:3","nodeType":"EventDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"indexed":false,"mutability":"mutable","name":"_dstChainId","nameLocation":"1227:11:3","nodeType":"VariableDeclaration","scope":253,"src":"1220:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":246,"name":"uint16","nodeType":"ElementaryTypeName","src":"1220:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":249,"indexed":false,"mutability":"mutable","name":"_type","nameLocation":"1247:5:3","nodeType":"VariableDeclaration","scope":253,"src":"1240:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":248,"name":"uint16","nodeType":"ElementaryTypeName","src":"1240:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":251,"indexed":false,"mutability":"mutable","name":"_minDstGas","nameLocation":"1259:10:3","nodeType":"VariableDeclaration","scope":253,"src":"1254:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint","nodeType":"ElementaryTypeName","src":"1254:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:51:3"},"src":"1201:70:3"},{"body":{"id":267,"nodeType":"Block","src":"1355:97:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":260,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1365:24:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1365:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":262,"nodeType":"ExpressionStatement","src":"1365:26:3"},{"expression":{"arguments":[{"id":264,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1435:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":263,"name":"__LzAppUpgradeable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1401:33:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1401:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":266,"nodeType":"ExpressionStatement","src":"1401:44:3"}]},"id":268,"implemented":true,"kind":"function","modifiers":[{"id":258,"kind":"modifierInvocation","modifierName":{"id":257,"name":"onlyInitializing","nameLocations":["1338:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"1338:16:3"},"nodeType":"ModifierInvocation","src":"1338:16:3"}],"name":"__LzAppUpgradeable_init","nameLocation":"1286:23:3","nodeType":"FunctionDefinition","parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"_endpoint","nameLocation":"1318:9:3","nodeType":"VariableDeclaration","scope":268,"src":"1310:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":254,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1309:19:3"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"1355:0:3"},"scope":762,"src":"1277:175:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":281,"nodeType":"Block","src":"1546:70:3","statements":[{"expression":{"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":275,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1556:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":277,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"1599:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":276,"name":"ILayerZeroEndpointUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"1569:29:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILayerZeroEndpointUpgradeable_$144_$","typeString":"type(contract ILayerZeroEndpointUpgradeable)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1569:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"src":"1556:53:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":280,"nodeType":"ExpressionStatement","src":"1556:53:3"}]},"id":282,"implemented":true,"kind":"function","modifiers":[{"id":273,"kind":"modifierInvocation","modifierName":{"id":272,"name":"onlyInitializing","nameLocations":["1529:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"1529:16:3"},"nodeType":"ModifierInvocation","src":"1529:16:3"}],"name":"__LzAppUpgradeable_init_unchained","nameLocation":"1467:33:3","nodeType":"FunctionDefinition","parameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"_endpoint","nameLocation":"1509:9:3","nodeType":"VariableDeclaration","scope":282,"src":"1501:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1500:19:3"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[],"src":"1546:0:3"},"scope":762,"src":"1458:158:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[157],"body":{"id":340,"nodeType":"Block","src":"1753:622:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":295,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1836:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1836:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":299,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1860:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}],"id":298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1852:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"1852:7:3","typeDescriptions":{}}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1852:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1836:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1873:32:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c76d352ff891dcabaed1e1ebf3c88e97f49052956ad0c09feadb4b7d40c688f9","typeString":"literal_string \"LzApp: invalid endpoint caller\""},"value":"LzApp: invalid endpoint caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c76d352ff891dcabaed1e1ebf3c88e97f49052956ad0c09feadb4b7d40c688f9","typeString":"literal_string \"LzApp: invalid endpoint caller\""}],"id":294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1828:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"1828:78:3"},{"assignments":[306],"declarations":[{"constant":false,"id":306,"mutability":"mutable","name":"trustedRemote","nameLocation":"1930:13:3","nodeType":"VariableDeclaration","scope":340,"src":"1917:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":305,"name":"bytes","nodeType":"ElementaryTypeName","src":"1917:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":310,"initialValue":{"baseExpression":{"id":307,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1946:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":309,"indexExpression":{"id":308,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"1966:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1946:32:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1917:61:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":312,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2128:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2140:6:3","memberName":"length","nodeType":"MemberAccess","src":"2128:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":314,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"2150:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2164:6:3","memberName":"length","nodeType":"MemberAccess","src":"2150:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2128:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":317,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"2174:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2188:6:3","memberName":"length","nodeType":"MemberAccess","src":"2174:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2197:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2174:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2128:70:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":323,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2212:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":322,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2202:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2202:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":326,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"2238:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":325,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2228:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2202:50:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2128:124:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6e7472616374","id":330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2254:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f2c5f1a596d749e8a7585a60b880c2626f8dc4e8dd0b6f11ae55e0b2b1061815","typeString":"literal_string \"LzApp: invalid source sending contract\""},"value":"LzApp: invalid source sending contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f2c5f1a596d749e8a7585a60b880c2626f8dc4e8dd0b6f11ae55e0b2b1061815","typeString":"literal_string \"LzApp: invalid source sending contract\""}],"id":311,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2120:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2120:175:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":332,"nodeType":"ExpressionStatement","src":"2120:175:3"},{"expression":{"arguments":[{"id":334,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"2325:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":335,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2338:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":336,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"2351:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":337,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"2359:8:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":333,"name":"_blockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"2306:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2306:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":339,"nodeType":"ExpressionStatement","src":"2306:62:3"}]},"functionSelector":"001d3567","id":341,"implemented":true,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"1631:9:3","nodeType":"FunctionDefinition","overrides":{"id":292,"nodeType":"OverrideSpecifier","overrides":[],"src":"1744:8:3"},"parameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":284,"mutability":"mutable","name":"_srcChainId","nameLocation":"1648:11:3","nodeType":"VariableDeclaration","scope":341,"src":"1641:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":283,"name":"uint16","nodeType":"ElementaryTypeName","src":"1641:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":286,"mutability":"mutable","name":"_srcAddress","nameLocation":"1676:11:3","nodeType":"VariableDeclaration","scope":341,"src":"1661:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":285,"name":"bytes","nodeType":"ElementaryTypeName","src":"1661:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"_nonce","nameLocation":"1696:6:3","nodeType":"VariableDeclaration","scope":341,"src":"1689:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":287,"name":"uint64","nodeType":"ElementaryTypeName","src":"1689:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":290,"mutability":"mutable","name":"_payload","nameLocation":"1719:8:3","nodeType":"VariableDeclaration","scope":341,"src":"1704:23:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":289,"name":"bytes","nodeType":"ElementaryTypeName","src":"1704:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1640:88:3"},"returnParameters":{"id":293,"nodeType":"ParameterList","parameters":[],"src":"1753:0:3"},"scope":762,"src":"1622:753:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":352,"implemented":false,"kind":"function","modifiers":[],"name":"_blockingLzReceive","nameLocation":"2533:18:3","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"_srcChainId","nameLocation":"2559:11:3","nodeType":"VariableDeclaration","scope":352,"src":"2552:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":342,"name":"uint16","nodeType":"ElementaryTypeName","src":"2552:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"_srcAddress","nameLocation":"2585:11:3","nodeType":"VariableDeclaration","scope":352,"src":"2572:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":344,"name":"bytes","nodeType":"ElementaryTypeName","src":"2572:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"_nonce","nameLocation":"2605:6:3","nodeType":"VariableDeclaration","scope":352,"src":"2598:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":346,"name":"uint64","nodeType":"ElementaryTypeName","src":"2598:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"_payload","nameLocation":"2626:8:3","nodeType":"VariableDeclaration","scope":352,"src":"2613:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":348,"name":"bytes","nodeType":"ElementaryTypeName","src":"2613:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2551:84:3"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"2652:0:3"},"scope":762,"src":"2524:129:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":400,"nodeType":"Block","src":"2842:365:3","statements":[{"assignments":[368],"declarations":[{"constant":false,"id":368,"mutability":"mutable","name":"trustedRemote","nameLocation":"2865:13:3","nodeType":"VariableDeclaration","scope":400,"src":"2852:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":367,"name":"bytes","nodeType":"ElementaryTypeName","src":"2852:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":372,"initialValue":{"baseExpression":{"id":369,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2881:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":371,"indexExpression":{"id":370,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"2901:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2881:32:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2852:61:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":374,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2931:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2945:6:3","memberName":"length","nodeType":"MemberAccess","src":"2931:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2955:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2931:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742061207472757374656420736f75726365","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2958:50:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_65511ce9fb02a17101879c9b581e54d0cddc37b781936a67d4a6ef307ad5afd7","typeString":"literal_string \"LzApp: destination chain is not a trusted source\""},"value":"LzApp: destination chain is not a trusted source"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_65511ce9fb02a17101879c9b581e54d0cddc37b781936a67d4a6ef307ad5afd7","typeString":"literal_string \"LzApp: destination chain is not a trusted source\""}],"id":373,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2923:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2923:86:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":380,"nodeType":"ExpressionStatement","src":"2923:86:3"},{"expression":{"arguments":[{"id":382,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"3037:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":383,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"3050:8:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3059:6:3","memberName":"length","nodeType":"MemberAccess","src":"3050:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":381,"name":"_checkPayloadSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"3019:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint16_$_t_uint256_$returns$__$","typeString":"function (uint16,uint256) view"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":386,"nodeType":"ExpressionStatement","src":"3019:47:3"},{"expression":{"arguments":[{"id":392,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"3111:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":393,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"3124:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":394,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"3139:8:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":395,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"3149:14:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":396,"name":"_zroPaymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"3165:18:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":397,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3185:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":387,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"3076:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3087:4:3","memberName":"send","nodeType":"MemberAccess","referencedDeclaration":19,"src":"3076:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":390,"name":"_nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"3099:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3076:34:3","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3076:124:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":399,"nodeType":"ExpressionStatement","src":"3076:124:3"}]},"id":401,"implemented":true,"kind":"function","modifiers":[],"name":"_lzSend","nameLocation":"2668:7:3","nodeType":"FunctionDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"_dstChainId","nameLocation":"2683:11:3","nodeType":"VariableDeclaration","scope":401,"src":"2676:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":353,"name":"uint16","nodeType":"ElementaryTypeName","src":"2676:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"_payload","nameLocation":"2709:8:3","nodeType":"VariableDeclaration","scope":401,"src":"2696:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":355,"name":"bytes","nodeType":"ElementaryTypeName","src":"2696:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"_refundAddress","nameLocation":"2735:14:3","nodeType":"VariableDeclaration","scope":401,"src":"2719:30:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2719:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"_zroPaymentAddress","nameLocation":"2759:18:3","nodeType":"VariableDeclaration","scope":401,"src":"2751:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"2751:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"_adapterParams","nameLocation":"2792:14:3","nodeType":"VariableDeclaration","scope":401,"src":"2779:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":361,"name":"bytes","nodeType":"ElementaryTypeName","src":"2779:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"_nativeFee","nameLocation":"2813:10:3","nodeType":"VariableDeclaration","scope":401,"src":"2808:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint","nodeType":"ElementaryTypeName","src":"2808:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2675:149:3"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[],"src":"2842:0:3"},"scope":762,"src":"2659:548:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":442,"nodeType":"Block","src":"3338:290:3","statements":[{"assignments":[413],"declarations":[{"constant":false,"id":413,"mutability":"mutable","name":"providedGasLimit","nameLocation":"3353:16:3","nodeType":"VariableDeclaration","scope":442,"src":"3348:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint","nodeType":"ElementaryTypeName","src":"3348:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":417,"initialValue":{"arguments":[{"id":415,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"3385:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":414,"name":"_getGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"3372:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3372:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3348:52:3"},{"assignments":[419],"declarations":[{"constant":false,"id":419,"mutability":"mutable","name":"minGasLimit","nameLocation":"3415:11:3","nodeType":"VariableDeclaration","scope":442,"src":"3410:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint","nodeType":"ElementaryTypeName","src":"3410:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":427,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":420,"name":"minDstGasLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3429:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"}},"id":422,"indexExpression":{"id":421,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"3445:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3429:28:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":424,"indexExpression":{"id":423,"name":"_type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"3458:5:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3429:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":425,"name":"_extraGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3467:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3429:47:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3410:66:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":429,"name":"minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"3494:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3508:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3494:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a206d696e4761734c696d6974206e6f7420736574","id":432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3511:28:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1c12f4398e5982835c19ea43197ffa859493a10bdc288c7cacc6a2d6df414b01","typeString":"literal_string \"LzApp: minGasLimit not set\""},"value":"LzApp: minGasLimit not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1c12f4398e5982835c19ea43197ffa859493a10bdc288c7cacc6a2d6df414b01","typeString":"literal_string \"LzApp: minGasLimit not set\""}],"id":428,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3486:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3486:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":434,"nodeType":"ExpressionStatement","src":"3486:54:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"providedGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"3558:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":437,"name":"minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"3578:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3558:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20676173206c696d697420697320746f6f206c6f77","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3591:29:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0cfbfb89d1bd60ee521649a7dce886710cc0992622f97b32d8e555a9c7073be1","typeString":"literal_string \"LzApp: gas limit is too low\""},"value":"LzApp: gas limit is too low"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0cfbfb89d1bd60ee521649a7dce886710cc0992622f97b32d8e555a9c7073be1","typeString":"literal_string \"LzApp: gas limit is too low\""}],"id":435,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3550:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3550:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"3550:71:3"}]},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"_checkGasLimit","nameLocation":"3222:14:3","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"_dstChainId","nameLocation":"3244:11:3","nodeType":"VariableDeclaration","scope":443,"src":"3237:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":402,"name":"uint16","nodeType":"ElementaryTypeName","src":"3237:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":405,"mutability":"mutable","name":"_type","nameLocation":"3264:5:3","nodeType":"VariableDeclaration","scope":443,"src":"3257:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":404,"name":"uint16","nodeType":"ElementaryTypeName","src":"3257:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"_adapterParams","nameLocation":"3284:14:3","nodeType":"VariableDeclaration","scope":443,"src":"3271:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":406,"name":"bytes","nodeType":"ElementaryTypeName","src":"3271:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"_extraGas","nameLocation":"3305:9:3","nodeType":"VariableDeclaration","scope":443,"src":"3300:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint","nodeType":"ElementaryTypeName","src":"3300:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3236:79:3"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"3338:0:3"},"scope":762,"src":"3213:415:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":459,"nodeType":"Block","src":"3731:169:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":451,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"3749:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3764:6:3","memberName":"length","nodeType":"MemberAccess","src":"3749:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3334","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3774:2:3","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"34"},"src":"3749:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c69642061646170746572506172616d73","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3778:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e109d210c1f1e494c2d731512d3fcc1ea597f69de36a4fccbe193d9ece27e6d","typeString":"literal_string \"LzApp: invalid adapterParams\""},"value":"LzApp: invalid adapterParams"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e109d210c1f1e494c2d731512d3fcc1ea597f69de36a4fccbe193d9ece27e6d","typeString":"literal_string \"LzApp: invalid adapterParams\""}],"id":450,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3741:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3741:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"3741:68:3"},{"AST":{"nodeType":"YulBlock","src":"3828:66:3","statements":[{"nodeType":"YulAssignment","src":"3842:42:3","value":{"arguments":[{"arguments":[{"name":"_adapterParams","nodeType":"YulIdentifier","src":"3864:14:3"},{"kind":"number","nodeType":"YulLiteral","src":"3880:2:3","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3860:3:3"},"nodeType":"YulFunctionCall","src":"3860:23:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3854:5:3"},"nodeType":"YulFunctionCall","src":"3854:30:3"},"variableNames":[{"name":"gasLimit","nodeType":"YulIdentifier","src":"3842:8:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":445,"isOffset":false,"isSlot":false,"src":"3864:14:3","valueSize":1},{"declaration":448,"isOffset":false,"isSlot":false,"src":"3842:8:3","valueSize":1}],"id":458,"nodeType":"InlineAssembly","src":"3819:75:3"}]},"id":460,"implemented":true,"kind":"function","modifiers":[],"name":"_getGasLimit","nameLocation":"3643:12:3","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":445,"mutability":"mutable","name":"_adapterParams","nameLocation":"3669:14:3","nodeType":"VariableDeclaration","scope":460,"src":"3656:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":444,"name":"bytes","nodeType":"ElementaryTypeName","src":"3656:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3655:29:3"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"gasLimit","nameLocation":"3721:8:3","nodeType":"VariableDeclaration","scope":460,"src":"3716:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":447,"name":"uint","nodeType":"ElementaryTypeName","src":"3716:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3715:15:3"},"scope":762,"src":"3634:266:3","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":489,"nodeType":"Block","src":"3994:295:3","statements":[{"assignments":[468],"declarations":[{"constant":false,"id":468,"mutability":"mutable","name":"payloadSizeLimit","nameLocation":"4009:16:3","nodeType":"VariableDeclaration","scope":489,"src":"4004:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":467,"name":"uint","nodeType":"ElementaryTypeName","src":"4004:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":472,"initialValue":{"baseExpression":{"id":469,"name":"payloadSizeLimitLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"4028:22:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":471,"indexExpression":{"id":470,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"4051:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4028:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4004:59:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":473,"name":"payloadSizeLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4077:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4097:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4077:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":481,"nodeType":"IfStatement","src":"4073:123:3","trueBody":{"id":480,"nodeType":"Block","src":"4100:96:3","statements":[{"expression":{"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":476,"name":"payloadSizeLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4140:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":477,"name":"DEFAULT_PAYLOAD_SIZE_LIMIT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"4159:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4140:45:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":479,"nodeType":"ExpressionStatement","src":"4140:45:3"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":483,"name":"_payloadSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"4213:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":484,"name":"payloadSizeLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4229:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4213:32:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4247:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_fdfeef12c0e20d028b50cab1ee288ba9867f56b726ecc8cd0c9ed3048ec177dd","typeString":"literal_string \"LzApp: payload size is too large\""},"value":"LzApp: payload size is too large"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fdfeef12c0e20d028b50cab1ee288ba9867f56b726ecc8cd0c9ed3048ec177dd","typeString":"literal_string \"LzApp: payload size is too large\""}],"id":482,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4205:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4205:77:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":488,"nodeType":"ExpressionStatement","src":"4205:77:3"}]},"id":490,"implemented":true,"kind":"function","modifiers":[],"name":"_checkPayloadSize","nameLocation":"3915:17:3","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"_dstChainId","nameLocation":"3940:11:3","nodeType":"VariableDeclaration","scope":490,"src":"3933:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":461,"name":"uint16","nodeType":"ElementaryTypeName","src":"3933:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"_payloadSize","nameLocation":"3958:12:3","nodeType":"VariableDeclaration","scope":490,"src":"3953:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint","nodeType":"ElementaryTypeName","src":"3953:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3932:39:3"},"returnParameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"3994:0:3"},"scope":762,"src":"3906:383:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"4508:92:3","statements":[{"expression":{"arguments":[{"id":505,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4546:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":506,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"4556:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"id":509,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4574:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_LzAppUpgradeable_$762","typeString":"contract LzAppUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LzAppUpgradeable_$762","typeString":"contract LzAppUpgradeable"}],"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4566:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"4566:7:3","typeDescriptions":{}}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4566:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":511,"name":"_configType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"4581:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":503,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"4525:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4536:9:3","memberName":"getConfig","nodeType":"MemberAccess","referencedDeclaration":129,"src":"4525:20:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_uint16_$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint16,uint16,address,uint256) view external returns (bytes memory)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4525:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":502,"id":513,"nodeType":"Return","src":"4518:75:3"}]},"functionSelector":"f5ecbdbc","id":515,"implemented":true,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"4400:9:3","nodeType":"FunctionDefinition","parameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"_version","nameLocation":"4417:8:3","nodeType":"VariableDeclaration","scope":515,"src":"4410:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":491,"name":"uint16","nodeType":"ElementaryTypeName","src":"4410:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"_chainId","nameLocation":"4434:8:3","nodeType":"VariableDeclaration","scope":515,"src":"4427:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":493,"name":"uint16","nodeType":"ElementaryTypeName","src":"4427:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"4444:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"4444:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"_configType","nameLocation":"4458:11:3","nodeType":"VariableDeclaration","scope":515,"src":"4453:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":497,"name":"uint","nodeType":"ElementaryTypeName","src":"4453:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4409:61:3"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"4494:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":500,"name":"bytes","nodeType":"ElementaryTypeName","src":"4494:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4493:14:3"},"scope":762,"src":"4391:209:3","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[171],"body":{"id":538,"nodeType":"Block","src":"4782:79:3","statements":[{"expression":{"arguments":[{"id":532,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"4813:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":533,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"4823:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":534,"name":"_configType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"4833:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":535,"name":"_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4846:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":529,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"4792:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4803:9:3","memberName":"setConfig","nodeType":"MemberAccess","referencedDeclaration":171,"src":"4792:20:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_uint16_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,uint16,uint256,bytes memory) external"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4792:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":537,"nodeType":"ExpressionStatement","src":"4792:62:3"}]},"functionSelector":"cbed8b9c","id":539,"implemented":true,"kind":"function","modifiers":[{"id":527,"kind":"modifierInvocation","modifierName":{"id":526,"name":"onlyOwner","nameLocations":["4772:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"4772:9:3"},"nodeType":"ModifierInvocation","src":"4772:9:3"}],"name":"setConfig","nameLocation":"4668:9:3","nodeType":"FunctionDefinition","overrides":{"id":525,"nodeType":"OverrideSpecifier","overrides":[],"src":"4763:8:3"},"parameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"_version","nameLocation":"4685:8:3","nodeType":"VariableDeclaration","scope":539,"src":"4678:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":516,"name":"uint16","nodeType":"ElementaryTypeName","src":"4678:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"_chainId","nameLocation":"4702:8:3","nodeType":"VariableDeclaration","scope":539,"src":"4695:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":518,"name":"uint16","nodeType":"ElementaryTypeName","src":"4695:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"_configType","nameLocation":"4717:11:3","nodeType":"VariableDeclaration","scope":539,"src":"4712:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint","nodeType":"ElementaryTypeName","src":"4712:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"_config","nameLocation":"4745:7:3","nodeType":"VariableDeclaration","scope":539,"src":"4730:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":522,"name":"bytes","nodeType":"ElementaryTypeName","src":"4730:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4677:76:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"4782:0:3"},"scope":762,"src":"4659:202:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[176],"body":{"id":553,"nodeType":"Block","src":"4936:52:3","statements":[{"expression":{"arguments":[{"id":550,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"4972:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":547,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"4946:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4957:14:3","memberName":"setSendVersion","nodeType":"MemberAccess","referencedDeclaration":176,"src":"4946:25:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$returns$__$","typeString":"function (uint16) external"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4946:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":552,"nodeType":"ExpressionStatement","src":"4946:35:3"}]},"functionSelector":"07e0db17","id":554,"implemented":true,"kind":"function","modifiers":[{"id":545,"kind":"modifierInvocation","modifierName":{"id":544,"name":"onlyOwner","nameLocations":["4926:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"4926:9:3"},"nodeType":"ModifierInvocation","src":"4926:9:3"}],"name":"setSendVersion","nameLocation":"4876:14:3","nodeType":"FunctionDefinition","overrides":{"id":543,"nodeType":"OverrideSpecifier","overrides":[],"src":"4917:8:3"},"parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"_version","nameLocation":"4898:8:3","nodeType":"VariableDeclaration","scope":554,"src":"4891:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":540,"name":"uint16","nodeType":"ElementaryTypeName","src":"4891:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4890:17:3"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[],"src":"4936:0:3"},"scope":762,"src":"4867:121:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[181],"body":{"id":568,"nodeType":"Block","src":"5066:55:3","statements":[{"expression":{"arguments":[{"id":565,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"5105:8:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":562,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"5076:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5087:17:3","memberName":"setReceiveVersion","nodeType":"MemberAccess","referencedDeclaration":181,"src":"5076:28:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$returns$__$","typeString":"function (uint16) external"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5076:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":567,"nodeType":"ExpressionStatement","src":"5076:38:3"}]},"functionSelector":"10ddb137","id":569,"implemented":true,"kind":"function","modifiers":[{"id":560,"kind":"modifierInvocation","modifierName":{"id":559,"name":"onlyOwner","nameLocations":["5056:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"5056:9:3"},"nodeType":"ModifierInvocation","src":"5056:9:3"}],"name":"setReceiveVersion","nameLocation":"5003:17:3","nodeType":"FunctionDefinition","overrides":{"id":558,"nodeType":"OverrideSpecifier","overrides":[],"src":"5047:8:3"},"parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"_version","nameLocation":"5028:8:3","nodeType":"VariableDeclaration","scope":569,"src":"5021:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":555,"name":"uint16","nodeType":"ElementaryTypeName","src":"5021:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5020:17:3"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[],"src":"5066:0:3"},"scope":762,"src":"4994:127:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[188],"body":{"id":586,"nodeType":"Block","src":"5231:72:3","statements":[{"expression":{"arguments":[{"id":582,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"5271:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":583,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"5284:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":579,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"5241:10:3","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5252:18:3","memberName":"forceResumeReceive","nodeType":"MemberAccess","referencedDeclaration":188,"src":"5241:29:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory) external"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5241:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":585,"nodeType":"ExpressionStatement","src":"5241:55:3"}]},"functionSelector":"42d65a8d","id":587,"implemented":true,"kind":"function","modifiers":[{"id":577,"kind":"modifierInvocation","modifierName":{"id":576,"name":"onlyOwner","nameLocations":["5221:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"5221:9:3"},"nodeType":"ModifierInvocation","src":"5221:9:3"}],"name":"forceResumeReceive","nameLocation":"5136:18:3","nodeType":"FunctionDefinition","overrides":{"id":575,"nodeType":"OverrideSpecifier","overrides":[],"src":"5212:8:3"},"parameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"_srcChainId","nameLocation":"5162:11:3","nodeType":"VariableDeclaration","scope":587,"src":"5155:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":570,"name":"uint16","nodeType":"ElementaryTypeName","src":"5155:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"_srcAddress","nameLocation":"5190:11:3","nodeType":"VariableDeclaration","scope":587,"src":"5175:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":572,"name":"bytes","nodeType":"ElementaryTypeName","src":"5175:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5154:48:3"},"returnParameters":{"id":578,"nodeType":"ParameterList","parameters":[],"src":"5231:0:3"},"scope":762,"src":"5127:176:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":607,"nodeType":"Block","src":"5533:108:3","statements":[{"expression":{"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":596,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5543:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":598,"indexExpression":{"id":597,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5563:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5543:32:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":599,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"5578:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"5543:40:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":601,"nodeType":"ExpressionStatement","src":"5543:40:3"},{"eventCall":{"arguments":[{"id":603,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5615:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":604,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"5628:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":602,"name":"SetTrustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"5598:16:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5598:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":606,"nodeType":"EmitStatement","src":"5593:41:3"}]},"functionSelector":"eb8d72b7","id":608,"implemented":true,"kind":"function","modifiers":[{"id":594,"kind":"modifierInvocation","modifierName":{"id":593,"name":"onlyOwner","nameLocations":["5523:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"5523:9:3"},"nodeType":"ModifierInvocation","src":"5523:9:3"}],"name":"setTrustedRemote","nameLocation":"5455:16:3","nodeType":"FunctionDefinition","parameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"_srcChainId","nameLocation":"5479:11:3","nodeType":"VariableDeclaration","scope":608,"src":"5472:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":588,"name":"uint16","nodeType":"ElementaryTypeName","src":"5472:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"_path","nameLocation":"5507:5:3","nodeType":"VariableDeclaration","scope":608,"src":"5492:20:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":590,"name":"bytes","nodeType":"ElementaryTypeName","src":"5492:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5471:42:3"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"5533:0:3"},"scope":762,"src":"5446:195:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":635,"nodeType":"Block","src":"5753:172:3","statements":[{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":617,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5763:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":619,"indexExpression":{"id":618,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"5783:14:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5763:35:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":622,"name":"_remoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"5818:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"arguments":[{"id":625,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5842:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_LzAppUpgradeable_$762","typeString":"contract LzAppUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LzAppUpgradeable_$762","typeString":"contract LzAppUpgradeable"}],"id":624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5834:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"5834:7:3","typeDescriptions":{}}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":620,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5801:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5805:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"5801:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5801:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5763:85:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":629,"nodeType":"ExpressionStatement","src":"5763:85:3"},{"eventCall":{"arguments":[{"id":631,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"5887:14:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":632,"name":"_remoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"5903:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":630,"name":"SetTrustedRemoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"5863:23:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"EmitStatement","src":"5858:60:3"}]},"functionSelector":"a6c3d165","id":636,"implemented":true,"kind":"function","modifiers":[{"id":615,"kind":"modifierInvocation","modifierName":{"id":614,"name":"onlyOwner","nameLocations":["5743:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"5743:9:3"},"nodeType":"ModifierInvocation","src":"5743:9:3"}],"name":"setTrustedRemoteAddress","nameLocation":"5656:23:3","nodeType":"FunctionDefinition","parameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"_remoteChainId","nameLocation":"5687:14:3","nodeType":"VariableDeclaration","scope":636,"src":"5680:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":609,"name":"uint16","nodeType":"ElementaryTypeName","src":"5680:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"_remoteAddress","nameLocation":"5718:14:3","nodeType":"VariableDeclaration","scope":636,"src":"5703:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":611,"name":"bytes","nodeType":"ElementaryTypeName","src":"5703:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:54:3"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"5753:0:3"},"scope":762,"src":"5647:278:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":666,"nodeType":"Block","src":"6024:233:3","statements":[{"assignments":[644],"declarations":[{"constant":false,"id":644,"mutability":"mutable","name":"path","nameLocation":"6047:4:3","nodeType":"VariableDeclaration","scope":666,"src":"6034:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":643,"name":"bytes","nodeType":"ElementaryTypeName","src":"6034:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":648,"initialValue":{"baseExpression":{"id":645,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"6054:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":647,"indexExpression":{"id":646,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"6074:14:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6054:35:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6034:55:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":650,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"6107:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6112:6:3","memberName":"length","nodeType":"MemberAccess","src":"6107:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6122:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6107:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a206e6f20747275737465642070617468207265636f7264","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6125:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552","typeString":"literal_string \"LzApp: no trusted path record\""},"value":"LzApp: no trusted path record"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552","typeString":"literal_string \"LzApp: no trusted path record\""}],"id":649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6099:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6099:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"6099:58:3"},{"expression":{"arguments":[{"hexValue":"30","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6185:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":660,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"6188:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6193:6:3","memberName":"length","nodeType":"MemberAccess","src":"6188:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6202:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"6188:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":657,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"6174:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6179:5:3","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":1088,"src":"6174:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":642,"id":665,"nodeType":"Return","src":"6167:38:3"}]},"functionSelector":"9f38369a","id":667,"implemented":true,"kind":"function","modifiers":[],"name":"getTrustedRemoteAddress","nameLocation":"5940:23:3","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"_remoteChainId","nameLocation":"5971:14:3","nodeType":"VariableDeclaration","scope":667,"src":"5964:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":637,"name":"uint16","nodeType":"ElementaryTypeName","src":"5964:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5963:23:3"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":667,"src":"6010:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":640,"name":"bytes","nodeType":"ElementaryTypeName","src":"6010:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6009:14:3"},"scope":762,"src":"5931:326:3","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":682,"nodeType":"Block","src":"6322:74:3","statements":[{"expression":{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":674,"name":"precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6332:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":675,"name":"_precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"6343:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6332:20:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":677,"nodeType":"ExpressionStatement","src":"6332:20:3"},{"eventCall":{"arguments":[{"id":679,"name":"_precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"6379:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":678,"name":"SetPrecrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"6367:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6367:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"EmitStatement","src":"6362:27:3"}]},"functionSelector":"baf3292d","id":683,"implemented":true,"kind":"function","modifiers":[{"id":672,"kind":"modifierInvocation","modifierName":{"id":671,"name":"onlyOwner","nameLocations":["6312:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"6312:9:3"},"nodeType":"ModifierInvocation","src":"6312:9:3"}],"name":"setPrecrime","nameLocation":"6272:11:3","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"_precrime","nameLocation":"6292:9:3","nodeType":"VariableDeclaration","scope":683,"src":"6284:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":668,"name":"address","nodeType":"ElementaryTypeName","src":"6284:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6283:19:3"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[],"src":"6322:0:3"},"scope":762,"src":"6263:133:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":715,"nodeType":"Block","src":"6497:185:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"6515:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6525:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6515:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c6964206d696e476173","id":698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6528:23:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e","typeString":"literal_string \"LzApp: invalid minGas\""},"value":"LzApp: invalid minGas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e","typeString":"literal_string \"LzApp: invalid minGas\""}],"id":694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6507:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6507:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":700,"nodeType":"ExpressionStatement","src":"6507:45:3"},{"expression":{"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":701,"name":"minDstGasLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"6562:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"}},"id":704,"indexExpression":{"id":702,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"6578:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6562:28:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":705,"indexExpression":{"id":703,"name":"_packetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"6591:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6562:41:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":706,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"6606:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6562:51:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":708,"nodeType":"ExpressionStatement","src":"6562:51:3"},{"eventCall":{"arguments":[{"id":710,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"6641:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":711,"name":"_packetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"6654:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":712,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"6667:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":709,"name":"SetMinDstGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"6628:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_uint16_$_t_uint256_$returns$__$","typeString":"function (uint16,uint16,uint256)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6628:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"EmitStatement","src":"6623:52:3"}]},"functionSelector":"df2a5b3b","id":716,"implemented":true,"kind":"function","modifiers":[{"id":692,"kind":"modifierInvocation","modifierName":{"id":691,"name":"onlyOwner","nameLocations":["6487:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"6487:9:3"},"nodeType":"ModifierInvocation","src":"6487:9:3"}],"name":"setMinDstGas","nameLocation":"6411:12:3","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"_dstChainId","nameLocation":"6431:11:3","nodeType":"VariableDeclaration","scope":716,"src":"6424:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":684,"name":"uint16","nodeType":"ElementaryTypeName","src":"6424:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"_packetType","nameLocation":"6451:11:3","nodeType":"VariableDeclaration","scope":716,"src":"6444:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":686,"name":"uint16","nodeType":"ElementaryTypeName","src":"6444:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"_minGas","nameLocation":"6469:7:3","nodeType":"VariableDeclaration","scope":716,"src":"6464:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint","nodeType":"ElementaryTypeName","src":"6464:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6423:54:3"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[],"src":"6497:0:3"},"scope":762,"src":"6402:280:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":731,"nodeType":"Block","src":"6821:60:3","statements":[{"expression":{"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":725,"name":"payloadSizeLimitLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"6831:22:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":727,"indexExpression":{"id":726,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"6854:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6831:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":728,"name":"_size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6869:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6831:43:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":730,"nodeType":"ExpressionStatement","src":"6831:43:3"}]},"functionSelector":"0df37483","id":732,"implemented":true,"kind":"function","modifiers":[{"id":723,"kind":"modifierInvocation","modifierName":{"id":722,"name":"onlyOwner","nameLocations":["6811:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"6811:9:3"},"nodeType":"ModifierInvocation","src":"6811:9:3"}],"name":"setPayloadSizeLimit","nameLocation":"6750:19:3","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"_dstChainId","nameLocation":"6777:11:3","nodeType":"VariableDeclaration","scope":732,"src":"6770:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":717,"name":"uint16","nodeType":"ElementaryTypeName","src":"6770:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"_size","nameLocation":"6795:5:3","nodeType":"VariableDeclaration","scope":732,"src":"6790:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":719,"name":"uint","nodeType":"ElementaryTypeName","src":"6790:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6769:32:3"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[],"src":"6821:0:3"},"scope":762,"src":"6741:140:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":755,"nodeType":"Block","src":"7078:145:3","statements":[{"assignments":[742],"declarations":[{"constant":false,"id":742,"mutability":"mutable","name":"trustedSource","nameLocation":"7101:13:3","nodeType":"VariableDeclaration","scope":755,"src":"7088:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":741,"name":"bytes","nodeType":"ElementaryTypeName","src":"7088:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":746,"initialValue":{"baseExpression":{"id":743,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"7117:19:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":745,"indexExpression":{"id":744,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"7137:11:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7117:32:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7088:61:3"},{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":748,"name":"trustedSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"7176:13:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":747,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7166:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7166:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":751,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"7204:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":750,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7194:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7166:50:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":740,"id":754,"nodeType":"Return","src":"7159:57:3"}]},"functionSelector":"3d8b38f6","id":756,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedRemote","nameLocation":"6985:15:3","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"_srcChainId","nameLocation":"7008:11:3","nodeType":"VariableDeclaration","scope":756,"src":"7001:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":733,"name":"uint16","nodeType":"ElementaryTypeName","src":"7001:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"_srcAddress","nameLocation":"7036:11:3","nodeType":"VariableDeclaration","scope":756,"src":"7021:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":735,"name":"bytes","nodeType":"ElementaryTypeName","src":"7021:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7000:48:3"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":756,"src":"7072:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":738,"name":"bool","nodeType":"ElementaryTypeName","src":"7072:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7071:6:3"},"scope":762,"src":"6976:247:3","stateMutability":"view","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"7229:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":761,"mutability":"mutable","name":"__gap","nameLocation":"7505:5:3","nodeType":"VariableDeclaration","scope":762,"src":"7488:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":758,"name":"uint","nodeType":"ElementaryTypeName","src":"7488:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":760,"length":{"hexValue":"3435","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7493:2:3","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"7488:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":763,"src":"402:7111:3","usedErrors":[]}],"src":"33:7481:3"},"id":3},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"BytesLib":[1357],"ContextUpgradeable":[2842],"ExcessivelySafeCall":[1454],"ILayerZeroEndpointUpgradeable":[144],"ILayerZeroReceiverUpgradeable":[158],"ILayerZeroUserApplicationConfigUpgradeable":[189],"Initializable":[1755],"LzAppUpgradeable":[762],"NonblockingLzAppUpgradeable":[1024],"OwnableUpgradeable":[1586]},"id":1025,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":764,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:4"},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol","file":"./LzAppUpgradeable.sol","id":765,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1025,"sourceUnit":763,"src":"58:32:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol","file":"../../util/ExcessivelySafeCall.sol","id":766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1025,"sourceUnit":1455,"src":"91:44:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":767,"name":"Initializable","nameLocations":["530:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"530:13:4"},"id":768,"nodeType":"InheritanceSpecifier","src":"530:13:4"},{"baseName":{"id":769,"name":"LzAppUpgradeable","nameLocations":["545:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"545:16:4"},"id":770,"nodeType":"InheritanceSpecifier","src":"545:16:4"}],"canonicalName":"NonblockingLzAppUpgradeable","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":1024,"linearizedBaseContracts":[1024,762,189,158,1586,2842,1755],"name":"NonblockingLzAppUpgradeable","nameLocation":"499:27:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":773,"libraryName":{"id":771,"name":"ExcessivelySafeCall","nameLocations":["574:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":1454,"src":"574:19:4"},"nodeType":"UsingForDirective","src":"568:38:4","typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"598:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":787,"nodeType":"Block","src":"701:97:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":780,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"711:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"711:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":782,"nodeType":"ExpressionStatement","src":"711:26:4"},{"expression":{"arguments":[{"id":784,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"781:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":783,"name":"__LzAppUpgradeable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"747:33:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"ExpressionStatement","src":"747:44:4"}]},"id":788,"implemented":true,"kind":"function","modifiers":[{"id":778,"kind":"modifierInvocation","modifierName":{"id":777,"name":"onlyInitializing","nameLocations":["684:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"684:16:4"},"nodeType":"ModifierInvocation","src":"684:16:4"}],"name":"__NonblockingLzAppUpgradeable_init","nameLocation":"621:34:4","nodeType":"FunctionDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"_endpoint","nameLocation":"664:9:4","nodeType":"VariableDeclaration","scope":788,"src":"656:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"656:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"655:19:4"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"701:0:4"},"scope":1024,"src":"612:186:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":795,"nodeType":"Block","src":"903:2:4","statements":[]},"id":796,"implemented":true,"kind":"function","modifiers":[{"id":793,"kind":"modifierInvocation","modifierName":{"id":792,"name":"onlyInitializing","nameLocations":["886:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"886:16:4"},"nodeType":"ModifierInvocation","src":"886:16:4"}],"name":"__NonblockingLzAppUpgradeable_init_unchained","nameLocation":"813:44:4","nodeType":"FunctionDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"_endpoint","nameLocation":"866:9:4","nodeType":"VariableDeclaration","scope":796,"src":"858:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:19:4"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"903:0:4"},"scope":1024,"src":"804:101:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"functionSelector":"5b8c41e6","id":804,"mutability":"mutable","name":"failedMessages","nameLocation":"982:14:4","nodeType":"VariableDeclaration","scope":1024,"src":"911:85:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))"},"typeName":{"id":803,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":797,"name":"uint16","nodeType":"ElementaryTypeName","src":"919:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"911:63:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":802,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":798,"name":"bytes","nodeType":"ElementaryTypeName","src":"937:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"nodeType":"Mapping","src":"929:44:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes => mapping(uint64 => bytes32))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":801,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":799,"name":"uint64","nodeType":"ElementaryTypeName","src":"954:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"946:26:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"964:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}}}},"visibility":"public"},{"anonymous":false,"eventSelector":"e183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c","id":816,"name":"MessageFailed","nameLocation":"1009:13:4","nodeType":"EventDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"indexed":false,"mutability":"mutable","name":"_srcChainId","nameLocation":"1030:11:4","nodeType":"VariableDeclaration","scope":816,"src":"1023:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":805,"name":"uint16","nodeType":"ElementaryTypeName","src":"1023:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":808,"indexed":false,"mutability":"mutable","name":"_srcAddress","nameLocation":"1049:11:4","nodeType":"VariableDeclaration","scope":816,"src":"1043:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":807,"name":"bytes","nodeType":"ElementaryTypeName","src":"1043:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":810,"indexed":false,"mutability":"mutable","name":"_nonce","nameLocation":"1069:6:4","nodeType":"VariableDeclaration","scope":816,"src":"1062:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":809,"name":"uint64","nodeType":"ElementaryTypeName","src":"1062:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":812,"indexed":false,"mutability":"mutable","name":"_payload","nameLocation":"1083:8:4","nodeType":"VariableDeclaration","scope":816,"src":"1077:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":811,"name":"bytes","nodeType":"ElementaryTypeName","src":"1077:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":814,"indexed":false,"mutability":"mutable","name":"_reason","nameLocation":"1099:7:4","nodeType":"VariableDeclaration","scope":816,"src":"1093:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":813,"name":"bytes","nodeType":"ElementaryTypeName","src":"1093:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1022:85:4"},"src":"1003:105:4"},{"anonymous":false,"eventSelector":"c264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5","id":826,"name":"RetryMessageSuccess","nameLocation":"1119:19:4","nodeType":"EventDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"indexed":false,"mutability":"mutable","name":"_srcChainId","nameLocation":"1146:11:4","nodeType":"VariableDeclaration","scope":826,"src":"1139:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":817,"name":"uint16","nodeType":"ElementaryTypeName","src":"1139:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":820,"indexed":false,"mutability":"mutable","name":"_srcAddress","nameLocation":"1165:11:4","nodeType":"VariableDeclaration","scope":826,"src":"1159:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"1159:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":822,"indexed":false,"mutability":"mutable","name":"_nonce","nameLocation":"1185:6:4","nodeType":"VariableDeclaration","scope":826,"src":"1178:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":821,"name":"uint64","nodeType":"ElementaryTypeName","src":"1178:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":824,"indexed":false,"mutability":"mutable","name":"_payloadHash","nameLocation":"1201:12:4","nodeType":"VariableDeclaration","scope":826,"src":"1193:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1193:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1138:76:4"},"src":"1113:102:4"},{"baseFunctions":[352],"body":{"id":874,"nodeType":"Block","src":"1412:370:4","statements":[{"assignments":[839,841],"declarations":[{"constant":false,"id":839,"mutability":"mutable","name":"success","nameLocation":"1428:7:4","nodeType":"VariableDeclaration","scope":874,"src":"1423:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"1423:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"reason","nameLocation":"1450:6:4","nodeType":"VariableDeclaration","scope":874,"src":"1437:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":840,"name":"bytes","nodeType":"ElementaryTypeName","src":"1437:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":861,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":847,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"1494:7:4","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1494:9:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"313530","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1505:3:4","typeDescriptions":{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},"value":"150"},{"arguments":[{"expression":{"expression":{"id":852,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1533:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzAppUpgradeable_$1024","typeString":"contract NonblockingLzAppUpgradeable"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1538:20:4","memberName":"nonblockingLzReceive","nodeType":"MemberAccess","referencedDeclaration":939,"src":"1533:25:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory) external"}},"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1559:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1533:34:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":855,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"1569:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":856,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"1582:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":857,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"1595:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":858,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1603:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":850,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1510:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1514:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1510:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1510:102:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":844,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1468:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzAppUpgradeable_$1024","typeString":"contract NonblockingLzAppUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NonblockingLzAppUpgradeable_$1024","typeString":"contract NonblockingLzAppUpgradeable"}],"id":843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1460:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"1460:7:4","typeDescriptions":{}}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1460:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1474:19:4","memberName":"excessivelySafeCall","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"1460:33:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint16_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,uint256,uint16,bytes memory) returns (bool,bytes memory)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1460:153:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1422:191:4"},{"condition":{"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1670:8:4","subExpression":{"id":862,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"1671:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":873,"nodeType":"IfStatement","src":"1666:110:4","trueBody":{"id":872,"nodeType":"Block","src":"1680:96:4","statements":[{"expression":{"arguments":[{"id":865,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"1714:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":866,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"1727:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":867,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"1740:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":868,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1748:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":869,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"1758:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":864,"name":"_storeFailedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"1694:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory,bytes memory)"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"ExpressionStatement","src":"1694:71:4"}]}}]},"id":875,"implemented":true,"kind":"function","modifiers":[],"name":"_blockingLzReceive","nameLocation":"1283:18:4","nodeType":"FunctionDefinition","overrides":{"id":836,"nodeType":"OverrideSpecifier","overrides":[],"src":"1403:8:4"},"parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"_srcChainId","nameLocation":"1309:11:4","nodeType":"VariableDeclaration","scope":875,"src":"1302:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":827,"name":"uint16","nodeType":"ElementaryTypeName","src":"1302:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"_srcAddress","nameLocation":"1335:11:4","nodeType":"VariableDeclaration","scope":875,"src":"1322:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":829,"name":"bytes","nodeType":"ElementaryTypeName","src":"1322:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":832,"mutability":"mutable","name":"_nonce","nameLocation":"1355:6:4","nodeType":"VariableDeclaration","scope":875,"src":"1348:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":831,"name":"uint64","nodeType":"ElementaryTypeName","src":"1348:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"_payload","nameLocation":"1376:8:4","nodeType":"VariableDeclaration","scope":875,"src":"1363:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":833,"name":"bytes","nodeType":"ElementaryTypeName","src":"1363:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1301:84:4"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[],"src":"1412:0:4"},"scope":1024,"src":"1274:508:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":908,"nodeType":"Block","src":"1940:168:4","statements":[{"expression":{"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":888,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"1950:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":892,"indexExpression":{"id":889,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"1965:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1950:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":893,"indexExpression":{"id":890,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"1978:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1950:40:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":894,"indexExpression":{"id":891,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"1991:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1950:48:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":896,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2011:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":895,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2001:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2001:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1950:70:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":899,"nodeType":"ExpressionStatement","src":"1950:70:4"},{"eventCall":{"arguments":[{"id":901,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"2049:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":902,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"2062:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":903,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"2075:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":904,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2083:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":905,"name":"_reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"2093:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":900,"name":"MessageFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"2035:13:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory,bytes memory)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2035:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":907,"nodeType":"EmitStatement","src":"2030:71:4"}]},"id":909,"implemented":true,"kind":"function","modifiers":[],"name":"_storeFailedMessage","nameLocation":"1797:19:4","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"_srcChainId","nameLocation":"1824:11:4","nodeType":"VariableDeclaration","scope":909,"src":"1817:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":876,"name":"uint16","nodeType":"ElementaryTypeName","src":"1817:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"_srcAddress","nameLocation":"1850:11:4","nodeType":"VariableDeclaration","scope":909,"src":"1837:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":878,"name":"bytes","nodeType":"ElementaryTypeName","src":"1837:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":881,"mutability":"mutable","name":"_nonce","nameLocation":"1870:6:4","nodeType":"VariableDeclaration","scope":909,"src":"1863:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":880,"name":"uint64","nodeType":"ElementaryTypeName","src":"1863:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":883,"mutability":"mutable","name":"_payload","nameLocation":"1891:8:4","nodeType":"VariableDeclaration","scope":909,"src":"1878:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":882,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"_reason","nameLocation":"1914:7:4","nodeType":"VariableDeclaration","scope":909,"src":"1901:20:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"1901:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1816:106:4"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[],"src":"1940:0:4"},"scope":1024,"src":"1788:320:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":938,"nodeType":"Block","src":"2247:209:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":921,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"2302:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2302:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":925,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2326:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzAppUpgradeable_$1024","typeString":"contract NonblockingLzAppUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NonblockingLzAppUpgradeable_$1024","typeString":"contract NonblockingLzAppUpgradeable"}],"id":924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2318:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"2318:7:4","typeDescriptions":{}}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2318:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2302:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d757374206265204c7a417070","id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2333:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa","typeString":"literal_string \"NonblockingLzApp: caller must be LzApp\""},"value":"NonblockingLzApp: caller must be LzApp"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa","typeString":"literal_string \"NonblockingLzApp: caller must be LzApp\""}],"id":920,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2294:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:80:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":930,"nodeType":"ExpressionStatement","src":"2294:80:4"},{"expression":{"arguments":[{"id":932,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"2406:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":933,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2419:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":934,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"2432:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":935,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"2440:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":931,"name":"_nonblockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"2384:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2384:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":937,"nodeType":"ExpressionStatement","src":"2384:65:4"}]},"functionSelector":"66ad5c8a","id":939,"implemented":true,"kind":"function","modifiers":[],"name":"nonblockingLzReceive","nameLocation":"2123:20:4","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"_srcChainId","nameLocation":"2151:11:4","nodeType":"VariableDeclaration","scope":939,"src":"2144:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":910,"name":"uint16","nodeType":"ElementaryTypeName","src":"2144:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"_srcAddress","nameLocation":"2179:11:4","nodeType":"VariableDeclaration","scope":939,"src":"2164:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":912,"name":"bytes","nodeType":"ElementaryTypeName","src":"2164:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"_nonce","nameLocation":"2199:6:4","nodeType":"VariableDeclaration","scope":939,"src":"2192:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":914,"name":"uint64","nodeType":"ElementaryTypeName","src":"2192:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"_payload","nameLocation":"2222:8:4","nodeType":"VariableDeclaration","scope":939,"src":"2207:23:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":916,"name":"bytes","nodeType":"ElementaryTypeName","src":"2207:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2143:88:4"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[],"src":"2247:0:4"},"scope":1024,"src":"2114:342:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":950,"implemented":false,"kind":"function","modifiers":[],"name":"_nonblockingLzReceive","nameLocation":"2508:21:4","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"_srcChainId","nameLocation":"2537:11:4","nodeType":"VariableDeclaration","scope":950,"src":"2530:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":940,"name":"uint16","nodeType":"ElementaryTypeName","src":"2530:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"_srcAddress","nameLocation":"2563:11:4","nodeType":"VariableDeclaration","scope":950,"src":"2550:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":942,"name":"bytes","nodeType":"ElementaryTypeName","src":"2550:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"_nonce","nameLocation":"2583:6:4","nodeType":"VariableDeclaration","scope":950,"src":"2576:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":944,"name":"uint64","nodeType":"ElementaryTypeName","src":"2576:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"_payload","nameLocation":"2604:8:4","nodeType":"VariableDeclaration","scope":950,"src":"2591:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":946,"name":"bytes","nodeType":"ElementaryTypeName","src":"2591:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2529:84:4"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[],"src":"2630:0:4"},"scope":1024,"src":"2499:132:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1017,"nodeType":"Block","src":"2770:624:4","statements":[{"assignments":[962],"declarations":[{"constant":false,"id":962,"mutability":"mutable","name":"payloadHash","nameLocation":"2832:11:4","nodeType":"VariableDeclaration","scope":1017,"src":"2824:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":961,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2824:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":970,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":963,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"2846:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":965,"indexExpression":{"id":964,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"2861:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2846:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":967,"indexExpression":{"id":966,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"2874:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2846:40:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":969,"indexExpression":{"id":968,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2887:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2846:48:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2824:70:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":972,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2912:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2935:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2927:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":973,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2927:7:4","typeDescriptions":{}}},"id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2927:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2912:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d657373616765","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2939:37:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894","typeString":"literal_string \"NonblockingLzApp: no stored message\""},"value":"NonblockingLzApp: no stored message"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894","typeString":"literal_string \"NonblockingLzApp: no stored message\""}],"id":971,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2904:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2904:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":980,"nodeType":"ExpressionStatement","src":"2904:73:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":983,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"3005:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":982,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2995:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2995:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":985,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"3018:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2995:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6164","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3031:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3","typeString":"literal_string \"NonblockingLzApp: invalid payload\""},"value":"NonblockingLzApp: invalid payload"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3","typeString":"literal_string \"NonblockingLzApp: invalid payload\""}],"id":981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2987:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2987:80:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":989,"nodeType":"ExpressionStatement","src":"2987:80:4"},{"expression":{"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":990,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"3113:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":994,"indexExpression":{"id":991,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"3128:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3113:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":995,"indexExpression":{"id":992,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3141:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3113:40:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":996,"indexExpression":{"id":993,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"3154:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3113:48:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3172:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3164:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3164:7:4","typeDescriptions":{}}},"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3164:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3113:61:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1002,"nodeType":"ExpressionStatement","src":"3113:61:4"},{"expression":{"arguments":[{"id":1004,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"3263:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":1005,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3276:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1006,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"3289:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1007,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"3297:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1003,"name":"_nonblockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"3241:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3241:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"ExpressionStatement","src":"3241:65:4"},{"eventCall":{"arguments":[{"id":1011,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"3341:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":1012,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3354:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1013,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"3367:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1014,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"3375:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1010,"name":"RetryMessageSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"3321:19:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes32_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes32)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3321:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"EmitStatement","src":"3316:71:4"}]},"functionSelector":"d1deba1f","id":1018,"implemented":true,"kind":"function","modifiers":[],"name":"retryMessage","nameLocation":"2646:12:4","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"_srcChainId","nameLocation":"2666:11:4","nodeType":"VariableDeclaration","scope":1018,"src":"2659:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":951,"name":"uint16","nodeType":"ElementaryTypeName","src":"2659:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"_srcAddress","nameLocation":"2694:11:4","nodeType":"VariableDeclaration","scope":1018,"src":"2679:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":953,"name":"bytes","nodeType":"ElementaryTypeName","src":"2679:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"_nonce","nameLocation":"2714:6:4","nodeType":"VariableDeclaration","scope":1018,"src":"2707:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":955,"name":"uint64","nodeType":"ElementaryTypeName","src":"2707:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"_payload","nameLocation":"2737:8:4","nodeType":"VariableDeclaration","scope":1018,"src":"2722:23:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":957,"name":"bytes","nodeType":"ElementaryTypeName","src":"2722:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2658:88:4"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"2770:0:4"},"scope":1024,"src":"2637:757:4","stateMutability":"payable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"3400:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1023,"mutability":"mutable","name":"__gap","nameLocation":"3676:5:4","nodeType":"VariableDeclaration","scope":1024,"src":"3659:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1020,"name":"uint","nodeType":"ElementaryTypeName","src":"3659:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1022,"length":{"hexValue":"3439","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3664:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3659:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1025,"src":"481:3203:4","usedErrors":[]}],"src":"33:3652:4"},"id":4},"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol","exportedSymbols":{"BytesLib":[1357]},"id":1358,"license":"Unlicense","nodeType":"SourceUnit","nodes":[{"id":1026,"literals":["solidity",">=","0.8",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"336:31:5"},{"abstract":false,"baseContracts":[],"canonicalName":"BytesLib","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1357,"linearizedBaseContracts":[1357],"name":"BytesLib","nameLocation":"378:8:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1041,"nodeType":"Block","src":"533:2695:5","statements":[{"assignments":[1036],"declarations":[{"constant":false,"id":1036,"mutability":"mutable","name":"tempBytes","nameLocation":"556:9:5","nodeType":"VariableDeclaration","scope":1041,"src":"543:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"543:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1037,"nodeType":"VariableDeclarationStatement","src":"543:22:5"},{"AST":{"nodeType":"YulBlock","src":"585:2610:5","statements":[{"nodeType":"YulAssignment","src":"721:24:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"740:4:5","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"734:5:5"},"nodeType":"YulFunctionCall","src":"734:11:5"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"721:9:5"}]},{"nodeType":"YulVariableDeclaration","src":"869:30:5","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"889:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"883:5:5"},"nodeType":"YulFunctionCall","src":"883:16:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"873:6:5","type":""}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"919:9:5"},{"name":"length","nodeType":"YulIdentifier","src":"930:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"912:6:5"},"nodeType":"YulFunctionCall","src":"912:25:5"},"nodeType":"YulExpressionStatement","src":"912:25:5"},{"nodeType":"YulVariableDeclaration","src":"1135:30:5","value":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1149:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1160:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1145:3:5"},"nodeType":"YulFunctionCall","src":"1145:20:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"1139:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1282:26:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1297:2:5"},{"name":"length","nodeType":"YulIdentifier","src":"1301:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1293:3:5"},"nodeType":"YulFunctionCall","src":"1293:15:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"1286:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"1673:154:5","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1799:2:5"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1809:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1803:5:5"},"nodeType":"YulFunctionCall","src":"1803:9:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1792:6:5"},"nodeType":"YulFunctionCall","src":"1792:21:5"},"nodeType":"YulExpressionStatement","src":"1792:21:5"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1510:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"1514:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1507:2:5"},"nodeType":"YulFunctionCall","src":"1507:11:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1519:153:5","statements":[{"nodeType":"YulAssignment","src":"1603:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1613:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"1617:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1609:3:5"},"nodeType":"YulFunctionCall","src":"1609:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"1603:2:5"}]},{"nodeType":"YulAssignment","src":"1639:19:5","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1649:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"1653:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1645:3:5"},"nodeType":"YulFunctionCall","src":"1645:13:5"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"1639:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"1326:180:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1462:30:5","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"1476:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1487:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1472:3:5"},"nodeType":"YulFunctionCall","src":"1472:20:5"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"1466:2:5","type":""}]}]},"src":"1322:505:5"},{"nodeType":"YulAssignment","src":"2016:27:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2032:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2026:5:5"},"nodeType":"YulFunctionCall","src":"2026:17:5"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2016:6:5"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2063:9:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2078:6:5"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2092:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2086:5:5"},"nodeType":"YulFunctionCall","src":"2086:16:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2074:3:5"},"nodeType":"YulFunctionCall","src":"2074:29:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2056:6:5"},"nodeType":"YulFunctionCall","src":"2056:48:5"},"nodeType":"YulExpressionStatement","src":"2056:48:5"},{"nodeType":"YulAssignment","src":"2234:9:5","value":{"name":"end","nodeType":"YulIdentifier","src":"2240:3:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2234:2:5"}]},{"nodeType":"YulAssignment","src":"2362:22:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2373:2:5"},{"name":"length","nodeType":"YulIdentifier","src":"2377:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2369:3:5"},"nodeType":"YulFunctionCall","src":"2369:15:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2362:3:5"}]},{"body":{"nodeType":"YulBlock","src":"2566:53:5","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2591:2:5"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2601:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2595:5:5"},"nodeType":"YulFunctionCall","src":"2595:9:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2584:6:5"},"nodeType":"YulFunctionCall","src":"2584:21:5"},"nodeType":"YulExpressionStatement","src":"2584:21:5"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2469:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"2473:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2466:2:5"},"nodeType":"YulFunctionCall","src":"2466:11:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2478:87:5","statements":[{"nodeType":"YulAssignment","src":"2496:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2506:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"2510:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2502:3:5"},"nodeType":"YulFunctionCall","src":"2502:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2496:2:5"}]},{"nodeType":"YulAssignment","src":"2532:19:5","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2542:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"2546:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:5"},"nodeType":"YulFunctionCall","src":"2538:13:5"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2532:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"2402:63:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2420:31:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2434:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"2446:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:5"},"nodeType":"YulFunctionCall","src":"2430:21:5"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2424:2:5","type":""}]}]},"src":"2398:221:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3031:4:5","type":"","value":"0x40"},{"arguments":[{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"3062:3:5"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3078:6:5"},{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"3092:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3086:5:5"},"nodeType":"YulFunctionCall","src":"3086:16:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3074:3:5"},"nodeType":"YulFunctionCall","src":"3074:29:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3067:6:5"},"nodeType":"YulFunctionCall","src":"3067:37:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3058:3:5"},"nodeType":"YulFunctionCall","src":"3058:47:5"},{"kind":"number","nodeType":"YulLiteral","src":"3107:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3054:3:5"},"nodeType":"YulFunctionCall","src":"3054:56:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3128:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3124:3:5"},"nodeType":"YulFunctionCall","src":"3124:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3037:3:5"},"nodeType":"YulFunctionCall","src":"3037:147:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3024:6:5"},"nodeType":"YulFunctionCall","src":"3024:161:5"},"nodeType":"YulExpressionStatement","src":"3024:161:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1030,"isOffset":false,"isSlot":false,"src":"2032:10:5","valueSize":1},{"declaration":1030,"isOffset":false,"isSlot":false,"src":"2434:10:5","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"1476:9:5","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"3092:9:5","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"889:9:5","valueSize":1},{"declaration":1036,"isOffset":false,"isSlot":false,"src":"1149:9:5","valueSize":1},{"declaration":1036,"isOffset":false,"isSlot":false,"src":"2063:9:5","valueSize":1},{"declaration":1036,"isOffset":false,"isSlot":false,"src":"2092:9:5","valueSize":1},{"declaration":1036,"isOffset":false,"isSlot":false,"src":"721:9:5","valueSize":1},{"declaration":1036,"isOffset":false,"isSlot":false,"src":"919:9:5","valueSize":1}],"id":1038,"nodeType":"InlineAssembly","src":"576:2619:5"},{"expression":{"id":1039,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"3212:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1034,"id":1040,"nodeType":"Return","src":"3205:16:5"}]},"id":1042,"implemented":true,"kind":"function","modifiers":[],"name":"concat","nameLocation":"402:6:5","nodeType":"FunctionDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"_preBytes","nameLocation":"431:9:5","nodeType":"VariableDeclaration","scope":1042,"src":"418:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"418:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"_postBytes","nameLocation":"463:10:5","nodeType":"VariableDeclaration","scope":1042,"src":"450:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1029,"name":"bytes","nodeType":"ElementaryTypeName","src":"450:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"408:71:5"},"returnParameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1042,"src":"515:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1032,"name":"bytes","nodeType":"ElementaryTypeName","src":"515:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"514:14:5"},"scope":1357,"src":"393:2835:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1050,"nodeType":"Block","src":"3316:5543:5","statements":[{"AST":{"nodeType":"YulBlock","src":"3335:5518:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3546:34:5","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"3565:14:5"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3559:5:5"},"nodeType":"YulFunctionCall","src":"3559:21:5"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"3550:5:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4045:76:5","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4068:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4083:5:5","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4101:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"4108:1:5","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4097:3:5"},"nodeType":"YulFunctionCall","src":"4097:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4090:6:5"},"nodeType":"YulFunctionCall","src":"4090:21:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4079:3:5"},"nodeType":"YulFunctionCall","src":"4079:33:5"},{"kind":"number","nodeType":"YulLiteral","src":"4114:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4075:3:5"},"nodeType":"YulFunctionCall","src":"4075:41:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4064:3:5"},"nodeType":"YulFunctionCall","src":"4064:53:5"},{"kind":"number","nodeType":"YulLiteral","src":"4119:1:5","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:5"},"nodeType":"YulFunctionCall","src":"4060:61:5"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"4049:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4134:32:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"4155:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4149:5:5"},"nodeType":"YulFunctionCall","src":"4149:17:5"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"4138:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4179:38:5","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4200:7:5"},{"name":"mlength","nodeType":"YulIdentifier","src":"4209:7:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4196:3:5"},"nodeType":"YulFunctionCall","src":"4196:21:5"},"variables":[{"name":"newlength","nodeType":"YulTypedName","src":"4183:9:5","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4538:1193:5","statements":[{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"4803:14:5"},{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"5079:5:5"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"5221:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"5233:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5217:3:5"},"nodeType":"YulFunctionCall","src":"5217:21:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5211:5:5"},"nodeType":"YulFunctionCall","src":"5211:28:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5308:5:5","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5319:2:5","type":"","value":"32"},{"name":"mlength","nodeType":"YulIdentifier","src":"5323:7:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5315:3:5"},"nodeType":"YulFunctionCall","src":"5315:16:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5304:3:5"},"nodeType":"YulFunctionCall","src":"5304:28:5"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5144:3:5"},"nodeType":"YulFunctionCall","src":"5144:206:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5491:5:5","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5502:2:5","type":"","value":"32"},{"name":"newlength","nodeType":"YulIdentifier","src":"5506:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5498:3:5"},"nodeType":"YulFunctionCall","src":"5498:18:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5487:3:5"},"nodeType":"YulFunctionCall","src":"5487:30:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5123:3:5"},"nodeType":"YulFunctionCall","src":"5123:412:5"},{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"5652:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"5661:1:5","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5648:3:5"},"nodeType":"YulFunctionCall","src":"5648:15:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5102:3:5"},"nodeType":"YulFunctionCall","src":"5102:579:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4934:3:5"},"nodeType":"YulFunctionCall","src":"4934:765:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4779:6:5"},"nodeType":"YulFunctionCall","src":"4779:938:5"},"nodeType":"YulExpressionStatement","src":"4779:938:5"}]},"nodeType":"YulCase","src":"4531:1200:5","value":{"kind":"number","nodeType":"YulLiteral","src":"4536:1:5","type":"","value":"2"}},{"body":{"nodeType":"YulBlock","src":"5751:1827:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5948:3:5","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"5953:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5941:6:5"},"nodeType":"YulFunctionCall","src":"5941:27:5"},"nodeType":"YulExpressionStatement","src":"5941:27:5"},{"nodeType":"YulVariableDeclaration","src":"5985:53:5","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6009:3:5","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"6014:4:5","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"5999:9:5"},"nodeType":"YulFunctionCall","src":"5999:20:5"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"6025:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"6034:2:5","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6021:3:5"},"nodeType":"YulFunctionCall","src":"6021:16:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5995:3:5"},"nodeType":"YulFunctionCall","src":"5995:43:5"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"5989:2:5","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"6094:14:5"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"6118:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6129:1:5","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6114:3:5"},"nodeType":"YulFunctionCall","src":"6114:17:5"},{"kind":"number","nodeType":"YulLiteral","src":"6133:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6110:3:5"},"nodeType":"YulFunctionCall","src":"6110:25:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6087:6:5"},"nodeType":"YulFunctionCall","src":"6087:49:5"},"nodeType":"YulExpressionStatement","src":"6087:49:5"},{"nodeType":"YulVariableDeclaration","src":"6692:30:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6710:2:5","type":"","value":"32"},{"name":"slength","nodeType":"YulIdentifier","src":"6714:7:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6706:3:5"},"nodeType":"YulFunctionCall","src":"6706:16:5"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"6696:6:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6739:33:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"6753:10:5"},{"name":"submod","nodeType":"YulIdentifier","src":"6765:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:5"},"nodeType":"YulFunctionCall","src":"6749:23:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"6743:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6789:35:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"6804:10:5"},{"name":"mlength","nodeType":"YulIdentifier","src":"6816:7:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6800:3:5"},"nodeType":"YulFunctionCall","src":"6800:24:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"6793:3:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6841:38:5","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6861:5:5","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"6868:6:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"6857:3:5"},"nodeType":"YulFunctionCall","src":"6857:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"6877:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6853:3:5"},"nodeType":"YulFunctionCall","src":"6853:26:5"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6845:4:5","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"6921:2:5"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"6983:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"7006:66:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6962:3:5"},"nodeType":"YulFunctionCall","src":"6962:128:5"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7118:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7112:5:5"},"nodeType":"YulFunctionCall","src":"7112:9:5"},{"name":"mask","nodeType":"YulIdentifier","src":"7123:4:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7108:3:5"},"nodeType":"YulFunctionCall","src":"7108:20:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6941:3:5"},"nodeType":"YulFunctionCall","src":"6941:205:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6897:6:5"},"nodeType":"YulFunctionCall","src":"6897:267:5"},"nodeType":"YulExpressionStatement","src":"6897:267:5"},{"body":{"nodeType":"YulBlock","src":"7392:61:5","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7421:2:5"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7431:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7425:5:5"},"nodeType":"YulFunctionCall","src":"7425:9:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7414:6:5"},"nodeType":"YulFunctionCall","src":"7414:21:5"},"nodeType":"YulExpressionStatement","src":"7414:21:5"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7286:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"7290:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7283:2:5"},"nodeType":"YulFunctionCall","src":"7283:11:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7295:96:5","statements":[{"nodeType":"YulAssignment","src":"7317:16:5","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7327:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"7331:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7323:3:5"},"nodeType":"YulFunctionCall","src":"7323:10:5"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7317:2:5"}]},{"nodeType":"YulAssignment","src":"7354:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7364:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"7368:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7360:3:5"},"nodeType":"YulFunctionCall","src":"7360:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7354:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"7186:96:5","statements":[{"nodeType":"YulAssignment","src":"7208:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7218:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"7222:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7214:3:5"},"nodeType":"YulFunctionCall","src":"7214:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7208:2:5"}]},{"nodeType":"YulAssignment","src":"7248:16:5","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7258:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"7262:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7254:3:5"},"nodeType":"YulFunctionCall","src":"7254:10:5"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7248:2:5"}]}]},"src":"7182:271:5"},{"nodeType":"YulAssignment","src":"7471:32:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7483:5:5","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7494:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"7498:3:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7490:3:5"},"nodeType":"YulFunctionCall","src":"7490:12:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"7479:3:5"},"nodeType":"YulFunctionCall","src":"7479:24:5"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"7471:4:5"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7528:2:5"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7546:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7540:5:5"},"nodeType":"YulFunctionCall","src":"7540:9:5"},{"name":"mask","nodeType":"YulIdentifier","src":"7551:4:5"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7536:3:5"},"nodeType":"YulFunctionCall","src":"7536:20:5"},{"name":"mask","nodeType":"YulIdentifier","src":"7558:4:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7532:3:5"},"nodeType":"YulFunctionCall","src":"7532:31:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7521:6:5"},"nodeType":"YulFunctionCall","src":"7521:43:5"},"nodeType":"YulExpressionStatement","src":"7521:43:5"}]},"nodeType":"YulCase","src":"5744:1834:5","value":{"kind":"number","nodeType":"YulLiteral","src":"5749:1:5","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"7599:1244:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7692:3:5","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"7697:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7685:6:5"},"nodeType":"YulFunctionCall","src":"7685:27:5"},"nodeType":"YulExpressionStatement","src":"7685:27:5"},{"nodeType":"YulVariableDeclaration","src":"7801:53:5","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7825:3:5","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"7830:4:5","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7815:9:5"},"nodeType":"YulFunctionCall","src":"7815:20:5"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"7841:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"7850:2:5","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7837:3:5"},"nodeType":"YulFunctionCall","src":"7837:16:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7811:3:5"},"nodeType":"YulFunctionCall","src":"7811:43:5"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"7805:2:5","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"7910:14:5"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"7934:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7945:1:5","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7930:3:5"},"nodeType":"YulFunctionCall","src":"7930:17:5"},{"kind":"number","nodeType":"YulLiteral","src":"7949:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7926:3:5"},"nodeType":"YulFunctionCall","src":"7926:25:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7903:6:5"},"nodeType":"YulFunctionCall","src":"7903:49:5"},"nodeType":"YulExpressionStatement","src":"7903:49:5"},{"nodeType":"YulVariableDeclaration","src":"8071:34:5","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"8093:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"8102:2:5","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8089:3:5"},"nodeType":"YulFunctionCall","src":"8089:16:5"},"variables":[{"name":"slengthmod","nodeType":"YulTypedName","src":"8075:10:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8122:34:5","value":{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"8144:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"8153:2:5","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8140:3:5"},"nodeType":"YulFunctionCall","src":"8140:16:5"},"variables":[{"name":"mlengthmod","nodeType":"YulTypedName","src":"8126:10:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8173:33:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8191:2:5","type":"","value":"32"},{"name":"slengthmod","nodeType":"YulIdentifier","src":"8195:10:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8187:3:5"},"nodeType":"YulFunctionCall","src":"8187:19:5"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"8177:6:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8223:33:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8237:10:5"},{"name":"submod","nodeType":"YulIdentifier","src":"8249:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8233:3:5"},"nodeType":"YulFunctionCall","src":"8233:23:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"8227:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8273:35:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8288:10:5"},{"name":"mlength","nodeType":"YulIdentifier","src":"8300:7:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8284:3:5"},"nodeType":"YulFunctionCall","src":"8284:24:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"8277:3:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8325:38:5","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8345:5:5","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"8352:6:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8341:3:5"},"nodeType":"YulFunctionCall","src":"8341:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"8361:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8337:3:5"},"nodeType":"YulFunctionCall","src":"8337:26:5"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"8329:4:5","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8388:2:5"},{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8402:2:5"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8396:5:5"},"nodeType":"YulFunctionCall","src":"8396:9:5"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8417:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8411:5:5"},"nodeType":"YulFunctionCall","src":"8411:9:5"},{"name":"mask","nodeType":"YulIdentifier","src":"8422:4:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8407:3:5"},"nodeType":"YulFunctionCall","src":"8407:20:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8392:3:5"},"nodeType":"YulFunctionCall","src":"8392:36:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8381:6:5"},"nodeType":"YulFunctionCall","src":"8381:48:5"},"nodeType":"YulExpressionStatement","src":"8381:48:5"},{"body":{"nodeType":"YulBlock","src":"8657:61:5","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8686:2:5"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8696:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8690:5:5"},"nodeType":"YulFunctionCall","src":"8690:9:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8679:6:5"},"nodeType":"YulFunctionCall","src":"8679:21:5"},"nodeType":"YulExpressionStatement","src":"8679:21:5"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8551:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"8555:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8548:2:5"},"nodeType":"YulFunctionCall","src":"8548:11:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8560:96:5","statements":[{"nodeType":"YulAssignment","src":"8582:16:5","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8592:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"8596:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8588:3:5"},"nodeType":"YulFunctionCall","src":"8588:10:5"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8582:2:5"}]},{"nodeType":"YulAssignment","src":"8619:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8629:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"8633:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8625:3:5"},"nodeType":"YulFunctionCall","src":"8625:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8619:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"8451:96:5","statements":[{"nodeType":"YulAssignment","src":"8473:16:5","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8483:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"8487:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8479:3:5"},"nodeType":"YulFunctionCall","src":"8479:10:5"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8473:2:5"}]},{"nodeType":"YulAssignment","src":"8510:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8520:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"8524:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8516:3:5"},"nodeType":"YulFunctionCall","src":"8516:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8510:2:5"}]}]},"src":"8447:271:5"},{"nodeType":"YulAssignment","src":"8736:32:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8748:5:5","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8759:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"8763:3:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8755:3:5"},"nodeType":"YulFunctionCall","src":"8755:12:5"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8744:3:5"},"nodeType":"YulFunctionCall","src":"8744:24:5"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"8736:4:5"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8793:2:5"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8811:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8805:5:5"},"nodeType":"YulFunctionCall","src":"8805:9:5"},{"name":"mask","nodeType":"YulIdentifier","src":"8816:4:5"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8801:3:5"},"nodeType":"YulFunctionCall","src":"8801:20:5"},{"name":"mask","nodeType":"YulIdentifier","src":"8823:4:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8797:3:5"},"nodeType":"YulFunctionCall","src":"8797:31:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8786:6:5"},"nodeType":"YulFunctionCall","src":"8786:43:5"},"nodeType":"YulExpressionStatement","src":"8786:43:5"}]},"nodeType":"YulCase","src":"7591:1252:5","value":"default"}],"expression":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4486:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"4495:2:5","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4483:2:5"},"nodeType":"YulFunctionCall","src":"4483:15:5"},{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"4503:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4514:2:5","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4500:2:5"},"nodeType":"YulFunctionCall","src":"4500:17:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4479:3:5"},"nodeType":"YulFunctionCall","src":"4479:39:5"},"nodeType":"YulSwitch","src":"4472:4371:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1046,"isOffset":false,"isSlot":false,"src":"4155:10:5","valueSize":1},{"declaration":1046,"isOffset":false,"isSlot":false,"src":"5221:10:5","valueSize":1},{"declaration":1046,"isOffset":false,"isSlot":false,"src":"6753:10:5","valueSize":1},{"declaration":1046,"isOffset":false,"isSlot":false,"src":"6804:10:5","valueSize":1},{"declaration":1046,"isOffset":false,"isSlot":false,"src":"8237:10:5","valueSize":1},{"declaration":1046,"isOffset":false,"isSlot":false,"src":"8288:10:5","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"3565:14:5","suffix":"slot","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"4803:14:5","suffix":"slot","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"5953:14:5","suffix":"slot","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"6094:14:5","suffix":"slot","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"7697:14:5","suffix":"slot","valueSize":1},{"declaration":1044,"isOffset":false,"isSlot":true,"src":"7910:14:5","suffix":"slot","valueSize":1}],"id":1049,"nodeType":"InlineAssembly","src":"3326:5527:5"}]},"id":1051,"implemented":true,"kind":"function","modifiers":[],"name":"concatStorage","nameLocation":"3243:13:5","nodeType":"FunctionDefinition","parameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1044,"mutability":"mutable","name":"_preBytes","nameLocation":"3271:9:5","nodeType":"VariableDeclaration","scope":1051,"src":"3257:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1043,"name":"bytes","nodeType":"ElementaryTypeName","src":"3257:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1046,"mutability":"mutable","name":"_postBytes","nameLocation":"3295:10:5","nodeType":"VariableDeclaration","scope":1051,"src":"3282:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1045,"name":"bytes","nodeType":"ElementaryTypeName","src":"3282:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3256:50:5"},"returnParameters":{"id":1048,"nodeType":"ParameterList","parameters":[],"src":"3316:0:5"},"scope":1357,"src":"3234:5625:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1087,"nodeType":"Block","src":"9017:2560:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1063,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"9035:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9045:2:5","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"9035:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1066,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"9051:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9035:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9060:16:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":1062,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9027:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9027:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1070,"nodeType":"ExpressionStatement","src":"9027:50:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1072,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"9095:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9102:6:5","memberName":"length","nodeType":"MemberAccess","src":"9095:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1074,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"9112:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1075,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"9121:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9112:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9095:33:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9130:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":1071,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9087:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9087:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1080,"nodeType":"ExpressionStatement","src":"9087:63:5"},{"assignments":[1082],"declarations":[{"constant":false,"id":1082,"mutability":"mutable","name":"tempBytes","nameLocation":"9174:9:5","nodeType":"VariableDeclaration","scope":1087,"src":"9161:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1081,"name":"bytes","nodeType":"ElementaryTypeName","src":"9161:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1083,"nodeType":"VariableDeclarationStatement","src":"9161:22:5"},{"AST":{"nodeType":"YulBlock","src":"9203:2341:5","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"9259:1888:5","statements":[{"nodeType":"YulAssignment","src":"9407:24:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9426:4:5","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9420:5:5"},"nodeType":"YulFunctionCall","src":"9420:11:5"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"9407:9:5"}]},{"nodeType":"YulVariableDeclaration","src":"10023:33:5","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"10044:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"10053:2:5","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10040:3:5"},"nodeType":"YulFunctionCall","src":"10040:16:5"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"10027:9:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10361:70:5","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"10379:9:5"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"10390:9:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10375:3:5"},"nodeType":"YulFunctionCall","src":"10375:25:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10406:4:5","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"10419:9:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10412:6:5"},"nodeType":"YulFunctionCall","src":"10412:17:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10402:3:5"},"nodeType":"YulFunctionCall","src":"10402:28:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10371:3:5"},"nodeType":"YulFunctionCall","src":"10371:60:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"10365:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10448:27:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10463:2:5"},{"name":"_length","nodeType":"YulIdentifier","src":"10467:7:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:5"},"nodeType":"YulFunctionCall","src":"10459:16:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"10452:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"10849:61:5","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10878:2:5"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"10888:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10882:5:5"},"nodeType":"YulFunctionCall","src":"10882:9:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10871:6:5"},"nodeType":"YulFunctionCall","src":"10871:21:5"},"nodeType":"YulExpressionStatement","src":"10871:21:5"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10740:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"10744:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10737:2:5"},"nodeType":"YulFunctionCall","src":"10737:11:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10749:99:5","statements":[{"nodeType":"YulAssignment","src":"10771:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10781:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"10785:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10777:3:5"},"nodeType":"YulFunctionCall","src":"10777:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"10771:2:5"}]},{"nodeType":"YulAssignment","src":"10811:19:5","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"10821:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"10825:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10817:3:5"},"nodeType":"YulFunctionCall","src":"10817:13:5"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"10811:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"10497:239:5","statements":[{"nodeType":"YulVariableDeclaration","src":"10638:80:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"10660:6:5"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"10668:9:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10656:3:5"},"nodeType":"YulFunctionCall","src":"10656:22:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10684:4:5","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"10697:9:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10690:6:5"},"nodeType":"YulFunctionCall","src":"10690:17:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10680:3:5"},"nodeType":"YulFunctionCall","src":"10680:28:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10652:3:5"},"nodeType":"YulFunctionCall","src":"10652:57:5"},{"name":"_start","nodeType":"YulIdentifier","src":"10711:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10648:3:5"},"nodeType":"YulFunctionCall","src":"10648:70:5"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"10642:2:5","type":""}]}]},"src":"10493:417:5"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"10935:9:5"},{"name":"_length","nodeType":"YulIdentifier","src":"10946:7:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10928:6:5"},"nodeType":"YulFunctionCall","src":"10928:26:5"},"nodeType":"YulExpressionStatement","src":"10928:26:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11101:4:5","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11115:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"11119:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11111:3:5"},"nodeType":"YulFunctionCall","src":"11111:11:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11128:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11124:3:5"},"nodeType":"YulFunctionCall","src":"11124:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11107:3:5"},"nodeType":"YulFunctionCall","src":"11107:25:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11094:6:5"},"nodeType":"YulFunctionCall","src":"11094:39:5"},"nodeType":"YulExpressionStatement","src":"11094:39:5"}]},"nodeType":"YulCase","src":"9252:1895:5","value":{"kind":"number","nodeType":"YulLiteral","src":"9257:1:5","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"11251:283:5","statements":[{"nodeType":"YulAssignment","src":"11269:24:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11288:4:5","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11282:5:5"},"nodeType":"YulFunctionCall","src":"11282:11:5"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11269:9:5"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11455:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"11466:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11448:6:5"},"nodeType":"YulFunctionCall","src":"11448:20:5"},"nodeType":"YulExpressionStatement","src":"11448:20:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11493:4:5","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11503:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"11514:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11499:3:5"},"nodeType":"YulFunctionCall","src":"11499:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11486:6:5"},"nodeType":"YulFunctionCall","src":"11486:34:5"},"nodeType":"YulExpressionStatement","src":"11486:34:5"}]},"nodeType":"YulCase","src":"11243:291:5","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"9231:7:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9224:6:5"},"nodeType":"YulFunctionCall","src":"9224:15:5"},"nodeType":"YulSwitch","src":"9217:2317:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1053,"isOffset":false,"isSlot":false,"src":"10660:6:5","valueSize":1},{"declaration":1057,"isOffset":false,"isSlot":false,"src":"10044:7:5","valueSize":1},{"declaration":1057,"isOffset":false,"isSlot":false,"src":"10467:7:5","valueSize":1},{"declaration":1057,"isOffset":false,"isSlot":false,"src":"10946:7:5","valueSize":1},{"declaration":1057,"isOffset":false,"isSlot":false,"src":"9231:7:5","valueSize":1},{"declaration":1055,"isOffset":false,"isSlot":false,"src":"10711:6:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"10379:9:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"10935:9:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"11269:9:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"11455:9:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"11503:9:5","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"9407:9:5","valueSize":1}],"id":1084,"nodeType":"InlineAssembly","src":"9194:2350:5"},{"expression":{"id":1085,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"11561:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1061,"id":1086,"nodeType":"Return","src":"11554:16:5"}]},"id":1088,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"8874:5:5","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"_bytes","nameLocation":"8902:6:5","nodeType":"VariableDeclaration","scope":1088,"src":"8889:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1052,"name":"bytes","nodeType":"ElementaryTypeName","src":"8889:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"_start","nameLocation":"8926:6:5","nodeType":"VariableDeclaration","scope":1088,"src":"8918:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1054,"name":"uint256","nodeType":"ElementaryTypeName","src":"8918:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"_length","nameLocation":"8950:7:5","nodeType":"VariableDeclaration","scope":1088,"src":"8942:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"8942:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8879:84:5"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1088,"src":"8999:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1059,"name":"bytes","nodeType":"ElementaryTypeName","src":"8999:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8998:14:5"},"scope":1357,"src":"8865:2712:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1113,"nodeType":"Block","src":"11671:266:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1098,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"11689:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11696:6:5","memberName":"length","nodeType":"MemberAccess","src":"11689:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1100,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"11706:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:5","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"11706:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11689:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f75744f66426f756e6473","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11719:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""},"value":"toAddress_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""}],"id":1097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11681:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11681:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1106,"nodeType":"ExpressionStatement","src":"11681:62:5"},{"assignments":[1108],"declarations":[{"constant":false,"id":1108,"mutability":"mutable","name":"tempAddress","nameLocation":"11761:11:5","nodeType":"VariableDeclaration","scope":1113,"src":"11753:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1107,"name":"address","nodeType":"ElementaryTypeName","src":"11753:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1109,"nodeType":"VariableDeclarationStatement","src":"11753:19:5"},{"AST":{"nodeType":"YulBlock","src":"11792:110:5","statements":[{"nodeType":"YulAssignment","src":"11806:86:5","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"11839:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"11847:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11835:3:5"},"nodeType":"YulFunctionCall","src":"11835:17:5"},{"name":"_start","nodeType":"YulIdentifier","src":"11854:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11831:3:5"},"nodeType":"YulFunctionCall","src":"11831:30:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11825:5:5"},"nodeType":"YulFunctionCall","src":"11825:37:5"},{"kind":"number","nodeType":"YulLiteral","src":"11864:27:5","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11821:3:5"},"nodeType":"YulFunctionCall","src":"11821:71:5"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"11806:11:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1090,"isOffset":false,"isSlot":false,"src":"11839:6:5","valueSize":1},{"declaration":1092,"isOffset":false,"isSlot":false,"src":"11854:6:5","valueSize":1},{"declaration":1108,"isOffset":false,"isSlot":false,"src":"11806:11:5","valueSize":1}],"id":1110,"nodeType":"InlineAssembly","src":"11783:119:5"},{"expression":{"id":1111,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"11919:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1096,"id":1112,"nodeType":"Return","src":"11912:18:5"}]},"id":1114,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nameLocation":"11592:9:5","nodeType":"FunctionDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"_bytes","nameLocation":"11615:6:5","nodeType":"VariableDeclaration","scope":1114,"src":"11602:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1089,"name":"bytes","nodeType":"ElementaryTypeName","src":"11602:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"_start","nameLocation":"11631:6:5","nodeType":"VariableDeclaration","scope":1114,"src":"11623:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"11623:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:37:5"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"11662:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1094,"name":"address","nodeType":"ElementaryTypeName","src":"11662:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11661:9:5"},"scope":1357,"src":"11583:354:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"12027:218:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1124,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"12045:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12052:6:5","memberName":"length","nodeType":"MemberAccess","src":"12045:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1126,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"12062:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12071:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12062:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12045:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e74385f6f75744f66426f756e6473","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12075:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""},"value":"toUint8_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""}],"id":1123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12037:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12037:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1132,"nodeType":"ExpressionStatement","src":"12037:60:5"},{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"tempUint","nameLocation":"12113:8:5","nodeType":"VariableDeclaration","scope":1139,"src":"12107:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1133,"name":"uint8","nodeType":"ElementaryTypeName","src":"12107:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1135,"nodeType":"VariableDeclarationStatement","src":"12107:14:5"},{"AST":{"nodeType":"YulBlock","src":"12141:72:5","statements":[{"nodeType":"YulAssignment","src":"12155:48:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12181:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"12189:3:5","type":"","value":"0x1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12177:3:5"},"nodeType":"YulFunctionCall","src":"12177:16:5"},{"name":"_start","nodeType":"YulIdentifier","src":"12195:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:5"},"nodeType":"YulFunctionCall","src":"12173:29:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12167:5:5"},"nodeType":"YulFunctionCall","src":"12167:36:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"12155:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1116,"isOffset":false,"isSlot":false,"src":"12181:6:5","valueSize":1},{"declaration":1118,"isOffset":false,"isSlot":false,"src":"12195:6:5","valueSize":1},{"declaration":1134,"isOffset":false,"isSlot":false,"src":"12155:8:5","valueSize":1}],"id":1136,"nodeType":"InlineAssembly","src":"12132:81:5"},{"expression":{"id":1137,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"12230:8:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1122,"id":1138,"nodeType":"Return","src":"12223:15:5"}]},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"11952:7:5","nodeType":"FunctionDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"_bytes","nameLocation":"11973:6:5","nodeType":"VariableDeclaration","scope":1140,"src":"11960:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1115,"name":"bytes","nodeType":"ElementaryTypeName","src":"11960:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"_start","nameLocation":"11989:6:5","nodeType":"VariableDeclaration","scope":1140,"src":"11981:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"11981:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11959:37:5"},"returnParameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1140,"src":"12020:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1120,"name":"uint8","nodeType":"ElementaryTypeName","src":"12020:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"12019:7:5"},"scope":1357,"src":"11943:302:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1165,"nodeType":"Block","src":"12337:219:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1150,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"12355:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12362:6:5","memberName":"length","nodeType":"MemberAccess","src":"12355:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1152,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"12372:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12381:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12372:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12355:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7431365f6f75744f66426f756e6473","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12384:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""},"value":"toUint16_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""}],"id":1149,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12347:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12347:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1158,"nodeType":"ExpressionStatement","src":"12347:60:5"},{"assignments":[1160],"declarations":[{"constant":false,"id":1160,"mutability":"mutable","name":"tempUint","nameLocation":"12424:8:5","nodeType":"VariableDeclaration","scope":1165,"src":"12417:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1159,"name":"uint16","nodeType":"ElementaryTypeName","src":"12417:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":1161,"nodeType":"VariableDeclarationStatement","src":"12417:15:5"},{"AST":{"nodeType":"YulBlock","src":"12452:72:5","statements":[{"nodeType":"YulAssignment","src":"12466:48:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12492:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"12500:3:5","type":"","value":"0x2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12488:3:5"},"nodeType":"YulFunctionCall","src":"12488:16:5"},{"name":"_start","nodeType":"YulIdentifier","src":"12506:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12484:3:5"},"nodeType":"YulFunctionCall","src":"12484:29:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12478:5:5"},"nodeType":"YulFunctionCall","src":"12478:36:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"12466:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1142,"isOffset":false,"isSlot":false,"src":"12492:6:5","valueSize":1},{"declaration":1144,"isOffset":false,"isSlot":false,"src":"12506:6:5","valueSize":1},{"declaration":1160,"isOffset":false,"isSlot":false,"src":"12466:8:5","valueSize":1}],"id":1162,"nodeType":"InlineAssembly","src":"12443:81:5"},{"expression":{"id":1163,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12541:8:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":1148,"id":1164,"nodeType":"Return","src":"12534:15:5"}]},"id":1166,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"12260:8:5","nodeType":"FunctionDefinition","parameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"_bytes","nameLocation":"12282:6:5","nodeType":"VariableDeclaration","scope":1166,"src":"12269:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1141,"name":"bytes","nodeType":"ElementaryTypeName","src":"12269:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"_start","nameLocation":"12298:6:5","nodeType":"VariableDeclaration","scope":1166,"src":"12290:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"12290:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12268:37:5"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1166,"src":"12329:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1146,"name":"uint16","nodeType":"ElementaryTypeName","src":"12329:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"12328:8:5"},"scope":1357,"src":"12251:305:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1191,"nodeType":"Block","src":"12648:219:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1176,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"12666:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12673:6:5","memberName":"length","nodeType":"MemberAccess","src":"12666:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1178,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"12683:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12692:1:5","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12683:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12666:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7433325f6f75744f66426f756e6473","id":1182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12695:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""},"value":"toUint32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""}],"id":1175,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12658:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12658:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1184,"nodeType":"ExpressionStatement","src":"12658:60:5"},{"assignments":[1186],"declarations":[{"constant":false,"id":1186,"mutability":"mutable","name":"tempUint","nameLocation":"12735:8:5","nodeType":"VariableDeclaration","scope":1191,"src":"12728:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1185,"name":"uint32","nodeType":"ElementaryTypeName","src":"12728:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1187,"nodeType":"VariableDeclarationStatement","src":"12728:15:5"},{"AST":{"nodeType":"YulBlock","src":"12763:72:5","statements":[{"nodeType":"YulAssignment","src":"12777:48:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12803:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"12811:3:5","type":"","value":"0x4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12799:3:5"},"nodeType":"YulFunctionCall","src":"12799:16:5"},{"name":"_start","nodeType":"YulIdentifier","src":"12817:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12795:3:5"},"nodeType":"YulFunctionCall","src":"12795:29:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12789:5:5"},"nodeType":"YulFunctionCall","src":"12789:36:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"12777:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1168,"isOffset":false,"isSlot":false,"src":"12803:6:5","valueSize":1},{"declaration":1170,"isOffset":false,"isSlot":false,"src":"12817:6:5","valueSize":1},{"declaration":1186,"isOffset":false,"isSlot":false,"src":"12777:8:5","valueSize":1}],"id":1188,"nodeType":"InlineAssembly","src":"12754:81:5"},{"expression":{"id":1189,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"12852:8:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1174,"id":1190,"nodeType":"Return","src":"12845:15:5"}]},"id":1192,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"12571:8:5","nodeType":"FunctionDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"_bytes","nameLocation":"12593:6:5","nodeType":"VariableDeclaration","scope":1192,"src":"12580:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1167,"name":"bytes","nodeType":"ElementaryTypeName","src":"12580:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"_start","nameLocation":"12609:6:5","nodeType":"VariableDeclaration","scope":1192,"src":"12601:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"12601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12579:37:5"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1192,"src":"12640:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1172,"name":"uint32","nodeType":"ElementaryTypeName","src":"12640:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12639:8:5"},"scope":1357,"src":"12562:305:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1217,"nodeType":"Block","src":"12959:219:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1202,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"12977:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12984:6:5","memberName":"length","nodeType":"MemberAccess","src":"12977:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1204,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"12994:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"38","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13003:1:5","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12994:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12977:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7436345f6f75744f66426f756e6473","id":1208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13006:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""},"value":"toUint64_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""}],"id":1201,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12969:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12969:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1210,"nodeType":"ExpressionStatement","src":"12969:60:5"},{"assignments":[1212],"declarations":[{"constant":false,"id":1212,"mutability":"mutable","name":"tempUint","nameLocation":"13046:8:5","nodeType":"VariableDeclaration","scope":1217,"src":"13039:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1211,"name":"uint64","nodeType":"ElementaryTypeName","src":"13039:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1213,"nodeType":"VariableDeclarationStatement","src":"13039:15:5"},{"AST":{"nodeType":"YulBlock","src":"13074:72:5","statements":[{"nodeType":"YulAssignment","src":"13088:48:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13114:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"13122:3:5","type":"","value":"0x8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13110:3:5"},"nodeType":"YulFunctionCall","src":"13110:16:5"},{"name":"_start","nodeType":"YulIdentifier","src":"13128:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13106:3:5"},"nodeType":"YulFunctionCall","src":"13106:29:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13100:5:5"},"nodeType":"YulFunctionCall","src":"13100:36:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13088:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1194,"isOffset":false,"isSlot":false,"src":"13114:6:5","valueSize":1},{"declaration":1196,"isOffset":false,"isSlot":false,"src":"13128:6:5","valueSize":1},{"declaration":1212,"isOffset":false,"isSlot":false,"src":"13088:8:5","valueSize":1}],"id":1214,"nodeType":"InlineAssembly","src":"13065:81:5"},{"expression":{"id":1215,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"13163:8:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1200,"id":1216,"nodeType":"Return","src":"13156:15:5"}]},"id":1218,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"12882:8:5","nodeType":"FunctionDefinition","parameters":{"id":1197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"_bytes","nameLocation":"12904:6:5","nodeType":"VariableDeclaration","scope":1218,"src":"12891:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"12891:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"_start","nameLocation":"12920:6:5","nodeType":"VariableDeclaration","scope":1218,"src":"12912:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1195,"name":"uint256","nodeType":"ElementaryTypeName","src":"12912:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12890:37:5"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1218,"src":"12951:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1198,"name":"uint64","nodeType":"ElementaryTypeName","src":"12951:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"12950:8:5"},"scope":1357,"src":"12873:305:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1243,"nodeType":"Block","src":"13270:220:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1228,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"13288:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13295:6:5","memberName":"length","nodeType":"MemberAccess","src":"13288:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1230,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"13305:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13314:2:5","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"13305:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13288:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7439365f6f75744f66426f756e6473","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13318:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""},"value":"toUint96_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""}],"id":1227,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13280:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13280:61:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1236,"nodeType":"ExpressionStatement","src":"13280:61:5"},{"assignments":[1238],"declarations":[{"constant":false,"id":1238,"mutability":"mutable","name":"tempUint","nameLocation":"13358:8:5","nodeType":"VariableDeclaration","scope":1243,"src":"13351:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1237,"name":"uint96","nodeType":"ElementaryTypeName","src":"13351:6:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":1239,"nodeType":"VariableDeclarationStatement","src":"13351:15:5"},{"AST":{"nodeType":"YulBlock","src":"13386:72:5","statements":[{"nodeType":"YulAssignment","src":"13400:48:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13426:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"13434:3:5","type":"","value":"0xc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13422:3:5"},"nodeType":"YulFunctionCall","src":"13422:16:5"},{"name":"_start","nodeType":"YulIdentifier","src":"13440:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13418:3:5"},"nodeType":"YulFunctionCall","src":"13418:29:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13412:5:5"},"nodeType":"YulFunctionCall","src":"13412:36:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13400:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1220,"isOffset":false,"isSlot":false,"src":"13426:6:5","valueSize":1},{"declaration":1222,"isOffset":false,"isSlot":false,"src":"13440:6:5","valueSize":1},{"declaration":1238,"isOffset":false,"isSlot":false,"src":"13400:8:5","valueSize":1}],"id":1240,"nodeType":"InlineAssembly","src":"13377:81:5"},{"expression":{"id":1241,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"13475:8:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":1226,"id":1242,"nodeType":"Return","src":"13468:15:5"}]},"id":1244,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"13193:8:5","nodeType":"FunctionDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"_bytes","nameLocation":"13215:6:5","nodeType":"VariableDeclaration","scope":1244,"src":"13202:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1219,"name":"bytes","nodeType":"ElementaryTypeName","src":"13202:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1222,"mutability":"mutable","name":"_start","nameLocation":"13231:6:5","nodeType":"VariableDeclaration","scope":1244,"src":"13223:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"13223:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13201:37:5"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"13262:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1224,"name":"uint96","nodeType":"ElementaryTypeName","src":"13262:6:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"13261:8:5"},"scope":1357,"src":"13184:306:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"13584:223:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1254,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"13602:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13609:6:5","memberName":"length","nodeType":"MemberAccess","src":"13602:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"13619:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3136","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13628:2:5","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13619:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13602:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743132385f6f75744f66426f756e6473","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13632:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""},"value":"toUint128_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""}],"id":1253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13594:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13594:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1262,"nodeType":"ExpressionStatement","src":"13594:62:5"},{"assignments":[1264],"declarations":[{"constant":false,"id":1264,"mutability":"mutable","name":"tempUint","nameLocation":"13674:8:5","nodeType":"VariableDeclaration","scope":1269,"src":"13666:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1263,"name":"uint128","nodeType":"ElementaryTypeName","src":"13666:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":1265,"nodeType":"VariableDeclarationStatement","src":"13666:16:5"},{"AST":{"nodeType":"YulBlock","src":"13702:73:5","statements":[{"nodeType":"YulAssignment","src":"13716:49:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13742:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"13750:4:5","type":"","value":"0x10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13738:3:5"},"nodeType":"YulFunctionCall","src":"13738:17:5"},{"name":"_start","nodeType":"YulIdentifier","src":"13757:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13734:3:5"},"nodeType":"YulFunctionCall","src":"13734:30:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13728:5:5"},"nodeType":"YulFunctionCall","src":"13728:37:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13716:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1246,"isOffset":false,"isSlot":false,"src":"13742:6:5","valueSize":1},{"declaration":1248,"isOffset":false,"isSlot":false,"src":"13757:6:5","valueSize":1},{"declaration":1264,"isOffset":false,"isSlot":false,"src":"13716:8:5","valueSize":1}],"id":1266,"nodeType":"InlineAssembly","src":"13693:82:5"},{"expression":{"id":1267,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"13792:8:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":1252,"id":1268,"nodeType":"Return","src":"13785:15:5"}]},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"13505:9:5","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"_bytes","nameLocation":"13528:6:5","nodeType":"VariableDeclaration","scope":1270,"src":"13515:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1245,"name":"bytes","nodeType":"ElementaryTypeName","src":"13515:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"_start","nameLocation":"13544:6:5","nodeType":"VariableDeclaration","scope":1270,"src":"13536:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"13536:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13514:37:5"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1270,"src":"13575:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1250,"name":"uint128","nodeType":"ElementaryTypeName","src":"13575:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"13574:9:5"},"scope":1357,"src":"13496:311:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1295,"nodeType":"Block","src":"13901:223:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1280,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"13919:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13926:6:5","memberName":"length","nodeType":"MemberAccess","src":"13919:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1282,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"13936:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13945:2:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"13936:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13919:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743235365f6f75744f66426f756e6473","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13949:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""},"value":"toUint256_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""}],"id":1279,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13911:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13911:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"13911:62:5"},{"assignments":[1290],"declarations":[{"constant":false,"id":1290,"mutability":"mutable","name":"tempUint","nameLocation":"13991:8:5","nodeType":"VariableDeclaration","scope":1295,"src":"13983:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"13983:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1291,"nodeType":"VariableDeclarationStatement","src":"13983:16:5"},{"AST":{"nodeType":"YulBlock","src":"14019:73:5","statements":[{"nodeType":"YulAssignment","src":"14033:49:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14059:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"14067:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14055:3:5"},"nodeType":"YulFunctionCall","src":"14055:17:5"},{"name":"_start","nodeType":"YulIdentifier","src":"14074:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14051:3:5"},"nodeType":"YulFunctionCall","src":"14051:30:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14045:5:5"},"nodeType":"YulFunctionCall","src":"14045:37:5"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14033:8:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1272,"isOffset":false,"isSlot":false,"src":"14059:6:5","valueSize":1},{"declaration":1274,"isOffset":false,"isSlot":false,"src":"14074:6:5","valueSize":1},{"declaration":1290,"isOffset":false,"isSlot":false,"src":"14033:8:5","valueSize":1}],"id":1292,"nodeType":"InlineAssembly","src":"14010:82:5"},{"expression":{"id":1293,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"14109:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1278,"id":1294,"nodeType":"Return","src":"14102:15:5"}]},"id":1296,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"13822:9:5","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"_bytes","nameLocation":"13845:6:5","nodeType":"VariableDeclaration","scope":1296,"src":"13832:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1271,"name":"bytes","nodeType":"ElementaryTypeName","src":"13832:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"_start","nameLocation":"13861:6:5","nodeType":"VariableDeclaration","scope":1296,"src":"13853:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"13853:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13831:37:5"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1296,"src":"13892:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1276,"name":"uint256","nodeType":"ElementaryTypeName","src":"13892:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13891:9:5"},"scope":1357,"src":"13813:311:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1321,"nodeType":"Block","src":"14218:232:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1306,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"14236:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14243:6:5","memberName":"length","nodeType":"MemberAccess","src":"14236:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"14253:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:2:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14253:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14236:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f427974657333325f6f75744f66426f756e6473","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14266:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""},"value":"toBytes32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""}],"id":1305,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14228:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14228:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1314,"nodeType":"ExpressionStatement","src":"14228:62:5"},{"assignments":[1316],"declarations":[{"constant":false,"id":1316,"mutability":"mutable","name":"tempBytes32","nameLocation":"14308:11:5","nodeType":"VariableDeclaration","scope":1321,"src":"14300:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1315,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14300:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1317,"nodeType":"VariableDeclarationStatement","src":"14300:19:5"},{"AST":{"nodeType":"YulBlock","src":"14339:76:5","statements":[{"nodeType":"YulAssignment","src":"14353:52:5","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14382:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"14390:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14378:3:5"},"nodeType":"YulFunctionCall","src":"14378:17:5"},{"name":"_start","nodeType":"YulIdentifier","src":"14397:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14374:3:5"},"nodeType":"YulFunctionCall","src":"14374:30:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14368:5:5"},"nodeType":"YulFunctionCall","src":"14368:37:5"},"variableNames":[{"name":"tempBytes32","nodeType":"YulIdentifier","src":"14353:11:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1298,"isOffset":false,"isSlot":false,"src":"14382:6:5","valueSize":1},{"declaration":1300,"isOffset":false,"isSlot":false,"src":"14397:6:5","valueSize":1},{"declaration":1316,"isOffset":false,"isSlot":false,"src":"14353:11:5","valueSize":1}],"id":1318,"nodeType":"InlineAssembly","src":"14330:85:5"},{"expression":{"id":1319,"name":"tempBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"14432:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1304,"id":1320,"nodeType":"Return","src":"14425:18:5"}]},"id":1322,"implemented":true,"kind":"function","modifiers":[],"name":"toBytes32","nameLocation":"14139:9:5","nodeType":"FunctionDefinition","parameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"_bytes","nameLocation":"14162:6:5","nodeType":"VariableDeclaration","scope":1322,"src":"14149:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1297,"name":"bytes","nodeType":"ElementaryTypeName","src":"14149:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"_start","nameLocation":"14178:6:5","nodeType":"VariableDeclaration","scope":1322,"src":"14170:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"14170:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14148:37:5"},"returnParameters":{"id":1304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1322,"src":"14209:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14209:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14208:9:5"},"scope":1357,"src":"14130:320:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1338,"nodeType":"Block","src":"14549:1291:5","statements":[{"assignments":[1332],"declarations":[{"constant":false,"id":1332,"mutability":"mutable","name":"success","nameLocation":"14564:7:5","nodeType":"VariableDeclaration","scope":1338,"src":"14559:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1331,"name":"bool","nodeType":"ElementaryTypeName","src":"14559:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1334,"initialValue":{"hexValue":"74727565","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14574:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"14559:19:5"},{"AST":{"nodeType":"YulBlock","src":"14598:1211:5","statements":[{"nodeType":"YulVariableDeclaration","src":"14612:30:5","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"14632:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14626:5:5"},"nodeType":"YulFunctionCall","src":"14626:16:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14616:6:5","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"14771:937:5","statements":[{"nodeType":"YulVariableDeclaration","src":"14984:11:5","value":{"kind":"number","nodeType":"YulLiteral","src":"14994:1:5","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"14988:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15013:30:5","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15027:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"15038:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15023:3:5"},"nodeType":"YulFunctionCall","src":"15023:20:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"15017:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15060:26:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15075:2:5"},{"name":"length","nodeType":"YulIdentifier","src":"15079:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15071:3:5"},"nodeType":"YulFunctionCall","src":"15071:15:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"15064:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"15418:276:5","statements":[{"body":{"nodeType":"YulBlock","src":"15550:126:5","statements":[{"nodeType":"YulAssignment","src":"15610:12:5","value":{"kind":"number","nodeType":"YulLiteral","src":"15621:1:5","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"15610:7:5"}]},{"nodeType":"YulAssignment","src":"15647:7:5","value":{"kind":"number","nodeType":"YulLiteral","src":"15653:1:5","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"15647:2:5"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15533:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15527:5:5"},"nodeType":"YulFunctionCall","src":"15527:9:5"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15544:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15538:5:5"},"nodeType":"YulFunctionCall","src":"15538:9:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15524:2:5"},"nodeType":"YulFunctionCall","src":"15524:24:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15517:6:5"},"nodeType":"YulFunctionCall","src":"15517:32:5"},"nodeType":"YulIf","src":"15514:162:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15300:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"15304:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15297:2:5"},"nodeType":"YulFunctionCall","src":"15297:11:5"},{"name":"cb","nodeType":"YulIdentifier","src":"15310:2:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15293:3:5"},"nodeType":"YulFunctionCall","src":"15293:20:5"},{"kind":"number","nodeType":"YulLiteral","src":"15315:1:5","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15290:2:5"},"nodeType":"YulFunctionCall","src":"15290:27:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15318:99:5","statements":[{"nodeType":"YulAssignment","src":"15340:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15350:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"15354:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15346:3:5"},"nodeType":"YulFunctionCall","src":"15346:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"15340:2:5"}]},{"nodeType":"YulAssignment","src":"15380:19:5","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15390:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"15394:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15386:3:5"},"nodeType":"YulFunctionCall","src":"15386:13:5"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"15380:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"15108:181:5","statements":[{"nodeType":"YulVariableDeclaration","src":"15130:31:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"15144:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"15156:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15140:3:5"},"nodeType":"YulFunctionCall","src":"15140:21:5"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"15134:2:5","type":""}]}]},"src":"15104:590:5"}]},"nodeType":"YulCase","src":"14764:944:5","value":{"kind":"number","nodeType":"YulLiteral","src":"14769:1:5","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"15729:70:5","statements":[{"nodeType":"YulAssignment","src":"15773:12:5","value":{"kind":"number","nodeType":"YulLiteral","src":"15784:1:5","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"15773:7:5"}]}]},"nodeType":"YulCase","src":"15721:78:5","value":"default"}],"expression":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14725:6:5"},{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"14739:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14733:5:5"},"nodeType":"YulFunctionCall","src":"14733:17:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14722:2:5"},"nodeType":"YulFunctionCall","src":"14722:29:5"},"nodeType":"YulSwitch","src":"14715:1084:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1326,"isOffset":false,"isSlot":false,"src":"14739:10:5","valueSize":1},{"declaration":1326,"isOffset":false,"isSlot":false,"src":"15144:10:5","valueSize":1},{"declaration":1324,"isOffset":false,"isSlot":false,"src":"14632:9:5","valueSize":1},{"declaration":1324,"isOffset":false,"isSlot":false,"src":"15027:9:5","valueSize":1},{"declaration":1332,"isOffset":false,"isSlot":false,"src":"15610:7:5","valueSize":1},{"declaration":1332,"isOffset":false,"isSlot":false,"src":"15773:7:5","valueSize":1}],"id":1335,"nodeType":"InlineAssembly","src":"14589:1220:5"},{"expression":{"id":1336,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"15826:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1330,"id":1337,"nodeType":"Return","src":"15819:14:5"}]},"id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"14465:5:5","nodeType":"FunctionDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"_preBytes","nameLocation":"14484:9:5","nodeType":"VariableDeclaration","scope":1339,"src":"14471:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1323,"name":"bytes","nodeType":"ElementaryTypeName","src":"14471:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"_postBytes","nameLocation":"14508:10:5","nodeType":"VariableDeclaration","scope":1339,"src":"14495:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1325,"name":"bytes","nodeType":"ElementaryTypeName","src":"14495:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14470:49:5"},"returnParameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1339,"src":"14543:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1328,"name":"bool","nodeType":"ElementaryTypeName","src":"14543:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14542:6:5"},"scope":1357,"src":"14456:1384:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1355,"nodeType":"Block","src":"15985:2491:5","statements":[{"assignments":[1349],"declarations":[{"constant":false,"id":1349,"mutability":"mutable","name":"success","nameLocation":"16000:7:5","nodeType":"VariableDeclaration","scope":1355,"src":"15995:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1348,"name":"bool","nodeType":"ElementaryTypeName","src":"15995:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1351,"initialValue":{"hexValue":"74727565","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16010:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"15995:19:5"},{"AST":{"nodeType":"YulBlock","src":"16034:2411:5","statements":[{"nodeType":"YulVariableDeclaration","src":"16089:34:5","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"16108:14:5"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16102:5:5"},"nodeType":"YulFunctionCall","src":"16102:21:5"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"16093:5:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16210:76:5","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16233:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16248:5:5","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16266:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"16273:1:5","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16262:3:5"},"nodeType":"YulFunctionCall","src":"16262:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16255:6:5"},"nodeType":"YulFunctionCall","src":"16255:21:5"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16244:3:5"},"nodeType":"YulFunctionCall","src":"16244:33:5"},{"kind":"number","nodeType":"YulLiteral","src":"16279:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16240:3:5"},"nodeType":"YulFunctionCall","src":"16240:41:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16229:3:5"},"nodeType":"YulFunctionCall","src":"16229:53:5"},{"kind":"number","nodeType":"YulLiteral","src":"16284:1:5","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16225:3:5"},"nodeType":"YulFunctionCall","src":"16225:61:5"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"16214:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16299:32:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"16320:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16314:5:5"},"nodeType":"YulFunctionCall","src":"16314:17:5"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"16303:7:5","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16451:1893:5","statements":[{"body":{"nodeType":"YulBlock","src":"16750:1580:5","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"16822:332:5","statements":[{"nodeType":"YulAssignment","src":"16911:38:5","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16928:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"16935:5:5","type":"","value":"0x100"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16924:3:5"},"nodeType":"YulFunctionCall","src":"16924:17:5"},{"kind":"number","nodeType":"YulLiteral","src":"16943:5:5","type":"","value":"0x100"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16920:3:5"},"nodeType":"YulFunctionCall","src":"16920:29:5"},"variableNames":[{"name":"fslot","nodeType":"YulIdentifier","src":"16911:5:5"}]},{"body":{"nodeType":"YulBlock","src":"17026:106:5","statements":[{"nodeType":"YulAssignment","src":"17094:12:5","value":{"kind":"number","nodeType":"YulLiteral","src":"17105:1:5","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"17094:7:5"}]}]},"condition":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16988:5:5"},{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17005:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"17017:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17001:3:5"},"nodeType":"YulFunctionCall","src":"17001:21:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16995:5:5"},"nodeType":"YulFunctionCall","src":"16995:28:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16985:2:5"},"nodeType":"YulFunctionCall","src":"16985:39:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16978:6:5"},"nodeType":"YulFunctionCall","src":"16978:47:5"},"nodeType":"YulIf","src":"16975:157:5"}]},"nodeType":"YulCase","src":"16815:339:5","value":{"kind":"number","nodeType":"YulLiteral","src":"16820:1:5","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"17183:1129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"17436:11:5","value":{"kind":"number","nodeType":"YulLiteral","src":"17446:1:5","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"17440:2:5","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17556:3:5","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"17561:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17549:6:5"},"nodeType":"YulFunctionCall","src":"17549:27:5"},"nodeType":"YulExpressionStatement","src":"17549:27:5"},{"nodeType":"YulVariableDeclaration","src":"17601:30:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17621:3:5","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"17626:4:5","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17611:9:5"},"nodeType":"YulFunctionCall","src":"17611:20:5"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"17605:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17657:31:5","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17671:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"17683:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17667:3:5"},"nodeType":"YulFunctionCall","src":"17667:21:5"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"17661:2:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17713:27:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"17728:2:5"},{"name":"mlength","nodeType":"YulIdentifier","src":"17732:7:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17724:3:5"},"nodeType":"YulFunctionCall","src":"17724:16:5"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"17717:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"18040:250:5","statements":[{"body":{"nodeType":"YulBlock","src":"18106:158:5","statements":[{"nodeType":"YulAssignment","src":"18182:12:5","value":{"kind":"number","nodeType":"YulLiteral","src":"18193:1:5","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18182:7:5"}]},{"nodeType":"YulAssignment","src":"18227:7:5","value":{"kind":"number","nodeType":"YulLiteral","src":"18233:1:5","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"18227:2:5"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18089:2:5"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18083:5:5"},"nodeType":"YulFunctionCall","src":"18083:9:5"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18100:2:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18094:5:5"},"nodeType":"YulFunctionCall","src":"18094:9:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18080:2:5"},"nodeType":"YulFunctionCall","src":"18080:24:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18073:6:5"},"nodeType":"YulFunctionCall","src":"18073:32:5"},"nodeType":"YulIf","src":"18070:194:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"17901:2:5"},{"name":"end","nodeType":"YulIdentifier","src":"17905:3:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17898:2:5"},"nodeType":"YulFunctionCall","src":"17898:11:5"},{"name":"cb","nodeType":"YulIdentifier","src":"17911:2:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17894:3:5"},"nodeType":"YulFunctionCall","src":"17894:20:5"},{"kind":"number","nodeType":"YulLiteral","src":"17916:1:5","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17891:2:5"},"nodeType":"YulFunctionCall","src":"17891:27:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17919:120:5","statements":[{"nodeType":"YulAssignment","src":"17949:16:5","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"17959:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"17963:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17955:3:5"},"nodeType":"YulFunctionCall","src":"17955:10:5"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"17949:2:5"}]},{"nodeType":"YulAssignment","src":"17994:19:5","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18004:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"18008:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18000:3:5"},"nodeType":"YulFunctionCall","src":"18000:13:5"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"17994:2:5"}]}]},"pre":{"nodeType":"YulBlock","src":"17888:2:5","statements":[]},"src":"17884:406:5"}]},"nodeType":"YulCase","src":"17175:1137:5","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16782:7:5"},{"kind":"number","nodeType":"YulLiteral","src":"16791:2:5","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16779:2:5"},"nodeType":"YulFunctionCall","src":"16779:15:5"},"nodeType":"YulSwitch","src":"16772:1540:5"}]},"condition":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16740:7:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16733:6:5"},"nodeType":"YulFunctionCall","src":"16733:15:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16726:6:5"},"nodeType":"YulFunctionCall","src":"16726:23:5"},"nodeType":"YulIf","src":"16723:1607:5"}]},"nodeType":"YulCase","src":"16444:1900:5","value":{"kind":"number","nodeType":"YulLiteral","src":"16449:1:5","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18365:70:5","statements":[{"nodeType":"YulAssignment","src":"18409:12:5","value":{"kind":"number","nodeType":"YulLiteral","src":"18420:1:5","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18409:7:5"}]}]},"nodeType":"YulCase","src":"18357:78:5","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16414:7:5"},{"name":"mlength","nodeType":"YulIdentifier","src":"16423:7:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16411:2:5"},"nodeType":"YulFunctionCall","src":"16411:20:5"},"nodeType":"YulSwitch","src":"16404:2031:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":1343,"isOffset":false,"isSlot":false,"src":"16320:10:5","valueSize":1},{"declaration":1343,"isOffset":false,"isSlot":false,"src":"17005:10:5","valueSize":1},{"declaration":1343,"isOffset":false,"isSlot":false,"src":"17671:10:5","valueSize":1},{"declaration":1341,"isOffset":false,"isSlot":true,"src":"16108:14:5","suffix":"slot","valueSize":1},{"declaration":1341,"isOffset":false,"isSlot":true,"src":"17561:14:5","suffix":"slot","valueSize":1},{"declaration":1349,"isOffset":false,"isSlot":false,"src":"17094:7:5","valueSize":1},{"declaration":1349,"isOffset":false,"isSlot":false,"src":"18182:7:5","valueSize":1},{"declaration":1349,"isOffset":false,"isSlot":false,"src":"18409:7:5","valueSize":1}],"id":1352,"nodeType":"InlineAssembly","src":"16025:2420:5"},{"expression":{"id":1353,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"18462:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1347,"id":1354,"nodeType":"Return","src":"18455:14:5"}]},"id":1356,"implemented":true,"kind":"function","modifiers":[],"name":"equalStorage","nameLocation":"15855:12:5","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"_preBytes","nameLocation":"15891:9:5","nodeType":"VariableDeclaration","scope":1356,"src":"15877:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1340,"name":"bytes","nodeType":"ElementaryTypeName","src":"15877:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"_postBytes","nameLocation":"15923:10:5","nodeType":"VariableDeclaration","scope":1356,"src":"15910:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1342,"name":"bytes","nodeType":"ElementaryTypeName","src":"15910:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15867:72:5"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1356,"src":"15975:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1345,"name":"bool","nodeType":"ElementaryTypeName","src":"15975:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15974:6:5"},"scope":1357,"src":"15846:2630:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1358,"src":"370:18108:5","usedErrors":[]}],"src":"336:18143:5"},"id":5},"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol":{"ast":{"absolutePath":"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol","exportedSymbols":{"ExcessivelySafeCall":[1454]},"id":1455,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1359,"literals":["solidity",">=","0.7",".6"],"nodeType":"PragmaDirective","src":"46:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"ExcessivelySafeCall","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1454,"linearizedBaseContracts":[1454],"name":"ExcessivelySafeCall","nameLocation":"80:19:6","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1362,"mutability":"constant","name":"LOW_28_MASK","nameLocation":"123:11:6","nodeType":"VariableDeclaration","scope":1454,"src":"106:101:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"106:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830303030303030306666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"141:66:6","typeDescriptions":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249215_by_1","typeString":"int_const 2695...(60 digits omitted)...9215"},"value":"0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},"visibility":"internal"},{"body":{"id":1396,"nodeType":"Block","src":"1295:1063:6","statements":[{"assignments":[1379],"declarations":[{"constant":false,"id":1379,"mutability":"mutable","name":"_toCopy","nameLocation":"1349:7:6","nodeType":"VariableDeclaration","scope":1396,"src":"1341:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1380,"nodeType":"VariableDeclarationStatement","src":"1341:15:6"},{"assignments":[1382],"declarations":[{"constant":false,"id":1382,"mutability":"mutable","name":"_success","nameLocation":"1371:8:6","nodeType":"VariableDeclaration","scope":1396,"src":"1366:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1381,"name":"bool","nodeType":"ElementaryTypeName","src":"1366:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1383,"nodeType":"VariableDeclarationStatement","src":"1366:13:6"},{"assignments":[1385],"declarations":[{"constant":false,"id":1385,"mutability":"mutable","name":"_returnData","nameLocation":"1402:11:6","nodeType":"VariableDeclaration","scope":1396,"src":"1389:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1384,"name":"bytes","nodeType":"ElementaryTypeName","src":"1389:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1390,"initialValue":{"arguments":[{"id":1388,"name":"_maxCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"1426:8:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":1387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1416:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1386,"name":"bytes","nodeType":"ElementaryTypeName","src":"1420:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1416:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1389:46:6"},{"AST":{"nodeType":"YulBlock","src":"1664:648:6","statements":[{"nodeType":"YulAssignment","src":"1678:251:6","value":{"arguments":[{"name":"_gas","nodeType":"YulIdentifier","src":"1708:4:6"},{"name":"_target","nodeType":"YulIdentifier","src":"1733:7:6"},{"kind":"number","nodeType":"YulLiteral","src":"1767:1:6","type":"","value":"0"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"1801:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1812:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1797:3:6"},"nodeType":"YulFunctionCall","src":"1797:20:6"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"1846:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1840:5:6"},"nodeType":"YulFunctionCall","src":"1840:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"1879:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:6","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"1690:4:6"},"nodeType":"YulFunctionCall","src":"1690:239:6"},"variableNames":[{"name":"_success","nodeType":"YulIdentifier","src":"1678:8:6"}]},{"nodeType":"YulAssignment","src":"1981:27:6","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1992:14:6"},"nodeType":"YulFunctionCall","src":"1992:16:6"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"1981:7:6"}]},{"body":{"nodeType":"YulBlock","src":"2046:51:6","statements":[{"nodeType":"YulAssignment","src":"2064:19:6","value":{"name":"_maxCopy","nodeType":"YulIdentifier","src":"2075:8:6"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"2064:7:6"}]}]},"condition":{"arguments":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"2027:7:6"},{"name":"_maxCopy","nodeType":"YulIdentifier","src":"2036:8:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2024:2:6"},"nodeType":"YulFunctionCall","src":"2024:21:6"},"nodeType":"YulIf","src":"2021:76:6"},{"expression":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"2165:11:6"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"2178:7:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2158:6:6"},"nodeType":"YulFunctionCall","src":"2158:28:6"},"nodeType":"YulExpressionStatement","src":"2158:28:6"},{"expression":{"arguments":[{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"2271:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"2284:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2267:3:6"},"nodeType":"YulFunctionCall","src":"2267:22:6"},{"kind":"number","nodeType":"YulLiteral","src":"2291:1:6","type":"","value":"0"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"2294:7:6"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2252:14:6"},"nodeType":"YulFunctionCall","src":"2252:50:6"},"nodeType":"YulExpressionStatement","src":"2252:50:6"}]},"evmVersion":"paris","externalReferences":[{"declaration":1371,"isOffset":false,"isSlot":false,"src":"1801:9:6","valueSize":1},{"declaration":1371,"isOffset":false,"isSlot":false,"src":"1846:9:6","valueSize":1},{"declaration":1367,"isOffset":false,"isSlot":false,"src":"1708:4:6","valueSize":1},{"declaration":1369,"isOffset":false,"isSlot":false,"src":"2036:8:6","valueSize":1},{"declaration":1369,"isOffset":false,"isSlot":false,"src":"2075:8:6","valueSize":1},{"declaration":1385,"isOffset":false,"isSlot":false,"src":"2165:11:6","valueSize":1},{"declaration":1385,"isOffset":false,"isSlot":false,"src":"2271:11:6","valueSize":1},{"declaration":1382,"isOffset":false,"isSlot":false,"src":"1678:8:6","valueSize":1},{"declaration":1365,"isOffset":false,"isSlot":false,"src":"1733:7:6","valueSize":1},{"declaration":1379,"isOffset":false,"isSlot":false,"src":"1981:7:6","valueSize":1},{"declaration":1379,"isOffset":false,"isSlot":false,"src":"2027:7:6","valueSize":1},{"declaration":1379,"isOffset":false,"isSlot":false,"src":"2064:7:6","valueSize":1},{"declaration":1379,"isOffset":false,"isSlot":false,"src":"2178:7:6","valueSize":1},{"declaration":1379,"isOffset":false,"isSlot":false,"src":"2294:7:6","valueSize":1}],"id":1391,"nodeType":"InlineAssembly","src":"1655:657:6"},{"expression":{"components":[{"id":1392,"name":"_success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"2329:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1393,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"2339:11:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":1394,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2328:23:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":1377,"id":1395,"nodeType":"Return","src":"2321:30:6"}]},"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"214:899:6","text":"@notice Use when you _really_ really _really_ don't trust the called\n contract. This prevents the called contract from causing reversion of\n the caller in as many ways as we can.\n @dev The main difference between this and a solidity low-level call is\n that we limit the number of bytes that the callee can cause to be\n copied to caller memory. This prevents stupid things like malicious\n contracts returning 10,000,000 bytes causing a local OOG when copying\n to memory.\n @param _target The address to call\n @param _gas The amount of gas to forward to the remote contract\n @param _maxCopy The maximum number of bytes of returndata to copy\n to memory.\n @param _calldata The data to send to the remote contract\n @return success and returndata, as `.call()`. Returndata is capped to\n `_maxCopy` bytes."},"id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"excessivelySafeCall","nameLocation":"1127:19:6","nodeType":"FunctionDefinition","parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"_target","nameLocation":"1164:7:6","nodeType":"VariableDeclaration","scope":1397,"src":"1156:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"1156:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1367,"mutability":"mutable","name":"_gas","nameLocation":"1189:4:6","nodeType":"VariableDeclaration","scope":1397,"src":"1181:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1366,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"_maxCopy","nameLocation":"1210:8:6","nodeType":"VariableDeclaration","scope":1397,"src":"1203:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1368,"name":"uint16","nodeType":"ElementaryTypeName","src":"1203:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"_calldata","nameLocation":"1241:9:6","nodeType":"VariableDeclaration","scope":1397,"src":"1228:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1370,"name":"bytes","nodeType":"ElementaryTypeName","src":"1228:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1146:110:6"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"1275:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1373,"name":"bool","nodeType":"ElementaryTypeName","src":"1275:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"1281:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1375,"name":"bytes","nodeType":"ElementaryTypeName","src":"1281:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1274:20:6"},"scope":1454,"src":"1118:1240:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1431,"nodeType":"Block","src":"3456:1039:6","statements":[{"assignments":[1414],"declarations":[{"constant":false,"id":1414,"mutability":"mutable","name":"_toCopy","nameLocation":"3510:7:6","nodeType":"VariableDeclaration","scope":1431,"src":"3502:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"3502:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1415,"nodeType":"VariableDeclarationStatement","src":"3502:15:6"},{"assignments":[1417],"declarations":[{"constant":false,"id":1417,"mutability":"mutable","name":"_success","nameLocation":"3532:8:6","nodeType":"VariableDeclaration","scope":1431,"src":"3527:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"3527:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1418,"nodeType":"VariableDeclarationStatement","src":"3527:13:6"},{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"_returnData","nameLocation":"3563:11:6","nodeType":"VariableDeclaration","scope":1431,"src":"3550:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1419,"name":"bytes","nodeType":"ElementaryTypeName","src":"3550:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1425,"initialValue":{"arguments":[{"id":1423,"name":"_maxCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"3587:8:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":1422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3577:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1421,"name":"bytes","nodeType":"ElementaryTypeName","src":"3581:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3550:46:6"},{"AST":{"nodeType":"YulBlock","src":"3825:624:6","statements":[{"nodeType":"YulAssignment","src":"3839:227:6","value":{"arguments":[{"name":"_gas","nodeType":"YulIdentifier","src":"3875:4:6"},{"name":"_target","nodeType":"YulIdentifier","src":"3900:7:6"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"3938:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3949:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3934:3:6"},"nodeType":"YulFunctionCall","src":"3934:20:6"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"3983:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3977:5:6"},"nodeType":"YulFunctionCall","src":"3977:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"4016:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4041:1:6","type":"","value":"0"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"3851:10:6"},"nodeType":"YulFunctionCall","src":"3851:215:6"},"variableNames":[{"name":"_success","nodeType":"YulIdentifier","src":"3839:8:6"}]},{"nodeType":"YulAssignment","src":"4118:27:6","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4129:14:6"},"nodeType":"YulFunctionCall","src":"4129:16:6"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4118:7:6"}]},{"body":{"nodeType":"YulBlock","src":"4183:51:6","statements":[{"nodeType":"YulAssignment","src":"4201:19:6","value":{"name":"_maxCopy","nodeType":"YulIdentifier","src":"4212:8:6"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4201:7:6"}]}]},"condition":{"arguments":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4164:7:6"},{"name":"_maxCopy","nodeType":"YulIdentifier","src":"4173:8:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4161:2:6"},"nodeType":"YulFunctionCall","src":"4161:21:6"},"nodeType":"YulIf","src":"4158:76:6"},{"expression":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"4302:11:6"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"4315:7:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4295:6:6"},"nodeType":"YulFunctionCall","src":"4295:28:6"},"nodeType":"YulExpressionStatement","src":"4295:28:6"},{"expression":{"arguments":[{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"4408:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"4421:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4404:3:6"},"nodeType":"YulFunctionCall","src":"4404:22:6"},{"kind":"number","nodeType":"YulLiteral","src":"4428:1:6","type":"","value":"0"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"4431:7:6"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"4389:14:6"},"nodeType":"YulFunctionCall","src":"4389:50:6"},"nodeType":"YulExpressionStatement","src":"4389:50:6"}]},"evmVersion":"paris","externalReferences":[{"declaration":1406,"isOffset":false,"isSlot":false,"src":"3938:9:6","valueSize":1},{"declaration":1406,"isOffset":false,"isSlot":false,"src":"3983:9:6","valueSize":1},{"declaration":1402,"isOffset":false,"isSlot":false,"src":"3875:4:6","valueSize":1},{"declaration":1404,"isOffset":false,"isSlot":false,"src":"4173:8:6","valueSize":1},{"declaration":1404,"isOffset":false,"isSlot":false,"src":"4212:8:6","valueSize":1},{"declaration":1420,"isOffset":false,"isSlot":false,"src":"4302:11:6","valueSize":1},{"declaration":1420,"isOffset":false,"isSlot":false,"src":"4408:11:6","valueSize":1},{"declaration":1417,"isOffset":false,"isSlot":false,"src":"3839:8:6","valueSize":1},{"declaration":1400,"isOffset":false,"isSlot":false,"src":"3900:7:6","valueSize":1},{"declaration":1414,"isOffset":false,"isSlot":false,"src":"4118:7:6","valueSize":1},{"declaration":1414,"isOffset":false,"isSlot":false,"src":"4164:7:6","valueSize":1},{"declaration":1414,"isOffset":false,"isSlot":false,"src":"4201:7:6","valueSize":1},{"declaration":1414,"isOffset":false,"isSlot":false,"src":"4315:7:6","valueSize":1},{"declaration":1414,"isOffset":false,"isSlot":false,"src":"4431:7:6","valueSize":1}],"id":1426,"nodeType":"InlineAssembly","src":"3816:633:6"},{"expression":{"components":[{"id":1427,"name":"_success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"4466:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1428,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4476:11:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":1429,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4465:23:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":1412,"id":1430,"nodeType":"Return","src":"4458:30:6"}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"2364:899:6","text":"@notice Use when you _really_ really _really_ don't trust the called\n contract. This prevents the called contract from causing reversion of\n the caller in as many ways as we can.\n @dev The main difference between this and a solidity low-level call is\n that we limit the number of bytes that the callee can cause to be\n copied to caller memory. This prevents stupid things like malicious\n contracts returning 10,000,000 bytes causing a local OOG when copying\n to memory.\n @param _target The address to call\n @param _gas The amount of gas to forward to the remote contract\n @param _maxCopy The maximum number of bytes of returndata to copy\n to memory.\n @param _calldata The data to send to the remote contract\n @return success and returndata, as `.call()`. Returndata is capped to\n `_maxCopy` bytes."},"id":1432,"implemented":true,"kind":"function","modifiers":[],"name":"excessivelySafeStaticCall","nameLocation":"3277:25:6","nodeType":"FunctionDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"_target","nameLocation":"3320:7:6","nodeType":"VariableDeclaration","scope":1432,"src":"3312:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"_gas","nameLocation":"3345:4:6","nodeType":"VariableDeclaration","scope":1432,"src":"3337:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"3337:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"_maxCopy","nameLocation":"3366:8:6","nodeType":"VariableDeclaration","scope":1432,"src":"3359:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1403,"name":"uint16","nodeType":"ElementaryTypeName","src":"3359:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"_calldata","nameLocation":"3397:9:6","nodeType":"VariableDeclaration","scope":1432,"src":"3384:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1405,"name":"bytes","nodeType":"ElementaryTypeName","src":"3384:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3302:110:6"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1432,"src":"3436:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1408,"name":"bool","nodeType":"ElementaryTypeName","src":"3436:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1432,"src":"3442:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1410,"name":"bytes","nodeType":"ElementaryTypeName","src":"3442:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3435:20:6"},"scope":1454,"src":"3268:1227:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1452,"nodeType":"Block","src":"5036:367:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1441,"name":"_buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"5054:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5059:6:6","memberName":"length","nodeType":"MemberAccess","src":"5054:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"34","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5069:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5054:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1440,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5046:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5046:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1446,"nodeType":"ExpressionStatement","src":"5046:25:6"},{"assignments":[1448],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"_mask","nameLocation":"5089:5:6","nodeType":"VariableDeclaration","scope":1452,"src":"5081:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1450,"initialValue":{"id":1449,"name":"LOW_28_MASK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"5097:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5081:27:6"},{"AST":{"nodeType":"YulBlock","src":"5127:270:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5175:35:6","value":{"arguments":[{"arguments":[{"name":"_buf","nodeType":"YulIdentifier","src":"5198:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"5204:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5194:3:6"},"nodeType":"YulFunctionCall","src":"5194:15:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5188:5:6"},"nodeType":"YulFunctionCall","src":"5188:22:6"},"variables":[{"name":"_word","nodeType":"YulTypedName","src":"5179:5:6","type":""}]},{"nodeType":"YulAssignment","src":"5273:26:6","value":{"arguments":[{"name":"_word","nodeType":"YulIdentifier","src":"5286:5:6"},{"name":"_mask","nodeType":"YulIdentifier","src":"5293:5:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5282:3:6"},"nodeType":"YulFunctionCall","src":"5282:17:6"},"variableNames":[{"name":"_word","nodeType":"YulIdentifier","src":"5273:5:6"}]},{"nodeType":"YulAssignment","src":"5312:32:6","value":{"arguments":[{"name":"_newSelector","nodeType":"YulIdentifier","src":"5324:12:6"},{"name":"_word","nodeType":"YulIdentifier","src":"5338:5:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5321:2:6"},"nodeType":"YulFunctionCall","src":"5321:23:6"},"variableNames":[{"name":"_word","nodeType":"YulIdentifier","src":"5312:5:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"_buf","nodeType":"YulIdentifier","src":"5368:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"5374:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5364:3:6"},"nodeType":"YulFunctionCall","src":"5364:15:6"},{"name":"_word","nodeType":"YulIdentifier","src":"5381:5:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5357:6:6"},"nodeType":"YulFunctionCall","src":"5357:30:6"},"nodeType":"YulExpressionStatement","src":"5357:30:6"}]},"evmVersion":"paris","externalReferences":[{"declaration":1437,"isOffset":false,"isSlot":false,"src":"5198:4:6","valueSize":1},{"declaration":1437,"isOffset":false,"isSlot":false,"src":"5368:4:6","valueSize":1},{"declaration":1448,"isOffset":false,"isSlot":false,"src":"5293:5:6","valueSize":1},{"declaration":1435,"isOffset":false,"isSlot":false,"src":"5324:12:6","valueSize":1}],"id":1451,"nodeType":"InlineAssembly","src":"5118:279:6"}]},"documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"4501:442:6","text":" @notice Swaps function selectors in encoded contract calls\n @dev Allows reuse of encoded calldata for functions with identical\n argument types but different names. It simply swaps out the first 4 bytes\n for the new selector. This function modifies memory in place, and should\n only be used with caution.\n @param _newSelector The new 4-byte selector\n @param _buf The encoded contract args"},"id":1453,"implemented":true,"kind":"function","modifiers":[],"name":"swapSelector","nameLocation":"4957:12:6","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"_newSelector","nameLocation":"4977:12:6","nodeType":"VariableDeclaration","scope":1453,"src":"4970:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4970:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"_buf","nameLocation":"5004:4:6","nodeType":"VariableDeclaration","scope":1453,"src":"4991:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1436,"name":"bytes","nodeType":"ElementaryTypeName","src":"4991:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4969:40:6"},"returnParameters":{"id":1439,"nodeType":"ParameterList","parameters":[],"src":"5036:0:6"},"scope":1454,"src":"4948:455:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1455,"src":"72:5333:6","usedErrors":[]}],"src":"46:5360:6"},"id":6},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"ContextUpgradeable":[2842],"Initializable":[1755],"OwnableUpgradeable":[1586]},"id":1587,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1457,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1587,"sourceUnit":2843,"src":"127:41:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1587,"sourceUnit":1756,"src":"169:42:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1460,"name":"Initializable","nameLocations":["748:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"748:13:7"},"id":1461,"nodeType":"InheritanceSpecifier","src":"748:13:7"},{"baseName":{"id":1462,"name":"ContextUpgradeable","nameLocations":["763:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"763:18:7"},"id":1463,"nodeType":"InheritanceSpecifier","src":"763:18:7"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"213:494:7","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":1586,"linearizedBaseContracts":[1586,2842,1755],"name":"OwnableUpgradeable","nameLocation":"726:18:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1465,"mutability":"mutable","name":"_owner","nameLocation":"804:6:7","nodeType":"VariableDeclaration","scope":1586,"src":"788:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1464,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":1471,"name":"OwnershipTransferred","nameLocation":"823:20:7","nodeType":"EventDefinition","parameters":{"id":1470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:7","nodeType":"VariableDeclaration","scope":1471,"src":"844:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1466,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1469,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:7","nodeType":"VariableDeclaration","scope":1471,"src":"875:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1468,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:7"},"src":"817:84:7"},{"body":{"id":1480,"nodeType":"Block","src":"1055:43:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1477,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1065:24:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"1065:26:7"}]},"documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"907:91:7","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":1481,"implemented":true,"kind":"function","modifiers":[{"id":1475,"kind":"modifierInvocation","modifierName":{"id":1474,"name":"onlyInitializing","nameLocations":["1038:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"1038:16:7"},"nodeType":"ModifierInvocation","src":"1038:16:7"}],"name":"__Ownable_init","nameLocation":"1012:14:7","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[],"src":"1026:2:7"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[],"src":"1055:0:7"},"scope":1586,"src":"1003:95:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1491,"nodeType":"Block","src":"1166:49:7","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1487,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1195:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1486,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"1176:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1490,"nodeType":"ExpressionStatement","src":"1176:32:7"}]},"id":1492,"implemented":true,"kind":"function","modifiers":[{"id":1484,"kind":"modifierInvocation","modifierName":{"id":1483,"name":"onlyInitializing","nameLocations":["1149:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"1149:16:7"},"nodeType":"ModifierInvocation","src":"1149:16:7"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:7","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[],"src":"1137:2:7"},"returnParameters":{"id":1485,"nodeType":"ParameterList","parameters":[],"src":"1166:0:7"},"scope":1586,"src":"1104:111:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1499,"nodeType":"Block","src":"1324:41:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1495,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1334:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1497,"nodeType":"ExpressionStatement","src":"1334:13:7"},{"id":1498,"nodeType":"PlaceholderStatement","src":"1357:1:7"}]},"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"1221:77:7","text":" @dev Throws if called by any account other than the owner."},"id":1500,"name":"onlyOwner","nameLocation":"1312:9:7","nodeType":"ModifierDefinition","parameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"1321:2:7"},"src":"1303:62:7","virtual":false,"visibility":"internal"},{"body":{"id":1508,"nodeType":"Block","src":"1496:30:7","statements":[{"expression":{"id":1506,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"1513:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1505,"id":1507,"nodeType":"Return","src":"1506:13:7"}]},"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"1371:65:7","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":1509,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:7","nodeType":"FunctionDefinition","parameters":{"id":1502,"nodeType":"ParameterList","parameters":[],"src":"1455:2:7"},"returnParameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1509,"src":"1487:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1503,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:7"},"scope":1586,"src":"1441:85:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1522,"nodeType":"Block","src":"1644:85:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1514,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"1662:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1516,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1673:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":1513,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"1654:68:7"}]},"documentation":{"id":1510,"nodeType":"StructuredDocumentation","src":"1532:62:7","text":" @dev Throws if the sender is not the owner."},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:7","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[],"src":"1619:2:7"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[],"src":"1644:0:7"},"scope":1586,"src":"1599:130:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1536,"nodeType":"Block","src":"2118:47:7","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1530,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:7","typeDescriptions":{}}},"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1529,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"2128:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1535,"nodeType":"ExpressionStatement","src":"2128:30:7"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"1735:324:7","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":1537,"implemented":true,"kind":"function","modifiers":[{"id":1527,"kind":"modifierInvocation","modifierName":{"id":1526,"name":"onlyOwner","nameLocations":["2108:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"2108:9:7"},"nodeType":"ModifierInvocation","src":"2108:9:7"}],"name":"renounceOwnership","nameLocation":"2073:17:7","nodeType":"FunctionDefinition","parameters":{"id":1525,"nodeType":"ParameterList","parameters":[],"src":"2090:2:7"},"returnParameters":{"id":1528,"nodeType":"ParameterList","parameters":[],"src":"2118:0:7"},"scope":1586,"src":"2064:101:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1559,"nodeType":"Block","src":"2384:128:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1546,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"2402:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1547,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:7","typeDescriptions":{}}},"id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":1545,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1554,"nodeType":"ExpressionStatement","src":"2394:73:7"},{"expression":{"arguments":[{"id":1556,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"2496:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1555,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"2477:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"2477:28:7"}]},"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"2171:138:7","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":1560,"implemented":true,"kind":"function","modifiers":[{"id":1543,"kind":"modifierInvocation","modifierName":{"id":1542,"name":"onlyOwner","nameLocations":["2374:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"2374:9:7"},"nodeType":"ModifierInvocation","src":"2374:9:7"}],"name":"transferOwnership","nameLocation":"2323:17:7","nodeType":"FunctionDefinition","parameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:7","nodeType":"VariableDeclaration","scope":1560,"src":"2341:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:7"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[],"src":"2384:0:7"},"scope":1586,"src":"2314:198:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1579,"nodeType":"Block","src":"2729:124:7","statements":[{"assignments":[1567],"declarations":[{"constant":false,"id":1567,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:7","nodeType":"VariableDeclaration","scope":1579,"src":"2739:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1566,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1569,"initialValue":{"id":1568,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2758:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:7"},{"expression":{"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1570,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2774:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1571,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"2783:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1573,"nodeType":"ExpressionStatement","src":"2774:17:7"},{"eventCall":{"arguments":[{"id":1575,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2827:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1576,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"2837:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1574,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"2806:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1578,"nodeType":"EmitStatement","src":"2801:45:7"}]},"documentation":{"id":1561,"nodeType":"StructuredDocumentation","src":"2518:143:7","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":1580,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:7","nodeType":"FunctionDefinition","parameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:7","nodeType":"VariableDeclaration","scope":1580,"src":"2694:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1562,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:7"},"returnParameters":{"id":1565,"nodeType":"ParameterList","parameters":[],"src":"2729:0:7"},"scope":1586,"src":"2666:187:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1581,"nodeType":"StructuredDocumentation","src":"2859:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1585,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:7","nodeType":"VariableDeclaration","scope":1586,"src":"3118:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1584,"length":{"hexValue":"3439","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:7","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1587,"src":"708:2438:7","usedErrors":[]}],"src":"102:3045:7"},"id":7},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"Initializable":[1755]},"id":1756,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1588,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":1589,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1756,"sourceUnit":2801,"src":"138:44:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1590,"nodeType":"StructuredDocumentation","src":"184:2209:8","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1755,"linearizedBaseContracts":[1755],"name":"Initializable","nameLocation":"2412:13:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"2432:109:8","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":1593,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:8","nodeType":"VariableDeclaration","scope":1755,"src":"2546:26:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1592,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"2579:91:8","text":" @dev Indicates that the contract is in the process of being initialized."},"id":1596,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:8","nodeType":"VariableDeclaration","scope":1755,"src":"2675:26:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1595,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"2708:90:8","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":1601,"name":"Initialized","nameLocation":"2809:11:8","nodeType":"EventDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:8","nodeType":"VariableDeclaration","scope":1601,"src":"2821:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1598,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:8"},"src":"2803:33:8"},{"body":{"id":1656,"nodeType":"Block","src":"3269:483:8","statements":[{"assignments":[1605],"declarations":[{"constant":false,"id":1605,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:8","nodeType":"VariableDeclaration","scope":1656,"src":"3279:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1604,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1608,"initialValue":{"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:8","subExpression":{"id":1606,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"3302:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"3347:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1611,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"3365:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:8","subExpression":{"arguments":[{"arguments":[{"id":1620,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1755","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1755","typeString":"contract Initializable"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:8","typeDescriptions":{}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1616,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"3388:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2800_$","typeString":"type(library AddressUpgradeable)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2488,"src":"3388:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1624,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"3436:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1609,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1632,"nodeType":"ExpressionStatement","src":"3325:201:8"},{"expression":{"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1633,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"3536:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1636,"nodeType":"ExpressionStatement","src":"3536:16:8"},{"condition":{"id":1637,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"3566:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1643,"nodeType":"IfStatement","src":"3562:65:8","trueBody":{"id":1642,"nodeType":"Block","src":"3582:45:8","statements":[{"expression":{"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1638,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"3596:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1641,"nodeType":"ExpressionStatement","src":"3596:20:8"}]}},{"id":1644,"nodeType":"PlaceholderStatement","src":"3636:1:8"},{"condition":{"id":1645,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"3651:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1655,"nodeType":"IfStatement","src":"3647:99:8","trueBody":{"id":1654,"nodeType":"Block","src":"3667:79:8","statements":[{"expression":{"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1646,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"3681:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1649,"nodeType":"ExpressionStatement","src":"3681:21:8"},{"eventCall":{"arguments":[{"hexValue":"31","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1650,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"3721:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"EmitStatement","src":"3716:19:8"}]}}]},"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"2842:399:8","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1657,"name":"initializer","nameLocation":"3255:11:8","nodeType":"ModifierDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[],"src":"3266:2:8"},"src":"3246:506:8","virtual":false,"visibility":"internal"},{"body":{"id":1689,"nodeType":"Block","src":"4863:255:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:8","subExpression":{"id":1663,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"4882:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1665,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"4899:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1666,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"4914:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1671,"nodeType":"ExpressionStatement","src":"4873:99:8"},{"expression":{"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1672,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"4982:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1673,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"4997:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1675,"nodeType":"ExpressionStatement","src":"4982:22:8"},{"expression":{"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1676,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5014:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1679,"nodeType":"ExpressionStatement","src":"5014:20:8"},{"id":1680,"nodeType":"PlaceholderStatement","src":"5044:1:8"},{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1681,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5055:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1684,"nodeType":"ExpressionStatement","src":"5055:21:8"},{"eventCall":{"arguments":[{"id":1686,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"5103:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1685,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"5091:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"EmitStatement","src":"5086:25:8"}]},"documentation":{"id":1658,"nodeType":"StructuredDocumentation","src":"3758:1062:8","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1690,"name":"reinitializer","nameLocation":"4834:13:8","nodeType":"ModifierDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"version","nameLocation":"4854:7:8","nodeType":"VariableDeclaration","scope":1690,"src":"4848:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1659,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:8"},"src":"4825:293:8","virtual":false,"visibility":"internal"},{"body":{"id":1699,"nodeType":"Block","src":"5356:97:8","statements":[{"expression":{"arguments":[{"id":1694,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5374:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"ExpressionStatement","src":"5366:69:8"},{"id":1698,"nodeType":"PlaceholderStatement","src":"5445:1:8"}]},"documentation":{"id":1691,"nodeType":"StructuredDocumentation","src":"5124:199:8","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1700,"name":"onlyInitializing","nameLocation":"5337:16:8","nodeType":"ModifierDefinition","parameters":{"id":1692,"nodeType":"ParameterList","parameters":[],"src":"5353:2:8"},"src":"5328:125:8","virtual":false,"visibility":"internal"},{"body":{"id":1735,"nodeType":"Block","src":"5988:231:8","statements":[{"expression":{"arguments":[{"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:8","subExpression":{"id":1705,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"6007:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1709,"nodeType":"ExpressionStatement","src":"5998:66:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1710,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"6078:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1712,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1711,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:8","memberName":"max","nodeType":"MemberAccess","src":"6094:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1734,"nodeType":"IfStatement","src":"6074:139:8","trueBody":{"id":1733,"nodeType":"Block","src":"6111:102:8","statements":[{"expression":{"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1717,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"6125:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1719,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1718,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:8","memberName":"max","nodeType":"MemberAccess","src":"6140:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1724,"nodeType":"ExpressionStatement","src":"6125:30:8"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1727,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1726,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:8","memberName":"max","nodeType":"MemberAccess","src":"6186:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1725,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"6174:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1732,"nodeType":"EmitStatement","src":"6169:33:8"}]}}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"5459:475:8","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1736,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:8","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[],"src":"5968:2:8"},"returnParameters":{"id":1703,"nodeType":"ParameterList","parameters":[],"src":"5988:0:8"},"scope":1755,"src":"5939:280:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1744,"nodeType":"Block","src":"6393:36:8","statements":[{"expression":{"id":1742,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"6410:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1741,"id":1743,"nodeType":"Return","src":"6403:19:8"}]},"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"6225:99:8","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1745,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:8","nodeType":"FunctionDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[],"src":"6360:2:8"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1745,"src":"6386:5:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1739,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:8"},"scope":1755,"src":"6329:100:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1753,"nodeType":"Block","src":"6601:37:8","statements":[{"expression":{"id":1751,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"6618:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1750,"id":1752,"nodeType":"Return","src":"6611:20:8"}]},"documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"6435:105:8","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1754,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:8","nodeType":"FunctionDefinition","parameters":{"id":1747,"nodeType":"ParameterList","parameters":[],"src":"6569:2:8"},"returnParameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1754,"src":"6595:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1748,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:8"},"scope":1755,"src":"6545:93:8","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1756,"src":"2394:4246:8","usedErrors":[]}],"src":"113:6528:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"ContextUpgradeable":[2842],"ERC20Upgradeable":[2367],"IERC20MetadataUpgradeable":[2470],"IERC20Upgradeable":[2445],"Initializable":[1755]},"id":2368,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1757,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":1758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2368,"sourceUnit":2446,"src":"130:33:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":1759,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2368,"sourceUnit":2471,"src":"164:52:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":1760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2368,"sourceUnit":2843,"src":"217:44:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1761,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2368,"sourceUnit":1756,"src":"262:45:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1763,"name":"Initializable","nameLocations":["1640:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"1640:13:9"},"id":1764,"nodeType":"InheritanceSpecifier","src":"1640:13:9"},{"baseName":{"id":1765,"name":"ContextUpgradeable","nameLocations":["1655:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"1655:18:9"},"id":1766,"nodeType":"InheritanceSpecifier","src":"1655:18:9"},{"baseName":{"id":1767,"name":"IERC20Upgradeable","nameLocations":["1675:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"1675:17:9"},"id":1768,"nodeType":"InheritanceSpecifier","src":"1675:17:9"},{"baseName":{"id":1769,"name":"IERC20MetadataUpgradeable","nameLocations":["1694:25:9"],"nodeType":"IdentifierPath","referencedDeclaration":2470,"src":"1694:25:9"},"id":1770,"nodeType":"InheritanceSpecifier","src":"1694:25:9"}],"canonicalName":"ERC20Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"309:1301:9","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":2367,"linearizedBaseContracts":[2367,2470,2445,2842,1755],"name":"ERC20Upgradeable","nameLocation":"1620:16:9","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1774,"mutability":"mutable","name":"_balances","nameLocation":"1762:9:9","nodeType":"VariableDeclaration","scope":2367,"src":"1726:45:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1773,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"1734:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1726:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1772,"name":"uint256","nodeType":"ElementaryTypeName","src":"1745:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1780,"mutability":"mutable","name":"_allowances","nameLocation":"1834:11:9","nodeType":"VariableDeclaration","scope":2367,"src":"1778:67:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":1779,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"1786:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1778:47:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1778,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1797:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1782,"mutability":"mutable","name":"_totalSupply","nameLocation":"1868:12:9","nodeType":"VariableDeclaration","scope":2367,"src":"1852:28:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1781,"name":"uint256","nodeType":"ElementaryTypeName","src":"1852:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1784,"mutability":"mutable","name":"_name","nameLocation":"1902:5:9","nodeType":"VariableDeclaration","scope":2367,"src":"1887:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1783,"name":"string","nodeType":"ElementaryTypeName","src":"1887:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1786,"mutability":"mutable","name":"_symbol","nameLocation":"1928:7:9","nodeType":"VariableDeclaration","scope":2367,"src":"1913:22:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1785,"name":"string","nodeType":"ElementaryTypeName","src":"1913:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":1801,"nodeType":"Block","src":"2210:55:9","statements":[{"expression":{"arguments":[{"id":1797,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"2243:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1798,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"2250:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1796,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"2220:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2220:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1800,"nodeType":"ExpressionStatement","src":"2220:38:9"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"1942:171:9","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":1802,"implemented":true,"kind":"function","modifiers":[{"id":1794,"kind":"modifierInvocation","modifierName":{"id":1793,"name":"onlyInitializing","nameLocations":["2193:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"2193:16:9"},"nodeType":"ModifierInvocation","src":"2193:16:9"}],"name":"__ERC20_init","nameLocation":"2127:12:9","nodeType":"FunctionDefinition","parameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"name_","nameLocation":"2154:5:9","nodeType":"VariableDeclaration","scope":1802,"src":"2140:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1788,"name":"string","nodeType":"ElementaryTypeName","src":"2140:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1791,"mutability":"mutable","name":"symbol_","nameLocation":"2175:7:9","nodeType":"VariableDeclaration","scope":1802,"src":"2161:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1790,"name":"string","nodeType":"ElementaryTypeName","src":"2161:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2139:44:9"},"returnParameters":{"id":1795,"nodeType":"ParameterList","parameters":[],"src":"2210:0:9"},"scope":2367,"src":"2118:147:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"2373:57:9","statements":[{"expression":{"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1811,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"2383:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1812,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"2391:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2383:13:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1814,"nodeType":"ExpressionStatement","src":"2383:13:9"},{"expression":{"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1815,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"2406:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1816,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"2416:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2406:17:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1818,"nodeType":"ExpressionStatement","src":"2406:17:9"}]},"id":1820,"implemented":true,"kind":"function","modifiers":[{"id":1809,"kind":"modifierInvocation","modifierName":{"id":1808,"name":"onlyInitializing","nameLocations":["2356:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"2356:16:9"},"nodeType":"ModifierInvocation","src":"2356:16:9"}],"name":"__ERC20_init_unchained","nameLocation":"2280:22:9","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"name_","nameLocation":"2317:5:9","nodeType":"VariableDeclaration","scope":1820,"src":"2303:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1803,"name":"string","nodeType":"ElementaryTypeName","src":"2303:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"symbol_","nameLocation":"2338:7:9","nodeType":"VariableDeclaration","scope":1820,"src":"2324:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1805,"name":"string","nodeType":"ElementaryTypeName","src":"2324:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2302:44:9"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[],"src":"2373:0:9"},"scope":2367,"src":"2271:159:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2457],"body":{"id":1829,"nodeType":"Block","src":"2564:29:9","statements":[{"expression":{"id":1827,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"2581:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1826,"id":1828,"nodeType":"Return","src":"2574:12:9"}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"2436:54:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1830,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2504:4:9","nodeType":"FunctionDefinition","overrides":{"id":1823,"nodeType":"OverrideSpecifier","overrides":[],"src":"2531:8:9"},"parameters":{"id":1822,"nodeType":"ParameterList","parameters":[],"src":"2508:2:9"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1830,"src":"2549:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1824,"name":"string","nodeType":"ElementaryTypeName","src":"2549:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2548:15:9"},"scope":2367,"src":"2495:98:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2463],"body":{"id":1839,"nodeType":"Block","src":"2777:31:9","statements":[{"expression":{"id":1837,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"2794:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1836,"id":1838,"nodeType":"Return","src":"2787:14:9"}]},"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"2599:102:9","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2715:6:9","nodeType":"FunctionDefinition","overrides":{"id":1833,"nodeType":"OverrideSpecifier","overrides":[],"src":"2744:8:9"},"parameters":{"id":1832,"nodeType":"ParameterList","parameters":[],"src":"2721:2:9"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"2762:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1834,"name":"string","nodeType":"ElementaryTypeName","src":"2762:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2761:15:9"},"scope":2367,"src":"2706:102:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2469],"body":{"id":1849,"nodeType":"Block","src":"3506:26:9","statements":[{"expression":{"hexValue":"3138","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3523:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":1846,"id":1848,"nodeType":"Return","src":"3516:9:9"}]},"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"2814:622:9","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":1850,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3450:8:9","nodeType":"FunctionDefinition","overrides":{"id":1843,"nodeType":"OverrideSpecifier","overrides":[],"src":"3481:8:9"},"parameters":{"id":1842,"nodeType":"ParameterList","parameters":[],"src":"3458:2:9"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1850,"src":"3499:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1844,"name":"uint8","nodeType":"ElementaryTypeName","src":"3499:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3498:7:9"},"scope":2367,"src":"3441:91:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2394],"body":{"id":1859,"nodeType":"Block","src":"3662:36:9","statements":[{"expression":{"id":1857,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"3679:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1858,"nodeType":"Return","src":"3672:19:9"}]},"documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"3538:49:9","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3601:11:9","nodeType":"FunctionDefinition","overrides":{"id":1853,"nodeType":"OverrideSpecifier","overrides":[],"src":"3635:8:9"},"parameters":{"id":1852,"nodeType":"ParameterList","parameters":[],"src":"3612:2:9"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1860,"src":"3653:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"3653:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3652:9:9"},"scope":2367,"src":"3592:106:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2402],"body":{"id":1873,"nodeType":"Block","src":"3839:42:9","statements":[{"expression":{"baseExpression":{"id":1869,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"3856:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1871,"indexExpression":{"id":1870,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"3866:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3856:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1868,"id":1872,"nodeType":"Return","src":"3849:25:9"}]},"documentation":{"id":1861,"nodeType":"StructuredDocumentation","src":"3704:47:9","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":1874,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3765:9:9","nodeType":"FunctionDefinition","overrides":{"id":1865,"nodeType":"OverrideSpecifier","overrides":[],"src":"3812:8:9"},"parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"account","nameLocation":"3783:7:9","nodeType":"VariableDeclaration","scope":1874,"src":"3775:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"3775:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3774:17:9"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1874,"src":"3830:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3829:9:9"},"scope":2367,"src":"3756:125:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2412],"body":{"id":1898,"nodeType":"Block","src":"4162:104:9","statements":[{"assignments":[1886],"declarations":[{"constant":false,"id":1886,"mutability":"mutable","name":"owner","nameLocation":"4180:5:9","nodeType":"VariableDeclaration","scope":1898,"src":"4172:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"4172:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1889,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1887,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"4188:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4188:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4172:28:9"},{"expression":{"arguments":[{"id":1891,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"4220:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1892,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"4227:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1893,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4231:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1890,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"4210:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4210:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1895,"nodeType":"ExpressionStatement","src":"4210:28:9"},{"expression":{"hexValue":"74727565","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4255:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1884,"id":1897,"nodeType":"Return","src":"4248:11:9"}]},"documentation":{"id":1875,"nodeType":"StructuredDocumentation","src":"3887:185:9","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4086:8:9","nodeType":"FunctionDefinition","overrides":{"id":1881,"nodeType":"OverrideSpecifier","overrides":[],"src":"4138:8:9"},"parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"to","nameLocation":"4103:2:9","nodeType":"VariableDeclaration","scope":1899,"src":"4095:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1876,"name":"address","nodeType":"ElementaryTypeName","src":"4095:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"amount","nameLocation":"4115:6:9","nodeType":"VariableDeclaration","scope":1899,"src":"4107:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"4107:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4094:28:9"},"returnParameters":{"id":1884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1899,"src":"4156:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1882,"name":"bool","nodeType":"ElementaryTypeName","src":"4156:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4155:6:9"},"scope":2367,"src":"4077:189:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2422],"body":{"id":1916,"nodeType":"Block","src":"4422:51:9","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1910,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"4439:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1912,"indexExpression":{"id":1911,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"4451:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4439:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1914,"indexExpression":{"id":1913,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"4458:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4439:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1909,"id":1915,"nodeType":"Return","src":"4432:34:9"}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"4272:47:9","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":1917,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4333:9:9","nodeType":"FunctionDefinition","overrides":{"id":1906,"nodeType":"OverrideSpecifier","overrides":[],"src":"4395:8:9"},"parameters":{"id":1905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"owner","nameLocation":"4351:5:9","nodeType":"VariableDeclaration","scope":1917,"src":"4343:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"4343:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1904,"mutability":"mutable","name":"spender","nameLocation":"4366:7:9","nodeType":"VariableDeclaration","scope":1917,"src":"4358:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"4358:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4342:32:9"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1917,"src":"4413:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"4413:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4412:9:9"},"scope":2367,"src":"4324:149:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2432],"body":{"id":1941,"nodeType":"Block","src":"4870:108:9","statements":[{"assignments":[1929],"declarations":[{"constant":false,"id":1929,"mutability":"mutable","name":"owner","nameLocation":"4888:5:9","nodeType":"VariableDeclaration","scope":1941,"src":"4880:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1928,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1932,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1930,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"4896:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4896:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4880:28:9"},{"expression":{"arguments":[{"id":1934,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"4927:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1935,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4934:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1936,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"4943:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1933,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"4918:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4918:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1938,"nodeType":"ExpressionStatement","src":"4918:32:9"},{"expression":{"hexValue":"74727565","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4967:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1927,"id":1940,"nodeType":"Return","src":"4960:11:9"}]},"documentation":{"id":1918,"nodeType":"StructuredDocumentation","src":"4479:297:9","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":1942,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4790:7:9","nodeType":"FunctionDefinition","overrides":{"id":1924,"nodeType":"OverrideSpecifier","overrides":[],"src":"4846:8:9"},"parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"spender","nameLocation":"4806:7:9","nodeType":"VariableDeclaration","scope":1942,"src":"4798:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"4798:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"amount","nameLocation":"4823:6:9","nodeType":"VariableDeclaration","scope":1942,"src":"4815:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"4815:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4797:33:9"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1942,"src":"4864:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1925,"name":"bool","nodeType":"ElementaryTypeName","src":"4864:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4863:6:9"},"scope":2367,"src":"4781:197:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2444],"body":{"id":1974,"nodeType":"Block","src":"5643:153:9","statements":[{"assignments":[1956],"declarations":[{"constant":false,"id":1956,"mutability":"mutable","name":"spender","nameLocation":"5661:7:9","nodeType":"VariableDeclaration","scope":1974,"src":"5653:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1955,"name":"address","nodeType":"ElementaryTypeName","src":"5653:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1959,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1957,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"5671:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5671:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5653:30:9"},{"expression":{"arguments":[{"id":1961,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"5709:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1962,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5715:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1963,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5724:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1960,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"5693:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5693:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1965,"nodeType":"ExpressionStatement","src":"5693:38:9"},{"expression":{"arguments":[{"id":1967,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"5751:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1968,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"5757:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1969,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5761:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1966,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"5741:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5741:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1971,"nodeType":"ExpressionStatement","src":"5741:27:9"},{"expression":{"hexValue":"74727565","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5785:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1954,"id":1973,"nodeType":"Return","src":"5778:11:9"}]},"documentation":{"id":1943,"nodeType":"StructuredDocumentation","src":"4984:551:9","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5549:12:9","nodeType":"FunctionDefinition","overrides":{"id":1951,"nodeType":"OverrideSpecifier","overrides":[],"src":"5619:8:9"},"parameters":{"id":1950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"from","nameLocation":"5570:4:9","nodeType":"VariableDeclaration","scope":1975,"src":"5562:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1944,"name":"address","nodeType":"ElementaryTypeName","src":"5562:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"to","nameLocation":"5584:2:9","nodeType":"VariableDeclaration","scope":1975,"src":"5576:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"5576:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"amount","nameLocation":"5596:6:9","nodeType":"VariableDeclaration","scope":1975,"src":"5588:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"5588:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5561:42:9"},"returnParameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1975,"src":"5637:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1952,"name":"bool","nodeType":"ElementaryTypeName","src":"5637:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5636:6:9"},"scope":2367,"src":"5540:256:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2003,"nodeType":"Block","src":"6285:140:9","statements":[{"assignments":[1986],"declarations":[{"constant":false,"id":1986,"mutability":"mutable","name":"owner","nameLocation":"6303:5:9","nodeType":"VariableDeclaration","scope":2003,"src":"6295:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1985,"name":"address","nodeType":"ElementaryTypeName","src":"6295:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1989,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1987,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"6311:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6311:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6295:28:9"},{"expression":{"arguments":[{"id":1991,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"6342:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1992,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6349:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1994,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"6368:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1995,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6375:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1993,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"6358:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1997,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"6386:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6358:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1990,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"6333:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2000,"nodeType":"ExpressionStatement","src":"6333:64:9"},{"expression":{"hexValue":"74727565","id":2001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6414:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1984,"id":2002,"nodeType":"Return","src":"6407:11:9"}]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"5802:384:9","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":2004,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6200:17:9","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"spender","nameLocation":"6226:7:9","nodeType":"VariableDeclaration","scope":2004,"src":"6218:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"6218:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1980,"mutability":"mutable","name":"addedValue","nameLocation":"6243:10:9","nodeType":"VariableDeclaration","scope":2004,"src":"6235:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1979,"name":"uint256","nodeType":"ElementaryTypeName","src":"6235:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6217:37:9"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2004,"src":"6279:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1982,"name":"bool","nodeType":"ElementaryTypeName","src":"6279:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6278:6:9"},"scope":2367,"src":"6191:234:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2044,"nodeType":"Block","src":"7011:328:9","statements":[{"assignments":[2015],"declarations":[{"constant":false,"id":2015,"mutability":"mutable","name":"owner","nameLocation":"7029:5:9","nodeType":"VariableDeclaration","scope":2044,"src":"7021:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"7021:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2018,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2016,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"7037:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7037:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7021:28:9"},{"assignments":[2020],"declarations":[{"constant":false,"id":2020,"mutability":"mutable","name":"currentAllowance","nameLocation":"7067:16:9","nodeType":"VariableDeclaration","scope":2044,"src":"7059:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"7059:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2025,"initialValue":{"arguments":[{"id":2022,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"7096:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2023,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"7103:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2021,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"7086:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7086:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7059:52:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2027,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"7129:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2028,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7149:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7129:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7166:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":2026,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7121:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7121:85:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2032,"nodeType":"ExpressionStatement","src":"7121:85:9"},{"id":2041,"nodeType":"UncheckedBlock","src":"7216:95:9","statements":[{"expression":{"arguments":[{"id":2034,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"7249:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2035,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"7256:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2036,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"7265:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2037,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7284:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7265:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2033,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"7240:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7240:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2040,"nodeType":"ExpressionStatement","src":"7240:60:9"}]},{"expression":{"hexValue":"74727565","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7328:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2013,"id":2043,"nodeType":"Return","src":"7321:11:9"}]},"documentation":{"id":2005,"nodeType":"StructuredDocumentation","src":"6431:476:9","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":2045,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6921:17:9","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"spender","nameLocation":"6947:7:9","nodeType":"VariableDeclaration","scope":2045,"src":"6939:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"6939:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2009,"mutability":"mutable","name":"subtractedValue","nameLocation":"6964:15:9","nodeType":"VariableDeclaration","scope":2045,"src":"6956:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"6956:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6938:42:9"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2045,"src":"7005:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2011,"name":"bool","nodeType":"ElementaryTypeName","src":"7005:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7004:6:9"},"scope":2367,"src":"6912:427:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2121,"nodeType":"Block","src":"7871:710:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2056,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"7889:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7905:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7897:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2057,"name":"address","nodeType":"ElementaryTypeName","src":"7897:7:9","typeDescriptions":{}}},"id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7897:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7889:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7909:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":2055,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7881:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7881:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2064,"nodeType":"ExpressionStatement","src":"7881:68:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2066,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"7967:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7981:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7973:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2067,"name":"address","nodeType":"ElementaryTypeName","src":"7973:7:9","typeDescriptions":{}}},"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7973:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7967:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7985:37:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":2065,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7959:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2074,"nodeType":"ExpressionStatement","src":"7959:64:9"},{"expression":{"arguments":[{"id":2076,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8055:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2077,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8061:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2078,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8065:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2075,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"8034:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8034:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2080,"nodeType":"ExpressionStatement","src":"8034:38:9"},{"assignments":[2082],"declarations":[{"constant":false,"id":2082,"mutability":"mutable","name":"fromBalance","nameLocation":"8091:11:9","nodeType":"VariableDeclaration","scope":2121,"src":"8083:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"8083:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2086,"initialValue":{"baseExpression":{"id":2083,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"8105:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2085,"indexExpression":{"id":2084,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8115:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8105:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8083:37:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2088,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8138:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2089,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8153:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8138:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8161:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":2087,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8130:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8130:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2093,"nodeType":"ExpressionStatement","src":"8130:72:9"},{"id":2108,"nodeType":"UncheckedBlock","src":"8212:273:9","statements":[{"expression":{"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2094,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"8236:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2096,"indexExpression":{"id":2095,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8246:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8236:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8254:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2098,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8268:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8254:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8236:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ExpressionStatement","src":"8236:38:9"},{"expression":{"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2102,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"8451:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2104,"indexExpression":{"id":2103,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8461:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8451:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2105,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8468:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8451:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2107,"nodeType":"ExpressionStatement","src":"8451:23:9"}]},{"eventCall":{"arguments":[{"id":2110,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8509:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2111,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8515:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2112,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8519:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2109,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"8500:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8500:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2114,"nodeType":"EmitStatement","src":"8495:31:9"},{"expression":{"arguments":[{"id":2116,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"8557:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2117,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8563:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2118,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8567:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2115,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"8537:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8537:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2120,"nodeType":"ExpressionStatement","src":"8537:37:9"}]},"documentation":{"id":2046,"nodeType":"StructuredDocumentation","src":"7345:443:9","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":2122,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7802:9:9","nodeType":"FunctionDefinition","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"from","nameLocation":"7820:4:9","nodeType":"VariableDeclaration","scope":2122,"src":"7812:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2047,"name":"address","nodeType":"ElementaryTypeName","src":"7812:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2050,"mutability":"mutable","name":"to","nameLocation":"7834:2:9","nodeType":"VariableDeclaration","scope":2122,"src":"7826:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2049,"name":"address","nodeType":"ElementaryTypeName","src":"7826:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2052,"mutability":"mutable","name":"amount","nameLocation":"7846:6:9","nodeType":"VariableDeclaration","scope":2122,"src":"7838:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"7838:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7811:42:9"},"returnParameters":{"id":2054,"nodeType":"ParameterList","parameters":[],"src":"7871:0:9"},"scope":2367,"src":"7793:788:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2178,"nodeType":"Block","src":"8922:470:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"8940:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8959:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8951:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2132,"name":"address","nodeType":"ElementaryTypeName","src":"8951:7:9","typeDescriptions":{}}},"id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8951:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8940:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8963:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":2130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8932:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8932:65:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2139,"nodeType":"ExpressionStatement","src":"8932:65:9"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9029:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2141,"name":"address","nodeType":"ElementaryTypeName","src":"9029:7:9","typeDescriptions":{}}},"id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9029:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2145,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"9041:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2146,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9050:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2140,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"9008:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9008:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2148,"nodeType":"ExpressionStatement","src":"9008:49:9"},{"expression":{"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2149,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"9068:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2150,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9084:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9068:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2152,"nodeType":"ExpressionStatement","src":"9068:22:9"},{"id":2159,"nodeType":"UncheckedBlock","src":"9100:175:9","statements":[{"expression":{"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2153,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"9236:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2155,"indexExpression":{"id":2154,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"9246:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9236:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2156,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9258:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9236:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2158,"nodeType":"ExpressionStatement","src":"9236:28:9"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9306:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9298:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2161,"name":"address","nodeType":"ElementaryTypeName","src":"9298:7:9","typeDescriptions":{}}},"id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9298:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2165,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"9310:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2166,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9319:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2160,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"9289:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9289:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2168,"nodeType":"EmitStatement","src":"9284:42:9"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9365:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9357:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2170,"name":"address","nodeType":"ElementaryTypeName","src":"9357:7:9","typeDescriptions":{}}},"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9357:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2174,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"9369:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2175,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9378:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2169,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"9337:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9337:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2177,"nodeType":"ExpressionStatement","src":"9337:48:9"}]},"documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"8587:265:9","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":2179,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8866:5:9","nodeType":"FunctionDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"account","nameLocation":"8880:7:9","nodeType":"VariableDeclaration","scope":2179,"src":"8872:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2124,"name":"address","nodeType":"ElementaryTypeName","src":"8872:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"amount","nameLocation":"8897:6:9","nodeType":"VariableDeclaration","scope":2179,"src":"8889:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"8889:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8871:33:9"},"returnParameters":{"id":2129,"nodeType":"ParameterList","parameters":[],"src":"8922:0:9"},"scope":2367,"src":"8857:535:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2250,"nodeType":"Block","src":"9777:594:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9795:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9814:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9806:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"9806:7:9","typeDescriptions":{}}},"id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9806:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9795:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9818:35:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":2187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9787:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9787:67:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"9787:67:9"},{"expression":{"arguments":[{"id":2198,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9886:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9903:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9895:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2199,"name":"address","nodeType":"ElementaryTypeName","src":"9895:7:9","typeDescriptions":{}}},"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9895:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2203,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"9907:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2197,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"9865:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9865:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2205,"nodeType":"ExpressionStatement","src":"9865:49:9"},{"assignments":[2207],"declarations":[{"constant":false,"id":2207,"mutability":"mutable","name":"accountBalance","nameLocation":"9933:14:9","nodeType":"VariableDeclaration","scope":2250,"src":"9925:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"9925:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2211,"initialValue":{"baseExpression":{"id":2208,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"9950:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2210,"indexExpression":{"id":2209,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9960:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9950:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9925:43:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2213,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"9986:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2214,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"10004:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10012:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":2212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9978:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9978:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2218,"nodeType":"ExpressionStatement","src":"9978:71:9"},{"id":2231,"nodeType":"UncheckedBlock","src":"10059:194:9","statements":[{"expression":{"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2219,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"10083:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2221,"indexExpression":{"id":2220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"10093:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10083:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2222,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"10104:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2223,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"10121:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10104:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10083:44:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2226,"nodeType":"ExpressionStatement","src":"10083:44:9"},{"expression":{"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2227,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"10220:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2228,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"10236:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10220:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2230,"nodeType":"ExpressionStatement","src":"10220:22:9"}]},{"eventCall":{"arguments":[{"id":2233,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"10277:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10294:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10286:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2234,"name":"address","nodeType":"ElementaryTypeName","src":"10286:7:9","typeDescriptions":{}}},"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10286:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2238,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"10298:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2232,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"10268:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10268:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2240,"nodeType":"EmitStatement","src":"10263:42:9"},{"expression":{"arguments":[{"id":2242,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"10336:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10353:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10345:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2243,"name":"address","nodeType":"ElementaryTypeName","src":"10345:7:9","typeDescriptions":{}}},"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10345:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2247,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"10357:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2241,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"10316:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10316:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2249,"nodeType":"ExpressionStatement","src":"10316:48:9"}]},"documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"9398:309:9","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":2251,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9721:5:9","nodeType":"FunctionDefinition","parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2182,"mutability":"mutable","name":"account","nameLocation":"9735:7:9","nodeType":"VariableDeclaration","scope":2251,"src":"9727:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2181,"name":"address","nodeType":"ElementaryTypeName","src":"9727:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2184,"mutability":"mutable","name":"amount","nameLocation":"9752:6:9","nodeType":"VariableDeclaration","scope":2251,"src":"9744:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2183,"name":"uint256","nodeType":"ElementaryTypeName","src":"9744:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9726:33:9"},"returnParameters":{"id":2186,"nodeType":"ParameterList","parameters":[],"src":"9777:0:9"},"scope":2367,"src":"9712:659:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2295,"nodeType":"Block","src":"10877:257:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2262,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"10895:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10912:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10904:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2263,"name":"address","nodeType":"ElementaryTypeName","src":"10904:7:9","typeDescriptions":{}}},"id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10904:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10895:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10916:38:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":2261,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10887:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10887:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2270,"nodeType":"ExpressionStatement","src":"10887:68:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"10973:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10992:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10984:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2273,"name":"address","nodeType":"ElementaryTypeName","src":"10984:7:9","typeDescriptions":{}}},"id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10984:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10973:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10996:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":2271,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10965:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10965:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2280,"nodeType":"ExpressionStatement","src":"10965:68:9"},{"expression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2281,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"11044:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2284,"indexExpression":{"id":2282,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11056:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11044:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2285,"indexExpression":{"id":2283,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"11063:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11044:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2286,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"11074:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11044:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2288,"nodeType":"ExpressionStatement","src":"11044:36:9"},{"eventCall":{"arguments":[{"id":2290,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11104:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2291,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"11111:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2292,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"11120:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2289,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"11095:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11095:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2294,"nodeType":"EmitStatement","src":"11090:37:9"}]},"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"10377:412:9","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":2296,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10803:8:9","nodeType":"FunctionDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"owner","nameLocation":"10820:5:9","nodeType":"VariableDeclaration","scope":2296,"src":"10812:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2253,"name":"address","nodeType":"ElementaryTypeName","src":"10812:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2256,"mutability":"mutable","name":"spender","nameLocation":"10835:7:9","nodeType":"VariableDeclaration","scope":2296,"src":"10827:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2255,"name":"address","nodeType":"ElementaryTypeName","src":"10827:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2258,"mutability":"mutable","name":"amount","nameLocation":"10852:6:9","nodeType":"VariableDeclaration","scope":2296,"src":"10844:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2257,"name":"uint256","nodeType":"ElementaryTypeName","src":"10844:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10811:48:9"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[],"src":"10877:0:9"},"scope":2367,"src":"10794:340:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2338,"nodeType":"Block","src":"11505:321:9","statements":[{"assignments":[2307],"declarations":[{"constant":false,"id":2307,"mutability":"mutable","name":"currentAllowance","nameLocation":"11523:16:9","nodeType":"VariableDeclaration","scope":2338,"src":"11515:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"11515:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2312,"initialValue":{"arguments":[{"id":2309,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"11552:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2310,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"11559:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2308,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"11542:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11515:52:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"11581:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":2316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11606:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2315,"name":"uint256","nodeType":"ElementaryTypeName","src":"11606:7:9","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2314,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11601:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11601:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11615:3:9","memberName":"max","nodeType":"MemberAccess","src":"11601:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11581:37:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2337,"nodeType":"IfStatement","src":"11577:243:9","trueBody":{"id":2336,"nodeType":"Block","src":"11620:200:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2321,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"11642:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2322,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"11662:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11642:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11670:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":2320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11634:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11634:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2326,"nodeType":"ExpressionStatement","src":"11634:68:9"},{"id":2335,"nodeType":"UncheckedBlock","src":"11716:94:9","statements":[{"expression":{"arguments":[{"id":2328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"11753:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2329,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"11760:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"11769:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2331,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"11788:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11769:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2327,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"11744:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11744:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2334,"nodeType":"ExpressionStatement","src":"11744:51:9"}]}]}}]},"documentation":{"id":2297,"nodeType":"StructuredDocumentation","src":"11140:270:9","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":2339,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11424:15:9","nodeType":"FunctionDefinition","parameters":{"id":2304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"owner","nameLocation":"11448:5:9","nodeType":"VariableDeclaration","scope":2339,"src":"11440:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2298,"name":"address","nodeType":"ElementaryTypeName","src":"11440:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"spender","nameLocation":"11463:7:9","nodeType":"VariableDeclaration","scope":2339,"src":"11455:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"11455:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"amount","nameLocation":"11480:6:9","nodeType":"VariableDeclaration","scope":2339,"src":"11472:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2302,"name":"uint256","nodeType":"ElementaryTypeName","src":"11472:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11439:48:9"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[],"src":"11505:0:9"},"scope":2367,"src":"11415:411:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2349,"nodeType":"Block","src":"12499:2:9","statements":[]},"documentation":{"id":2340,"nodeType":"StructuredDocumentation","src":"11832:573:9","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2350,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12419:20:9","nodeType":"FunctionDefinition","parameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"from","nameLocation":"12448:4:9","nodeType":"VariableDeclaration","scope":2350,"src":"12440:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"12440:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2344,"mutability":"mutable","name":"to","nameLocation":"12462:2:9","nodeType":"VariableDeclaration","scope":2350,"src":"12454:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2343,"name":"address","nodeType":"ElementaryTypeName","src":"12454:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2346,"mutability":"mutable","name":"amount","nameLocation":"12474:6:9","nodeType":"VariableDeclaration","scope":2350,"src":"12466:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2345,"name":"uint256","nodeType":"ElementaryTypeName","src":"12466:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12439:42:9"},"returnParameters":{"id":2348,"nodeType":"ParameterList","parameters":[],"src":"12499:0:9"},"scope":2367,"src":"12410:91:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2360,"nodeType":"Block","src":"13177:2:9","statements":[]},"documentation":{"id":2351,"nodeType":"StructuredDocumentation","src":"12507:577:9","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2361,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13098:19:9","nodeType":"FunctionDefinition","parameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"from","nameLocation":"13126:4:9","nodeType":"VariableDeclaration","scope":2361,"src":"13118:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2352,"name":"address","nodeType":"ElementaryTypeName","src":"13118:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2355,"mutability":"mutable","name":"to","nameLocation":"13140:2:9","nodeType":"VariableDeclaration","scope":2361,"src":"13132:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"13132:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"amount","nameLocation":"13152:6:9","nodeType":"VariableDeclaration","scope":2361,"src":"13144:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"13144:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13117:42:9"},"returnParameters":{"id":2359,"nodeType":"ParameterList","parameters":[],"src":"13177:0:9"},"scope":2367,"src":"13089:90:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"13185:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2366,"mutability":"mutable","name":"__gap","nameLocation":"13464:5:9","nodeType":"VariableDeclaration","scope":2367,"src":"13444:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"13444:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2365,"length":{"hexValue":"3435","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13452:2:9","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13444:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":2368,"src":"1611:11861:9","usedErrors":[]}],"src":"105:13368:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[2445]},"id":2446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2369,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2370,"nodeType":"StructuredDocumentation","src":"131:70:10","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2445,"linearizedBaseContracts":[2445],"name":"IERC20Upgradeable","nameLocation":"212:17:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"236:158:10","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2379,"name":"Transfer","nameLocation":"405:8:10","nodeType":"EventDefinition","parameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:10","nodeType":"VariableDeclaration","scope":2379,"src":"414:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2375,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:10","nodeType":"VariableDeclaration","scope":2379,"src":"436:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2374,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2377,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:10","nodeType":"VariableDeclaration","scope":2379,"src":"456:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:10"},"src":"399:72:10"},{"anonymous":false,"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"477:148:10","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2388,"name":"Approval","nameLocation":"636:8:10","nodeType":"EventDefinition","parameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:10","nodeType":"VariableDeclaration","scope":2388,"src":"645:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2384,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:10","nodeType":"VariableDeclaration","scope":2388,"src":"668:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2383,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2386,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:10","nodeType":"VariableDeclaration","scope":2388,"src":"693:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:10"},"src":"630:78:10"},{"documentation":{"id":2389,"nodeType":"StructuredDocumentation","src":"714:66:10","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2394,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:10","nodeType":"FunctionDefinition","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[],"src":"805:2:10"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2394,"src":"831:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:10"},"scope":2445,"src":"785:55:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2395,"nodeType":"StructuredDocumentation","src":"846:72:10","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2402,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:10","nodeType":"FunctionDefinition","parameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2397,"mutability":"mutable","name":"account","nameLocation":"950:7:10","nodeType":"VariableDeclaration","scope":2402,"src":"942:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2396,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:10"},"returnParameters":{"id":2401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2402,"src":"982:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2399,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:10"},"scope":2445,"src":"923:68:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2403,"nodeType":"StructuredDocumentation","src":"997:202:10","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2412,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:10","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"to","nameLocation":"1230:2:10","nodeType":"VariableDeclaration","scope":2412,"src":"1222:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2404,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"amount","nameLocation":"1242:6:10","nodeType":"VariableDeclaration","scope":2412,"src":"1234:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:10"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"1268:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2409,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:10"},"scope":2445,"src":"1204:70:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"1280:264:10","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2422,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:10","nodeType":"FunctionDefinition","parameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"owner","nameLocation":"1576:5:10","nodeType":"VariableDeclaration","scope":2422,"src":"1568:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2414,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2417,"mutability":"mutable","name":"spender","nameLocation":"1591:7:10","nodeType":"VariableDeclaration","scope":2422,"src":"1583:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2416,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:10"},"returnParameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2422,"src":"1623:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:10"},"scope":2445,"src":"1549:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"1638:642:10","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2432,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:10","nodeType":"FunctionDefinition","parameters":{"id":2428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"spender","nameLocation":"2310:7:10","nodeType":"VariableDeclaration","scope":2432,"src":"2302:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2424,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2427,"mutability":"mutable","name":"amount","nameLocation":"2327:6:10","nodeType":"VariableDeclaration","scope":2432,"src":"2319:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2426,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:10"},"returnParameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2432,"src":"2353:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2429,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:10"},"scope":2445,"src":"2285:74:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2433,"nodeType":"StructuredDocumentation","src":"2365:287:10","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2444,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:10","nodeType":"FunctionDefinition","parameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2435,"mutability":"mutable","name":"from","nameLocation":"2687:4:10","nodeType":"VariableDeclaration","scope":2444,"src":"2679:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2437,"mutability":"mutable","name":"to","nameLocation":"2701:2:10","nodeType":"VariableDeclaration","scope":2444,"src":"2693:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"amount","nameLocation":"2713:6:10","nodeType":"VariableDeclaration","scope":2444,"src":"2705:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:10"},"returnParameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"2739:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2441,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:10"},"scope":2445,"src":"2657:88:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2446,"src":"202:2545:10","usedErrors":[]}],"src":"106:2642:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[2470],"IERC20Upgradeable":[2445]},"id":2471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2447,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":2448,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2471,"sourceUnit":2446,"src":"135:34:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2450,"name":"IERC20Upgradeable","nameLocations":["327:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"327:17:11"},"id":2451,"nodeType":"InheritanceSpecifier","src":"327:17:11"}],"canonicalName":"IERC20MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"171:116:11","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":2470,"linearizedBaseContracts":[2470,2445],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2452,"nodeType":"StructuredDocumentation","src":"351:54:11","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2457,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:11","nodeType":"FunctionDefinition","parameters":{"id":2453,"nodeType":"ParameterList","parameters":[],"src":"423:2:11"},"returnParameters":{"id":2456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"449:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2454,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:11"},"scope":2470,"src":"410:54:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"470:56:11","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2463,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:11","nodeType":"FunctionDefinition","parameters":{"id":2459,"nodeType":"ParameterList","parameters":[],"src":"546:2:11"},"returnParameters":{"id":2462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2463,"src":"572:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2460,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:11"},"scope":2470,"src":"531:56:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2464,"nodeType":"StructuredDocumentation","src":"593:65:11","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2469,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:11","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[],"src":"680:2:11"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2469,"src":"706:5:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2466,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:11"},"scope":2470,"src":"663:50:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2471,"src":"288:427:11","usedErrors":[]}],"src":"110:606:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800]},"id":2801,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2472,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2473,"nodeType":"StructuredDocumentation","src":"126:67:12","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2800,"linearizedBaseContracts":[2800],"name":"AddressUpgradeable","nameLocation":"202:18:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2487,"nodeType":"Block","src":"1489:254:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2481,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"1713:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:12","memberName":"code","nodeType":"MemberAccess","src":"1713:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:12","memberName":"length","nodeType":"MemberAccess","src":"1713:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2480,"id":2486,"nodeType":"Return","src":"1706:30:12"}]},"documentation":{"id":2474,"nodeType":"StructuredDocumentation","src":"227:1191:12","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2488,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:12","nodeType":"FunctionDefinition","parameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"account","nameLocation":"1451:7:12","nodeType":"VariableDeclaration","scope":2488,"src":"1443:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2475,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:12"},"returnParameters":{"id":2480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2488,"src":"1483:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2478,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:12"},"scope":2800,"src":"1423:320:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2521,"nodeType":"Block","src":"2729:241:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2499,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2800","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2800","typeString":"library AddressUpgradeable"}],"id":2498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2497,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:12","typeDescriptions":{}}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:12","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2502,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"2772:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2506,"nodeType":"ExpressionStatement","src":"2739:73:12"},{"assignments":[2508,null],"declarations":[{"constant":false,"id":2508,"mutability":"mutable","name":"success","nameLocation":"2829:7:12","nodeType":"VariableDeclaration","scope":2521,"src":"2824:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2507,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2515,"initialValue":{"arguments":[{"hexValue":"","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2509,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"2842:9:12","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:12","memberName":"call","nodeType":"MemberAccess","src":"2842:14:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2511,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"2864:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:12"},{"expression":{"arguments":[{"id":2517,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"2893:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2520,"nodeType":"ExpressionStatement","src":"2885:78:12"}]},"documentation":{"id":2489,"nodeType":"StructuredDocumentation","src":"1749:904:12","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2522,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:12","nodeType":"FunctionDefinition","parameters":{"id":2494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:12","nodeType":"VariableDeclaration","scope":2522,"src":"2677:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2490,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:12","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"amount","nameLocation":"2712:6:12","nodeType":"VariableDeclaration","scope":2522,"src":"2704:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:12"},"returnParameters":{"id":2495,"nodeType":"ParameterList","parameters":[],"src":"2729:0:12"},"scope":2800,"src":"2658:312:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2539,"nodeType":"Block","src":"3801:96:12","statements":[{"expression":{"arguments":[{"id":2533,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"3840:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2534,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"3848:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2532,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2580,2624],"referencedDeclaration":2624,"src":"3818:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2531,"id":2538,"nodeType":"Return","src":"3811:79:12"}]},"documentation":{"id":2523,"nodeType":"StructuredDocumentation","src":"2976:731:12","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2540,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:12","nodeType":"FunctionDefinition","parameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"target","nameLocation":"3742:6:12","nodeType":"VariableDeclaration","scope":2540,"src":"3734:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"data","nameLocation":"3763:4:12","nodeType":"VariableDeclaration","scope":2540,"src":"3750:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2526,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:12"},"returnParameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2540,"src":"3787:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2529,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:12"},"scope":2800,"src":"3712:185:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2559,"nodeType":"Block","src":"4266:76:12","statements":[{"expression":{"arguments":[{"id":2553,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"4305:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2554,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"4313:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2556,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"4322:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2552,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2580,2624],"referencedDeclaration":2624,"src":"4283:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2551,"id":2558,"nodeType":"Return","src":"4276:59:12"}]},"documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"3903:211:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2560,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:12","nodeType":"FunctionDefinition","parameters":{"id":2548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2543,"mutability":"mutable","name":"target","nameLocation":"4158:6:12","nodeType":"VariableDeclaration","scope":2560,"src":"4150:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2542,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"data","nameLocation":"4187:4:12","nodeType":"VariableDeclaration","scope":2560,"src":"4174:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2544,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:12","nodeType":"VariableDeclaration","scope":2560,"src":"4201:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2546,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:12"},"returnParameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2560,"src":"4252:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2549,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:12"},"scope":2800,"src":"4119:223:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2579,"nodeType":"Block","src":"4817:111:12","statements":[{"expression":{"arguments":[{"id":2573,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"4856:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2574,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"4864:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"4870:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2572,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2580,2624],"referencedDeclaration":2624,"src":"4834:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2571,"id":2578,"nodeType":"Return","src":"4827:94:12"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"4348:351:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2580,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:12","nodeType":"FunctionDefinition","parameters":{"id":2568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"target","nameLocation":"4743:6:12","nodeType":"VariableDeclaration","scope":2580,"src":"4735:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2562,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2565,"mutability":"mutable","name":"data","nameLocation":"4764:4:12","nodeType":"VariableDeclaration","scope":2580,"src":"4751:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2564,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2567,"mutability":"mutable","name":"value","nameLocation":"4778:5:12","nodeType":"VariableDeclaration","scope":2580,"src":"4770:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:12"},"returnParameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2580,"src":"4803:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2569,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:12"},"scope":2800,"src":"4704:224:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2623,"nodeType":"Block","src":"5355:267:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2597,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2800","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2800","typeString":"library AddressUpgradeable"}],"id":2596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2595,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:12","typeDescriptions":{}}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:12","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"5398:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2594,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"ExpressionStatement","src":"5365:81:12"},{"assignments":[2606,2608],"declarations":[{"constant":false,"id":2606,"mutability":"mutable","name":"success","nameLocation":"5462:7:12","nodeType":"VariableDeclaration","scope":2623,"src":"5457:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2605,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:12","nodeType":"VariableDeclaration","scope":2623,"src":"5471:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2607,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2615,"initialValue":{"arguments":[{"id":2613,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"5524:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2609,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"5498:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:12","memberName":"call","nodeType":"MemberAccess","src":"5498:11:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"5517:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:12"},{"expression":{"arguments":[{"id":2617,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"5573:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2618,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"5581:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2619,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"5590:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2620,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"5602:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2616,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"5546:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2593,"id":2622,"nodeType":"Return","src":"5539:76:12"}]},"documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"4934:237:12","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2624,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:12","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"target","nameLocation":"5224:6:12","nodeType":"VariableDeclaration","scope":2624,"src":"5216:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2582,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"data","nameLocation":"5253:4:12","nodeType":"VariableDeclaration","scope":2624,"src":"5240:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2584,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2587,"mutability":"mutable","name":"value","nameLocation":"5275:5:12","nodeType":"VariableDeclaration","scope":2624,"src":"5267:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2586,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:12","nodeType":"VariableDeclaration","scope":2624,"src":"5290:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2588,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:12"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2624,"src":"5341:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2591,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:12"},"scope":2800,"src":"5176:446:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2640,"nodeType":"Block","src":"5899:97:12","statements":[{"expression":{"arguments":[{"id":2635,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"5935:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2636,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"5943:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2634,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2641,2670],"referencedDeclaration":2670,"src":"5916:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2633,"id":2639,"nodeType":"Return","src":"5909:80:12"}]},"documentation":{"id":2625,"nodeType":"StructuredDocumentation","src":"5628:166:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2641,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:12","nodeType":"FunctionDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"target","nameLocation":"5835:6:12","nodeType":"VariableDeclaration","scope":2641,"src":"5827:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2626,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2629,"mutability":"mutable","name":"data","nameLocation":"5856:4:12","nodeType":"VariableDeclaration","scope":2641,"src":"5843:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2628,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:12"},"returnParameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2641,"src":"5885:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2631,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:12"},"scope":2800,"src":"5799:197:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2669,"nodeType":"Block","src":"6338:168:12","statements":[{"assignments":[2654,2656],"declarations":[{"constant":false,"id":2654,"mutability":"mutable","name":"success","nameLocation":"6354:7:12","nodeType":"VariableDeclaration","scope":2669,"src":"6349:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2653,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:12","nodeType":"VariableDeclaration","scope":2669,"src":"6363:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2655,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2661,"initialValue":{"arguments":[{"id":2659,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"6408:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2657,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"6390:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:12"},{"expression":{"arguments":[{"id":2663,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"6457:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2664,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"6465:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2665,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"6474:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2666,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"6486:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2662,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"6430:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2652,"id":2668,"nodeType":"Return","src":"6423:76:12"}]},"documentation":{"id":2642,"nodeType":"StructuredDocumentation","src":"6002:173:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2670,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:12","nodeType":"FunctionDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"target","nameLocation":"6225:6:12","nodeType":"VariableDeclaration","scope":2670,"src":"6217:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2643,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2646,"mutability":"mutable","name":"data","nameLocation":"6254:4:12","nodeType":"VariableDeclaration","scope":2670,"src":"6241:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2645,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2648,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:12","nodeType":"VariableDeclaration","scope":2670,"src":"6268:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2647,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:12"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2670,"src":"6324:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2650,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:12"},"scope":2800,"src":"6180:326:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2686,"nodeType":"Block","src":"6782:101:12","statements":[{"expression":{"arguments":[{"id":2681,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"6820:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2682,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"6828:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2680,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2687,2716],"referencedDeclaration":2716,"src":"6799:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2679,"id":2685,"nodeType":"Return","src":"6792:84:12"}]},"documentation":{"id":2671,"nodeType":"StructuredDocumentation","src":"6512:168:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2687,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:12","nodeType":"FunctionDefinition","parameters":{"id":2676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2673,"mutability":"mutable","name":"target","nameLocation":"6723:6:12","nodeType":"VariableDeclaration","scope":2687,"src":"6715:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2672,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2675,"mutability":"mutable","name":"data","nameLocation":"6744:4:12","nodeType":"VariableDeclaration","scope":2687,"src":"6731:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2674,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:12"},"returnParameters":{"id":2679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2687,"src":"6768:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2677,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:12"},"scope":2800,"src":"6685:198:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2715,"nodeType":"Block","src":"7224:170:12","statements":[{"assignments":[2700,2702],"declarations":[{"constant":false,"id":2700,"mutability":"mutable","name":"success","nameLocation":"7240:7:12","nodeType":"VariableDeclaration","scope":2715,"src":"7235:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2699,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:12","nodeType":"VariableDeclaration","scope":2715,"src":"7249:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2701,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2707,"initialValue":{"arguments":[{"id":2705,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"7296:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2703,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"7276:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:12","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:12","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:12"},{"expression":{"arguments":[{"id":2709,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"7345:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2710,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"7353:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2711,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"7362:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2712,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"7374:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2708,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"7318:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2698,"id":2714,"nodeType":"Return","src":"7311:76:12"}]},"documentation":{"id":2688,"nodeType":"StructuredDocumentation","src":"6889:175:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2716,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:12","nodeType":"FunctionDefinition","parameters":{"id":2695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2690,"mutability":"mutable","name":"target","nameLocation":"7116:6:12","nodeType":"VariableDeclaration","scope":2716,"src":"7108:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2689,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"data","nameLocation":"7145:4:12","nodeType":"VariableDeclaration","scope":2716,"src":"7132:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2691,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:12","nodeType":"VariableDeclaration","scope":2716,"src":"7159:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2693,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:12"},"returnParameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2716,"src":"7210:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2696,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:12"},"scope":2800,"src":"7069:325:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2754,"nodeType":"Block","src":"7876:434:12","statements":[{"condition":{"id":2730,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"7890:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2752,"nodeType":"Block","src":"8246:58:12","statements":[{"expression":{"arguments":[{"id":2748,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8268:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2749,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"8280:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2747,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"8260:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2751,"nodeType":"ExpressionStatement","src":"8260:33:12"}]},"id":2753,"nodeType":"IfStatement","src":"7886:418:12","trueBody":{"id":2746,"nodeType":"Block","src":"7899:341:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2731,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"7917:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:12","memberName":"length","nodeType":"MemberAccess","src":"7917:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2743,"nodeType":"IfStatement","src":"7913:286:12","trueBody":{"id":2742,"nodeType":"Block","src":"7941:258:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":2737,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"8143:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2736,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"8132:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2735,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2741,"nodeType":"ExpressionStatement","src":"8124:60:12"}]}},{"expression":{"id":2744,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"8219:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2729,"id":2745,"nodeType":"Return","src":"8212:17:12"}]}}]},"documentation":{"id":2717,"nodeType":"StructuredDocumentation","src":"7400:277:12","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2755,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:12","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"target","nameLocation":"7735:6:12","nodeType":"VariableDeclaration","scope":2755,"src":"7727:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2718,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2721,"mutability":"mutable","name":"success","nameLocation":"7756:7:12","nodeType":"VariableDeclaration","scope":2755,"src":"7751:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2720,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2723,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:12","nodeType":"VariableDeclaration","scope":2755,"src":"7773:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2722,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2725,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:12","nodeType":"VariableDeclaration","scope":2755,"src":"7806:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2724,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:12"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2755,"src":"7862:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2727,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:12"},"scope":2800,"src":"7682:628:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2778,"nodeType":"Block","src":"8691:135:12","statements":[{"condition":{"id":2767,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8705:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2776,"nodeType":"Block","src":"8762:58:12","statements":[{"expression":{"arguments":[{"id":2772,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"8784:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2773,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"8796:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2771,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"8776:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2775,"nodeType":"ExpressionStatement","src":"8776:33:12"}]},"id":2777,"nodeType":"IfStatement","src":"8701:119:12","trueBody":{"id":2770,"nodeType":"Block","src":"8714:42:12","statements":[{"expression":{"id":2768,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"8735:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2766,"id":2769,"nodeType":"Return","src":"8728:17:12"}]}}]},"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"8316:210:12","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2779,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:12","nodeType":"FunctionDefinition","parameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"success","nameLocation":"8571:7:12","nodeType":"VariableDeclaration","scope":2779,"src":"8566:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2757,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2760,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:12","nodeType":"VariableDeclaration","scope":2779,"src":"8588:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2759,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2762,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:12","nodeType":"VariableDeclaration","scope":2779,"src":"8621:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2761,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:12"},"returnParameters":{"id":2766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2779,"src":"8677:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2764,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:12"},"scope":2800,"src":"8531:295:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2798,"nodeType":"Block","src":"8915:457:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2786,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"8991:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:12","memberName":"length","nodeType":"MemberAccess","src":"8991:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2796,"nodeType":"Block","src":"9321:45:12","statements":[{"expression":{"arguments":[{"id":2793,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"9342:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2792,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"ExpressionStatement","src":"9335:20:12"}]},"id":2797,"nodeType":"IfStatement","src":"8987:379:12","trueBody":{"id":2791,"nodeType":"Block","src":"9014:301:12","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:12","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:12","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:12"},"nodeType":"YulFunctionCall","src":"9213:17:12"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:12","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:12"},"nodeType":"YulFunctionCall","src":"9254:19:12"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:12"},"nodeType":"YulFunctionCall","src":"9247:44:12"},"nodeType":"YulExpressionStatement","src":"9247:44:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2781,"isOffset":false,"isSlot":false,"src":"9219:10:12","valueSize":1},{"declaration":2781,"isOffset":false,"isSlot":false,"src":"9262:10:12","valueSize":1}],"id":2790,"nodeType":"InlineAssembly","src":"9163:142:12"}]}}]},"id":2799,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:12","nodeType":"FunctionDefinition","parameters":{"id":2784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2781,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:12","nodeType":"VariableDeclaration","scope":2799,"src":"8849:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2780,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2783,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:12","nodeType":"VariableDeclaration","scope":2799,"src":"8874:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2782,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:12"},"returnParameters":{"id":2785,"nodeType":"ParameterList","parameters":[],"src":"8915:0:12"},"scope":2800,"src":"8832:540:12","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2801,"src":"194:9180:12","usedErrors":[]}],"src":"101:9274:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2800],"ContextUpgradeable":[2842],"Initializable":[1755]},"id":2843,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2802,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2803,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2843,"sourceUnit":1756,"src":"110:42:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2805,"name":"Initializable","nameLocations":["691:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"691:13:13"},"id":2806,"nodeType":"InheritanceSpecifier","src":"691:13:13"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2804,"nodeType":"StructuredDocumentation","src":"154:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2842,"linearizedBaseContracts":[2842,1755],"name":"ContextUpgradeable","nameLocation":"669:18:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2811,"nodeType":"Block","src":"763:7:13","statements":[]},"id":2812,"implemented":true,"kind":"function","modifiers":[{"id":2809,"kind":"modifierInvocation","modifierName":{"id":2808,"name":"onlyInitializing","nameLocations":["746:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"746:16:13"},"nodeType":"ModifierInvocation","src":"746:16:13"}],"name":"__Context_init","nameLocation":"720:14:13","nodeType":"FunctionDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[],"src":"734:2:13"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[],"src":"763:0:13"},"scope":2842,"src":"711:59:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2817,"nodeType":"Block","src":"838:7:13","statements":[]},"id":2818,"implemented":true,"kind":"function","modifiers":[{"id":2815,"kind":"modifierInvocation","modifierName":{"id":2814,"name":"onlyInitializing","nameLocations":["821:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"821:16:13"},"nodeType":"ModifierInvocation","src":"821:16:13"}],"name":"__Context_init_unchained","nameLocation":"785:24:13","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[],"src":"809:2:13"},"returnParameters":{"id":2816,"nodeType":"ParameterList","parameters":[],"src":"838:0:13"},"scope":2842,"src":"776:69:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2826,"nodeType":"Block","src":"912:34:13","statements":[{"expression":{"expression":{"id":2823,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:13","memberName":"sender","nodeType":"MemberAccess","src":"929:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2822,"id":2825,"nodeType":"Return","src":"922:17:13"}]},"id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:13","nodeType":"FunctionDefinition","parameters":{"id":2819,"nodeType":"ParameterList","parameters":[],"src":"869:2:13"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2827,"src":"903:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2820,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:13"},"scope":2842,"src":"850:96:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2835,"nodeType":"Block","src":"1019:32:13","statements":[{"expression":{"expression":{"id":2832,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:13","memberName":"data","nodeType":"MemberAccess","src":"1036:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2831,"id":2834,"nodeType":"Return","src":"1029:15:13"}]},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:13","nodeType":"FunctionDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[],"src":"969:2:13"},"returnParameters":{"id":2831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2836,"src":"1003:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2829,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:13"},"scope":2842,"src":"952:99:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"1057:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2841,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:13","nodeType":"VariableDeclaration","scope":2842,"src":"1316:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2840,"length":{"hexValue":"3530","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2843,"src":"651:693:13","usedErrors":[]}],"src":"86:1259:13"},"id":13},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2920]},"id":2921,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2844,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"131:70:14","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2920,"linearizedBaseContracts":[2920],"name":"IERC20","nameLocation":"212:6:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2846,"nodeType":"StructuredDocumentation","src":"225:158:14","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2854,"name":"Transfer","nameLocation":"394:8:14","nodeType":"EventDefinition","parameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:14","nodeType":"VariableDeclaration","scope":2854,"src":"403:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2847,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2850,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:14","nodeType":"VariableDeclaration","scope":2854,"src":"425:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2849,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2852,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:14","nodeType":"VariableDeclaration","scope":2854,"src":"445:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:14"},"src":"388:72:14"},{"anonymous":false,"documentation":{"id":2855,"nodeType":"StructuredDocumentation","src":"466:148:14","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2863,"name":"Approval","nameLocation":"625:8:14","nodeType":"EventDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2857,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:14","nodeType":"VariableDeclaration","scope":2863,"src":"634:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2856,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2859,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:14","nodeType":"VariableDeclaration","scope":2863,"src":"657:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2858,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2861,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:14","nodeType":"VariableDeclaration","scope":2863,"src":"682:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:14"},"src":"619:78:14"},{"documentation":{"id":2864,"nodeType":"StructuredDocumentation","src":"703:66:14","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2869,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:14","nodeType":"FunctionDefinition","parameters":{"id":2865,"nodeType":"ParameterList","parameters":[],"src":"794:2:14"},"returnParameters":{"id":2868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2869,"src":"820:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:14"},"scope":2920,"src":"774:55:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2870,"nodeType":"StructuredDocumentation","src":"835:72:14","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2877,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:14","nodeType":"FunctionDefinition","parameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2872,"mutability":"mutable","name":"account","nameLocation":"939:7:14","nodeType":"VariableDeclaration","scope":2877,"src":"931:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2871,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:14"},"returnParameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2877,"src":"971:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2874,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:14"},"scope":2920,"src":"912:68:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"986:202:14","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2887,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:14","nodeType":"FunctionDefinition","parameters":{"id":2883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2880,"mutability":"mutable","name":"to","nameLocation":"1219:2:14","nodeType":"VariableDeclaration","scope":2887,"src":"1211:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2879,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2882,"mutability":"mutable","name":"amount","nameLocation":"1231:6:14","nodeType":"VariableDeclaration","scope":2887,"src":"1223:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:14"},"returnParameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2887,"src":"1257:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2884,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:14"},"scope":2920,"src":"1193:70:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"1269:264:14","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2897,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:14","nodeType":"FunctionDefinition","parameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"owner","nameLocation":"1565:5:14","nodeType":"VariableDeclaration","scope":2897,"src":"1557:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"spender","nameLocation":"1580:7:14","nodeType":"VariableDeclaration","scope":2897,"src":"1572:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:14"},"returnParameters":{"id":2896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2897,"src":"1612:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:14"},"scope":2920,"src":"1538:83:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2898,"nodeType":"StructuredDocumentation","src":"1627:642:14","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2907,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:14","nodeType":"FunctionDefinition","parameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"spender","nameLocation":"2299:7:14","nodeType":"VariableDeclaration","scope":2907,"src":"2291:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2899,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"amount","nameLocation":"2316:6:14","nodeType":"VariableDeclaration","scope":2907,"src":"2308:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:14"},"returnParameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2907,"src":"2342:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2904,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:14"},"scope":2920,"src":"2274:74:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2908,"nodeType":"StructuredDocumentation","src":"2354:287:14","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2919,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:14","nodeType":"FunctionDefinition","parameters":{"id":2915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2910,"mutability":"mutable","name":"from","nameLocation":"2676:4:14","nodeType":"VariableDeclaration","scope":2919,"src":"2668:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2909,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2912,"mutability":"mutable","name":"to","nameLocation":"2690:2:14","nodeType":"VariableDeclaration","scope":2919,"src":"2682:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2911,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2914,"mutability":"mutable","name":"amount","nameLocation":"2702:6:14","nodeType":"VariableDeclaration","scope":2919,"src":"2694:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:14"},"returnParameters":{"id":2918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2919,"src":"2728:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2916,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:14"},"scope":2920,"src":"2646:88:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2921,"src":"202:2534:14","usedErrors":[]}],"src":"106:2631:14"},"id":14},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[2956]},"id":2957,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2922,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":2923,"nodeType":"StructuredDocumentation","src":"148:480:15","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":2956,"linearizedBaseContracts":[2956],"name":"IERC20Permit","nameLocation":"639:12:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2924,"nodeType":"StructuredDocumentation","src":"658:792:15","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":2941,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:15","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"owner","nameLocation":"1488:5:15","nodeType":"VariableDeclaration","scope":2941,"src":"1480:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2925,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2928,"mutability":"mutable","name":"spender","nameLocation":"1511:7:15","nodeType":"VariableDeclaration","scope":2941,"src":"1503:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2927,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"value","nameLocation":"1536:5:15","nodeType":"VariableDeclaration","scope":2941,"src":"1528:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:15","nodeType":"VariableDeclaration","scope":2941,"src":"1551:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2931,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"v","nameLocation":"1583:1:15","nodeType":"VariableDeclaration","scope":2941,"src":"1577:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2933,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"r","nameLocation":"1602:1:15","nodeType":"VariableDeclaration","scope":2941,"src":"1594:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"s","nameLocation":"1621:1:15","nodeType":"VariableDeclaration","scope":2941,"src":"1613:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:15"},"returnParameters":{"id":2940,"nodeType":"ParameterList","parameters":[],"src":"1637:0:15"},"scope":2956,"src":"1455:183:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2942,"nodeType":"StructuredDocumentation","src":"1644:294:15","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2949,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:15","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2944,"mutability":"mutable","name":"owner","nameLocation":"1967:5:15","nodeType":"VariableDeclaration","scope":2949,"src":"1959:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2943,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:15"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2949,"src":"1997:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:15"},"scope":2956,"src":"1943:63:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2950,"nodeType":"StructuredDocumentation","src":"2012:128:15","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2955,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:15","nodeType":"FunctionDefinition","parameters":{"id":2951,"nodeType":"ParameterList","parameters":[],"src":"2223:2:15"},"returnParameters":{"id":2954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2955,"src":"2249:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:15"},"scope":2956,"src":"2198:60:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2957,"src":"629:1631:15","usedErrors":[]}],"src":"123:2138:15"},"id":15},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[3662],"IERC20":[2920],"IERC20Permit":[2956],"SafeERC20":[3332]},"id":3333,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2958,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2959,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3333,"sourceUnit":2921,"src":"140:23:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":2960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3333,"sourceUnit":2957,"src":"164:40:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":2961,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3333,"sourceUnit":3663,"src":"205:36:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2962,"nodeType":"StructuredDocumentation","src":"243:457:16","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3332,"linearizedBaseContracts":[3332],"name":"SafeERC20","nameLocation":"709:9:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2965,"libraryName":{"id":2963,"name":"Address","nameLocations":["731:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3662,"src":"731:7:16"},"nodeType":"UsingForDirective","src":"725:26:16","typeName":{"id":2964,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2988,"nodeType":"Block","src":"1013:103:16","statements":[{"expression":{"arguments":[{"id":2977,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1043:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2980,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1073:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2887,"src":"1073:14:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:16","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2983,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"1098:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"1102:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2978,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2976,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1023:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2987,"nodeType":"ExpressionStatement","src":"1023:86:16"}]},"documentation":{"id":2966,"nodeType":"StructuredDocumentation","src":"757:179:16","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2989,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:16","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"token","nameLocation":"970:5:16","nodeType":"VariableDeclaration","scope":2989,"src":"963:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":2968,"nodeType":"UserDefinedTypeName","pathNode":{"id":2967,"name":"IERC20","nameLocations":["963:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"963:6:16"},"referencedDeclaration":2920,"src":"963:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2971,"mutability":"mutable","name":"to","nameLocation":"985:2:16","nodeType":"VariableDeclaration","scope":2989,"src":"977:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"value","nameLocation":"997:5:16","nodeType":"VariableDeclaration","scope":2989,"src":"989:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:16"},"returnParameters":{"id":2975,"nodeType":"ParameterList","parameters":[],"src":"1013:0:16"},"scope":3332,"src":"941:175:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3015,"nodeType":"Block","src":"1445:113:16","statements":[{"expression":{"arguments":[{"id":3003,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"1475:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3006,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"1505:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:16","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2919,"src":"1505:18:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:16","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3009,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"1534:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3010,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"1540:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"1544:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3004,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3002,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1455:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3014,"nodeType":"ExpressionStatement","src":"1455:96:16"}]},"documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"1122:228:16","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":3016,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:16","nodeType":"FunctionDefinition","parameters":{"id":3000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"token","nameLocation":"1388:5:16","nodeType":"VariableDeclaration","scope":3016,"src":"1381:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":2992,"nodeType":"UserDefinedTypeName","pathNode":{"id":2991,"name":"IERC20","nameLocations":["1381:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1381:6:16"},"referencedDeclaration":2920,"src":"1381:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2995,"mutability":"mutable","name":"from","nameLocation":"1403:4:16","nodeType":"VariableDeclaration","scope":3016,"src":"1395:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2994,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2997,"mutability":"mutable","name":"to","nameLocation":"1417:2:16","nodeType":"VariableDeclaration","scope":3016,"src":"1409:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2996,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2999,"mutability":"mutable","name":"value","nameLocation":"1429:5:16","nodeType":"VariableDeclaration","scope":3016,"src":"1421:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2998,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:16"},"returnParameters":{"id":3001,"nodeType":"ParameterList","parameters":[],"src":"1445:0:16"},"scope":3332,"src":"1355:203:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3059,"nodeType":"Block","src":"1894:497:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"2143:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3036,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}],"id":3035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3034,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:16","typeDescriptions":{}}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3038,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"2190:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3032,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"2159:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:16","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2897,"src":"2159:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":3027,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3046,"nodeType":"ExpressionStatement","src":"2121:163:16"},{"expression":{"arguments":[{"id":3048,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"2314:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3020,"src":"2344:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:16","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"2344:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:16","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3054,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"2368:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"2377:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3049,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3047,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2294:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3058,"nodeType":"ExpressionStatement","src":"2294:90:16"}]},"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"1564:249:16","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":3060,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:16","nodeType":"FunctionDefinition","parameters":{"id":3025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3020,"mutability":"mutable","name":"token","nameLocation":"1846:5:16","nodeType":"VariableDeclaration","scope":3060,"src":"1839:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3019,"nodeType":"UserDefinedTypeName","pathNode":{"id":3018,"name":"IERC20","nameLocations":["1839:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1839:6:16"},"referencedDeclaration":2920,"src":"1839:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3022,"mutability":"mutable","name":"spender","nameLocation":"1861:7:16","nodeType":"VariableDeclaration","scope":3060,"src":"1853:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3021,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3024,"mutability":"mutable","name":"value","nameLocation":"1878:5:16","nodeType":"VariableDeclaration","scope":3060,"src":"1870:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:16"},"returnParameters":{"id":3026,"nodeType":"ParameterList","parameters":[],"src":"1894:0:16"},"scope":3332,"src":"1818:573:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3096,"nodeType":"Block","src":"2668:194:16","statements":[{"assignments":[3072],"declarations":[{"constant":false,"id":3072,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:16","nodeType":"VariableDeclaration","scope":3096,"src":"2678:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3081,"initialValue":{"arguments":[{"arguments":[{"id":3077,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}],"id":3076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3075,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:16","typeDescriptions":{}}},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3079,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"2732:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3073,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"2701:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:16","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2897,"src":"2701:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:16"},{"expression":{"arguments":[{"id":3083,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"2770:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3086,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"2800:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:16","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"2800:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:16","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3089,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"2824:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3090,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"2833:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2848:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3084,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3082,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2750:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3095,"nodeType":"ExpressionStatement","src":"2750:105:16"}]},"documentation":{"id":3061,"nodeType":"StructuredDocumentation","src":"2397:180:16","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3097,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:16","nodeType":"FunctionDefinition","parameters":{"id":3069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3064,"mutability":"mutable","name":"token","nameLocation":"2620:5:16","nodeType":"VariableDeclaration","scope":3097,"src":"2613:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3063,"nodeType":"UserDefinedTypeName","pathNode":{"id":3062,"name":"IERC20","nameLocations":["2613:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"2613:6:16"},"referencedDeclaration":2920,"src":"2613:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3066,"mutability":"mutable","name":"spender","nameLocation":"2635:7:16","nodeType":"VariableDeclaration","scope":3097,"src":"2627:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3065,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"value","nameLocation":"2652:5:16","nodeType":"VariableDeclaration","scope":3097,"src":"2644:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3067,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:16"},"returnParameters":{"id":3070,"nodeType":"ParameterList","parameters":[],"src":"2668:0:16"},"scope":3332,"src":"2582:280:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3141,"nodeType":"Block","src":"3139:321:16","statements":[{"id":3140,"nodeType":"UncheckedBlock","src":"3149:305:16","statements":[{"assignments":[3109],"declarations":[{"constant":false,"id":3109,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:16","nodeType":"VariableDeclaration","scope":3140,"src":"3173:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3118,"initialValue":{"arguments":[{"arguments":[{"id":3114,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3332","typeString":"library SafeERC20"}],"id":3113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3112,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:16","typeDescriptions":{}}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3116,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"3227:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3110,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"3196:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:16","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2897,"src":"3196:15:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3120,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3257:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"3273:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3119,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3125,"nodeType":"ExpressionStatement","src":"3249:75:16"},{"expression":{"arguments":[{"id":3127,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"3358:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3130,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"3388:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:16","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"3388:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:16","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3133,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"3412:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3134,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3421:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"3436:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3128,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3126,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3338:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3139,"nodeType":"ExpressionStatement","src":"3338:105:16"}]}]},"documentation":{"id":3098,"nodeType":"StructuredDocumentation","src":"2868:180:16","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3142,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:16","nodeType":"FunctionDefinition","parameters":{"id":3106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3101,"mutability":"mutable","name":"token","nameLocation":"3091:5:16","nodeType":"VariableDeclaration","scope":3142,"src":"3084:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3100,"nodeType":"UserDefinedTypeName","pathNode":{"id":3099,"name":"IERC20","nameLocations":["3084:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"3084:6:16"},"referencedDeclaration":2920,"src":"3084:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3103,"mutability":"mutable","name":"spender","nameLocation":"3106:7:16","nodeType":"VariableDeclaration","scope":3142,"src":"3098:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3102,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3105,"mutability":"mutable","name":"value","nameLocation":"3123:5:16","nodeType":"VariableDeclaration","scope":3142,"src":"3115:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3104,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:16"},"returnParameters":{"id":3107,"nodeType":"ParameterList","parameters":[],"src":"3139:0:16"},"scope":3332,"src":"3053:407:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3188,"nodeType":"Block","src":"3856:333:16","statements":[{"assignments":[3154],"declarations":[{"constant":false,"id":3154,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:16","nodeType":"VariableDeclaration","scope":3188,"src":"3866:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3153,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3163,"initialValue":{"arguments":[{"expression":{"expression":{"id":3157,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"3917:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:16","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"3917:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:16","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3160,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"3941:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"3950:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3155,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:16"},{"condition":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:16","subExpression":{"arguments":[{"id":3165,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"3996:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"id":3166,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"4003:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3164,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"3972:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"IfStatement","src":"3967:216:16","trueBody":{"id":3186,"nodeType":"Block","src":"4018:165:16","statements":[{"expression":{"arguments":[{"id":3170,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"4052:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3173,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"4082:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:16","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"4082:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:16","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3176,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"4106:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3171,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3169,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"4032:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3180,"nodeType":"ExpressionStatement","src":"4032:86:16"},{"expression":{"arguments":[{"id":3182,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"4152:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},{"id":3183,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"4159:12:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3181,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"4132:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3185,"nodeType":"ExpressionStatement","src":"4132:40:16"}]}}]},"documentation":{"id":3143,"nodeType":"StructuredDocumentation","src":"3466:308:16","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":3189,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:16","nodeType":"FunctionDefinition","parameters":{"id":3151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3146,"mutability":"mutable","name":"token","nameLocation":"3808:5:16","nodeType":"VariableDeclaration","scope":3189,"src":"3801:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3145,"nodeType":"UserDefinedTypeName","pathNode":{"id":3144,"name":"IERC20","nameLocations":["3801:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"3801:6:16"},"referencedDeclaration":2920,"src":"3801:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3148,"mutability":"mutable","name":"spender","nameLocation":"3823:7:16","nodeType":"VariableDeclaration","scope":3189,"src":"3815:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3150,"mutability":"mutable","name":"value","nameLocation":"3840:5:16","nodeType":"VariableDeclaration","scope":3189,"src":"3832:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:16"},"returnParameters":{"id":3152,"nodeType":"ParameterList","parameters":[],"src":"3856:0:16"},"scope":3332,"src":"3779:410:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3245,"nodeType":"Block","src":"4556:257:16","statements":[{"assignments":[3211],"declarations":[{"constant":false,"id":3211,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:16","nodeType":"VariableDeclaration","scope":3245,"src":"4566:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3216,"initialValue":{"arguments":[{"id":3214,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"4601:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3212,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"4588:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2956","typeString":"contract IERC20Permit"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:16","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"4588:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:16"},{"expression":{"arguments":[{"id":3220,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"4630:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3221,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"4637:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"4646:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3223,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"4653:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3224,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"4663:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3225,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"4666:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3226,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"4669:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3217,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"4617:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2956","typeString":"contract IERC20Permit"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:16","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2941,"src":"4617:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3228,"nodeType":"ExpressionStatement","src":"4617:54:16"},{"assignments":[3230],"declarations":[{"constant":false,"id":3230,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:16","nodeType":"VariableDeclaration","scope":3245,"src":"4681:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3229,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3235,"initialValue":{"arguments":[{"id":3233,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"4715:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3231,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"4702:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2956","typeString":"contract IERC20Permit"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:16","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"4702:12:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3237,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"4739:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3238,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"4753:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":3236,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3244,"nodeType":"ExpressionStatement","src":"4731:75:16"}]},"documentation":{"id":3190,"nodeType":"StructuredDocumentation","src":"4195:141:16","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":3246,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:16","nodeType":"FunctionDefinition","parameters":{"id":3208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"token","nameLocation":"4383:5:16","nodeType":"VariableDeclaration","scope":3246,"src":"4370:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2956","typeString":"contract IERC20Permit"},"typeName":{"id":3192,"nodeType":"UserDefinedTypeName","pathNode":{"id":3191,"name":"IERC20Permit","nameLocations":["4370:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2956,"src":"4370:12:16"},"referencedDeclaration":2956,"src":"4370:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2956","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":3195,"mutability":"mutable","name":"owner","nameLocation":"4406:5:16","nodeType":"VariableDeclaration","scope":3246,"src":"4398:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3194,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"spender","nameLocation":"4429:7:16","nodeType":"VariableDeclaration","scope":3246,"src":"4421:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3199,"mutability":"mutable","name":"value","nameLocation":"4454:5:16","nodeType":"VariableDeclaration","scope":3246,"src":"4446:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3198,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3201,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:16","nodeType":"VariableDeclaration","scope":3246,"src":"4469:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3203,"mutability":"mutable","name":"v","nameLocation":"4501:1:16","nodeType":"VariableDeclaration","scope":3246,"src":"4495:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3202,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3205,"mutability":"mutable","name":"r","nameLocation":"4520:1:16","nodeType":"VariableDeclaration","scope":3246,"src":"4512:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3204,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3207,"mutability":"mutable","name":"s","nameLocation":"4539:1:16","nodeType":"VariableDeclaration","scope":3246,"src":"4531:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:16"},"returnParameters":{"id":3209,"nodeType":"ParameterList","parameters":[],"src":"4556:0:16"},"scope":3332,"src":"4341:472:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3282,"nodeType":"Block","src":"5266:572:16","statements":[{"assignments":[3256],"declarations":[{"constant":false,"id":3256,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:16","nodeType":"VariableDeclaration","scope":3282,"src":"5615:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3255,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3265,"initialValue":{"arguments":[{"id":3262,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"5669:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3259,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"5649:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":3258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:16","typeDescriptions":{}}},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:16","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3422,"src":"5641:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3267,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"5728:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:16","memberName":"length","nodeType":"MemberAccess","src":"5728:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3273,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"5765:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3274,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:16","typeDescriptions":{}}}],"id":3276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3271,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:16","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3266,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3281,"nodeType":"ExpressionStatement","src":"5720:111:16"}]},"documentation":{"id":3247,"nodeType":"StructuredDocumentation","src":"4819:372:16","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3283,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:16","nodeType":"FunctionDefinition","parameters":{"id":3253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3250,"mutability":"mutable","name":"token","nameLocation":"5232:5:16","nodeType":"VariableDeclaration","scope":3283,"src":"5225:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3249,"nodeType":"UserDefinedTypeName","pathNode":{"id":3248,"name":"IERC20","nameLocations":["5225:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"5225:6:16"},"referencedDeclaration":2920,"src":"5225:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"data","nameLocation":"5252:4:16","nodeType":"VariableDeclaration","scope":3283,"src":"5239:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3251,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:16"},"returnParameters":{"id":3254,"nodeType":"ParameterList","parameters":[],"src":"5266:0:16"},"scope":3332,"src":"5196:642:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3330,"nodeType":"Block","src":"6428:505:16","statements":[{"assignments":[3295,3297],"declarations":[{"constant":false,"id":3295,"mutability":"mutable","name":"success","nameLocation":"6729:7:16","nodeType":"VariableDeclaration","scope":3330,"src":"6724:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3294,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3297,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:16","nodeType":"VariableDeclaration","scope":3330,"src":"6738:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3296,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3305,"initialValue":{"arguments":[{"id":3303,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"6785:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3300,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"6773:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":3299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3298,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:16","typeDescriptions":{}}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:16","memberName":"call","nodeType":"MemberAccess","src":"6765:19:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:16"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"6819:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3307,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"6831:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:16","memberName":"length","nodeType":"MemberAccess","src":"6831:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3313,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"6868:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3314,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:16","typeDescriptions":{}}}],"id":3316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3311,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:16","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":3325,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"6919:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":3324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3323,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:16","typeDescriptions":{}}},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3321,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"6892:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3662_$","typeString":"type(library Address)"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:16","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3350,"src":"6892:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3293,"id":3329,"nodeType":"Return","src":"6800:126:16"}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"5844:490:16","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":3331,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:16","nodeType":"FunctionDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"token","nameLocation":"6379:5:16","nodeType":"VariableDeclaration","scope":3331,"src":"6372:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":3286,"nodeType":"UserDefinedTypeName","pathNode":{"id":3285,"name":"IERC20","nameLocations":["6372:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"6372:6:16"},"referencedDeclaration":2920,"src":"6372:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"data","nameLocation":"6399:4:16","nodeType":"VariableDeclaration","scope":3331,"src":"6386:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3288,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:16"},"returnParameters":{"id":3293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3331,"src":"6422:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3291,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:16"},"scope":3332,"src":"6339:594:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3333,"src":"701:6234:16","usedErrors":[]}],"src":"115:6821:16"},"id":16},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3662]},"id":3663,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3334,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3335,"nodeType":"StructuredDocumentation","src":"126:67:17","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3662,"linearizedBaseContracts":[3662],"name":"Address","nameLocation":"202:7:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3349,"nodeType":"Block","src":"1478:254:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3343,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"1702:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:17","memberName":"code","nodeType":"MemberAccess","src":"1702:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:17","memberName":"length","nodeType":"MemberAccess","src":"1702:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3342,"id":3348,"nodeType":"Return","src":"1695:30:17"}]},"documentation":{"id":3336,"nodeType":"StructuredDocumentation","src":"216:1191:17","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3350,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:17","nodeType":"FunctionDefinition","parameters":{"id":3339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"account","nameLocation":"1440:7:17","nodeType":"VariableDeclaration","scope":3350,"src":"1432:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3337,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:17"},"returnParameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3350,"src":"1472:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3340,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:17"},"scope":3662,"src":"1412:320:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3383,"nodeType":"Block","src":"2718:241:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3361,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3662","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3662","typeString":"library Address"}],"id":3360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3359,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:17","typeDescriptions":{}}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:17","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3364,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"2761:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3358,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3368,"nodeType":"ExpressionStatement","src":"2728:73:17"},{"assignments":[3370,null],"declarations":[{"constant":false,"id":3370,"mutability":"mutable","name":"success","nameLocation":"2818:7:17","nodeType":"VariableDeclaration","scope":3383,"src":"2813:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3369,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3377,"initialValue":{"arguments":[{"hexValue":"","id":3375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3371,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"2831:9:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:17","memberName":"call","nodeType":"MemberAccess","src":"2831:14:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3373,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"2853:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:17"},{"expression":{"arguments":[{"id":3379,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"2882:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3378,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3382,"nodeType":"ExpressionStatement","src":"2874:78:17"}]},"documentation":{"id":3351,"nodeType":"StructuredDocumentation","src":"1738:904:17","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3384,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:17","nodeType":"FunctionDefinition","parameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:17","nodeType":"VariableDeclaration","scope":3384,"src":"2666:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3352,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3355,"mutability":"mutable","name":"amount","nameLocation":"2701:6:17","nodeType":"VariableDeclaration","scope":3384,"src":"2693:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:17"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[],"src":"2718:0:17"},"scope":3662,"src":"2647:312:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3401,"nodeType":"Block","src":"3790:96:17","statements":[{"expression":{"arguments":[{"id":3395,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"3829:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3396,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"3837:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3394,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3442,3486],"referencedDeclaration":3486,"src":"3807:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3393,"id":3400,"nodeType":"Return","src":"3800:79:17"}]},"documentation":{"id":3385,"nodeType":"StructuredDocumentation","src":"2965:731:17","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3402,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:17","nodeType":"FunctionDefinition","parameters":{"id":3390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3387,"mutability":"mutable","name":"target","nameLocation":"3731:6:17","nodeType":"VariableDeclaration","scope":3402,"src":"3723:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3386,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3389,"mutability":"mutable","name":"data","nameLocation":"3752:4:17","nodeType":"VariableDeclaration","scope":3402,"src":"3739:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3388,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:17"},"returnParameters":{"id":3393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3402,"src":"3776:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3391,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:17"},"scope":3662,"src":"3701:185:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3421,"nodeType":"Block","src":"4255:76:17","statements":[{"expression":{"arguments":[{"id":3415,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"4294:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3416,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"4302:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3418,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"4311:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3414,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3442,3486],"referencedDeclaration":3486,"src":"4272:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3413,"id":3420,"nodeType":"Return","src":"4265:59:17"}]},"documentation":{"id":3403,"nodeType":"StructuredDocumentation","src":"3892:211:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3422,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:17","nodeType":"FunctionDefinition","parameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"target","nameLocation":"4147:6:17","nodeType":"VariableDeclaration","scope":3422,"src":"4139:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3404,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3407,"mutability":"mutable","name":"data","nameLocation":"4176:4:17","nodeType":"VariableDeclaration","scope":3422,"src":"4163:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3406,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3409,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:17","nodeType":"VariableDeclaration","scope":3422,"src":"4190:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3408,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:17"},"returnParameters":{"id":3413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3422,"src":"4241:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3411,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:17"},"scope":3662,"src":"4108:223:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3441,"nodeType":"Block","src":"4806:111:17","statements":[{"expression":{"arguments":[{"id":3435,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"4845:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3436,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"4853:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"4859:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3434,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3442,3486],"referencedDeclaration":3486,"src":"4823:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3433,"id":3440,"nodeType":"Return","src":"4816:94:17"}]},"documentation":{"id":3423,"nodeType":"StructuredDocumentation","src":"4337:351:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3442,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:17","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3425,"mutability":"mutable","name":"target","nameLocation":"4732:6:17","nodeType":"VariableDeclaration","scope":3442,"src":"4724:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3424,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3427,"mutability":"mutable","name":"data","nameLocation":"4753:4:17","nodeType":"VariableDeclaration","scope":3442,"src":"4740:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3426,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3429,"mutability":"mutable","name":"value","nameLocation":"4767:5:17","nodeType":"VariableDeclaration","scope":3442,"src":"4759:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:17"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3442,"src":"4792:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3431,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:17"},"scope":3662,"src":"4693:224:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3485,"nodeType":"Block","src":"5344:267:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3459,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3662","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3662","typeString":"library Address"}],"id":3458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:17","typeDescriptions":{}}},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:17","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"5387:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3466,"nodeType":"ExpressionStatement","src":"5354:81:17"},{"assignments":[3468,3470],"declarations":[{"constant":false,"id":3468,"mutability":"mutable","name":"success","nameLocation":"5451:7:17","nodeType":"VariableDeclaration","scope":3485,"src":"5446:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3467,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3470,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:17","nodeType":"VariableDeclaration","scope":3485,"src":"5460:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3469,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3477,"initialValue":{"arguments":[{"id":3475,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"5513:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3471,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"5487:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:17","memberName":"call","nodeType":"MemberAccess","src":"5487:11:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"5506:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:17"},{"expression":{"arguments":[{"id":3479,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"5562:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3480,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"5570:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3481,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5579:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3482,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5591:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3478,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"5535:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3455,"id":3484,"nodeType":"Return","src":"5528:76:17"}]},"documentation":{"id":3443,"nodeType":"StructuredDocumentation","src":"4923:237:17","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3486,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:17","nodeType":"FunctionDefinition","parameters":{"id":3452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"target","nameLocation":"5213:6:17","nodeType":"VariableDeclaration","scope":3486,"src":"5205:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3444,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3447,"mutability":"mutable","name":"data","nameLocation":"5242:4:17","nodeType":"VariableDeclaration","scope":3486,"src":"5229:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3446,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"value","nameLocation":"5264:5:17","nodeType":"VariableDeclaration","scope":3486,"src":"5256:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3448,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3451,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:17","nodeType":"VariableDeclaration","scope":3486,"src":"5279:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3450,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:17"},"returnParameters":{"id":3455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3486,"src":"5330:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3453,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:17"},"scope":3662,"src":"5165:446:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3502,"nodeType":"Block","src":"5888:97:17","statements":[{"expression":{"arguments":[{"id":3497,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"5924:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3498,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"5932:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3496,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3503,3532],"referencedDeclaration":3532,"src":"5905:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3495,"id":3501,"nodeType":"Return","src":"5898:80:17"}]},"documentation":{"id":3487,"nodeType":"StructuredDocumentation","src":"5617:166:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3503,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:17","nodeType":"FunctionDefinition","parameters":{"id":3492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3489,"mutability":"mutable","name":"target","nameLocation":"5824:6:17","nodeType":"VariableDeclaration","scope":3503,"src":"5816:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3488,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3491,"mutability":"mutable","name":"data","nameLocation":"5845:4:17","nodeType":"VariableDeclaration","scope":3503,"src":"5832:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3490,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:17"},"returnParameters":{"id":3495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3503,"src":"5874:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3493,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:17"},"scope":3662,"src":"5788:197:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3531,"nodeType":"Block","src":"6327:168:17","statements":[{"assignments":[3516,3518],"declarations":[{"constant":false,"id":3516,"mutability":"mutable","name":"success","nameLocation":"6343:7:17","nodeType":"VariableDeclaration","scope":3531,"src":"6338:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3515,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3518,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:17","nodeType":"VariableDeclaration","scope":3531,"src":"6352:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3517,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3523,"initialValue":{"arguments":[{"id":3521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3508,"src":"6397:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3519,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"6379:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:17","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:17","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:17"},{"expression":{"arguments":[{"id":3525,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"6446:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3526,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"6454:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3527,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"6463:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3528,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"6475:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3524,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"6419:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3514,"id":3530,"nodeType":"Return","src":"6412:76:17"}]},"documentation":{"id":3504,"nodeType":"StructuredDocumentation","src":"5991:173:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3532,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:17","nodeType":"FunctionDefinition","parameters":{"id":3511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3506,"mutability":"mutable","name":"target","nameLocation":"6214:6:17","nodeType":"VariableDeclaration","scope":3532,"src":"6206:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3505,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3508,"mutability":"mutable","name":"data","nameLocation":"6243:4:17","nodeType":"VariableDeclaration","scope":3532,"src":"6230:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3507,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3510,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:17","nodeType":"VariableDeclaration","scope":3532,"src":"6257:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3509,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:17"},"returnParameters":{"id":3514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3532,"src":"6313:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3512,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:17"},"scope":3662,"src":"6169:326:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3548,"nodeType":"Block","src":"6771:101:17","statements":[{"expression":{"arguments":[{"id":3543,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"6809:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3544,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"6817:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3542,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3549,3578],"referencedDeclaration":3578,"src":"6788:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3541,"id":3547,"nodeType":"Return","src":"6781:84:17"}]},"documentation":{"id":3533,"nodeType":"StructuredDocumentation","src":"6501:168:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3549,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:17","nodeType":"FunctionDefinition","parameters":{"id":3538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3535,"mutability":"mutable","name":"target","nameLocation":"6712:6:17","nodeType":"VariableDeclaration","scope":3549,"src":"6704:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3534,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"data","nameLocation":"6733:4:17","nodeType":"VariableDeclaration","scope":3549,"src":"6720:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3536,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:17"},"returnParameters":{"id":3541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3549,"src":"6757:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3539,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:17"},"scope":3662,"src":"6674:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3577,"nodeType":"Block","src":"7213:170:17","statements":[{"assignments":[3562,3564],"declarations":[{"constant":false,"id":3562,"mutability":"mutable","name":"success","nameLocation":"7229:7:17","nodeType":"VariableDeclaration","scope":3577,"src":"7224:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3561,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:17","nodeType":"VariableDeclaration","scope":3577,"src":"7238:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3563,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3569,"initialValue":{"arguments":[{"id":3567,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"7285:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3565,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"7265:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:17","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:17","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:17"},{"expression":{"arguments":[{"id":3571,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"7334:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3572,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"7342:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3573,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"7351:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3574,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"7363:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3570,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"7307:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3560,"id":3576,"nodeType":"Return","src":"7300:76:17"}]},"documentation":{"id":3550,"nodeType":"StructuredDocumentation","src":"6878:175:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3578,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:17","nodeType":"FunctionDefinition","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3552,"mutability":"mutable","name":"target","nameLocation":"7105:6:17","nodeType":"VariableDeclaration","scope":3578,"src":"7097:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3551,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"data","nameLocation":"7134:4:17","nodeType":"VariableDeclaration","scope":3578,"src":"7121:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3553,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:17","nodeType":"VariableDeclaration","scope":3578,"src":"7148:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3555,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:17"},"returnParameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3578,"src":"7199:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3558,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:17"},"scope":3662,"src":"7058:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3616,"nodeType":"Block","src":"7865:434:17","statements":[{"condition":{"id":3592,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"7879:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3614,"nodeType":"Block","src":"8235:58:17","statements":[{"expression":{"arguments":[{"id":3610,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"8257:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3611,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"8269:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3609,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"8249:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3613,"nodeType":"ExpressionStatement","src":"8249:33:17"}]},"id":3615,"nodeType":"IfStatement","src":"7875:418:17","trueBody":{"id":3608,"nodeType":"Block","src":"7888:341:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3593,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"7906:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:17","memberName":"length","nodeType":"MemberAccess","src":"7906:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3605,"nodeType":"IfStatement","src":"7902:286:17","trueBody":{"id":3604,"nodeType":"Block","src":"7930:258:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3599,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"8132:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3598,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"8121:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3597,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3603,"nodeType":"ExpressionStatement","src":"8113:60:17"}]}},{"expression":{"id":3606,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"8208:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3591,"id":3607,"nodeType":"Return","src":"8201:17:17"}]}}]},"documentation":{"id":3579,"nodeType":"StructuredDocumentation","src":"7389:277:17","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3617,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:17","nodeType":"FunctionDefinition","parameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"target","nameLocation":"7724:6:17","nodeType":"VariableDeclaration","scope":3617,"src":"7716:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"success","nameLocation":"7745:7:17","nodeType":"VariableDeclaration","scope":3617,"src":"7740:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3582,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:17","nodeType":"VariableDeclaration","scope":3617,"src":"7762:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3584,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:17","nodeType":"VariableDeclaration","scope":3617,"src":"7795:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3586,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:17"},"returnParameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"7851:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3589,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:17"},"scope":3662,"src":"7671:628:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3640,"nodeType":"Block","src":"8680:135:17","statements":[{"condition":{"id":3629,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"8694:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3638,"nodeType":"Block","src":"8751:58:17","statements":[{"expression":{"arguments":[{"id":3634,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"8773:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3635,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"8785:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3633,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"8765:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3637,"nodeType":"ExpressionStatement","src":"8765:33:17"}]},"id":3639,"nodeType":"IfStatement","src":"8690:119:17","trueBody":{"id":3632,"nodeType":"Block","src":"8703:42:17","statements":[{"expression":{"id":3630,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"8724:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3628,"id":3631,"nodeType":"Return","src":"8717:17:17"}]}}]},"documentation":{"id":3618,"nodeType":"StructuredDocumentation","src":"8305:210:17","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3641,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:17","nodeType":"FunctionDefinition","parameters":{"id":3625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3620,"mutability":"mutable","name":"success","nameLocation":"8560:7:17","nodeType":"VariableDeclaration","scope":3641,"src":"8555:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3619,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3622,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:17","nodeType":"VariableDeclaration","scope":3641,"src":"8577:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3621,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:17","nodeType":"VariableDeclaration","scope":3641,"src":"8610:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3623,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:17"},"returnParameters":{"id":3628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3641,"src":"8666:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3626,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:17"},"scope":3662,"src":"8520:295:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3660,"nodeType":"Block","src":"8904:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3648,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"8980:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:17","memberName":"length","nodeType":"MemberAccess","src":"8980:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3658,"nodeType":"Block","src":"9310:45:17","statements":[{"expression":{"arguments":[{"id":3655,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"9331:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3654,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3657,"nodeType":"ExpressionStatement","src":"9324:20:17"}]},"id":3659,"nodeType":"IfStatement","src":"8976:379:17","trueBody":{"id":3653,"nodeType":"Block","src":"9003:301:17","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:17","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:17","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:17"},"nodeType":"YulFunctionCall","src":"9202:17:17"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:17","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:17"},"nodeType":"YulFunctionCall","src":"9243:19:17"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:17"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:17"},"nodeType":"YulFunctionCall","src":"9236:44:17"},"nodeType":"YulExpressionStatement","src":"9236:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3643,"isOffset":false,"isSlot":false,"src":"9208:10:17","valueSize":1},{"declaration":3643,"isOffset":false,"isSlot":false,"src":"9251:10:17","valueSize":1}],"id":3652,"nodeType":"InlineAssembly","src":"9152:142:17"}]}}]},"id":3661,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:17","nodeType":"FunctionDefinition","parameters":{"id":3646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3643,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:17","nodeType":"VariableDeclaration","scope":3661,"src":"8838:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3642,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3645,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:17","nodeType":"VariableDeclaration","scope":3661,"src":"8863:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3644,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:17"},"returnParameters":{"id":3647,"nodeType":"ParameterList","parameters":[],"src":"8904:0:17"},"scope":3662,"src":"8821:540:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3663,"src":"194:9169:17","usedErrors":[]}],"src":"101:9263:17"},"id":17},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[5123],"SignedMath":[5228],"Strings":[3891]},"id":3892,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3664,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3665,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3892,"sourceUnit":5124,"src":"126:25:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3666,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3892,"sourceUnit":5229,"src":"152:31:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3667,"nodeType":"StructuredDocumentation","src":"185:34:18","text":" @dev String operations."},"fullyImplemented":true,"id":3891,"linearizedBaseContracts":[3891],"name":"Strings","nameLocation":"228:7:18","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3670,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:18","nodeType":"VariableDeclaration","scope":3891,"src":"242:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3668,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3673,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:18","nodeType":"VariableDeclaration","scope":3891,"src":"302:43:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3671,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:18","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3720,"nodeType":"Block","src":"518:625:18","statements":[{"id":3719,"nodeType":"UncheckedBlock","src":"528:609:18","statements":[{"assignments":[3682],"declarations":[{"constant":false,"id":3682,"mutability":"mutable","name":"length","nameLocation":"560:6:18","nodeType":"VariableDeclaration","scope":3719,"src":"552:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3681,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3689,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3676,"src":"580:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3683,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"569:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:18","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4960,"src":"569:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:18"},{"assignments":[3691],"declarations":[{"constant":false,"id":3691,"mutability":"mutable","name":"buffer","nameLocation":"618:6:18","nodeType":"VariableDeclaration","scope":3719,"src":"604:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3690,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3696,"initialValue":{"arguments":[{"id":3694,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"638:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3692,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:18"},{"assignments":[3698],"declarations":[{"constant":false,"id":3698,"mutability":"mutable","name":"ptr","nameLocation":"667:3:18","nodeType":"VariableDeclaration","scope":3719,"src":"659:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3697,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3699,"nodeType":"VariableDeclarationStatement","src":"659:11:18"},{"AST":{"nodeType":"YulBlock","src":"740:67:18","statements":[{"nodeType":"YulAssignment","src":"758:35:18","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:18","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:18"},"nodeType":"YulFunctionCall","src":"777:15:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:18"},"nodeType":"YulFunctionCall","src":"765:28:18"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3691,"isOffset":false,"isSlot":false,"src":"769:6:18","valueSize":1},{"declaration":3682,"isOffset":false,"isSlot":false,"src":"785:6:18","valueSize":1},{"declaration":3698,"isOffset":false,"isSlot":false,"src":"758:3:18","valueSize":1}],"id":3700,"nodeType":"InlineAssembly","src":"731:76:18"},{"body":{"id":3715,"nodeType":"Block","src":"833:267:18","statements":[{"expression":{"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:18","subExpression":{"id":3702,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"851:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3704,"nodeType":"ExpressionStatement","src":"851:5:18"},{"AST":{"nodeType":"YulBlock","src":"934:84:18","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:18"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:18","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:18"},"nodeType":"YulFunctionCall","src":"974:14:18"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:18"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:18"},"nodeType":"YulFunctionCall","src":"969:30:18"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:18"},"nodeType":"YulFunctionCall","src":"956:44:18"},"nodeType":"YulExpressionStatement","src":"956:44:18"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3670,"isOffset":false,"isSlot":false,"src":"990:8:18","valueSize":1},{"declaration":3698,"isOffset":false,"isSlot":false,"src":"964:3:18","valueSize":1},{"declaration":3676,"isOffset":false,"isSlot":false,"src":"978:5:18","valueSize":1}],"id":3705,"nodeType":"InlineAssembly","src":"925:93:18"},{"expression":{"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3676,"src":"1035:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3709,"nodeType":"ExpressionStatement","src":"1035:11:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3710,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3676,"src":"1068:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3714,"nodeType":"IfStatement","src":"1064:21:18","trueBody":{"id":3713,"nodeType":"Break","src":"1080:5:18"}}]},"condition":{"hexValue":"74727565","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3716,"nodeType":"WhileStatement","src":"820:280:18"},{"expression":{"id":3717,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"1120:6:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3680,"id":3718,"nodeType":"Return","src":"1113:13:18"}]}]},"documentation":{"id":3674,"nodeType":"StructuredDocumentation","src":"352:90:18","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3721,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:18","nodeType":"FunctionDefinition","parameters":{"id":3677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"value","nameLocation":"473:5:18","nodeType":"VariableDeclaration","scope":3721,"src":"465:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3675,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:18"},"returnParameters":{"id":3680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3721,"src":"503:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3678,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:18"},"scope":3891,"src":"447:696:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3748,"nodeType":"Block","src":"1313:103:18","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"1354:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:18","trueExpression":{"hexValue":"2d","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"1400:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3740,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"1385:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5228_$","typeString":"type(library SignedMath)"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:18","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5227,"src":"1385:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3739,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3721,3749],"referencedDeclaration":3721,"src":"1376:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3731,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:18","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3729,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:18","typeDescriptions":{}}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3728,"id":3747,"nodeType":"Return","src":"1323:86:18"}]},"documentation":{"id":3722,"nodeType":"StructuredDocumentation","src":"1149:89:18","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3749,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:18","nodeType":"FunctionDefinition","parameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3724,"mutability":"mutable","name":"value","nameLocation":"1268:5:18","nodeType":"VariableDeclaration","scope":3749,"src":"1261:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3723,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:18"},"returnParameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3749,"src":"1298:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3726,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:18"},"scope":3891,"src":"1243:173:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3768,"nodeType":"Block","src":"1595:100:18","statements":[{"id":3767,"nodeType":"UncheckedBlock","src":"1605:84:18","statements":[{"expression":{"arguments":[{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"1648:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"1667:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3759,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"1655:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:18","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5083,"src":"1655:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3757,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3769,3845,3865],"referencedDeclaration":3845,"src":"1636:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3756,"id":3766,"nodeType":"Return","src":"1629:49:18"}]}]},"documentation":{"id":3750,"nodeType":"StructuredDocumentation","src":"1422:94:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3769,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:18","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"value","nameLocation":"1550:5:18","nodeType":"VariableDeclaration","scope":3769,"src":"1542:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:18"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3769,"src":"1580:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3754,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:18"},"scope":3891,"src":"1521:174:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3844,"nodeType":"Block","src":"1908:347:18","statements":[{"assignments":[3780],"declarations":[{"constant":false,"id":3780,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:18","nodeType":"VariableDeclaration","scope":3844,"src":"1918:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3779,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3789,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3784,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3774,"src":"1954:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3781,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:18"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3790,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"1975:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3792,"indexExpression":{"hexValue":"30","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3795,"nodeType":"ExpressionStatement","src":"1975:15:18"},{"expression":{"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3796,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"2000:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3798,"indexExpression":{"hexValue":"31","id":3797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3801,"nodeType":"ExpressionStatement","src":"2000:15:18"},{"body":{"id":3830,"nodeType":"Block","src":"2070:83:18","statements":[{"expression":{"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3816,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"2084:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3818,"indexExpression":{"id":3817,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"2091:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3819,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"2096:8:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3823,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2105:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:18","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3825,"nodeType":"ExpressionStatement","src":"2084:33:18"},{"expression":{"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2131:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3829,"nodeType":"ExpressionStatement","src":"2131:11:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3810,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"2058:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3831,"initializationExpression":{"assignments":[3803],"declarations":[{"constant":false,"id":3803,"mutability":"mutable","name":"i","nameLocation":"2038:1:18","nodeType":"VariableDeclaration","scope":3831,"src":"2030:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3802,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3809,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3805,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3774,"src":"2046:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:18"},"loopExpression":{"expression":{"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:18","subExpression":{"id":3813,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"2067:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3815,"nodeType":"ExpressionStatement","src":"2065:3:18"},"nodeType":"ForStatement","src":"2025:128:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2170:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3838,"nodeType":"ExpressionStatement","src":"2162:55:18"},{"expression":{"arguments":[{"id":3841,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"2241:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3839,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:18","typeDescriptions":{}}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3778,"id":3843,"nodeType":"Return","src":"2227:21:18"}]},"documentation":{"id":3770,"nodeType":"StructuredDocumentation","src":"1701:112:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3845,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:18","nodeType":"FunctionDefinition","parameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"value","nameLocation":"1847:5:18","nodeType":"VariableDeclaration","scope":3845,"src":"1839:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3774,"mutability":"mutable","name":"length","nameLocation":"1862:6:18","nodeType":"VariableDeclaration","scope":3845,"src":"1854:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:18"},"returnParameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3845,"src":"1893:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3776,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:18"},"scope":3891,"src":"1818:437:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3864,"nodeType":"Block","src":"2480:76:18","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3858,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"2525:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3856,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:18","typeDescriptions":{}}},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:18","typeDescriptions":{}}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3861,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"2533:15:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3853,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3769,3845,3865],"referencedDeclaration":3845,"src":"2497:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3852,"id":3863,"nodeType":"Return","src":"2490:59:18"}]},"documentation":{"id":3846,"nodeType":"StructuredDocumentation","src":"2261:141:18","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3865,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:18","nodeType":"FunctionDefinition","parameters":{"id":3849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3848,"mutability":"mutable","name":"addr","nameLocation":"2436:4:18","nodeType":"VariableDeclaration","scope":3865,"src":"2428:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3847,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:18"},"returnParameters":{"id":3852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3865,"src":"2465:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3850,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:18"},"scope":3891,"src":"2407:149:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3889,"nodeType":"Block","src":"2711:66:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3878,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"2744:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3876,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:18","typeDescriptions":{}}},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3875,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3884,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"2767:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3882,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:18","typeDescriptions":{}}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3881,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3874,"id":3888,"nodeType":"Return","src":"2721:49:18"}]},"documentation":{"id":3866,"nodeType":"StructuredDocumentation","src":"2562:66:18","text":" @dev Returns true if the two strings are equal."},"id":3890,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:18","nodeType":"FunctionDefinition","parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3868,"mutability":"mutable","name":"a","nameLocation":"2662:1:18","nodeType":"VariableDeclaration","scope":3890,"src":"2648:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3867,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"b","nameLocation":"2679:1:18","nodeType":"VariableDeclaration","scope":3890,"src":"2665:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3869,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:18"},"returnParameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3890,"src":"2705:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3872,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:18"},"scope":3891,"src":"2633:144:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3892,"src":"220:2559:18","usedErrors":[]}],"src":"101:2679:18"},"id":18},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[4257],"Math":[5123],"SignedMath":[5228],"Strings":[3891]},"id":4258,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3893,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":3894,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4258,"sourceUnit":3892,"src":"137:24:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"163:205:19","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":4257,"linearizedBaseContracts":[4257],"name":"ECDSA","nameLocation":"377:5:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":3901,"members":[{"id":3896,"name":"NoError","nameLocation":"417:7:19","nodeType":"EnumValue","src":"417:7:19"},{"id":3897,"name":"InvalidSignature","nameLocation":"434:16:19","nodeType":"EnumValue","src":"434:16:19"},{"id":3898,"name":"InvalidSignatureLength","nameLocation":"460:22:19","nodeType":"EnumValue","src":"460:22:19"},{"id":3899,"name":"InvalidSignatureS","nameLocation":"492:17:19","nodeType":"EnumValue","src":"492:17:19"},{"id":3900,"name":"InvalidSignatureV","nameLocation":"519:17:19","nodeType":"EnumValue","src":"519:17:19"}],"name":"RecoverError","nameLocation":"394:12:19","nodeType":"EnumDefinition","src":"389:175:19"},{"body":{"id":3944,"nodeType":"Block","src":"624:457:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3907,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"638:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3908,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"647:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:19","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3896,"src":"647:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3913,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"734:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3914,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"743:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:19","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3897,"src":"743:29:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3922,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"843:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3923,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"852:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:19","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3898,"src":"852:35:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3931,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"965:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3932,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"974:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:19","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3899,"src":"974:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"nodeType":"IfStatement","src":"961:114:19","trueBody":{"id":3939,"nodeType":"Block","src":"1006:69:19","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3935,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3938,"nodeType":"ExpressionStatement","src":"1020:44:19"}]}},"id":3941,"nodeType":"IfStatement","src":"839:236:19","trueBody":{"id":3930,"nodeType":"Block","src":"889:66:19","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3926,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3929,"nodeType":"ExpressionStatement","src":"903:41:19"}]}},"id":3942,"nodeType":"IfStatement","src":"730:345:19","trueBody":{"id":3921,"nodeType":"Block","src":"774:59:19","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3917,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3920,"nodeType":"ExpressionStatement","src":"788:34:19"}]}},"id":3943,"nodeType":"IfStatement","src":"634:441:19","trueBody":{"id":3912,"nodeType":"Block","src":"669:55:19","statements":[{"functionReturnParameters":3906,"id":3911,"nodeType":"Return","src":"683:7:19"}]}}]},"id":3945,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:19","nodeType":"FunctionDefinition","parameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"error","nameLocation":"604:5:19","nodeType":"VariableDeclaration","scope":3945,"src":"591:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3903,"nodeType":"UserDefinedTypeName","pathNode":{"id":3902,"name":"RecoverError","nameLocations":["591:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"591:12:19"},"referencedDeclaration":3901,"src":"591:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:19"},"returnParameters":{"id":3906,"nodeType":"ParameterList","parameters":[],"src":"624:0:19"},"scope":4257,"src":"570:511:19","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3990,"nodeType":"Block","src":"2249:626:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3958,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"2263:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:19","memberName":"length","nodeType":"MemberAccess","src":"2263:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:19","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3988,"nodeType":"Block","src":"2788:81:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3980,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:19","typeDescriptions":{}}},"id":3983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3984,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"2822:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:19","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3898,"src":"2822:35:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"id":3986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3957,"id":3987,"nodeType":"Return","src":"2802:56:19"}]},"id":3989,"nodeType":"IfStatement","src":"2259:610:19","trueBody":{"id":3979,"nodeType":"Block","src":"2287:495:19","statements":[{"assignments":[3963],"declarations":[{"constant":false,"id":3963,"mutability":"mutable","name":"r","nameLocation":"2309:1:19","nodeType":"VariableDeclaration","scope":3979,"src":"2301:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3962,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3964,"nodeType":"VariableDeclarationStatement","src":"2301:9:19"},{"assignments":[3966],"declarations":[{"constant":false,"id":3966,"mutability":"mutable","name":"s","nameLocation":"2332:1:19","nodeType":"VariableDeclaration","scope":3979,"src":"2324:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3967,"nodeType":"VariableDeclarationStatement","src":"2324:9:19"},{"assignments":[3969],"declarations":[{"constant":false,"id":3969,"mutability":"mutable","name":"v","nameLocation":"2353:1:19","nodeType":"VariableDeclaration","scope":3979,"src":"2347:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3968,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3970,"nodeType":"VariableDeclarationStatement","src":"2347:7:19"},{"AST":{"nodeType":"YulBlock","src":"2555:171:19","statements":[{"nodeType":"YulAssignment","src":"2573:32:19","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:19"},"nodeType":"YulFunctionCall","src":"2584:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:19"},"nodeType":"YulFunctionCall","src":"2578:27:19"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:19"}]},{"nodeType":"YulAssignment","src":"2622:32:19","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:19","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:19"},"nodeType":"YulFunctionCall","src":"2633:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:19"},"nodeType":"YulFunctionCall","src":"2627:27:19"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:19"}]},{"nodeType":"YulAssignment","src":"2671:41:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:19","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:19","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:19"},"nodeType":"YulFunctionCall","src":"2690:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:19"},"nodeType":"YulFunctionCall","src":"2684:27:19"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:19"},"nodeType":"YulFunctionCall","src":"2676:36:19"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3963,"isOffset":false,"isSlot":false,"src":"2573:1:19","valueSize":1},{"declaration":3966,"isOffset":false,"isSlot":false,"src":"2622:1:19","valueSize":1},{"declaration":3950,"isOffset":false,"isSlot":false,"src":"2588:9:19","valueSize":1},{"declaration":3950,"isOffset":false,"isSlot":false,"src":"2637:9:19","valueSize":1},{"declaration":3950,"isOffset":false,"isSlot":false,"src":"2694:9:19","valueSize":1},{"declaration":3969,"isOffset":false,"isSlot":false,"src":"2671:1:19","valueSize":1}],"id":3971,"nodeType":"InlineAssembly","src":"2546:180:19"},{"expression":{"arguments":[{"id":3973,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"2757:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3974,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"2763:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3975,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"2766:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3976,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"2769:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3972,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3991,4065,4159],"referencedDeclaration":4159,"src":"2746:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3957,"id":3978,"nodeType":"Return","src":"2739:32:19"}]}}]},"documentation":{"id":3946,"nodeType":"StructuredDocumentation","src":"1087:1053:19","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3991,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:19","nodeType":"FunctionDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"hash","nameLocation":"2173:4:19","nodeType":"VariableDeclaration","scope":3991,"src":"2165:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"signature","nameLocation":"2192:9:19","nodeType":"VariableDeclaration","scope":3991,"src":"2179:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3949,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:19"},"returnParameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3991,"src":"2226:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3952,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3991,"src":"2235:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3955,"nodeType":"UserDefinedTypeName","pathNode":{"id":3954,"name":"RecoverError","nameLocations":["2235:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"2235:12:19"},"referencedDeclaration":3901,"src":"2235:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:19"},"scope":4257,"src":"2145:730:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4017,"nodeType":"Block","src":"3748:140:19","statements":[{"assignments":[4002,4005],"declarations":[{"constant":false,"id":4002,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:19","nodeType":"VariableDeclaration","scope":4017,"src":"3759:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4001,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4005,"mutability":"mutable","name":"error","nameLocation":"3791:5:19","nodeType":"VariableDeclaration","scope":4017,"src":"3778:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4004,"nodeType":"UserDefinedTypeName","pathNode":{"id":4003,"name":"RecoverError","nameLocations":["3778:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"3778:12:19"},"referencedDeclaration":3901,"src":"3778:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":4010,"initialValue":{"arguments":[{"id":4007,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"3811:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4008,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"3817:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4006,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3991,4065,4159],"referencedDeclaration":3991,"src":"3800:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:19"},{"expression":{"arguments":[{"id":4012,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"3849:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}],"id":4011,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"3837:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3901_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4014,"nodeType":"ExpressionStatement","src":"3837:18:19"},{"expression":{"id":4015,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"3872:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4000,"id":4016,"nodeType":"Return","src":"3865:16:19"}]},"documentation":{"id":3992,"nodeType":"StructuredDocumentation","src":"2881:775:19","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":4018,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:19","nodeType":"FunctionDefinition","parameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3994,"mutability":"mutable","name":"hash","nameLocation":"3686:4:19","nodeType":"VariableDeclaration","scope":4018,"src":"3678:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3996,"mutability":"mutable","name":"signature","nameLocation":"3705:9:19","nodeType":"VariableDeclaration","scope":4018,"src":"3692:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3995,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:19"},"returnParameters":{"id":4000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4018,"src":"3739:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3998,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:19"},"scope":4257,"src":"3661:227:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4064,"nodeType":"Block","src":"4245:203:19","statements":[{"assignments":[4034],"declarations":[{"constant":false,"id":4034,"mutability":"mutable","name":"s","nameLocation":"4263:1:19","nodeType":"VariableDeclaration","scope":4064,"src":"4255:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4041,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4267:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":4038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:19","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":4037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:19","typeDescriptions":{}}},"id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:19"},{"assignments":[4043],"declarations":[{"constant":false,"id":4043,"mutability":"mutable","name":"v","nameLocation":"4363:1:19","nodeType":"VariableDeclaration","scope":4064,"src":"4357:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4042,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4056,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4048,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4382:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4046,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:19","typeDescriptions":{}}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":4053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:19","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4044,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:19","typeDescriptions":{}}},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:19"},{"expression":{"arguments":[{"id":4058,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"4427:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4059,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"4433:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4060,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4023,"src":"4436:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4061,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"4439:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4057,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3991,4065,4159],"referencedDeclaration":4159,"src":"4416:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":4032,"id":4063,"nodeType":"Return","src":"4409:32:19"}]},"documentation":{"id":4019,"nodeType":"StructuredDocumentation","src":"3894:243:19","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":4065,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:19","nodeType":"FunctionDefinition","parameters":{"id":4026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4021,"mutability":"mutable","name":"hash","nameLocation":"4170:4:19","nodeType":"VariableDeclaration","scope":4065,"src":"4162:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4023,"mutability":"mutable","name":"r","nameLocation":"4184:1:19","nodeType":"VariableDeclaration","scope":4065,"src":"4176:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4025,"mutability":"mutable","name":"vs","nameLocation":"4195:2:19","nodeType":"VariableDeclaration","scope":4065,"src":"4187:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:19"},"returnParameters":{"id":4032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4065,"src":"4222:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4027,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4065,"src":"4231:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4030,"nodeType":"UserDefinedTypeName","pathNode":{"id":4029,"name":"RecoverError","nameLocations":["4231:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"4231:12:19"},"referencedDeclaration":3901,"src":"4231:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:19"},"scope":4257,"src":"4142:306:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4094,"nodeType":"Block","src":"4699:136:19","statements":[{"assignments":[4078,4081],"declarations":[{"constant":false,"id":4078,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:19","nodeType":"VariableDeclaration","scope":4094,"src":"4710:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4077,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4081,"mutability":"mutable","name":"error","nameLocation":"4742:5:19","nodeType":"VariableDeclaration","scope":4094,"src":"4729:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4080,"nodeType":"UserDefinedTypeName","pathNode":{"id":4079,"name":"RecoverError","nameLocations":["4729:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"4729:12:19"},"referencedDeclaration":3901,"src":"4729:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":4087,"initialValue":{"arguments":[{"id":4083,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4068,"src":"4762:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4084,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"4768:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4085,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4072,"src":"4771:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4082,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3991,4065,4159],"referencedDeclaration":4065,"src":"4751:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:19"},{"expression":{"arguments":[{"id":4089,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"4796:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}],"id":4088,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"4784:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3901_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4091,"nodeType":"ExpressionStatement","src":"4784:18:19"},{"expression":{"id":4092,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"4819:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4076,"id":4093,"nodeType":"Return","src":"4812:16:19"}]},"documentation":{"id":4066,"nodeType":"StructuredDocumentation","src":"4454:154:19","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":4095,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:19","nodeType":"FunctionDefinition","parameters":{"id":4073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"hash","nameLocation":"4638:4:19","nodeType":"VariableDeclaration","scope":4095,"src":"4630:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4070,"mutability":"mutable","name":"r","nameLocation":"4652:1:19","nodeType":"VariableDeclaration","scope":4095,"src":"4644:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4069,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4072,"mutability":"mutable","name":"vs","nameLocation":"4663:2:19","nodeType":"VariableDeclaration","scope":4095,"src":"4655:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4071,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:19"},"returnParameters":{"id":4076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4095,"src":"4690:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4074,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:19"},"scope":4257,"src":"4613:222:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4158,"nodeType":"Block","src":"5120:1345:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4114,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"6016:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4112,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:19","typeDescriptions":{}}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:19","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4127,"nodeType":"IfStatement","src":"6004:161:19","trueBody":{"id":4126,"nodeType":"Block","src":"6089:76:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4118,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:19","typeDescriptions":{}}},"id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4122,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6123:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:19","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3899,"src":"6123:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"id":4124,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":4111,"id":4125,"nodeType":"Return","src":"6103:51:19"}]}},{"assignments":[4129],"declarations":[{"constant":false,"id":4129,"mutability":"mutable","name":"signer","nameLocation":"6267:6:19","nodeType":"VariableDeclaration","scope":4158,"src":"6259:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4128,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4136,"initialValue":{"arguments":[{"id":4131,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"6286:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4132,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"6292:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4133,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"6295:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4134,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"6298:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4130,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:19","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4137,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"6314:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4138,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:19","typeDescriptions":{}}},"id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4152,"nodeType":"IfStatement","src":"6310:101:19","trueBody":{"id":4151,"nodeType":"Block","src":"6336:75:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4143,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:19","typeDescriptions":{}}},"id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4147,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6370:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:19","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3897,"src":"6370:29:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"id":4149,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":4111,"id":4150,"nodeType":"Return","src":"6350:50:19"}]}},{"expression":{"components":[{"id":4153,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"6429:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4154,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6437:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3901_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":4155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:19","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3896,"src":"6437:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"id":4156,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":4111,"id":4157,"nodeType":"Return","src":"6421:37:19"}]},"documentation":{"id":4096,"nodeType":"StructuredDocumentation","src":"4841:163:19","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":4159,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:19","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4098,"mutability":"mutable","name":"hash","nameLocation":"5037:4:19","nodeType":"VariableDeclaration","scope":4159,"src":"5029:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4100,"mutability":"mutable","name":"v","nameLocation":"5049:1:19","nodeType":"VariableDeclaration","scope":4159,"src":"5043:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4099,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4102,"mutability":"mutable","name":"r","nameLocation":"5060:1:19","nodeType":"VariableDeclaration","scope":4159,"src":"5052:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"s","nameLocation":"5071:1:19","nodeType":"VariableDeclaration","scope":4159,"src":"5063:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:19"},"returnParameters":{"id":4111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4159,"src":"5097:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4106,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4159,"src":"5106:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4109,"nodeType":"UserDefinedTypeName","pathNode":{"id":4108,"name":"RecoverError","nameLocations":["5106:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"5106:12:19"},"referencedDeclaration":3901,"src":"5106:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:19"},"scope":4257,"src":"5009:1456:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4191,"nodeType":"Block","src":"6692:138:19","statements":[{"assignments":[4174,4177],"declarations":[{"constant":false,"id":4174,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:19","nodeType":"VariableDeclaration","scope":4191,"src":"6703:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4173,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4177,"mutability":"mutable","name":"error","nameLocation":"6735:5:19","nodeType":"VariableDeclaration","scope":4191,"src":"6722:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4176,"nodeType":"UserDefinedTypeName","pathNode":{"id":4175,"name":"RecoverError","nameLocations":["6722:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"6722:12:19"},"referencedDeclaration":3901,"src":"6722:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":4184,"initialValue":{"arguments":[{"id":4179,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"6755:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4180,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"6761:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4181,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"6764:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4182,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"6767:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4178,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3991,4065,4159],"referencedDeclaration":4159,"src":"6744:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3901_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:19"},{"expression":{"arguments":[{"id":4186,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"6791:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3901","typeString":"enum ECDSA.RecoverError"}],"id":4185,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"6779:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3901_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4188,"nodeType":"ExpressionStatement","src":"6779:18:19"},{"expression":{"id":4189,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"6814:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4172,"id":4190,"nodeType":"Return","src":"6807:16:19"}]},"documentation":{"id":4160,"nodeType":"StructuredDocumentation","src":"6471:122:19","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":4192,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:19","nodeType":"FunctionDefinition","parameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4162,"mutability":"mutable","name":"hash","nameLocation":"6623:4:19","nodeType":"VariableDeclaration","scope":4192,"src":"6615:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4164,"mutability":"mutable","name":"v","nameLocation":"6635:1:19","nodeType":"VariableDeclaration","scope":4192,"src":"6629:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4163,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4166,"mutability":"mutable","name":"r","nameLocation":"6646:1:19","nodeType":"VariableDeclaration","scope":4192,"src":"6638:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4168,"mutability":"mutable","name":"s","nameLocation":"6657:1:19","nodeType":"VariableDeclaration","scope":4192,"src":"6649:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:19"},"returnParameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4192,"src":"6683:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4170,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:19"},"scope":4257,"src":"6598:232:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4201,"nodeType":"Block","src":"7206:310:19","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:19","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:19","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:19"},"nodeType":"YulFunctionCall","src":"7376:48:19"},"nodeType":"YulExpressionStatement","src":"7376:48:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:19","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:19"},"nodeType":"YulFunctionCall","src":"7437:18:19"},"nodeType":"YulExpressionStatement","src":"7437:18:19"},{"nodeType":"YulAssignment","src":"7468:32:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:19","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:19","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:19"},"nodeType":"YulFunctionCall","src":"7479:21:19"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4195,"isOffset":false,"isSlot":false,"src":"7450:4:19","valueSize":1},{"declaration":4198,"isOffset":false,"isSlot":false,"src":"7468:7:19","valueSize":1}],"id":4200,"nodeType":"InlineAssembly","src":"7353:157:19"}]},"documentation":{"id":4193,"nodeType":"StructuredDocumentation","src":"6836:279:19","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":4202,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:19","nodeType":"FunctionDefinition","parameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"hash","nameLocation":"7160:4:19","nodeType":"VariableDeclaration","scope":4202,"src":"7152:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:19"},"returnParameters":{"id":4199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4198,"mutability":"mutable","name":"message","nameLocation":"7197:7:19","nodeType":"VariableDeclaration","scope":4202,"src":"7189:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:19"},"scope":4257,"src":"7120:396:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4223,"nodeType":"Block","src":"7881:116:19","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":4213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":4216,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4205,"src":"7976:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:19","memberName":"length","nodeType":"MemberAccess","src":"7976:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4214,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"7959:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3891_$","typeString":"type(library Strings)"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:19","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3721,"src":"7959:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4219,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4205,"src":"7987:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4211,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4210,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4209,"id":4222,"nodeType":"Return","src":"7891:99:19"}]},"documentation":{"id":4203,"nodeType":"StructuredDocumentation","src":"7522:274:19","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":4224,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:19","nodeType":"FunctionDefinition","parameters":{"id":4206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"mutability":"mutable","name":"s","nameLocation":"7846:1:19","nodeType":"VariableDeclaration","scope":4224,"src":"7833:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4204,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:19"},"returnParameters":{"id":4209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4224,"src":"7872:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:19"},"scope":4257,"src":"7801:196:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4235,"nodeType":"Block","src":"8443:290:19","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:19","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:19"},"nodeType":"YulFunctionCall","src":"8530:11:19"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:19","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:19"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:19","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:19"},"nodeType":"YulFunctionCall","src":"8554:23:19"},"nodeType":"YulExpressionStatement","src":"8554:23:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:19","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:19"},"nodeType":"YulFunctionCall","src":"8597:14:19"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:19"},"nodeType":"YulFunctionCall","src":"8590:39:19"},"nodeType":"YulExpressionStatement","src":"8590:39:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:19","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:19"},"nodeType":"YulFunctionCall","src":"8649:14:19"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:19"},"nodeType":"YulFunctionCall","src":"8642:34:19"},"nodeType":"YulExpressionStatement","src":"8642:34:19"},{"nodeType":"YulAssignment","src":"8689:28:19","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:19","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:19"},"nodeType":"YulFunctionCall","src":"8697:20:19"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4232,"isOffset":false,"isSlot":false,"src":"8689:4:19","valueSize":1},{"declaration":4227,"isOffset":false,"isSlot":false,"src":"8613:15:19","valueSize":1},{"declaration":4229,"isOffset":false,"isSlot":false,"src":"8665:10:19","valueSize":1}],"id":4234,"nodeType":"InlineAssembly","src":"8496:231:19"}]},"documentation":{"id":4225,"nodeType":"StructuredDocumentation","src":"8003:328:19","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":4236,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:19","nodeType":"FunctionDefinition","parameters":{"id":4230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4227,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:19","nodeType":"VariableDeclaration","scope":4236,"src":"8361:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4229,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:19","nodeType":"VariableDeclaration","scope":4236,"src":"8386:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:19"},"returnParameters":{"id":4233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4232,"mutability":"mutable","name":"data","nameLocation":"8437:4:19","nodeType":"VariableDeclaration","scope":4236,"src":"8429:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:19"},"scope":4257,"src":"8336:397:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4255,"nodeType":"Block","src":"9048:80:19","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":4249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":4250,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"9104:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4251,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"9115:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4247,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4246,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4245,"id":4254,"nodeType":"Return","src":"9058:63:19"}]},"documentation":{"id":4237,"nodeType":"StructuredDocumentation","src":"8739:193:19","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":4256,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:19","nodeType":"FunctionDefinition","parameters":{"id":4242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4239,"mutability":"mutable","name":"validator","nameLocation":"8986:9:19","nodeType":"VariableDeclaration","scope":4256,"src":"8978:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4238,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4241,"mutability":"mutable","name":"data","nameLocation":"9010:4:19","nodeType":"VariableDeclaration","scope":4256,"src":"8997:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4240,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:19"},"returnParameters":{"id":4245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4256,"src":"9039:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:19"},"scope":4257,"src":"8937:191:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4258,"src":"369:8761:19","usedErrors":[]}],"src":"112:9019:19"},"id":19},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[5123]},"id":5124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4259,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4260,"nodeType":"StructuredDocumentation","src":"128:73:20","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5123,"linearizedBaseContracts":[5123],"name":"Math","nameLocation":"210:4:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":4264,"members":[{"id":4261,"name":"Down","nameLocation":"245:4:20","nodeType":"EnumValue","src":"245:4:20"},{"id":4262,"name":"Up","nameLocation":"287:2:20","nodeType":"EnumValue","src":"287:2:20"},{"id":4263,"name":"Zero","nameLocation":"318:4:20","nodeType":"EnumValue","src":"318:4:20"}],"name":"Rounding","nameLocation":"226:8:20","nodeType":"EnumDefinition","src":"221:122:20"},{"body":{"id":4281,"nodeType":"Block","src":"480:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4274,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"497:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4275,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"501:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4278,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"509:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:20","trueExpression":{"id":4277,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"505:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4273,"id":4280,"nodeType":"Return","src":"490:20:20"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"349:59:20","text":" @dev Returns the largest of two numbers."},"id":4282,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:20","nodeType":"FunctionDefinition","parameters":{"id":4270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"a","nameLocation":"434:1:20","nodeType":"VariableDeclaration","scope":4282,"src":"426:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4266,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4269,"mutability":"mutable","name":"b","nameLocation":"445:1:20","nodeType":"VariableDeclaration","scope":4282,"src":"437:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:20"},"returnParameters":{"id":4273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4282,"src":"471:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4271,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:20"},"scope":5123,"src":"413:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4299,"nodeType":"Block","src":"655:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4292,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"672:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4293,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"676:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4296,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"684:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:20","trueExpression":{"id":4295,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"680:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4291,"id":4298,"nodeType":"Return","src":"665:20:20"}]},"documentation":{"id":4283,"nodeType":"StructuredDocumentation","src":"523:60:20","text":" @dev Returns the smallest of two numbers."},"id":4300,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:20","nodeType":"FunctionDefinition","parameters":{"id":4288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4285,"mutability":"mutable","name":"a","nameLocation":"609:1:20","nodeType":"VariableDeclaration","scope":4300,"src":"601:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4284,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4287,"mutability":"mutable","name":"b","nameLocation":"620:1:20","nodeType":"VariableDeclaration","scope":4300,"src":"612:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4286,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:20"},"returnParameters":{"id":4291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4300,"src":"646:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4289,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:20"},"scope":5123,"src":"588:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4322,"nodeType":"Block","src":"876:82:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"931:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4311,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4305,"src":"935:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4314,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"941:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4315,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4305,"src":"945:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4309,"id":4321,"nodeType":"Return","src":"923:28:20"}]},"documentation":{"id":4301,"nodeType":"StructuredDocumentation","src":"698:102:20","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4323,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:20","nodeType":"FunctionDefinition","parameters":{"id":4306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4303,"mutability":"mutable","name":"a","nameLocation":"830:1:20","nodeType":"VariableDeclaration","scope":4323,"src":"822:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4302,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4305,"mutability":"mutable","name":"b","nameLocation":"841:1:20","nodeType":"VariableDeclaration","scope":4323,"src":"833:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4304,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:20"},"returnParameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4323,"src":"867:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4307,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:20"},"scope":5123,"src":"805:153:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4347,"nodeType":"Block","src":"1228:123:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4333,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"1316:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"1330:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4341,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"1339:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:20","trueExpression":{"hexValue":"30","id":4336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4332,"id":4346,"nodeType":"Return","src":"1309:35:20"}]},"documentation":{"id":4324,"nodeType":"StructuredDocumentation","src":"964:188:20","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":4348,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:20","nodeType":"FunctionDefinition","parameters":{"id":4329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4326,"mutability":"mutable","name":"a","nameLocation":"1182:1:20","nodeType":"VariableDeclaration","scope":4348,"src":"1174:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4325,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4328,"mutability":"mutable","name":"b","nameLocation":"1193:1:20","nodeType":"VariableDeclaration","scope":4348,"src":"1185:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4327,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:20"},"returnParameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4348,"src":"1219:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:20"},"scope":5123,"src":"1157:194:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4470,"nodeType":"Block","src":"1765:4115:20","statements":[{"id":4469,"nodeType":"UncheckedBlock","src":"1775:4099:20","statements":[{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:20","nodeType":"VariableDeclaration","scope":4469,"src":"2096:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4360,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4362,"nodeType":"VariableDeclarationStatement","src":"2096:13:20"},{"assignments":[4364],"declarations":[{"constant":false,"id":4364,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:20","nodeType":"VariableDeclaration","scope":4469,"src":"2168:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4365,"nodeType":"VariableDeclarationStatement","src":"2168:13:20"},{"AST":{"nodeType":"YulBlock","src":"2248:157:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:20"},"nodeType":"YulFunctionCall","src":"2289:6:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:20"},"nodeType":"YulFunctionCall","src":"2276:20:20"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:20","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:20"},"nodeType":"YulFunctionCall","src":"2322:9:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:20"}]},{"nodeType":"YulAssignment","src":"2348:43:20","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:20"},"nodeType":"YulFunctionCall","src":"2361:14:20"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:20"},"nodeType":"YulFunctionCall","src":"2377:13:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:20"},"nodeType":"YulFunctionCall","src":"2357:34:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4361,"isOffset":false,"isSlot":false,"src":"2313:5:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"2369:5:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"2384:5:20","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"2348:5:20","valueSize":1},{"declaration":4351,"isOffset":false,"isSlot":false,"src":"2283:1:20","valueSize":1},{"declaration":4351,"isOffset":false,"isSlot":false,"src":"2326:1:20","valueSize":1},{"declaration":4353,"isOffset":false,"isSlot":false,"src":"2286:1:20","valueSize":1},{"declaration":4353,"isOffset":false,"isSlot":false,"src":"2329:1:20","valueSize":1}],"id":4366,"nodeType":"InlineAssembly","src":"2239:166:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4367,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"2486:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4375,"nodeType":"IfStatement","src":"2482:368:20","trueBody":{"id":4374,"nodeType":"Block","src":"2498:352:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4370,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2816:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4371,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2824:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4359,"id":4373,"nodeType":"Return","src":"2809:26:20"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4377,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2960:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4378,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"2974:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":4380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":4376,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4382,"nodeType":"ExpressionStatement","src":"2952:53:20"},{"assignments":[4384],"declarations":[{"constant":false,"id":4384,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:20","nodeType":"VariableDeclaration","scope":4469,"src":"3261:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4383,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4385,"nodeType":"VariableDeclarationStatement","src":"3261:17:20"},{"AST":{"nodeType":"YulBlock","src":"3301:291:20","statements":[{"nodeType":"YulAssignment","src":"3370:38:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:20"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:20"},"nodeType":"YulFunctionCall","src":"3383:25:20"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:20"}]},{"nodeType":"YulAssignment","src":"3490:41:20","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:20"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:20"},"nodeType":"YulFunctionCall","src":"3510:20:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:20"},"nodeType":"YulFunctionCall","src":"3499:32:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:20"}]},{"nodeType":"YulAssignment","src":"3548:30:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:20"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:20"},"nodeType":"YulFunctionCall","src":"3557:21:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4355,"isOffset":false,"isSlot":false,"src":"3396:11:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"3524:5:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"3548:5:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"3561:5:20","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"3490:5:20","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"3503:5:20","valueSize":1},{"declaration":4384,"isOffset":false,"isSlot":false,"src":"3370:9:20","valueSize":1},{"declaration":4384,"isOffset":false,"isSlot":false,"src":"3513:9:20","valueSize":1},{"declaration":4384,"isOffset":false,"isSlot":false,"src":"3568:9:20","valueSize":1},{"declaration":4351,"isOffset":false,"isSlot":false,"src":"3390:1:20","valueSize":1},{"declaration":4353,"isOffset":false,"isSlot":false,"src":"3393:1:20","valueSize":1}],"id":4386,"nodeType":"InlineAssembly","src":"3292:300:20"},{"assignments":[4388],"declarations":[{"constant":false,"id":4388,"mutability":"mutable","name":"twos","nameLocation":"3907:4:20","nodeType":"VariableDeclaration","scope":4469,"src":"3899:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4387,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4396,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4389,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"3914:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:20","subExpression":{"id":4390,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"3930:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4394,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:20"},{"AST":{"nodeType":"YulBlock","src":"3969:362:20","statements":[{"nodeType":"YulAssignment","src":"4034:37:20","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:20"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:20"},"nodeType":"YulFunctionCall","src":"4049:22:20"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:20"}]},{"nodeType":"YulAssignment","src":"4138:25:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:20"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:20"},"nodeType":"YulFunctionCall","src":"4147:16:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:20"}]},{"nodeType":"YulAssignment","src":"4278:39:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:20","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:20"},"nodeType":"YulFunctionCall","src":"4294:12:20"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:20"},"nodeType":"YulFunctionCall","src":"4290:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:20"},"nodeType":"YulFunctionCall","src":"4286:31:20"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4355,"isOffset":false,"isSlot":false,"src":"4034:11:20","valueSize":1},{"declaration":4355,"isOffset":false,"isSlot":false,"src":"4053:11:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"4138:5:20","valueSize":1},{"declaration":4361,"isOffset":false,"isSlot":false,"src":"4151:5:20","valueSize":1},{"declaration":4388,"isOffset":false,"isSlot":false,"src":"4066:4:20","valueSize":1},{"declaration":4388,"isOffset":false,"isSlot":false,"src":"4158:4:20","valueSize":1},{"declaration":4388,"isOffset":false,"isSlot":false,"src":"4278:4:20","valueSize":1},{"declaration":4388,"isOffset":false,"isSlot":false,"src":"4301:4:20","valueSize":1},{"declaration":4388,"isOffset":false,"isSlot":false,"src":"4308:4:20","valueSize":1}],"id":4397,"nodeType":"InlineAssembly","src":"3960:371:20"},{"expression":{"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4398,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"4397:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4399,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"4406:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4400,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"4414:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4403,"nodeType":"ExpressionStatement","src":"4397:21:20"},{"assignments":[4405],"declarations":[{"constant":false,"id":4405,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:20","nodeType":"VariableDeclaration","scope":4469,"src":"4736:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4404,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4412,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4407,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"4759:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4409,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:20"},{"expression":{"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4413,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"4992:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4415,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5007:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4416,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5021:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4420,"nodeType":"ExpressionStatement","src":"4992:36:20"},{"expression":{"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4421,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5061:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4423,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5076:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4424,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5090:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4428,"nodeType":"ExpressionStatement","src":"5061:36:20"},{"expression":{"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5131:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4431,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5146:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4432,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5160:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4436,"nodeType":"ExpressionStatement","src":"5131:36:20"},{"expression":{"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4437,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5201:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4439,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5216:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4440,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5230:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4444,"nodeType":"ExpressionStatement","src":"5201:36:20"},{"expression":{"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4445,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5271:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4447,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5286:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4448,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5300:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4452,"nodeType":"ExpressionStatement","src":"5271:36:20"},{"expression":{"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4453,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5342:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4455,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"5357:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4456,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5371:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4460,"nodeType":"ExpressionStatement","src":"5342:36:20"},{"expression":{"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5812:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4462,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5821:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4463,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"5829:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4466,"nodeType":"ExpressionStatement","src":"5812:24:20"},{"expression":{"id":4467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5857:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4359,"id":4468,"nodeType":"Return","src":"5850:13:20"}]}]},"documentation":{"id":4349,"nodeType":"StructuredDocumentation","src":"1357:305:20","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4471,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:20","nodeType":"FunctionDefinition","parameters":{"id":4356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4351,"mutability":"mutable","name":"x","nameLocation":"1691:1:20","nodeType":"VariableDeclaration","scope":4471,"src":"1683:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4353,"mutability":"mutable","name":"y","nameLocation":"1702:1:20","nodeType":"VariableDeclaration","scope":4471,"src":"1694:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4352,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4355,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:20","nodeType":"VariableDeclaration","scope":4471,"src":"1705:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:20"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4358,"mutability":"mutable","name":"result","nameLocation":"1757:6:20","nodeType":"VariableDeclaration","scope":4471,"src":"1749:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:20"},"scope":5123,"src":"1667:4213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4514,"nodeType":"Block","src":"6122:189:20","statements":[{"assignments":[4487],"declarations":[{"constant":false,"id":4487,"mutability":"mutable","name":"result","nameLocation":"6140:6:20","nodeType":"VariableDeclaration","scope":4514,"src":"6132:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4493,"initialValue":{"arguments":[{"id":4489,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4474,"src":"6156:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4490,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"6159:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4491,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"6162:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4488,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4471,4515],"referencedDeclaration":4471,"src":"6149:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:20"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4494,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"6188:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4495,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"6200:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4264_$","typeString":"type(enum Math.Rounding)"}},"id":4496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4262,"src":"6200:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"src":"6188:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4499,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4474,"src":"6222:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4500,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"6225:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4501,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"6228:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4498,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:20","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4511,"nodeType":"IfStatement","src":"6184:98:20","trueBody":{"id":4510,"nodeType":"Block","src":"6246:36:20","statements":[{"expression":{"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"6260:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4509,"nodeType":"ExpressionStatement","src":"6260:11:20"}]}},{"expression":{"id":4512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"6298:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4485,"id":4513,"nodeType":"Return","src":"6291:13:20"}]},"documentation":{"id":4472,"nodeType":"StructuredDocumentation","src":"5886:121:20","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4515,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:20","nodeType":"FunctionDefinition","parameters":{"id":4482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4474,"mutability":"mutable","name":"x","nameLocation":"6036:1:20","nodeType":"VariableDeclaration","scope":4515,"src":"6028:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4473,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4476,"mutability":"mutable","name":"y","nameLocation":"6047:1:20","nodeType":"VariableDeclaration","scope":4515,"src":"6039:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4475,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4478,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:20","nodeType":"VariableDeclaration","scope":4515,"src":"6050:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4477,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4481,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:20","nodeType":"VariableDeclaration","scope":4515,"src":"6071:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"typeName":{"id":4480,"nodeType":"UserDefinedTypeName","pathNode":{"id":4479,"name":"Rounding","nameLocations":["6071:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"6071:8:20"},"referencedDeclaration":4264,"src":"6071:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:20"},"returnParameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4515,"src":"6113:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4483,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:20"},"scope":5123,"src":"6012:299:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4626,"nodeType":"Block","src":"6587:1585:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4523,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"6601:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4529,"nodeType":"IfStatement","src":"6597:45:20","trueBody":{"id":4528,"nodeType":"Block","src":"6609:33:20","statements":[{"expression":{"hexValue":"30","id":4526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4522,"id":4527,"nodeType":"Return","src":"6623:8:20"}]}},{"assignments":[4531],"declarations":[{"constant":false,"id":4531,"mutability":"mutable","name":"result","nameLocation":"7329:6:20","nodeType":"VariableDeclaration","scope":4626,"src":"7321:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4530,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4540,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7349:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4533,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4795,4831],"referencedDeclaration":4795,"src":"7344:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4538,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:20"},{"id":4625,"nodeType":"UncheckedBlock","src":"7758:408:20","statements":[{"expression":{"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7782:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7792:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4543,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7801:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7805:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4547,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4551,"nodeType":"ExpressionStatement","src":"7782:35:20"},{"expression":{"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7831:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4553,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7841:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4554,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7850:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7854:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4558,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4562,"nodeType":"ExpressionStatement","src":"7831:35:20"},{"expression":{"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7880:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4564,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7890:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4565,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7899:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4566,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7903:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4569,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4573,"nodeType":"ExpressionStatement","src":"7880:35:20"},{"expression":{"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4574,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7929:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4575,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7939:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4576,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7948:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7952:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4580,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4584,"nodeType":"ExpressionStatement","src":"7929:35:20"},{"expression":{"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7978:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4586,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"7988:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4587,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"7997:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8001:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4595,"nodeType":"ExpressionStatement","src":"7978:35:20"},{"expression":{"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8027:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4597,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8037:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4598,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"8046:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4599,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8050:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4602,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4606,"nodeType":"ExpressionStatement","src":"8027:35:20"},{"expression":{"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4607,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8076:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4608,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8086:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4609,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"8095:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8099:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4613,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4617,"nodeType":"ExpressionStatement","src":"8076:35:20"},{"expression":{"arguments":[{"id":4619,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8136:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4620,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"8144:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4621,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8148:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4618,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4300,"src":"8132:3:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4522,"id":4624,"nodeType":"Return","src":"8125:30:20"}]}]},"documentation":{"id":4516,"nodeType":"StructuredDocumentation","src":"6317:208:20","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4627,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:20","nodeType":"FunctionDefinition","parameters":{"id":4519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4518,"mutability":"mutable","name":"a","nameLocation":"6552:1:20","nodeType":"VariableDeclaration","scope":4627,"src":"6544:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4517,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:20"},"returnParameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4627,"src":"6578:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4520,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:20"},"scope":5123,"src":"6530:1642:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4662,"nodeType":"Block","src":"8348:161:20","statements":[{"id":4661,"nodeType":"UncheckedBlock","src":"8358:145:20","statements":[{"assignments":[4639],"declarations":[{"constant":false,"id":4639,"mutability":"mutable","name":"result","nameLocation":"8390:6:20","nodeType":"VariableDeclaration","scope":4661,"src":"8382:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4638,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4643,"initialValue":{"arguments":[{"id":4641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"8404:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4640,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4627,4663],"referencedDeclaration":4627,"src":"8399:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"8427:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"id":4648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4645,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"8437:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4646,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"8449:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4264_$","typeString":"type(enum Math.Rounding)"}},"id":4647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4262,"src":"8449:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"src":"8437:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4649,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"8464:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4650,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"8473:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4652,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"8482:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:20","trueExpression":{"hexValue":"31","id":4655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4658,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4637,"id":4660,"nodeType":"Return","src":"8420:72:20"}]}]},"documentation":{"id":4628,"nodeType":"StructuredDocumentation","src":"8178:89:20","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4663,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:20","nodeType":"FunctionDefinition","parameters":{"id":4634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4630,"mutability":"mutable","name":"a","nameLocation":"8294:1:20","nodeType":"VariableDeclaration","scope":4663,"src":"8286:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4629,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4633,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:20","nodeType":"VariableDeclaration","scope":4663,"src":"8297:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"typeName":{"id":4632,"nodeType":"UserDefinedTypeName","pathNode":{"id":4631,"name":"Rounding","nameLocations":["8297:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"8297:8:20"},"referencedDeclaration":4264,"src":"8297:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:20"},"returnParameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4663,"src":"8339:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4635,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:20"},"scope":5123,"src":"8272:237:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4794,"nodeType":"Block","src":"8694:922:20","statements":[{"assignments":[4672],"declarations":[{"constant":false,"id":4672,"mutability":"mutable","name":"result","nameLocation":"8712:6:20","nodeType":"VariableDeclaration","scope":4794,"src":"8704:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4671,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4674,"initialValue":{"hexValue":"30","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:20"},{"id":4791,"nodeType":"UncheckedBlock","src":"8732:855:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8760:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4689,"nodeType":"IfStatement","src":"8756:99:20","trueBody":{"id":4688,"nodeType":"Block","src":"8778:77:20","statements":[{"expression":{"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8796:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4683,"nodeType":"ExpressionStatement","src":"8796:13:20"},{"expression":{"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4684,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"8827:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4687,"nodeType":"ExpressionStatement","src":"8827:13:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8872:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4704,"nodeType":"IfStatement","src":"8868:96:20","trueBody":{"id":4703,"nodeType":"Block","src":"8889:75:20","statements":[{"expression":{"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8907:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4698,"nodeType":"ExpressionStatement","src":"8907:12:20"},{"expression":{"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"8937:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4702,"nodeType":"ExpressionStatement","src":"8937:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"8981:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4719,"nodeType":"IfStatement","src":"8977:96:20","trueBody":{"id":4718,"nodeType":"Block","src":"8998:75:20","statements":[{"expression":{"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4710,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9016:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4713,"nodeType":"ExpressionStatement","src":"9016:12:20"},{"expression":{"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9046:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4717,"nodeType":"ExpressionStatement","src":"9046:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4720,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9090:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4734,"nodeType":"IfStatement","src":"9086:96:20","trueBody":{"id":4733,"nodeType":"Block","src":"9107:75:20","statements":[{"expression":{"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9125:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4728,"nodeType":"ExpressionStatement","src":"9125:12:20"},{"expression":{"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4729,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9155:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4732,"nodeType":"ExpressionStatement","src":"9155:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9199:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4749,"nodeType":"IfStatement","src":"9195:93:20","trueBody":{"id":4748,"nodeType":"Block","src":"9215:73:20","statements":[{"expression":{"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9233:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4743,"nodeType":"ExpressionStatement","src":"9233:11:20"},{"expression":{"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4744,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9262:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4747,"nodeType":"ExpressionStatement","src":"9262:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9305:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4764,"nodeType":"IfStatement","src":"9301:93:20","trueBody":{"id":4763,"nodeType":"Block","src":"9321:73:20","statements":[{"expression":{"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9339:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4758,"nodeType":"ExpressionStatement","src":"9339:11:20"},{"expression":{"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9368:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4762,"nodeType":"ExpressionStatement","src":"9368:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9411:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4779,"nodeType":"IfStatement","src":"9407:93:20","trueBody":{"id":4778,"nodeType":"Block","src":"9427:73:20","statements":[{"expression":{"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9445:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4773,"nodeType":"ExpressionStatement","src":"9445:11:20"},{"expression":{"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4774,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9474:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4777,"nodeType":"ExpressionStatement","src":"9474:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9517:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4790,"nodeType":"IfStatement","src":"9513:64:20","trueBody":{"id":4789,"nodeType":"Block","src":"9533:44:20","statements":[{"expression":{"id":4787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4785,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9551:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4788,"nodeType":"ExpressionStatement","src":"9551:11:20"}]}}]},{"expression":{"id":4792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9603:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4670,"id":4793,"nodeType":"Return","src":"9596:13:20"}]},"documentation":{"id":4664,"nodeType":"StructuredDocumentation","src":"8515:113:20","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4795,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:20","nodeType":"FunctionDefinition","parameters":{"id":4667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4666,"mutability":"mutable","name":"value","nameLocation":"8655:5:20","nodeType":"VariableDeclaration","scope":4795,"src":"8647:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4665,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:20"},"returnParameters":{"id":4670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4795,"src":"8685:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4668,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:20"},"scope":5123,"src":"8633:983:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4830,"nodeType":"Block","src":"9849:165:20","statements":[{"id":4829,"nodeType":"UncheckedBlock","src":"9859:149:20","statements":[{"assignments":[4807],"declarations":[{"constant":false,"id":4807,"mutability":"mutable","name":"result","nameLocation":"9891:6:20","nodeType":"VariableDeclaration","scope":4829,"src":"9883:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4806,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4811,"initialValue":{"arguments":[{"id":4809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"9905:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4808,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4795,4831],"referencedDeclaration":4795,"src":"9900:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4812,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"9932:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4813,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4801,"src":"9942:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4814,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"9954:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4264_$","typeString":"type(enum Math.Rounding)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4262,"src":"9954:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"src":"9942:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4818,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"9974:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"9983:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:20","trueExpression":{"hexValue":"31","id":4823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4826,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4805,"id":4828,"nodeType":"Return","src":"9925:72:20"}]}]},"documentation":{"id":4796,"nodeType":"StructuredDocumentation","src":"9622:142:20","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4831,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:20","nodeType":"FunctionDefinition","parameters":{"id":4802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4798,"mutability":"mutable","name":"value","nameLocation":"9791:5:20","nodeType":"VariableDeclaration","scope":4831,"src":"9783:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4801,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:20","nodeType":"VariableDeclaration","scope":4831,"src":"9798:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"typeName":{"id":4800,"nodeType":"UserDefinedTypeName","pathNode":{"id":4799,"name":"Rounding","nameLocations":["9798:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"9798:8:20"},"referencedDeclaration":4264,"src":"9798:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:20"},"returnParameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4831,"src":"9840:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4803,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:20"},"scope":5123,"src":"9769:245:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4959,"nodeType":"Block","src":"10201:854:20","statements":[{"assignments":[4840],"declarations":[{"constant":false,"id":4840,"mutability":"mutable","name":"result","nameLocation":"10219:6:20","nodeType":"VariableDeclaration","scope":4959,"src":"10211:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4839,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4842,"initialValue":{"hexValue":"30","id":4841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:20"},{"id":4956,"nodeType":"UncheckedBlock","src":"10239:787:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10267:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4859,"nodeType":"IfStatement","src":"10263:103:20","trueBody":{"id":4858,"nodeType":"Block","src":"10286:80:20","statements":[{"expression":{"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10304:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4853,"nodeType":"ExpressionStatement","src":"10304:17:20"},{"expression":{"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4854,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10339:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4857,"nodeType":"ExpressionStatement","src":"10339:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10383:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4876,"nodeType":"IfStatement","src":"10379:103:20","trueBody":{"id":4875,"nodeType":"Block","src":"10402:80:20","statements":[{"expression":{"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10420:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4870,"nodeType":"ExpressionStatement","src":"10420:17:20"},{"expression":{"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4871,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10455:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4874,"nodeType":"ExpressionStatement","src":"10455:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10499:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4893,"nodeType":"IfStatement","src":"10495:103:20","trueBody":{"id":4892,"nodeType":"Block","src":"10518:80:20","statements":[{"expression":{"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10536:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4887,"nodeType":"ExpressionStatement","src":"10536:17:20"},{"expression":{"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10571:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4891,"nodeType":"ExpressionStatement","src":"10571:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10615:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4910,"nodeType":"IfStatement","src":"10611:100:20","trueBody":{"id":4909,"nodeType":"Block","src":"10633:78:20","statements":[{"expression":{"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10651:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4904,"nodeType":"ExpressionStatement","src":"10651:16:20"},{"expression":{"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10685:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4908,"nodeType":"ExpressionStatement","src":"10685:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10728:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4927,"nodeType":"IfStatement","src":"10724:100:20","trueBody":{"id":4926,"nodeType":"Block","src":"10746:78:20","statements":[{"expression":{"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10764:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4921,"nodeType":"ExpressionStatement","src":"10764:16:20"},{"expression":{"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10798:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4925,"nodeType":"ExpressionStatement","src":"10798:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10841:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4944,"nodeType":"IfStatement","src":"10837:100:20","trueBody":{"id":4943,"nodeType":"Block","src":"10859:78:20","statements":[{"expression":{"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10877:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4938,"nodeType":"ExpressionStatement","src":"10877:16:20"},{"expression":{"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4939,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10911:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4942,"nodeType":"ExpressionStatement","src":"10911:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"10954:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4955,"nodeType":"IfStatement","src":"10950:66:20","trueBody":{"id":4954,"nodeType":"Block","src":"10972:44:20","statements":[{"expression":{"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"10990:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4953,"nodeType":"ExpressionStatement","src":"10990:11:20"}]}}]},{"expression":{"id":4957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"11042:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4838,"id":4958,"nodeType":"Return","src":"11035:13:20"}]},"documentation":{"id":4832,"nodeType":"StructuredDocumentation","src":"10020:114:20","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4960,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:20","nodeType":"FunctionDefinition","parameters":{"id":4835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4834,"mutability":"mutable","name":"value","nameLocation":"10162:5:20","nodeType":"VariableDeclaration","scope":4960,"src":"10154:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4833,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:20"},"returnParameters":{"id":4838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4960,"src":"10192:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4836,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:20"},"scope":5123,"src":"10139:916:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4995,"nodeType":"Block","src":"11290:167:20","statements":[{"id":4994,"nodeType":"UncheckedBlock","src":"11300:151:20","statements":[{"assignments":[4972],"declarations":[{"constant":false,"id":4972,"mutability":"mutable","name":"result","nameLocation":"11332:6:20","nodeType":"VariableDeclaration","scope":4994,"src":"11324:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4971,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4976,"initialValue":{"arguments":[{"id":4974,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"11347:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4973,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4960,4996],"referencedDeclaration":4960,"src":"11341:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4977,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"11374:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4978,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"11384:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4979,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"11396:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4264_$","typeString":"type(enum Math.Rounding)"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4262,"src":"11396:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"src":"11384:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4983,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"11417:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"11426:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:20","trueExpression":{"hexValue":"31","id":4988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4970,"id":4993,"nodeType":"Return","src":"11367:73:20"}]}]},"documentation":{"id":4961,"nodeType":"StructuredDocumentation","src":"11061:143:20","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4996,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:20","nodeType":"FunctionDefinition","parameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4963,"mutability":"mutable","name":"value","nameLocation":"11232:5:20","nodeType":"VariableDeclaration","scope":4996,"src":"11224:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4962,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4966,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:20","nodeType":"VariableDeclaration","scope":4996,"src":"11239:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"typeName":{"id":4965,"nodeType":"UserDefinedTypeName","pathNode":{"id":4964,"name":"Rounding","nameLocations":["11239:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"11239:8:20"},"referencedDeclaration":4264,"src":"11239:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:20"},"returnParameters":{"id":4970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4996,"src":"11281:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4968,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:20"},"scope":5123,"src":"11209:248:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5082,"nodeType":"Block","src":"11771:600:20","statements":[{"assignments":[5005],"declarations":[{"constant":false,"id":5005,"mutability":"mutable","name":"result","nameLocation":"11789:6:20","nodeType":"VariableDeclaration","scope":5082,"src":"11781:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5004,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5007,"initialValue":{"hexValue":"30","id":5006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:20"},{"id":5079,"nodeType":"UncheckedBlock","src":"11809:533:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"11837:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5022,"nodeType":"IfStatement","src":"11833:98:20","trueBody":{"id":5021,"nodeType":"Block","src":"11855:76:20","statements":[{"expression":{"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"11873:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5016,"nodeType":"ExpressionStatement","src":"11873:13:20"},{"expression":{"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5017,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"11904:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5020,"nodeType":"ExpressionStatement","src":"11904:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"11948:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5037,"nodeType":"IfStatement","src":"11944:95:20","trueBody":{"id":5036,"nodeType":"Block","src":"11965:74:20","statements":[{"expression":{"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"11983:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5031,"nodeType":"ExpressionStatement","src":"11983:12:20"},{"expression":{"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"12013:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5035,"nodeType":"ExpressionStatement","src":"12013:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"12056:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5052,"nodeType":"IfStatement","src":"12052:95:20","trueBody":{"id":5051,"nodeType":"Block","src":"12073:74:20","statements":[{"expression":{"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"12091:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5046,"nodeType":"ExpressionStatement","src":"12091:12:20"},{"expression":{"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"12121:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5050,"nodeType":"ExpressionStatement","src":"12121:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"12164:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5067,"nodeType":"IfStatement","src":"12160:95:20","trueBody":{"id":5066,"nodeType":"Block","src":"12181:74:20","statements":[{"expression":{"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"12199:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5061,"nodeType":"ExpressionStatement","src":"12199:12:20"},{"expression":{"id":5064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"12229:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5065,"nodeType":"ExpressionStatement","src":"12229:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"12272:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5078,"nodeType":"IfStatement","src":"12268:64:20","trueBody":{"id":5077,"nodeType":"Block","src":"12288:44:20","statements":[{"expression":{"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5073,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"12306:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5076,"nodeType":"ExpressionStatement","src":"12306:11:20"}]}}]},{"expression":{"id":5080,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"12358:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5003,"id":5081,"nodeType":"Return","src":"12351:13:20"}]},"documentation":{"id":4997,"nodeType":"StructuredDocumentation","src":"11463:240:20","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5083,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:20","nodeType":"FunctionDefinition","parameters":{"id":5000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4999,"mutability":"mutable","name":"value","nameLocation":"11732:5:20","nodeType":"VariableDeclaration","scope":5083,"src":"11724:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4998,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:20"},"returnParameters":{"id":5003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5083,"src":"11762:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5001,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:20"},"scope":5123,"src":"11708:663:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5121,"nodeType":"Block","src":"12608:174:20","statements":[{"id":5120,"nodeType":"UncheckedBlock","src":"12618:158:20","statements":[{"assignments":[5095],"declarations":[{"constant":false,"id":5095,"mutability":"mutable","name":"result","nameLocation":"12650:6:20","nodeType":"VariableDeclaration","scope":5120,"src":"12642:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5094,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5099,"initialValue":{"arguments":[{"id":5097,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"12666:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5096,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5083,5122],"referencedDeclaration":5083,"src":"12659:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"12693:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5101,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"12703:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5102,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"12715:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4264_$","typeString":"type(enum Math.Rounding)"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4262,"src":"12715:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"src":"12703:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"12736:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5109,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"12751:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:20","trueExpression":{"hexValue":"31","id":5114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5117,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5093,"id":5119,"nodeType":"Return","src":"12686:79:20"}]}]},"documentation":{"id":5084,"nodeType":"StructuredDocumentation","src":"12377:144:20","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5122,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:20","nodeType":"FunctionDefinition","parameters":{"id":5090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5086,"mutability":"mutable","name":"value","nameLocation":"12550:5:20","nodeType":"VariableDeclaration","scope":5122,"src":"12542:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5085,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5089,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:20","nodeType":"VariableDeclaration","scope":5122,"src":"12557:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"},"typeName":{"id":5088,"nodeType":"UserDefinedTypeName","pathNode":{"id":5087,"name":"Rounding","nameLocations":["12557:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"12557:8:20"},"referencedDeclaration":4264,"src":"12557:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4264","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:20"},"returnParameters":{"id":5093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5122,"src":"12599:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5091,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:20"},"scope":5123,"src":"12526:256:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5124,"src":"202:12582:20","usedErrors":[]}],"src":"103:12682:20"},"id":20},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5228]},"id":5229,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5125,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5126,"nodeType":"StructuredDocumentation","src":"134:80:21","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5228,"linearizedBaseContracts":[5228],"name":"SignedMath","nameLocation":"223:10:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":5143,"nodeType":"Block","src":"375:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5136,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"392:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5137,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5131,"src":"396:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5140,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5131,"src":"404:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:21","trueExpression":{"id":5139,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"400:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5135,"id":5142,"nodeType":"Return","src":"385:20:21"}]},"documentation":{"id":5127,"nodeType":"StructuredDocumentation","src":"240:66:21","text":" @dev Returns the largest of two signed numbers."},"id":5144,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:21","nodeType":"FunctionDefinition","parameters":{"id":5132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5129,"mutability":"mutable","name":"a","nameLocation":"331:1:21","nodeType":"VariableDeclaration","scope":5144,"src":"324:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5128,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5131,"mutability":"mutable","name":"b","nameLocation":"341:1:21","nodeType":"VariableDeclaration","scope":5144,"src":"334:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5130,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:21"},"returnParameters":{"id":5135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5144,"src":"367:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5133,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:21"},"scope":5228,"src":"311:101:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5161,"nodeType":"Block","src":"554:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5154,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"571:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5155,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"575:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5158,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"583:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:21","trueExpression":{"id":5157,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"579:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5153,"id":5160,"nodeType":"Return","src":"564:20:21"}]},"documentation":{"id":5145,"nodeType":"StructuredDocumentation","src":"418:67:21","text":" @dev Returns the smallest of two signed numbers."},"id":5162,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:21","nodeType":"FunctionDefinition","parameters":{"id":5150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5147,"mutability":"mutable","name":"a","nameLocation":"510:1:21","nodeType":"VariableDeclaration","scope":5162,"src":"503:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5146,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5149,"mutability":"mutable","name":"b","nameLocation":"520:1:21","nodeType":"VariableDeclaration","scope":5162,"src":"513:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5148,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:21"},"returnParameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5162,"src":"546:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5151,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:21"},"scope":5228,"src":"490:101:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5205,"nodeType":"Block","src":"796:162:21","statements":[{"assignments":[5173],"declarations":[{"constant":false,"id":5173,"mutability":"mutable","name":"x","nameLocation":"865:1:21","nodeType":"VariableDeclaration","scope":5205,"src":"858:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5172,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5186,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5174,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"870:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5175,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"874:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"881:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"885:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5184,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:21"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5187,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"910:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5192,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"930:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5190,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:21","typeDescriptions":{}}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:21","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5188,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:21","typeDescriptions":{}}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"944:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"948:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5171,"id":5204,"nodeType":"Return","src":"903:48:21"}]},"documentation":{"id":5163,"nodeType":"StructuredDocumentation","src":"597:126:21","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5206,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:21","nodeType":"FunctionDefinition","parameters":{"id":5168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5165,"mutability":"mutable","name":"a","nameLocation":"752:1:21","nodeType":"VariableDeclaration","scope":5206,"src":"745:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5164,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5167,"mutability":"mutable","name":"b","nameLocation":"762:1:21","nodeType":"VariableDeclaration","scope":5206,"src":"755:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5166,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:21"},"returnParameters":{"id":5171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5206,"src":"788:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5169,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:21"},"scope":5228,"src":"728:230:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5226,"nodeType":"Block","src":"1102:158:21","statements":[{"id":5225,"nodeType":"UncheckedBlock","src":"1112:142:21","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5216,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5209,"src":"1227:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:21","subExpression":{"id":5220,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5209,"src":"1241:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:21","trueExpression":{"id":5219,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5209,"src":"1236:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:21","typeDescriptions":{}}},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5213,"id":5224,"nodeType":"Return","src":"1212:31:21"}]}]},"documentation":{"id":5207,"nodeType":"StructuredDocumentation","src":"964:78:21","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5227,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:21","nodeType":"FunctionDefinition","parameters":{"id":5210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5209,"mutability":"mutable","name":"n","nameLocation":"1067:1:21","nodeType":"VariableDeclaration","scope":5227,"src":"1060:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5208,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:21"},"returnParameters":{"id":5213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5227,"src":"1093:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:21"},"scope":5228,"src":"1047:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5229,"src":"215:1047:21","usedErrors":[]}],"src":"109:1154:21"},"id":21},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[5841]},"id":5842,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5230,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":5231,"nodeType":"StructuredDocumentation","src":"230:1098:22","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":5841,"linearizedBaseContracts":[5841],"name":"EnumerableSet","nameLocation":"1337:13:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":5239,"members":[{"constant":false,"id":5234,"mutability":"mutable","name":"_values","nameLocation":"1861:7:22","nodeType":"VariableDeclaration","scope":5239,"src":"1851:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5233,"nodeType":"ArrayTypeName","src":"1851:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5238,"mutability":"mutable","name":"_indexes","nameLocation":"2029:8:22","nodeType":"VariableDeclaration","scope":5239,"src":"2001:36:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":5237,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2001:27:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2020:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1804:3:22","nodeType":"StructDefinition","scope":5841,"src":"1797:247:22","visibility":"public"},{"body":{"id":5280,"nodeType":"Block","src":"2283:335:22","statements":[{"condition":{"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2297:22:22","subExpression":{"arguments":[{"id":5251,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"2308:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":5252,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"2313:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5250,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"2298:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5278,"nodeType":"Block","src":"2575:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2596:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5249,"id":5277,"nodeType":"Return","src":"2589:12:22"}]},"id":5279,"nodeType":"IfStatement","src":"2293:319:22","trueBody":{"id":5275,"nodeType":"Block","src":"2321:248:22","statements":[{"expression":{"arguments":[{"id":5260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"2352:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":5255,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"2335:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2339:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"2335:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2347:4:22","memberName":"push","nodeType":"MemberAccess","src":"2335:16:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":5261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5262,"nodeType":"ExpressionStatement","src":"2335:23:22"},{"expression":{"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5263,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"2493:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2497:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"2493:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5267,"indexExpression":{"id":5265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5245,"src":"2506:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2493:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":5268,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"2515:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2519:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"2515:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2527:6:22","memberName":"length","nodeType":"MemberAccess","src":"2515:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2493:40:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5272,"nodeType":"ExpressionStatement","src":"2493:40:22"},{"expression":{"hexValue":"74727565","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2554:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5249,"id":5274,"nodeType":"Return","src":"2547:11:22"}]}}]},"documentation":{"id":5240,"nodeType":"StructuredDocumentation","src":"2050:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5281,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2223:4:22","nodeType":"FunctionDefinition","parameters":{"id":5246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5243,"mutability":"mutable","name":"set","nameLocation":"2240:3:22","nodeType":"VariableDeclaration","scope":5281,"src":"2228:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5242,"nodeType":"UserDefinedTypeName","pathNode":{"id":5241,"name":"Set","nameLocations":["2228:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"2228:3:22"},"referencedDeclaration":5239,"src":"2228:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":5245,"mutability":"mutable","name":"value","nameLocation":"2253:5:22","nodeType":"VariableDeclaration","scope":5281,"src":"2245:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2245:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2227:32:22"},"returnParameters":{"id":5249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5281,"src":"2277:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5247,"name":"bool","nodeType":"ElementaryTypeName","src":"2277:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2276:6:22"},"scope":5841,"src":"2214:404:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5364,"nodeType":"Block","src":"2858:1316:22","statements":[{"assignments":[5293],"declarations":[{"constant":false,"id":5293,"mutability":"mutable","name":"valueIndex","nameLocation":"2976:10:22","nodeType":"VariableDeclaration","scope":5364,"src":"2968:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5292,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5298,"initialValue":{"baseExpression":{"expression":{"id":5294,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"2989:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"2989:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5297,"indexExpression":{"id":5296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5287,"src":"3002:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2989:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2968:40:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5299,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"3023:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3023:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5362,"nodeType":"Block","src":"4131:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":5360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4152:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5291,"id":5361,"nodeType":"Return","src":"4145:12:22"}]},"id":5363,"nodeType":"IfStatement","src":"3019:1149:22","trueBody":{"id":5359,"nodeType":"Block","src":"3040:1085:22","statements":[{"assignments":[5303],"declarations":[{"constant":false,"id":5303,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3400:13:22","nodeType":"VariableDeclaration","scope":5359,"src":"3392:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5302,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5307,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5304,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"3416:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3416:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3392:38:22"},{"assignments":[5309],"declarations":[{"constant":false,"id":5309,"mutability":"mutable","name":"lastIndex","nameLocation":"3452:9:22","nodeType":"VariableDeclaration","scope":5359,"src":"3444:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5308,"name":"uint256","nodeType":"ElementaryTypeName","src":"3444:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5315,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5310,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"3464:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3468:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"3464:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3476:6:22","memberName":"length","nodeType":"MemberAccess","src":"3464:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3464:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3444:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5316,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"3505:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5317,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"3518:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3505:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5343,"nodeType":"IfStatement","src":"3501:398:22","trueBody":{"id":5342,"nodeType":"Block","src":"3533:366:22","statements":[{"assignments":[5320],"declarations":[{"constant":false,"id":5320,"mutability":"mutable","name":"lastValue","nameLocation":"3559:9:22","nodeType":"VariableDeclaration","scope":5342,"src":"3551:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3551:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5325,"initialValue":{"baseExpression":{"expression":{"id":5321,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"3571:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3575:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"3571:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5324,"indexExpression":{"id":5323,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"3583:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:22:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3551:42:22"},{"expression":{"id":5332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5326,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"3693:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3697:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"3693:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5330,"indexExpression":{"id":5328,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"3705:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3693:26:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5331,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"3722:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3693:38:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5333,"nodeType":"ExpressionStatement","src":"3693:38:22"},{"expression":{"id":5340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5334,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"3805:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3809:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"3805:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5338,"indexExpression":{"id":5336,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"3818:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5339,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"3831:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3805:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5341,"nodeType":"ExpressionStatement","src":"3805:36:22"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5344,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"3977:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5347,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3981:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"3977:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3989:3:22","memberName":"pop","nodeType":"MemberAccess","src":"3977:15:22","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3977:17:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5350,"nodeType":"ExpressionStatement","src":"3977:17:22"},{"expression":{"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4062:26:22","subExpression":{"baseExpression":{"expression":{"id":5351,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"4069:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4073:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"4069:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5354,"indexExpression":{"id":5353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5287,"src":"4082:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4069:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5356,"nodeType":"ExpressionStatement","src":"4062:26:22"},{"expression":{"hexValue":"74727565","id":5357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5291,"id":5358,"nodeType":"Return","src":"4103:11:22"}]}}]},"documentation":{"id":5282,"nodeType":"StructuredDocumentation","src":"2624:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5365,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2795:7:22","nodeType":"FunctionDefinition","parameters":{"id":5288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"set","nameLocation":"2815:3:22","nodeType":"VariableDeclaration","scope":5365,"src":"2803:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5284,"nodeType":"UserDefinedTypeName","pathNode":{"id":5283,"name":"Set","nameLocations":["2803:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"2803:3:22"},"referencedDeclaration":5239,"src":"2803:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":5287,"mutability":"mutable","name":"value","nameLocation":"2828:5:22","nodeType":"VariableDeclaration","scope":5365,"src":"2820:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2820:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2802:32:22"},"returnParameters":{"id":5291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5365,"src":"2852:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5289,"name":"bool","nodeType":"ElementaryTypeName","src":"2852:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2851:6:22"},"scope":5841,"src":"2786:1388:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5383,"nodeType":"Block","src":"4334:48:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":5376,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"4351:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4355:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":5238,"src":"4351:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5379,"indexExpression":{"id":5378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"4364:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4351:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4374:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4351:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5375,"id":5382,"nodeType":"Return","src":"4344:31:22"}]},"documentation":{"id":5366,"nodeType":"StructuredDocumentation","src":"4180:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5384,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4264:9:22","nodeType":"FunctionDefinition","parameters":{"id":5372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5369,"mutability":"mutable","name":"set","nameLocation":"4286:3:22","nodeType":"VariableDeclaration","scope":5384,"src":"4274:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5368,"nodeType":"UserDefinedTypeName","pathNode":{"id":5367,"name":"Set","nameLocations":["4274:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"4274:3:22"},"referencedDeclaration":5239,"src":"4274:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":5371,"mutability":"mutable","name":"value","nameLocation":"4299:5:22","nodeType":"VariableDeclaration","scope":5384,"src":"4291:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4291:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4273:32:22"},"returnParameters":{"id":5375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5384,"src":"4328:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5373,"name":"bool","nodeType":"ElementaryTypeName","src":"4328:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4327:6:22"},"scope":5841,"src":"4255:127:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5397,"nodeType":"Block","src":"4528:42:22","statements":[{"expression":{"expression":{"expression":{"id":5393,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5388,"src":"4545:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4549:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"4545:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4557:6:22","memberName":"length","nodeType":"MemberAccess","src":"4545:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5392,"id":5396,"nodeType":"Return","src":"4538:25:22"}]},"documentation":{"id":5385,"nodeType":"StructuredDocumentation","src":"4388:70:22","text":" @dev Returns the number of values on the set. O(1)."},"id":5398,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4472:7:22","nodeType":"FunctionDefinition","parameters":{"id":5389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5388,"mutability":"mutable","name":"set","nameLocation":"4492:3:22","nodeType":"VariableDeclaration","scope":5398,"src":"4480:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5387,"nodeType":"UserDefinedTypeName","pathNode":{"id":5386,"name":"Set","nameLocations":["4480:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"4480:3:22"},"referencedDeclaration":5239,"src":"4480:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4479:17:22"},"returnParameters":{"id":5392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5398,"src":"4519:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5390,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:9:22"},"scope":5841,"src":"4463:107:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5414,"nodeType":"Block","src":"4988:42:22","statements":[{"expression":{"baseExpression":{"expression":{"id":5409,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"5005:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5009:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"5005:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":5412,"indexExpression":{"id":5411,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"5017:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5005:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5408,"id":5413,"nodeType":"Return","src":"4998:25:22"}]},"documentation":{"id":5399,"nodeType":"StructuredDocumentation","src":"4576:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5415,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4921:3:22","nodeType":"FunctionDefinition","parameters":{"id":5405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5402,"mutability":"mutable","name":"set","nameLocation":"4937:3:22","nodeType":"VariableDeclaration","scope":5415,"src":"4925:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5401,"nodeType":"UserDefinedTypeName","pathNode":{"id":5400,"name":"Set","nameLocations":["4925:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"4925:3:22"},"referencedDeclaration":5239,"src":"4925:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":5404,"mutability":"mutable","name":"index","nameLocation":"4950:5:22","nodeType":"VariableDeclaration","scope":5415,"src":"4942:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5403,"name":"uint256","nodeType":"ElementaryTypeName","src":"4942:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:32:22"},"returnParameters":{"id":5408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5415,"src":"4979:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4979:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4978:9:22"},"scope":5841,"src":"4912:118:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5428,"nodeType":"Block","src":"5644:35:22","statements":[{"expression":{"expression":{"id":5425,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"5661:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":5426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5665:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5234,"src":"5661:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":5424,"id":5427,"nodeType":"Return","src":"5654:18:22"}]},"documentation":{"id":5416,"nodeType":"StructuredDocumentation","src":"5036:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5429,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5579:7:22","nodeType":"FunctionDefinition","parameters":{"id":5420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5419,"mutability":"mutable","name":"set","nameLocation":"5599:3:22","nodeType":"VariableDeclaration","scope":5429,"src":"5587:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5418,"nodeType":"UserDefinedTypeName","pathNode":{"id":5417,"name":"Set","nameLocations":["5587:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"5587:3:22"},"referencedDeclaration":5239,"src":"5587:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5586:17:22"},"returnParameters":{"id":5424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5429,"src":"5626:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5626:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5422,"nodeType":"ArrayTypeName","src":"5626:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5625:18:22"},"scope":5841,"src":"5570:109:22","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":5433,"members":[{"constant":false,"id":5432,"mutability":"mutable","name":"_inner","nameLocation":"5736:6:22","nodeType":"VariableDeclaration","scope":5433,"src":"5732:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5431,"nodeType":"UserDefinedTypeName","pathNode":{"id":5430,"name":"Set","nameLocations":["5732:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"5732:3:22"},"referencedDeclaration":5239,"src":"5732:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5711:10:22","nodeType":"StructDefinition","scope":5841,"src":"5704:45:22","visibility":"public"},{"body":{"id":5450,"nodeType":"Block","src":"5995:47:22","statements":[{"expression":{"arguments":[{"expression":{"id":5445,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5437,"src":"6017:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5446,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"6017:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5439,"src":"6029:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5444,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"6012:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6012:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5443,"id":5449,"nodeType":"Return","src":"6005:30:22"}]},"documentation":{"id":5434,"nodeType":"StructuredDocumentation","src":"5755:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5451,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5928:3:22","nodeType":"FunctionDefinition","parameters":{"id":5440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5437,"mutability":"mutable","name":"set","nameLocation":"5951:3:22","nodeType":"VariableDeclaration","scope":5451,"src":"5932:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5436,"nodeType":"UserDefinedTypeName","pathNode":{"id":5435,"name":"Bytes32Set","nameLocations":["5932:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"5932:10:22"},"referencedDeclaration":5433,"src":"5932:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5439,"mutability":"mutable","name":"value","nameLocation":"5964:5:22","nodeType":"VariableDeclaration","scope":5451,"src":"5956:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5956:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5931:39:22"},"returnParameters":{"id":5443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5451,"src":"5989:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5441,"name":"bool","nodeType":"ElementaryTypeName","src":"5989:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5988:6:22"},"scope":5841,"src":"5919:123:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5468,"nodeType":"Block","src":"6289:50:22","statements":[{"expression":{"arguments":[{"expression":{"id":5463,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5455,"src":"6314:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6318:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"6314:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5457,"src":"6326:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5462,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"6306:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6306:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5461,"id":5467,"nodeType":"Return","src":"6299:33:22"}]},"documentation":{"id":5452,"nodeType":"StructuredDocumentation","src":"6048:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5469,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6219:6:22","nodeType":"FunctionDefinition","parameters":{"id":5458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5455,"mutability":"mutable","name":"set","nameLocation":"6245:3:22","nodeType":"VariableDeclaration","scope":5469,"src":"6226:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5454,"nodeType":"UserDefinedTypeName","pathNode":{"id":5453,"name":"Bytes32Set","nameLocations":["6226:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"6226:10:22"},"referencedDeclaration":5433,"src":"6226:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5457,"mutability":"mutable","name":"value","nameLocation":"6258:5:22","nodeType":"VariableDeclaration","scope":5469,"src":"6250:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5456,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6225:39:22"},"returnParameters":{"id":5461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5469,"src":"6283:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5459,"name":"bool","nodeType":"ElementaryTypeName","src":"6283:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6282:6:22"},"scope":5841,"src":"6210:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5486,"nodeType":"Block","src":"6506:52:22","statements":[{"expression":{"arguments":[{"expression":{"id":5481,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"6533:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6537:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"6533:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5475,"src":"6545:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5480,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6523:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6523:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5479,"id":5485,"nodeType":"Return","src":"6516:35:22"}]},"documentation":{"id":5470,"nodeType":"StructuredDocumentation","src":"6345:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5487,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6429:8:22","nodeType":"FunctionDefinition","parameters":{"id":5476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5473,"mutability":"mutable","name":"set","nameLocation":"6457:3:22","nodeType":"VariableDeclaration","scope":5487,"src":"6438:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5472,"nodeType":"UserDefinedTypeName","pathNode":{"id":5471,"name":"Bytes32Set","nameLocations":["6438:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"6438:10:22"},"referencedDeclaration":5433,"src":"6438:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5475,"mutability":"mutable","name":"value","nameLocation":"6470:5:22","nodeType":"VariableDeclaration","scope":5487,"src":"6462:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5474,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6437:39:22"},"returnParameters":{"id":5479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5487,"src":"6500:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5477,"name":"bool","nodeType":"ElementaryTypeName","src":"6500:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6499:6:22"},"scope":5841,"src":"6420:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5501,"nodeType":"Block","src":"6711:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5497,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"6736:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5498,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"6736:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5496,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"6728:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6728:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5495,"id":5500,"nodeType":"Return","src":"6721:26:22"}]},"documentation":{"id":5488,"nodeType":"StructuredDocumentation","src":"6564:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":5502,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6648:6:22","nodeType":"FunctionDefinition","parameters":{"id":5492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5491,"mutability":"mutable","name":"set","nameLocation":"6674:3:22","nodeType":"VariableDeclaration","scope":5502,"src":"6655:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5490,"nodeType":"UserDefinedTypeName","pathNode":{"id":5489,"name":"Bytes32Set","nameLocations":["6655:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"6655:10:22"},"referencedDeclaration":5433,"src":"6655:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6654:24:22"},"returnParameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5502,"src":"6702:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5493,"name":"uint256","nodeType":"ElementaryTypeName","src":"6702:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6701:9:22"},"scope":5841,"src":"6639:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5519,"nodeType":"Block","src":"7179:46:22","statements":[{"expression":{"arguments":[{"expression":{"id":5514,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5506,"src":"7200:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7204:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"7200:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5516,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"7212:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5513,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"7196:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5512,"id":5518,"nodeType":"Return","src":"7189:29:22"}]},"documentation":{"id":5503,"nodeType":"StructuredDocumentation","src":"6760:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5520,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7105:2:22","nodeType":"FunctionDefinition","parameters":{"id":5509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5506,"mutability":"mutable","name":"set","nameLocation":"7127:3:22","nodeType":"VariableDeclaration","scope":5520,"src":"7108:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5505,"nodeType":"UserDefinedTypeName","pathNode":{"id":5504,"name":"Bytes32Set","nameLocations":["7108:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"7108:10:22"},"referencedDeclaration":5433,"src":"7108:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5508,"mutability":"mutable","name":"index","nameLocation":"7140:5:22","nodeType":"VariableDeclaration","scope":5520,"src":"7132:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5507,"name":"uint256","nodeType":"ElementaryTypeName","src":"7132:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:39:22"},"returnParameters":{"id":5512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5520,"src":"7170:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7170:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7169:9:22"},"scope":5841,"src":"7096:129:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5549,"nodeType":"Block","src":"7846:219:22","statements":[{"assignments":[5534],"declarations":[{"constant":false,"id":5534,"mutability":"mutable","name":"store","nameLocation":"7873:5:22","nodeType":"VariableDeclaration","scope":5549,"src":"7856:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7856:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5533,"nodeType":"ArrayTypeName","src":"7856:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5539,"initialValue":{"arguments":[{"expression":{"id":5536,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"7889:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":5537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7893:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5432,"src":"7889:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5535,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5429,"src":"7881:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7881:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7856:44:22"},{"assignments":[5544],"declarations":[{"constant":false,"id":5544,"mutability":"mutable","name":"result","nameLocation":"7927:6:22","nodeType":"VariableDeclaration","scope":5549,"src":"7910:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5543,"nodeType":"ArrayTypeName","src":"7910:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5545,"nodeType":"VariableDeclarationStatement","src":"7910:23:22"},{"AST":{"nodeType":"YulBlock","src":"7996:39:22","statements":[{"nodeType":"YulAssignment","src":"8010:15:22","value":{"name":"store","nodeType":"YulIdentifier","src":"8020:5:22"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8010:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5544,"isOffset":false,"isSlot":false,"src":"8010:6:22","valueSize":1},{"declaration":5534,"isOffset":false,"isSlot":false,"src":"8020:5:22","valueSize":1}],"id":5546,"nodeType":"InlineAssembly","src":"7987:48:22"},{"expression":{"id":5547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"8052:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":5529,"id":5548,"nodeType":"Return","src":"8045:13:22"}]},"documentation":{"id":5521,"nodeType":"StructuredDocumentation","src":"7231:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5550,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7774:6:22","nodeType":"FunctionDefinition","parameters":{"id":5525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5524,"mutability":"mutable","name":"set","nameLocation":"7800:3:22","nodeType":"VariableDeclaration","scope":5550,"src":"7781:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5523,"nodeType":"UserDefinedTypeName","pathNode":{"id":5522,"name":"Bytes32Set","nameLocations":["7781:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5433,"src":"7781:10:22"},"referencedDeclaration":5433,"src":"7781:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$5433_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7780:24:22"},"returnParameters":{"id":5529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5550,"src":"7828:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7828:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5527,"nodeType":"ArrayTypeName","src":"7828:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7827:18:22"},"scope":5841,"src":"7765:300:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":5554,"members":[{"constant":false,"id":5553,"mutability":"mutable","name":"_inner","nameLocation":"8122:6:22","nodeType":"VariableDeclaration","scope":5554,"src":"8118:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5552,"nodeType":"UserDefinedTypeName","pathNode":{"id":5551,"name":"Set","nameLocations":["8118:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"8118:3:22"},"referencedDeclaration":5239,"src":"8118:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8097:10:22","nodeType":"StructDefinition","scope":5841,"src":"8090:45:22","visibility":"public"},{"body":{"id":5580,"nodeType":"Block","src":"8381:74:22","statements":[{"expression":{"arguments":[{"expression":{"id":5566,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5558,"src":"8403:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8407:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"8403:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5560,"src":"8439:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8431:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5572,"name":"uint160","nodeType":"ElementaryTypeName","src":"8431:7:22","typeDescriptions":{}}},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8431:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5570,"name":"uint256","nodeType":"ElementaryTypeName","src":"8423:7:22","typeDescriptions":{}}},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8415:7:22","typeDescriptions":{}}},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5565,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"8398:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8398:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5564,"id":5579,"nodeType":"Return","src":"8391:57:22"}]},"documentation":{"id":5555,"nodeType":"StructuredDocumentation","src":"8141:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5581,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8314:3:22","nodeType":"FunctionDefinition","parameters":{"id":5561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"set","nameLocation":"8337:3:22","nodeType":"VariableDeclaration","scope":5581,"src":"8318:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5557,"nodeType":"UserDefinedTypeName","pathNode":{"id":5556,"name":"AddressSet","nameLocations":["8318:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"8318:10:22"},"referencedDeclaration":5554,"src":"8318:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5560,"mutability":"mutable","name":"value","nameLocation":"8350:5:22","nodeType":"VariableDeclaration","scope":5581,"src":"8342:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5559,"name":"address","nodeType":"ElementaryTypeName","src":"8342:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8317:39:22"},"returnParameters":{"id":5564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"8375:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5562,"name":"bool","nodeType":"ElementaryTypeName","src":"8375:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8374:6:22"},"scope":5841,"src":"8305:150:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5607,"nodeType":"Block","src":"8702:77:22","statements":[{"expression":{"arguments":[{"expression":{"id":5593,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"8727:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5594,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8731:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"8727:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"8763:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8755:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5599,"name":"uint160","nodeType":"ElementaryTypeName","src":"8755:7:22","typeDescriptions":{}}},"id":5602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8755:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"8747:7:22","typeDescriptions":{}}},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8739:7:22","typeDescriptions":{}}},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5592,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"8719:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8719:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5591,"id":5606,"nodeType":"Return","src":"8712:60:22"}]},"documentation":{"id":5582,"nodeType":"StructuredDocumentation","src":"8461:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5608,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8632:6:22","nodeType":"FunctionDefinition","parameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5585,"mutability":"mutable","name":"set","nameLocation":"8658:3:22","nodeType":"VariableDeclaration","scope":5608,"src":"8639:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5584,"nodeType":"UserDefinedTypeName","pathNode":{"id":5583,"name":"AddressSet","nameLocations":["8639:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"8639:10:22"},"referencedDeclaration":5554,"src":"8639:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5587,"mutability":"mutable","name":"value","nameLocation":"8671:5:22","nodeType":"VariableDeclaration","scope":5608,"src":"8663:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5586,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8638:39:22"},"returnParameters":{"id":5591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5608,"src":"8696:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5589,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:6:22"},"scope":5841,"src":"8623:156:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5634,"nodeType":"Block","src":"8946:79:22","statements":[{"expression":{"arguments":[{"expression":{"id":5620,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5612,"src":"8973:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5621,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8977:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"8973:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":5628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5614,"src":"9009:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9001:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5626,"name":"uint160","nodeType":"ElementaryTypeName","src":"9001:7:22","typeDescriptions":{}}},"id":5629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9001:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5624,"name":"uint256","nodeType":"ElementaryTypeName","src":"8993:7:22","typeDescriptions":{}}},"id":5630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8985:7:22","typeDescriptions":{}}},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5619,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"8963:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8963:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5618,"id":5633,"nodeType":"Return","src":"8956:62:22"}]},"documentation":{"id":5609,"nodeType":"StructuredDocumentation","src":"8785:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5635,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8869:8:22","nodeType":"FunctionDefinition","parameters":{"id":5615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5612,"mutability":"mutable","name":"set","nameLocation":"8897:3:22","nodeType":"VariableDeclaration","scope":5635,"src":"8878:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5611,"nodeType":"UserDefinedTypeName","pathNode":{"id":5610,"name":"AddressSet","nameLocations":["8878:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"8878:10:22"},"referencedDeclaration":5554,"src":"8878:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5614,"mutability":"mutable","name":"value","nameLocation":"8910:5:22","nodeType":"VariableDeclaration","scope":5635,"src":"8902:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5613,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8877:39:22"},"returnParameters":{"id":5618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5635,"src":"8940:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5616,"name":"bool","nodeType":"ElementaryTypeName","src":"8940:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8939:6:22"},"scope":5841,"src":"8860:165:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5649,"nodeType":"Block","src":"9178:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5645,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5639,"src":"9203:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9207:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"9203:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5644,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"9195:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5643,"id":5648,"nodeType":"Return","src":"9188:26:22"}]},"documentation":{"id":5636,"nodeType":"StructuredDocumentation","src":"9031:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":5650,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9115:6:22","nodeType":"FunctionDefinition","parameters":{"id":5640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5639,"mutability":"mutable","name":"set","nameLocation":"9141:3:22","nodeType":"VariableDeclaration","scope":5650,"src":"9122:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5638,"nodeType":"UserDefinedTypeName","pathNode":{"id":5637,"name":"AddressSet","nameLocations":["9122:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"9122:10:22"},"referencedDeclaration":5554,"src":"9122:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9121:24:22"},"returnParameters":{"id":5643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5650,"src":"9169:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5641,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:22"},"scope":5841,"src":"9106:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5676,"nodeType":"Block","src":"9646:73:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":5668,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"9691:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"9691:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5670,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5656,"src":"9703:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5667,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"9687:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9687:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9679:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5665,"name":"uint256","nodeType":"ElementaryTypeName","src":"9679:7:22","typeDescriptions":{}}},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5663,"name":"uint160","nodeType":"ElementaryTypeName","src":"9671:7:22","typeDescriptions":{}}},"id":5673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5661,"name":"address","nodeType":"ElementaryTypeName","src":"9663:7:22","typeDescriptions":{}}},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:49:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5660,"id":5675,"nodeType":"Return","src":"9656:56:22"}]},"documentation":{"id":5651,"nodeType":"StructuredDocumentation","src":"9227:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5677,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9572:2:22","nodeType":"FunctionDefinition","parameters":{"id":5657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5654,"mutability":"mutable","name":"set","nameLocation":"9594:3:22","nodeType":"VariableDeclaration","scope":5677,"src":"9575:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5653,"nodeType":"UserDefinedTypeName","pathNode":{"id":5652,"name":"AddressSet","nameLocations":["9575:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"9575:10:22"},"referencedDeclaration":5554,"src":"9575:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5656,"mutability":"mutable","name":"index","nameLocation":"9607:5:22","nodeType":"VariableDeclaration","scope":5677,"src":"9599:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5655,"name":"uint256","nodeType":"ElementaryTypeName","src":"9599:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9574:39:22"},"returnParameters":{"id":5660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5677,"src":"9637:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5658,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9636:9:22"},"scope":5841,"src":"9563:156:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5706,"nodeType":"Block","src":"10340:219:22","statements":[{"assignments":[5691],"declarations":[{"constant":false,"id":5691,"mutability":"mutable","name":"store","nameLocation":"10367:5:22","nodeType":"VariableDeclaration","scope":5706,"src":"10350:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10350:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5690,"nodeType":"ArrayTypeName","src":"10350:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5696,"initialValue":{"arguments":[{"expression":{"id":5693,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"10383:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10387:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5553,"src":"10383:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5692,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5429,"src":"10375:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10375:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10350:44:22"},{"assignments":[5701],"declarations":[{"constant":false,"id":5701,"mutability":"mutable","name":"result","nameLocation":"10421:6:22","nodeType":"VariableDeclaration","scope":5706,"src":"10404:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5699,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5700,"nodeType":"ArrayTypeName","src":"10404:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":5702,"nodeType":"VariableDeclarationStatement","src":"10404:23:22"},{"AST":{"nodeType":"YulBlock","src":"10490:39:22","statements":[{"nodeType":"YulAssignment","src":"10504:15:22","value":{"name":"store","nodeType":"YulIdentifier","src":"10514:5:22"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10504:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5701,"isOffset":false,"isSlot":false,"src":"10504:6:22","valueSize":1},{"declaration":5691,"isOffset":false,"isSlot":false,"src":"10514:5:22","valueSize":1}],"id":5703,"nodeType":"InlineAssembly","src":"10481:48:22"},{"expression":{"id":5704,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"10546:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":5686,"id":5705,"nodeType":"Return","src":"10539:13:22"}]},"documentation":{"id":5678,"nodeType":"StructuredDocumentation","src":"9725:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5707,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10268:6:22","nodeType":"FunctionDefinition","parameters":{"id":5682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5681,"mutability":"mutable","name":"set","nameLocation":"10294:3:22","nodeType":"VariableDeclaration","scope":5707,"src":"10275:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5680,"nodeType":"UserDefinedTypeName","pathNode":{"id":5679,"name":"AddressSet","nameLocations":["10275:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"10275:10:22"},"referencedDeclaration":5554,"src":"10275:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10274:24:22"},"returnParameters":{"id":5686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5707,"src":"10322:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5683,"name":"address","nodeType":"ElementaryTypeName","src":"10322:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5684,"nodeType":"ArrayTypeName","src":"10322:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10321:18:22"},"scope":5841,"src":"10259:300:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":5711,"members":[{"constant":false,"id":5710,"mutability":"mutable","name":"_inner","nameLocation":"10610:6:22","nodeType":"VariableDeclaration","scope":5711,"src":"10606:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5709,"nodeType":"UserDefinedTypeName","pathNode":{"id":5708,"name":"Set","nameLocations":["10606:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":5239,"src":"10606:3:22"},"referencedDeclaration":5239,"src":"10606:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10588:7:22","nodeType":"StructDefinition","scope":5841,"src":"10581:42:22","visibility":"public"},{"body":{"id":5731,"nodeType":"Block","src":"10866:56:22","statements":[{"expression":{"arguments":[{"expression":{"id":5723,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"10888:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5724,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10892:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"10888:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"10908:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10900:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10900:7:22","typeDescriptions":{}}},"id":5728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10900:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5722,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"10883:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10883:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5721,"id":5730,"nodeType":"Return","src":"10876:39:22"}]},"documentation":{"id":5712,"nodeType":"StructuredDocumentation","src":"10629:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5732,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10802:3:22","nodeType":"FunctionDefinition","parameters":{"id":5718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5715,"mutability":"mutable","name":"set","nameLocation":"10822:3:22","nodeType":"VariableDeclaration","scope":5732,"src":"10806:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5714,"nodeType":"UserDefinedTypeName","pathNode":{"id":5713,"name":"UintSet","nameLocations":["10806:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"10806:7:22"},"referencedDeclaration":5711,"src":"10806:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5717,"mutability":"mutable","name":"value","nameLocation":"10835:5:22","nodeType":"VariableDeclaration","scope":5732,"src":"10827:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5716,"name":"uint256","nodeType":"ElementaryTypeName","src":"10827:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10805:36:22"},"returnParameters":{"id":5721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5732,"src":"10860:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5719,"name":"bool","nodeType":"ElementaryTypeName","src":"10860:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10859:6:22"},"scope":5841,"src":"10793:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5752,"nodeType":"Block","src":"11166:59:22","statements":[{"expression":{"arguments":[{"expression":{"id":5744,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5736,"src":"11191:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11195:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"11191:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"11211:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11203:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:22","typeDescriptions":{}}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5743,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"11183:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11183:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5742,"id":5751,"nodeType":"Return","src":"11176:42:22"}]},"documentation":{"id":5733,"nodeType":"StructuredDocumentation","src":"10928:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5753,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11099:6:22","nodeType":"FunctionDefinition","parameters":{"id":5739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5736,"mutability":"mutable","name":"set","nameLocation":"11122:3:22","nodeType":"VariableDeclaration","scope":5753,"src":"11106:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5735,"nodeType":"UserDefinedTypeName","pathNode":{"id":5734,"name":"UintSet","nameLocations":["11106:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"11106:7:22"},"referencedDeclaration":5711,"src":"11106:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5738,"mutability":"mutable","name":"value","nameLocation":"11135:5:22","nodeType":"VariableDeclaration","scope":5753,"src":"11127:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5737,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11105:36:22"},"returnParameters":{"id":5742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5753,"src":"11160:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5740,"name":"bool","nodeType":"ElementaryTypeName","src":"11160:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11159:6:22"},"scope":5841,"src":"11090:135:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5773,"nodeType":"Block","src":"11389:61:22","statements":[{"expression":{"arguments":[{"expression":{"id":5765,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"11416:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11420:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"11416:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5759,"src":"11436:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11428:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11428:7:22","typeDescriptions":{}}},"id":5770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11428:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5764,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"11406:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11406:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5763,"id":5772,"nodeType":"Return","src":"11399:44:22"}]},"documentation":{"id":5754,"nodeType":"StructuredDocumentation","src":"11231:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5774,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11315:8:22","nodeType":"FunctionDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5757,"mutability":"mutable","name":"set","nameLocation":"11340:3:22","nodeType":"VariableDeclaration","scope":5774,"src":"11324:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5756,"nodeType":"UserDefinedTypeName","pathNode":{"id":5755,"name":"UintSet","nameLocations":["11324:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"11324:7:22"},"referencedDeclaration":5711,"src":"11324:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5759,"mutability":"mutable","name":"value","nameLocation":"11353:5:22","nodeType":"VariableDeclaration","scope":5774,"src":"11345:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5758,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11323:36:22"},"returnParameters":{"id":5763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5774,"src":"11383:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5761,"name":"bool","nodeType":"ElementaryTypeName","src":"11383:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11382:6:22"},"scope":5841,"src":"11306:144:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5788,"nodeType":"Block","src":"11600:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5784,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"11625:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11629:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"11625:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5783,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"11617:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11617:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5782,"id":5787,"nodeType":"Return","src":"11610:26:22"}]},"documentation":{"id":5775,"nodeType":"StructuredDocumentation","src":"11456:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":5789,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11540:6:22","nodeType":"FunctionDefinition","parameters":{"id":5779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5778,"mutability":"mutable","name":"set","nameLocation":"11563:3:22","nodeType":"VariableDeclaration","scope":5789,"src":"11547:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5777,"nodeType":"UserDefinedTypeName","pathNode":{"id":5776,"name":"UintSet","nameLocations":["11547:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"11547:7:22"},"referencedDeclaration":5711,"src":"11547:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11546:21:22"},"returnParameters":{"id":5782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5789,"src":"11591:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5780,"name":"uint256","nodeType":"ElementaryTypeName","src":"11591:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11590:9:22"},"scope":5841,"src":"11531:112:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5809,"nodeType":"Block","src":"12065:55:22","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5803,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5793,"src":"12094:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5804,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12098:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"12094:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5805,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5795,"src":"12106:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5802,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"12090:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12090:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12082:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5800,"name":"uint256","nodeType":"ElementaryTypeName","src":"12082:7:22","typeDescriptions":{}}},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5799,"id":5808,"nodeType":"Return","src":"12075:38:22"}]},"documentation":{"id":5790,"nodeType":"StructuredDocumentation","src":"11649:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5810,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11994:2:22","nodeType":"FunctionDefinition","parameters":{"id":5796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5793,"mutability":"mutable","name":"set","nameLocation":"12013:3:22","nodeType":"VariableDeclaration","scope":5810,"src":"11997:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5792,"nodeType":"UserDefinedTypeName","pathNode":{"id":5791,"name":"UintSet","nameLocations":["11997:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"11997:7:22"},"referencedDeclaration":5711,"src":"11997:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5795,"mutability":"mutable","name":"index","nameLocation":"12026:5:22","nodeType":"VariableDeclaration","scope":5810,"src":"12018:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5794,"name":"uint256","nodeType":"ElementaryTypeName","src":"12018:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11996:36:22"},"returnParameters":{"id":5799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5810,"src":"12056:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5797,"name":"uint256","nodeType":"ElementaryTypeName","src":"12056:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12055:9:22"},"scope":5841,"src":"11985:135:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5839,"nodeType":"Block","src":"12738:219:22","statements":[{"assignments":[5824],"declarations":[{"constant":false,"id":5824,"mutability":"mutable","name":"store","nameLocation":"12765:5:22","nodeType":"VariableDeclaration","scope":5839,"src":"12748:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12748:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5823,"nodeType":"ArrayTypeName","src":"12748:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5829,"initialValue":{"arguments":[{"expression":{"id":5826,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"12781:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12785:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5710,"src":"12781:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$5239_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5825,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5429,"src":"12773:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$5239_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12773:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12748:44:22"},{"assignments":[5834],"declarations":[{"constant":false,"id":5834,"mutability":"mutable","name":"result","nameLocation":"12819:6:22","nodeType":"VariableDeclaration","scope":5839,"src":"12802:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5832,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5833,"nodeType":"ArrayTypeName","src":"12802:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5835,"nodeType":"VariableDeclarationStatement","src":"12802:23:22"},{"AST":{"nodeType":"YulBlock","src":"12888:39:22","statements":[{"nodeType":"YulAssignment","src":"12902:15:22","value":{"name":"store","nodeType":"YulIdentifier","src":"12912:5:22"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12902:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5834,"isOffset":false,"isSlot":false,"src":"12902:6:22","valueSize":1},{"declaration":5824,"isOffset":false,"isSlot":false,"src":"12912:5:22","valueSize":1}],"id":5836,"nodeType":"InlineAssembly","src":"12879:48:22"},{"expression":{"id":5837,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"12944:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5819,"id":5838,"nodeType":"Return","src":"12937:13:22"}]},"documentation":{"id":5811,"nodeType":"StructuredDocumentation","src":"12126:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5840,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12669:6:22","nodeType":"FunctionDefinition","parameters":{"id":5815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5814,"mutability":"mutable","name":"set","nameLocation":"12692:3:22","nodeType":"VariableDeclaration","scope":5840,"src":"12676:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5813,"nodeType":"UserDefinedTypeName","pathNode":{"id":5812,"name":"UintSet","nameLocations":["12676:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"12676:7:22"},"referencedDeclaration":5711,"src":"12676:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12675:21:22"},"returnParameters":{"id":5819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5840,"src":"12720:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5816,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5817,"nodeType":"ArrayTypeName","src":"12720:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12719:18:22"},"scope":5841,"src":"12660:297:22","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5842,"src":"1329:11630:22","usedErrors":[]}],"src":"205:12755:22"},"id":22},"contracts/Vault.sol":{"ast":{"absolutePath":"contracts/Vault.sol","exportedSymbols":{"BytesLib":[1357],"ECDSA":[4257],"ERC20Upgradeable":[2367],"EnumerableSet":[5841],"IERC20":[2920],"ISgBridge":[8065],"IStargateReceiver":[7939],"IStrategyMessages":[8117],"IVault":[8319],"Initializable":[1755],"Math":[5123],"NonblockingLzAppUpgradeable":[1024],"SafeERC20":[3332],"StrategyParams":[8138],"Vault":[7921],"WithdrawEpoch":[8174],"WithdrawRequest":[8151]},"id":7922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5843,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":5846,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":3333,"src":"59:90:23","symbolAliases":[{"foreign":{"id":5844,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"67:6:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5845,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"75:9:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5848,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":1756,"src":"150:96:23","symbolAliases":[{"foreign":{"id":5847,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"158:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":5850,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":5842,"src":"247:86:23","symbolAliases":[{"foreign":{"id":5849,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"255:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"@openzeppelin/contracts/utils/math/Math.sol","id":5852,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":5124,"src":"334:65:23","symbolAliases":[{"foreign":{"id":5851,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"342:4:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol","file":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol","id":5855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":1025,"src":"400:156:23","symbolAliases":[{"foreign":{"id":5853,"name":"BytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"408:8:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5854,"name":"NonblockingLzAppUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"418:27:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","id":5857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":2368,"src":"557:102:23","symbolAliases":[{"foreign":{"id":5856,"name":"ERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"565:16:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":5859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":4258,"src":"660:75:23","symbolAliases":[{"foreign":{"id":5858,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"668:5:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISgBridge.sol","file":"./interfaces/ISgBridge.sol","id":5861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":8066,"src":"737:53:23","symbolAliases":[{"foreign":{"id":5860,"name":"ISgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8065,"src":"745:9:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/integrations/stargate/IStargate.sol","file":"./integrations/stargate/IStargate.sol","id":5863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":7988,"src":"791:72:23","symbolAliases":[{"foreign":{"id":5862,"name":"IStargateReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"799:17:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IStrategyMessages.sol","file":"./interfaces/IStrategyMessages.sol","id":5865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":8118,"src":"864:69:23","symbolAliases":[{"foreign":{"id":5864,"name":"IStrategyMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8117,"src":"872:17:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IVault.sol","file":"./interfaces/IVault.sol","id":5870,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7922,"sourceUnit":8320,"src":"934:95:23","symbolAliases":[{"foreign":{"id":5866,"name":"StrategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8138,"src":"942:14:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5867,"name":"WithdrawRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8151,"src":"958:15:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5868,"name":"WithdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8174,"src":"975:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5869,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8319,"src":"990:6:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5871,"name":"Initializable","nameLocations":["1053:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"1053:13:23"},"id":5872,"nodeType":"InheritanceSpecifier","src":"1053:13:23"},{"baseName":{"id":5873,"name":"ERC20Upgradeable","nameLocations":["1072:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":2367,"src":"1072:16:23"},"id":5874,"nodeType":"InheritanceSpecifier","src":"1072:16:23"},{"baseName":{"id":5875,"name":"NonblockingLzAppUpgradeable","nameLocations":["1094:27:23"],"nodeType":"IdentifierPath","referencedDeclaration":1024,"src":"1094:27:23"},"id":5876,"nodeType":"InheritanceSpecifier","src":"1094:27:23"},{"baseName":{"id":5877,"name":"IVault","nameLocations":["1127:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":8319,"src":"1127:6:23"},"id":5878,"nodeType":"InheritanceSpecifier","src":"1127:6:23"},{"baseName":{"id":5879,"name":"IStrategyMessages","nameLocations":["1139:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":8117,"src":"1139:17:23"},"id":5880,"nodeType":"InheritanceSpecifier","src":"1139:17:23"},{"baseName":{"id":5881,"name":"IStargateReceiver","nameLocations":["1162:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":7939,"src":"1162:17:23"},"id":5882,"nodeType":"InheritanceSpecifier","src":"1162:17:23"}],"canonicalName":"Vault","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":7921,"linearizedBaseContracts":[7921,7939,8117,8319,1024,762,189,158,1586,2367,2470,2445,2842,1755],"name":"Vault","nameLocation":"1040:5:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5886,"libraryName":{"id":5883,"name":"EnumerableSet","nameLocations":["1192:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":5841,"src":"1192:13:23"},"nodeType":"UsingForDirective","src":"1186:46:23","typeName":{"id":5885,"nodeType":"UserDefinedTypeName","pathNode":{"id":5884,"name":"EnumerableSet.UintSet","nameLocations":["1210:13:23","1224:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"1210:21:23"},"referencedDeclaration":5711,"src":"1210:21:23","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}}},{"global":false,"id":5890,"libraryName":{"id":5887,"name":"EnumerableSet","nameLocations":["1243:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":5841,"src":"1243:13:23"},"nodeType":"UsingForDirective","src":"1237:49:23","typeName":{"id":5889,"nodeType":"UserDefinedTypeName","pathNode":{"id":5888,"name":"EnumerableSet.AddressSet","nameLocations":["1261:13:23","1275:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"1261:24:23"},"referencedDeclaration":5554,"src":"1261:24:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"global":false,"id":5894,"libraryName":{"id":5891,"name":"SafeERC20","nameLocations":["1297:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":3332,"src":"1297:9:23"},"nodeType":"UsingForDirective","src":"1291:27:23","typeName":{"id":5893,"nodeType":"UserDefinedTypeName","pathNode":{"id":5892,"name":"IERC20","nameLocations":["1311:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1311:6:23"},"referencedDeclaration":2920,"src":"1311:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}},{"global":false,"id":5897,"libraryName":{"id":5895,"name":"BytesLib","nameLocations":["1329:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":1357,"src":"1329:8:23"},"nodeType":"UsingForDirective","src":"1323:25:23","typeName":{"id":5896,"name":"bytes","nodeType":"ElementaryTypeName","src":"1342:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"baseFunctions":[8244],"body":{"id":5955,"nodeType":"Block","src":"1545:322:23","statements":[{"expression":{"arguments":[{"id":5915,"name":"_lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5901,"src":"1590:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5914,"name":"__NonblockingLzAppUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"1555:34:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1555:47:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5917,"nodeType":"ExpressionStatement","src":"1555:47:23"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5918,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"1612:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1612:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5920,"nodeType":"ExpressionStatement","src":"1612:16:23"},{"expression":{"arguments":[{"hexValue":"4f6d6e69636861696e205661756c74","id":5922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1651:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_31acf416098ecd43c9b93cc2982f335736800d4aec3dba8fc148f7dce2933957","typeString":"literal_string \"Omnichain Vault\""},"value":"Omnichain Vault"},{"hexValue":"4f4d56","id":5923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1670:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_50155532b30f1734d62648dd32bff1a566177cdc3723883ad426ba57b1e957f6","typeString":"literal_string \"OMV\""},"value":"OMV"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_31acf416098ecd43c9b93cc2982f335736800d4aec3dba8fc148f7dce2933957","typeString":"literal_string \"Omnichain Vault\""},{"typeIdentifier":"t_stringliteral_50155532b30f1734d62648dd32bff1a566177cdc3723883ad426ba57b1e957f6","typeString":"literal_string \"OMV\""}],"id":5921,"name":"__ERC20_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"1638:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1638:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5925,"nodeType":"ExpressionStatement","src":"1638:38:23"},{"expression":{"id":5928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5926,"name":"governance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"1687:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5927,"name":"_governance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"1700:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1687:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5929,"nodeType":"ExpressionStatement","src":"1687:24:23"},{"expression":{"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5930,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"1721:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5931,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"1729:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"src":"1721:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":5933,"nodeType":"ExpressionStatement","src":"1721:14:23"},{"expression":{"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5934,"name":"sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5966,"src":"1745:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5936,"name":"_sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5906,"src":"1766:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5935,"name":"ISgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8065,"src":"1756:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISgBridge_$8065_$","typeString":"type(contract ISgBridge)"}},"id":5937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1756:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"src":"1745:31:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"id":5939,"nodeType":"ExpressionStatement","src":"1745:31:23"},{"expression":{"id":5942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5940,"name":"sgRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"1786:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5941,"name":"_sgRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5908,"src":"1797:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1786:20:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5943,"nodeType":"ExpressionStatement","src":"1786:20:23"},{"expression":{"arguments":[{"id":5947,"name":"_sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5906,"src":"1831:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":5950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1847:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1847:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":5948,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1842:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1856:3:23","memberName":"max","nodeType":"MemberAccess","src":"1842:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5944,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"1817:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":5946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1823:7:23","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2907,"src":"1817:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1817:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5954,"nodeType":"ExpressionStatement","src":"1817:43:23"}]},"functionSelector":"1459457a","id":5956,"implemented":true,"kind":"function","modifiers":[{"id":5912,"kind":"modifierInvocation","modifierName":{"id":5911,"name":"initializer","nameLocations":["1533:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":1657,"src":"1533:11:23"},"nodeType":"ModifierInvocation","src":"1533:11:23"}],"name":"initialize","nameLocation":"1363:10:23","nodeType":"FunctionDefinition","overrides":{"id":5910,"nodeType":"OverrideSpecifier","overrides":[],"src":"1524:8:23"},"parameters":{"id":5909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"_governance","nameLocation":"1391:11:23","nodeType":"VariableDeclaration","scope":5956,"src":"1383:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5898,"name":"address","nodeType":"ElementaryTypeName","src":"1383:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"_lzEndpoint","nameLocation":"1420:11:23","nodeType":"VariableDeclaration","scope":5956,"src":"1412:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5900,"name":"address","nodeType":"ElementaryTypeName","src":"1412:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5904,"mutability":"mutable","name":"_token","nameLocation":"1448:6:23","nodeType":"VariableDeclaration","scope":5956,"src":"1441:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":5903,"nodeType":"UserDefinedTypeName","pathNode":{"id":5902,"name":"IERC20","nameLocations":["1441:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1441:6:23"},"referencedDeclaration":2920,"src":"1441:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5906,"mutability":"mutable","name":"_sgBridge","nameLocation":"1472:9:23","nodeType":"VariableDeclaration","scope":5956,"src":"1464:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5905,"name":"address","nodeType":"ElementaryTypeName","src":"1464:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5908,"mutability":"mutable","name":"_sgRouter","nameLocation":"1499:9:23","nodeType":"VariableDeclaration","scope":5956,"src":"1491:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5907,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1373:141:23"},"returnParameters":{"id":5913,"nodeType":"ParameterList","parameters":[],"src":"1545:0:23"},"scope":7921,"src":"1354:513:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8318],"constant":false,"functionSelector":"5aa6e675","id":5959,"mutability":"mutable","name":"governance","nameLocation":"1897:10:23","nodeType":"VariableDeclaration","overrides":{"id":5958,"nodeType":"OverrideSpecifier","overrides":[],"src":"1888:8:23"},"scope":7921,"src":"1873:34:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5957,"name":"address","nodeType":"ElementaryTypeName","src":"1873:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"baseFunctions":[8250],"constant":false,"functionSelector":"fc0c546a","id":5963,"mutability":"mutable","name":"token","nameLocation":"1936:5:23","nodeType":"VariableDeclaration","overrides":{"id":5962,"nodeType":"OverrideSpecifier","overrides":[],"src":"1927:8:23"},"scope":7921,"src":"1913:28:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":5961,"nodeType":"UserDefinedTypeName","pathNode":{"id":5960,"name":"IERC20","nameLocations":["1913:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1913:6:23"},"referencedDeclaration":2920,"src":"1913:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"37fded91","id":5966,"mutability":"mutable","name":"sgBridge","nameLocation":"1965:8:23","nodeType":"VariableDeclaration","scope":7921,"src":"1948:25:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"},"typeName":{"id":5965,"nodeType":"UserDefinedTypeName","pathNode":{"id":5964,"name":"ISgBridge","nameLocations":["1948:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":8065,"src":"1948:9:23"},"referencedDeclaration":8065,"src":"1948:9:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"visibility":"public"},{"constant":false,"functionSelector":"2df9eab9","id":5968,"mutability":"mutable","name":"totalDebtRatio","nameLocation":"1994:14:23","nodeType":"VariableDeclaration","scope":7921,"src":"1979:29:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1979:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"fc7b9c18","id":5970,"mutability":"mutable","name":"totalDebt","nameLocation":"2029:9:23","nodeType":"VariableDeclaration","scope":7921,"src":"2014:24:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5969,"name":"uint256","nodeType":"ElementaryTypeName","src":"2014:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"3403c2fc","id":5972,"mutability":"mutable","name":"emergencyShutdown","nameLocation":"2056:17:23","nodeType":"VariableDeclaration","scope":7921,"src":"2044:29:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5971,"name":"bool","nodeType":"ElementaryTypeName","src":"2044:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"4067cb9e","id":5979,"mutability":"mutable","name":"strategies","nameLocation":"2140:10:23","nodeType":"VariableDeclaration","scope":7921,"src":"2079:71:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams))"},"typeName":{"id":5978,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5973,"name":"uint16","nodeType":"ElementaryTypeName","src":"2087:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"2079:53:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5977,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5974,"name":"address","nodeType":"ElementaryTypeName","src":"2105:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2097:34:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5976,"nodeType":"UserDefinedTypeName","pathNode":{"id":5975,"name":"StrategyParams","nameLocations":["2116:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8138,"src":"2116:14:23"},"referencedDeclaration":8138,"src":"2116:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams"}}}},"visibility":"public"},{"constant":false,"functionSelector":"ab73ce46","id":5981,"mutability":"mutable","name":"withdrawEpoch","nameLocation":"2171:13:23","nodeType":"VariableDeclaration","scope":7921,"src":"2156:28:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2156:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":5986,"mutability":"mutable","name":"_strategiesByChainId","nameLocation":"2244:20:23","nodeType":"VariableDeclaration","scope":7921,"src":"2191:73:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_struct$_AddressSet_$5554_storage_$","typeString":"mapping(uint16 => struct EnumerableSet.AddressSet)"},"typeName":{"id":5985,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5982,"name":"uint16","nodeType":"ElementaryTypeName","src":"2199:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"2191:43:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_struct$_AddressSet_$5554_storage_$","typeString":"mapping(uint16 => struct EnumerableSet.AddressSet)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5984,"nodeType":"UserDefinedTypeName","pathNode":{"id":5983,"name":"EnumerableSet.AddressSet","nameLocations":["2209:13:23","2223:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"2209:24:23"},"referencedDeclaration":5554,"src":"2209:24:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"internal"},{"constant":false,"id":5989,"mutability":"mutable","name":"_supportedChainIds","nameLocation":"2301:18:23","nodeType":"VariableDeclaration","scope":7921,"src":"2270:49:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5988,"nodeType":"UserDefinedTypeName","pathNode":{"id":5987,"name":"EnumerableSet.UintSet","nameLocations":["2270:13:23","2284:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5711,"src":"2270:21:23"},"referencedDeclaration":5711,"src":"2270:21:23","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"functionSelector":"5fe1a027","id":5994,"mutability":"mutable","name":"withdrawEpochs","nameLocation":"2366:14:23","nodeType":"VariableDeclaration","scope":7921,"src":"2325:55:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch)"},"typeName":{"id":5993,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5990,"name":"uint256","nodeType":"ElementaryTypeName","src":"2333:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2325:33:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5992,"nodeType":"UserDefinedTypeName","pathNode":{"id":5991,"name":"WithdrawEpoch","nameLocations":["2344:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":8174,"src":"2344:13:23"},"referencedDeclaration":8174,"src":"2344:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage_ptr","typeString":"struct WithdrawEpoch"}}},"visibility":"public"},{"constant":false,"id":6002,"mutability":"mutable","name":"_usedNonces","nameLocation":"2467:11:23","nodeType":"VariableDeclaration","scope":7921,"src":"2386:92:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(uint16 => mapping(address => mapping(uint256 => bool)))"},"typeName":{"id":6001,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5995,"name":"uint16","nodeType":"ElementaryTypeName","src":"2394:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"2386:63:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(uint16 => mapping(address => mapping(uint256 => bool)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6000,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5996,"name":"address","nodeType":"ElementaryTypeName","src":"2412:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2404:44:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5999,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5997,"name":"uint256","nodeType":"ElementaryTypeName","src":"2431:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2423:24:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5998,"name":"bool","nodeType":"ElementaryTypeName","src":"2442:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}}},"visibility":"internal"},{"constant":false,"functionSelector":"0517cb76","id":6004,"mutability":"mutable","name":"sgRouter","nameLocation":"2500:8:23","nodeType":"VariableDeclaration","scope":7921,"src":"2485:23:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6003,"name":"address","nodeType":"ElementaryTypeName","src":"2485:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":6021,"nodeType":"Block","src":"2541:92:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6007,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2559:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2563:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2559:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6009,"name":"governance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"2573:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2559:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6011,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2587:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2591:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2587:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6013,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"2601:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2587:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2559:49:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5631","id":6017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2610:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a2283","typeString":"literal_string \"V1\""},"value":"V1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a2283","typeString":"literal_string \"V1\""}],"id":6006,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2551:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:64:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6019,"nodeType":"ExpressionStatement","src":"2551:64:23"},{"id":6020,"nodeType":"PlaceholderStatement","src":"2625:1:23"}]},"id":6022,"name":"onlyAuthorized","nameLocation":"2524:14:23","nodeType":"ModifierDefinition","parameters":{"id":6005,"nodeType":"ParameterList","parameters":[],"src":"2538:2:23"},"src":"2515:118:23","virtual":false,"visibility":"internal"},{"body":{"id":6041,"nodeType":"Block","src":"2693:89:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":6029,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"2711:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6031,"indexExpression":{"id":6030,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"2722:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2711:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6033,"indexExpression":{"id":6032,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6026,"src":"2732:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2711:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2743:10:23","memberName":"activation","nodeType":"MemberAccess","referencedDeclaration":8123,"src":"2711:42:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2756:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2711:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5632","id":6037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2759:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f","typeString":"literal_string \"V2\""},"value":"V2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f","typeString":"literal_string \"V2\""}],"id":6028,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2703:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2703:61:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6039,"nodeType":"ExpressionStatement","src":"2703:61:23"},{"id":6040,"nodeType":"PlaceholderStatement","src":"2774:1:23"}]},"id":6042,"name":"isAction","nameLocation":"2648:8:23","nodeType":"ModifierDefinition","parameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6024,"mutability":"mutable","name":"_chainId","nameLocation":"2664:8:23","nodeType":"VariableDeclaration","scope":6042,"src":"2657:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6023,"name":"uint16","nodeType":"ElementaryTypeName","src":"2657:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6026,"mutability":"mutable","name":"_strategy","nameLocation":"2682:9:23","nodeType":"VariableDeclaration","scope":6042,"src":"2674:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6025,"name":"address","nodeType":"ElementaryTypeName","src":"2674:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2656:36:23"},"src":"2639:143:23","virtual":false,"visibility":"internal"},{"body":{"id":6061,"nodeType":"Block","src":"2843:90:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":6049,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"2861:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6051,"indexExpression":{"id":6050,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6044,"src":"2872:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2861:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6053,"indexExpression":{"id":6052,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6046,"src":"2882:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2861:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2893:10:23","memberName":"activation","nodeType":"MemberAccess","referencedDeclaration":8123,"src":"2861:42:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2907:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2861:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5633","id":6057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2910:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ade54ca82b345967b61d43a7b6e1c256d140cceb65202e7117104371c17959c","typeString":"literal_string \"V3\""},"value":"V3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ade54ca82b345967b61d43a7b6e1c256d140cceb65202e7117104371c17959c","typeString":"literal_string \"V3\""}],"id":6048,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2853:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2853:62:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6059,"nodeType":"ExpressionStatement","src":"2853:62:23"},{"id":6060,"nodeType":"PlaceholderStatement","src":"2925:1:23"}]},"id":6062,"name":"nonAction","nameLocation":"2797:9:23","nodeType":"ModifierDefinition","parameters":{"id":6047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6044,"mutability":"mutable","name":"_chainId","nameLocation":"2814:8:23","nodeType":"VariableDeclaration","scope":6062,"src":"2807:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6043,"name":"uint16","nodeType":"ElementaryTypeName","src":"2807:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6046,"mutability":"mutable","name":"_strategy","nameLocation":"2832:9:23","nodeType":"VariableDeclaration","scope":6062,"src":"2824:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6045,"name":"address","nodeType":"ElementaryTypeName","src":"2824:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2806:36:23"},"src":"2788:145:23","virtual":false,"visibility":"internal"},{"body":{"id":6074,"nodeType":"Block","src":"2969:84:23","statements":[{"expression":{"arguments":[{"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2987:41:23","subExpression":{"expression":{"baseExpression":{"id":6065,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"2988:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6067,"indexExpression":{"id":6066,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"3003:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2988:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3018:10:23","memberName":"inProgress","nodeType":"MemberAccess","referencedDeclaration":8157,"src":"2988:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5634","id":6070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3030:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_936a052e832d05db833c1fb152ee9d04cb963f54db694a4cc58e037932bdbf61","typeString":"literal_string \"V4\""},"value":"V4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_936a052e832d05db833c1fb152ee9d04cb963f54db694a4cc58e037932bdbf61","typeString":"literal_string \"V4\""}],"id":6064,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2979:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2979:56:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6072,"nodeType":"ExpressionStatement","src":"2979:56:23"},{"id":6073,"nodeType":"PlaceholderStatement","src":"3045:1:23"}]},"id":6075,"name":"WithdrawInProgress","nameLocation":"2948:18:23","nodeType":"ModifierDefinition","parameters":{"id":6063,"nodeType":"ParameterList","parameters":[],"src":"2966:2:23"},"src":"2939:114:23","virtual":false,"visibility":"internal"},{"baseFunctions":[1850],"body":{"id":6090,"nodeType":"Block","src":"3124:67:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"id":6084,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"3166:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":6083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3158:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6082,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:23","typeDescriptions":{}}},"id":6085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3158:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6081,"name":"ERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"3141:16:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Upgradeable_$2367_$","typeString":"type(contract ERC20Upgradeable)"}},"id":6086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC20Upgradeable_$2367","typeString":"contract ERC20Upgradeable"}},"id":6087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:8:23","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"3141:41:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":6088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6080,"id":6089,"nodeType":"Return","src":"3134:50:23"}]},"functionSelector":"313ce567","id":6091,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3068:8:23","nodeType":"FunctionDefinition","overrides":{"id":6077,"nodeType":"OverrideSpecifier","overrides":[],"src":"3099:8:23"},"parameters":{"id":6076,"nodeType":"ParameterList","parameters":[],"src":"3076:2:23"},"returnParameters":{"id":6080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6091,"src":"3117:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6078,"name":"uint8","nodeType":"ElementaryTypeName","src":"3117:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3116:7:23"},"scope":7921,"src":"3059:132:23","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[8253],"body":{"id":6110,"nodeType":"Block","src":"3253:68:23","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":6105,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3300:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":6104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3292:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6103,"name":"address","nodeType":"ElementaryTypeName","src":"3292:7:23","typeDescriptions":{}}},"id":6106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3292:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3306:7:23","memberName":"balance","nodeType":"MemberAccess","src":"3292:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":6099,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3271:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3275:6:23","memberName":"sender","nodeType":"MemberAccess","src":"3271:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3263:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":6097,"name":"address","nodeType":"ElementaryTypeName","src":"3263:8:23","stateMutability":"payable","typeDescriptions":{}}},"id":6101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3263:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3283:8:23","memberName":"transfer","nodeType":"MemberAccess","src":"3263:28:23","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3263:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6109,"nodeType":"ExpressionStatement","src":"3263:51:23"}]},"functionSelector":"2d606843","id":6111,"implemented":true,"kind":"function","modifiers":[{"id":6095,"kind":"modifierInvocation","modifierName":{"id":6094,"name":"onlyAuthorized","nameLocations":["3238:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"3238:14:23"},"nodeType":"ModifierInvocation","src":"3238:14:23"}],"name":"revokeFunds","nameLocation":"3206:11:23","nodeType":"FunctionDefinition","overrides":{"id":6093,"nodeType":"OverrideSpecifier","overrides":[],"src":"3229:8:23"},"parameters":{"id":6092,"nodeType":"ParameterList","parameters":[],"src":"3217:2:23"},"returnParameters":{"id":6096,"nodeType":"ParameterList","parameters":[],"src":"3253:0:23"},"scope":7921,"src":"3197:124:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6122,"nodeType":"Block","src":"3420:55:23","statements":[{"expression":{"id":6120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6118,"name":"emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"3430:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6119,"name":"_emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6113,"src":"3450:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3430:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6121,"nodeType":"ExpressionStatement","src":"3430:38:23"}]},"functionSelector":"14c64402","id":6123,"implemented":true,"kind":"function","modifiers":[{"id":6116,"kind":"modifierInvocation","modifierName":{"id":6115,"name":"onlyAuthorized","nameLocations":["3405:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"3405:14:23"},"nodeType":"ModifierInvocation","src":"3405:14:23"}],"name":"setEmergencyShutdown","nameLocation":"3336:20:23","nodeType":"FunctionDefinition","parameters":{"id":6114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6113,"mutability":"mutable","name":"_emergencyShutdown","nameLocation":"3371:18:23","nodeType":"VariableDeclaration","scope":6123,"src":"3366:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6112,"name":"bool","nodeType":"ElementaryTypeName","src":"3366:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3356:39:23"},"returnParameters":{"id":6117,"nodeType":"ParameterList","parameters":[],"src":"3420:0:23"},"scope":7921,"src":"3327:148:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6134,"nodeType":"Block","src":"3552:44:23","statements":[{"expression":{"id":6132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6130,"name":"governance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"3562:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6131,"name":"_newGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6125,"src":"3575:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3562:27:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6133,"nodeType":"ExpressionStatement","src":"3562:27:23"}]},"functionSelector":"ab033ea9","id":6135,"implemented":true,"kind":"function","modifiers":[{"id":6128,"kind":"modifierInvocation","modifierName":{"id":6127,"name":"onlyAuthorized","nameLocations":["3537:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"3537:14:23"},"nodeType":"ModifierInvocation","src":"3537:14:23"}],"name":"setGovernance","nameLocation":"3490:13:23","nodeType":"FunctionDefinition","parameters":{"id":6126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6125,"mutability":"mutable","name":"_newGovernance","nameLocation":"3512:14:23","nodeType":"VariableDeclaration","scope":6135,"src":"3504:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6124,"name":"address","nodeType":"ElementaryTypeName","src":"3504:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3503:24:23"},"returnParameters":{"id":6129,"nodeType":"ParameterList","parameters":[],"src":"3552:0:23"},"scope":7921,"src":"3481:115:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6155,"nodeType":"Block","src":"3740:76:23","statements":[{"expression":{"id":6153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6146,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"3750:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6149,"indexExpression":{"id":6147,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6137,"src":"3761:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3750:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6150,"indexExpression":{"id":6148,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6139,"src":"3771:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3750:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3782:10:23","memberName":"strategist","nodeType":"MemberAccess","referencedDeclaration":8137,"src":"3750:42:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6152,"name":"_newStrategist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"3795:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3750:59:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6154,"nodeType":"ExpressionStatement","src":"3750:59:23"}]},"functionSelector":"dde4f08e","id":6156,"implemented":true,"kind":"function","modifiers":[{"id":6144,"kind":"modifierInvocation","modifierName":{"id":6143,"name":"onlyAuthorized","nameLocations":["3725:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"3725:14:23"},"nodeType":"ModifierInvocation","src":"3725:14:23"}],"name":"setStrategist","nameLocation":"3612:13:23","nodeType":"FunctionDefinition","parameters":{"id":6142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6137,"mutability":"mutable","name":"_chainId","nameLocation":"3642:8:23","nodeType":"VariableDeclaration","scope":6156,"src":"3635:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6136,"name":"uint16","nodeType":"ElementaryTypeName","src":"3635:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6139,"mutability":"mutable","name":"_strategy","nameLocation":"3668:9:23","nodeType":"VariableDeclaration","scope":6156,"src":"3660:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6138,"name":"address","nodeType":"ElementaryTypeName","src":"3660:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6141,"mutability":"mutable","name":"_newStrategist","nameLocation":"3695:14:23","nodeType":"VariableDeclaration","scope":6156,"src":"3687:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6140,"name":"address","nodeType":"ElementaryTypeName","src":"3687:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3625:90:23"},"returnParameters":{"id":6145,"nodeType":"ParameterList","parameters":[],"src":"3740:0:23"},"scope":7921,"src":"3603:213:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8258],"body":{"id":6167,"nodeType":"Block","src":"3885:47:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6162,"name":"totalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5970,"src":"3902:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6163,"name":"totalIdle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"3914:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3914:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3902:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6161,"id":6166,"nodeType":"Return","src":"3895:30:23"}]},"functionSelector":"01e1d114","id":6168,"implemented":true,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"3832:11:23","nodeType":"FunctionDefinition","overrides":{"id":6158,"nodeType":"OverrideSpecifier","overrides":[],"src":"3858:8:23"},"parameters":{"id":6157,"nodeType":"ParameterList","parameters":[],"src":"3843:2:23"},"returnParameters":{"id":6161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6168,"src":"3876:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6159,"name":"uint256","nodeType":"ElementaryTypeName","src":"3876:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3875:9:23"},"scope":7921,"src":"3823:109:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6181,"nodeType":"Block","src":"3989:54:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":6177,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4030:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":6176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4022:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6175,"name":"address","nodeType":"ElementaryTypeName","src":"4022:7:23","typeDescriptions":{}}},"id":6178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6173,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"4006:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4012:9:23","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2877,"src":"4006:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4006:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6172,"id":6180,"nodeType":"Return","src":"3999:37:23"}]},"functionSelector":"9aa7df94","id":6182,"implemented":true,"kind":"function","modifiers":[],"name":"totalIdle","nameLocation":"3947:9:23","nodeType":"FunctionDefinition","parameters":{"id":6169,"nodeType":"ParameterList","parameters":[],"src":"3956:2:23"},"returnParameters":{"id":6172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6182,"src":"3980:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3980:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:9:23"},"scope":7921,"src":"3938:105:23","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[8267],"body":{"id":6197,"nodeType":"Block","src":"4161:53:23","statements":[{"expression":{"arguments":[{"id":6193,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"4187:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6194,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6186,"src":"4196:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6192,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"4178:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address) returns (uint256)"}},"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4178:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6191,"id":6196,"nodeType":"Return","src":"4171:36:23"}]},"functionSelector":"6e553f65","id":6198,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"4058:7:23","nodeType":"FunctionDefinition","overrides":{"id":6188,"nodeType":"OverrideSpecifier","overrides":[],"src":"4134:8:23"},"parameters":{"id":6187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6184,"mutability":"mutable","name":"_amount","nameLocation":"4083:7:23","nodeType":"VariableDeclaration","scope":6198,"src":"4075:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6183,"name":"uint256","nodeType":"ElementaryTypeName","src":"4075:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6186,"mutability":"mutable","name":"_recipient","nameLocation":"4108:10:23","nodeType":"VariableDeclaration","scope":6198,"src":"4100:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6185,"name":"address","nodeType":"ElementaryTypeName","src":"4100:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4065:59:23"},"returnParameters":{"id":6191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6198,"src":"4152:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6189,"name":"uint256","nodeType":"ElementaryTypeName","src":"4152:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4151:9:23"},"scope":7921,"src":"4049:165:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8276],"body":{"id":6214,"nodeType":"Block","src":"4344:68:23","statements":[{"expression":{"arguments":[{"id":6209,"name":"_maxShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"4372:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6210,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"4384:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6211,"name":"_maxLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"4396:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6208,"name":"_initiateWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7178,"src":"4354:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4354:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6213,"nodeType":"ExpressionStatement","src":"4354:51:23"}]},"functionSelector":"e63697c8","id":6215,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"4229:8:23","nodeType":"FunctionDefinition","overrides":{"id":6206,"nodeType":"OverrideSpecifier","overrides":[],"src":"4335:8:23"},"parameters":{"id":6205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6200,"mutability":"mutable","name":"_maxShares","nameLocation":"4255:10:23","nodeType":"VariableDeclaration","scope":6215,"src":"4247:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6199,"name":"uint256","nodeType":"ElementaryTypeName","src":"4247:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6202,"mutability":"mutable","name":"_recipient","nameLocation":"4283:10:23","nodeType":"VariableDeclaration","scope":6215,"src":"4275:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6201,"name":"address","nodeType":"ElementaryTypeName","src":"4275:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6204,"mutability":"mutable","name":"_maxLoss","nameLocation":"4311:8:23","nodeType":"VariableDeclaration","scope":6215,"src":"4303:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6203,"name":"uint256","nodeType":"ElementaryTypeName","src":"4303:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4237:88:23"},"returnParameters":{"id":6207,"nodeType":"ParameterList","parameters":[],"src":"4344:0:23"},"scope":7921,"src":"4220:192:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8289],"body":{"id":6282,"nodeType":"Block","src":"4650:548:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6236,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"4668:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6237,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"4685:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4668:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31305f303030","id":6239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4699:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"src":"4668:37:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5635","id":6241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4707:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_81685035bf6e9d5f45bbedb20e2e5ca3f52663efad8040454930d989b0bd1f49","typeString":"literal_string \"V5\""},"value":"V5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_81685035bf6e9d5f45bbedb20e2e5ca3f52663efad8040454930d989b0bd1f49","typeString":"literal_string \"V5\""}],"id":6235,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4660:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4660:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6243,"nodeType":"ExpressionStatement","src":"4660:52:23"},{"expression":{"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6244,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"4723:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6247,"indexExpression":{"id":6245,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"4734:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4723:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6248,"indexExpression":{"id":6246,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"4744:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4723:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":6250,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4798:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4804:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"4798:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6252,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"4838:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":6253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4925:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4952:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":6257,"name":"_performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"4983:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6258,"name":"_strategist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6225,"src":"5024:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6249,"name":"StrategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8138,"src":"4757:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StrategyParams_$8138_storage_ptr_$","typeString":"type(struct StrategyParams storage pointer)"}},"id":6259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4786:10:23","4827:9:23","4862:9:23","4888:9:23","4914:9:23","4940:10:23","4967:14:23","5012:10:23"],"names":["activation","debtRatio","totalDebt","totalGain","totalLoss","lastReport","performanceFee","strategist"],"nodeType":"FunctionCall","src":"4757:289:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"src":"4723:323:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6261,"nodeType":"ExpressionStatement","src":"4723:323:23"},{"expression":{"arguments":[{"id":6266,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"5092:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":6262,"name":"_strategiesByChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5986,"src":"5057:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_struct$_AddressSet_$5554_storage_$","typeString":"mapping(uint16 => struct EnumerableSet.AddressSet storage ref)"}},"id":6264,"indexExpression":{"id":6263,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5078:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5057:30:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":6265,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5088:3:23","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":5581,"src":"5057:34:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$5554_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$5554_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5057:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6268,"nodeType":"ExpressionStatement","src":"5057:45:23"},{"expression":{"arguments":[{"arguments":[{"id":6274,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5143:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":6273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5135:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6272,"name":"uint256","nodeType":"ElementaryTypeName","src":"5135:7:23","typeDescriptions":{}}},"id":6275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5135:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6269,"name":"_supportedChainIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"5112:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":6271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5131:3:23","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":5732,"src":"5112:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UintSet_$5711_storage_ptr_$_t_uint256_$returns$_t_bool_$attached_to$_t_struct$_UintSet_$5711_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) returns (bool)"}},"id":6276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6277,"nodeType":"ExpressionStatement","src":"5112:41:23"},{"expression":{"id":6280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6278,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"5163:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6279,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"5181:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5163:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6281,"nodeType":"ExpressionStatement","src":"5163:28:23"}]},"functionSelector":"52106a49","id":6283,"implemented":true,"kind":"function","modifiers":[{"id":6229,"kind":"modifierInvocation","modifierName":{"id":6228,"name":"onlyAuthorized","nameLocations":["4605:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"4605:14:23"},"nodeType":"ModifierInvocation","src":"4605:14:23"},{"arguments":[{"id":6231,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"4630:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6232,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"4640:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6233,"kind":"modifierInvocation","modifierName":{"id":6230,"name":"nonAction","nameLocations":["4620:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":6062,"src":"4620:9:23"},"nodeType":"ModifierInvocation","src":"4620:30:23"}],"name":"addStrategy","nameLocation":"4427:11:23","nodeType":"FunctionDefinition","overrides":{"id":6227,"nodeType":"OverrideSpecifier","overrides":[],"src":"4596:8:23"},"parameters":{"id":6226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6217,"mutability":"mutable","name":"_chainId","nameLocation":"4455:8:23","nodeType":"VariableDeclaration","scope":6283,"src":"4448:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6216,"name":"uint16","nodeType":"ElementaryTypeName","src":"4448:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6219,"mutability":"mutable","name":"_strategy","nameLocation":"4481:9:23","nodeType":"VariableDeclaration","scope":6283,"src":"4473:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6218,"name":"address","nodeType":"ElementaryTypeName","src":"4473:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6221,"mutability":"mutable","name":"_debtRatio","nameLocation":"4508:10:23","nodeType":"VariableDeclaration","scope":6283,"src":"4500:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6220,"name":"uint256","nodeType":"ElementaryTypeName","src":"4500:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6223,"mutability":"mutable","name":"_performanceFee","nameLocation":"4536:15:23","nodeType":"VariableDeclaration","scope":6283,"src":"4528:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6222,"name":"uint256","nodeType":"ElementaryTypeName","src":"4528:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6225,"mutability":"mutable","name":"_strategist","nameLocation":"4569:11:23","nodeType":"VariableDeclaration","scope":6283,"src":"4561:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6224,"name":"address","nodeType":"ElementaryTypeName","src":"4561:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4438:148:23"},"returnParameters":{"id":6234,"nodeType":"ParameterList","parameters":[],"src":"4650:0:23"},"scope":7921,"src":"4418:780:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6297,"nodeType":"Block","src":"5319:61:23","statements":[{"expression":{"arguments":[{"id":6293,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6285,"src":"5353:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6294,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"5363:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6292,"name":"_debtOutstanding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7486,"src":"5336:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint16_$_t_address_$returns$_t_uint256_$","typeString":"function (uint16,address) view returns (uint256)"}},"id":6295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5336:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6291,"id":6296,"nodeType":"Return","src":"5329:44:23"}]},"functionSelector":"e7fda061","id":6298,"implemented":true,"kind":"function","modifiers":[],"name":"debtOutstanding","nameLocation":"5213:15:23","nodeType":"FunctionDefinition","parameters":{"id":6288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6285,"mutability":"mutable","name":"_chainId","nameLocation":"5245:8:23","nodeType":"VariableDeclaration","scope":6298,"src":"5238:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6284,"name":"uint16","nodeType":"ElementaryTypeName","src":"5238:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6287,"mutability":"mutable","name":"_strategy","nameLocation":"5271:9:23","nodeType":"VariableDeclaration","scope":6298,"src":"5263:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6286,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5228:58:23"},"returnParameters":{"id":6291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6298,"src":"5310:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6289,"name":"uint256","nodeType":"ElementaryTypeName","src":"5310:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5309:9:23"},"scope":7921,"src":"5204:176:23","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6312,"nodeType":"Block","src":"5501:61:23","statements":[{"expression":{"arguments":[{"id":6308,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6300,"src":"5535:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6309,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6302,"src":"5545:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6307,"name":"_creditAvailable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"5518:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint16_$_t_address_$returns$_t_uint256_$","typeString":"function (uint16,address) view returns (uint256)"}},"id":6310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6306,"id":6311,"nodeType":"Return","src":"5511:44:23"}]},"functionSelector":"01dc2eb1","id":6313,"implemented":true,"kind":"function","modifiers":[],"name":"creditAvailable","nameLocation":"5395:15:23","nodeType":"FunctionDefinition","parameters":{"id":6303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6300,"mutability":"mutable","name":"_chainId","nameLocation":"5427:8:23","nodeType":"VariableDeclaration","scope":6313,"src":"5420:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6299,"name":"uint16","nodeType":"ElementaryTypeName","src":"5420:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6302,"mutability":"mutable","name":"_strategy","nameLocation":"5453:9:23","nodeType":"VariableDeclaration","scope":6313,"src":"5445:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6301,"name":"address","nodeType":"ElementaryTypeName","src":"5445:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5410:58:23"},"returnParameters":{"id":6306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6313,"src":"5492:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6304,"name":"uint256","nodeType":"ElementaryTypeName","src":"5492:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5491:9:23"},"scope":7921,"src":"5386:176:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8292],"body":{"id":6512,"nodeType":"Block","src":"5649:2190:23","statements":[{"assignments":[6322],"declarations":[{"constant":false,"id":6322,"mutability":"mutable","name":"withdrawValue","nameLocation":"5668:13:23","nodeType":"VariableDeclaration","scope":6512,"src":"5660:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6321,"name":"uint256","nodeType":"ElementaryTypeName","src":"5660:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6324,"initialValue":{"hexValue":"30","id":6323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5684:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5660:25:23"},{"body":{"id":6356,"nodeType":"Block","src":"5817:175:23","statements":[{"assignments":[6341],"declarations":[{"constant":false,"id":6341,"mutability":"mutable","name":"request","nameLocation":"5855:7:23","nodeType":"VariableDeclaration","scope":6356,"src":"5831:31:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"},"typeName":{"id":6340,"nodeType":"UserDefinedTypeName","pathNode":{"id":6339,"name":"WithdrawRequest","nameLocations":["5831:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":8151,"src":"5831:15:23"},"referencedDeclaration":8151,"src":"5831:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"}},"visibility":"internal"}],"id":6348,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":6342,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"5865:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6344,"indexExpression":{"id":6343,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"5880:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5865:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5912:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"5865:55:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":6347,"indexExpression":{"id":6346,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6326,"src":"5921:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5865:58:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage","typeString":"struct WithdrawRequest storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5831:92:23"},{"expression":{"id":6354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6349,"name":"withdrawValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6322,"src":"5937:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"expression":{"id":6351,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6341,"src":"5966:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":6352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5974:6:23","memberName":"shares","nodeType":"MemberAccess","referencedDeclaration":8144,"src":"5966:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6350,"name":"_shareValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7203,"src":"5954:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":6353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5954:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5937:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6355,"nodeType":"ExpressionStatement","src":"5937:44:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6326,"src":"5740:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"baseExpression":{"id":6330,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"5744:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6332,"indexExpression":{"id":6331,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"5759:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5744:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5774:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"5744:38:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":6334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5783:6:23","memberName":"length","nodeType":"MemberAccess","src":"5744:45:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5740:49:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6357,"initializationExpression":{"assignments":[6326],"declarations":[{"constant":false,"id":6326,"mutability":"mutable","name":"i","nameLocation":"5721:1:23","nodeType":"VariableDeclaration","scope":6357,"src":"5713:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6325,"name":"uint256","nodeType":"ElementaryTypeName","src":"5713:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6328,"initialValue":{"hexValue":"30","id":6327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5725:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5713:13:23"},"loopExpression":{"expression":{"id":6337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5803:3:23","subExpression":{"id":6336,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6326,"src":"5803:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6338,"nodeType":"ExpressionStatement","src":"5803:3:23"},"nodeType":"ForStatement","src":"5695:297:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6358,"name":"withdrawValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6322,"src":"6006:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6359,"name":"totalIdle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"6023:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6006:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6367,"nodeType":"IfStatement","src":"6002:102:23","trueBody":{"id":6366,"nodeType":"Block","src":"6036:68:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6362,"name":"_fulfillWithdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7663,"src":"6050:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6050:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6364,"nodeType":"ExpressionStatement","src":"6050:23:23"},{"functionReturnParameters":6320,"id":6365,"nodeType":"Return","src":"6087:7:23"}]}},{"assignments":[6369],"declarations":[{"constant":false,"id":6369,"mutability":"mutable","name":"amountNeeded","nameLocation":"6122:12:23","nodeType":"VariableDeclaration","scope":6512,"src":"6114:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6368,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6374,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6370,"name":"withdrawValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6322,"src":"6137:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6371,"name":"totalIdle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"6153:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6153:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6137:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6114:50:23"},{"assignments":[6376],"declarations":[{"constant":false,"id":6376,"mutability":"mutable","name":"strategyRequested","nameLocation":"6182:17:23","nodeType":"VariableDeclaration","scope":6512,"src":"6174:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6375,"name":"uint256","nodeType":"ElementaryTypeName","src":"6174:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6378,"initialValue":{"hexValue":"30","id":6377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6202:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6174:29:23"},{"body":{"id":6496,"nodeType":"Block","src":"6338:1362:23","statements":[{"assignments":[6396],"declarations":[{"constant":false,"id":6396,"mutability":"mutable","name":"chainId","nameLocation":"6359:7:23","nodeType":"VariableDeclaration","scope":6496,"src":"6352:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6395,"name":"uint16","nodeType":"ElementaryTypeName","src":"6352:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":6404,"initialValue":{"arguments":[{"arguments":[{"id":6401,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"6398:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6399,"name":"_supportedChainIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"6376:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":6400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6395:2:23","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":5810,"src":"6376:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UintSet_$5711_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_UintSet_$5711_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer,uint256) view returns (uint256)"}},"id":6402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6376:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6369:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":6397,"name":"uint16","nodeType":"ElementaryTypeName","src":"6369:6:23","typeDescriptions":{}}},"id":6403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6369:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"6352:49:23"},{"assignments":[6409],"declarations":[{"constant":false,"id":6409,"mutability":"mutable","name":"strategiesByChainId","nameLocation":"6464:19:23","nodeType":"VariableDeclaration","scope":6496,"src":"6415:68:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":6408,"nodeType":"UserDefinedTypeName","pathNode":{"id":6407,"name":"EnumerableSet.AddressSet","nameLocations":["6415:13:23","6429:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":5554,"src":"6415:24:23"},"referencedDeclaration":5554,"src":"6415:24:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"id":6413,"initialValue":{"baseExpression":{"id":6410,"name":"_strategiesByChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5986,"src":"6486:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_struct$_AddressSet_$5554_storage_$","typeString":"mapping(uint16 => struct EnumerableSet.AddressSet storage ref)"}},"id":6412,"indexExpression":{"id":6411,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"6507:7:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6486:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6415:100:23"},{"body":{"id":6494,"nodeType":"Block","src":"6671:1019:23","statements":[{"assignments":[6431],"declarations":[{"constant":false,"id":6431,"mutability":"mutable","name":"strategy","nameLocation":"6697:8:23","nodeType":"VariableDeclaration","scope":6494,"src":"6689:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6430,"name":"address","nodeType":"ElementaryTypeName","src":"6689:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6436,"initialValue":{"arguments":[{"id":6434,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6731:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6432,"name":"strategiesByChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6409,"src":"6708:19:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":6433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6728:2:23","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":5677,"src":"6708:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5554_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$5554_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":6435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6708:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6689:44:23"},{"assignments":[6439],"declarations":[{"constant":false,"id":6439,"mutability":"mutable","name":"params","nameLocation":"6774:6:23","nodeType":"VariableDeclaration","scope":6494,"src":"6751:29:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams"},"typeName":{"id":6438,"nodeType":"UserDefinedTypeName","pathNode":{"id":6437,"name":"StrategyParams","nameLocations":["6751:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8138,"src":"6751:14:23"},"referencedDeclaration":8138,"src":"6751:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams"}},"visibility":"internal"}],"id":6445,"initialValue":{"baseExpression":{"baseExpression":{"id":6440,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"6783:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6442,"indexExpression":{"id":6441,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"6794:7:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6783:19:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6444,"indexExpression":{"id":6443,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6431,"src":"6803:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6783:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6751:61:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6446,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6439,"src":"6835:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams storage pointer"}},"id":6447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6842:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"6835:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6855:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6835:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6452,"nodeType":"IfStatement","src":"6831:76:23","trueBody":{"id":6451,"nodeType":"Block","src":"6858:49:23","statements":[{"id":6450,"nodeType":"Continue","src":"6880:8:23"}]}},{"assignments":[6454],"declarations":[{"constant":false,"id":6454,"mutability":"mutable","name":"strategyRequest","nameLocation":"6933:15:23","nodeType":"VariableDeclaration","scope":6494,"src":"6925:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6453,"name":"uint256","nodeType":"ElementaryTypeName","src":"6925:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6461,"initialValue":{"arguments":[{"id":6457,"name":"amountNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"6981:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6458,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6439,"src":"7015:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams storage pointer"}},"id":6459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7022:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"7015:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6455,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"6951:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":6456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6956:3:23","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":4300,"src":"6951:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6951:98:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6925:124:23"},{"expression":{"id":6471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":6462,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"7067:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6464,"indexExpression":{"id":6463,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"7082:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7067:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7097:15:23","memberName":"requestedAmount","nodeType":"MemberAccess","referencedDeclaration":8173,"src":"7067:45:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(address => uint256))"}},"id":6467,"indexExpression":{"id":6466,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"7113:7:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7067:54:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6469,"indexExpression":{"id":6468,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6431,"src":"7143:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7067:102:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6470,"name":"strategyRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6454,"src":"7172:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7067:120:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6472,"nodeType":"ExpressionStatement","src":"7067:120:23"},{"expression":{"id":6475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6473,"name":"amountNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"7205:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6474,"name":"strategyRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6454,"src":"7221:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7205:31:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6476,"nodeType":"ExpressionStatement","src":"7205:31:23"},{"expression":{"arguments":[{"id":6478,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"7299:7:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6479,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6431,"src":"7328:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6482,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"7394:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":6483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7406:19:23","memberName":"WithdrawSomeRequest","nodeType":"MemberAccess","referencedDeclaration":8068,"src":"7394:31:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},{"arguments":[{"id":6485,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"7505:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6486,"name":"strategyRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6454,"src":"7556:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6484,"name":"WithdrawSomeRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8078,"src":"7451:19:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_WithdrawSomeRequest_$8078_storage_ptr_$","typeString":"type(struct IStrategyMessages.WithdrawSomeRequest storage pointer)"}},"id":6487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["7501:2:23","7548:6:23"],"names":["id","amount"],"nodeType":"FunctionCall","src":"7451:147:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeRequest_$8078_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},{"typeIdentifier":"t_struct$_WithdrawSomeRequest_$8078_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeRequest memory"}],"expression":{"id":6480,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7358:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7362:6:23","memberName":"encode","nodeType":"MemberAccess","src":"7358:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7358:262:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6477,"name":"_sendMessageToStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7334,"src":"7255:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,address,bytes memory)"}},"id":6489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7255:383:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6490,"nodeType":"ExpressionStatement","src":"7255:383:23"},{"expression":{"id":6492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7656:19:23","subExpression":{"id":6491,"name":"strategyRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6376,"src":"7656:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6493,"nodeType":"ExpressionStatement","src":"7656:19:23"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6418,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6583:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6419,"name":"strategiesByChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6409,"src":"6587:19:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$5554_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":6420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6607:6:23","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":5650,"src":"6587:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$5554_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$5554_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":6421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6587:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6583:32:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6423,"name":"amountNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"6619:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6634:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6619:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6583:52:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6495,"initializationExpression":{"assignments":[6415],"declarations":[{"constant":false,"id":6415,"mutability":"mutable","name":"j","nameLocation":"6560:1:23","nodeType":"VariableDeclaration","scope":6495,"src":"6552:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6414,"name":"uint256","nodeType":"ElementaryTypeName","src":"6552:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6417,"initialValue":{"hexValue":"30","id":6416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6564:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6552:13:23"},"loopExpression":{"expression":{"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6653:3:23","subExpression":{"id":6427,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"6653:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6429,"nodeType":"ExpressionStatement","src":"6653:3:23"},"nodeType":"ForStatement","src":"6530:1160:23"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6383,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"6259:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6384,"name":"_supportedChainIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"6263:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5711_storage","typeString":"struct EnumerableSet.UintSet storage ref"}},"id":6385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6282:6:23","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":5789,"src":"6263:25:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UintSet_$5711_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_UintSet_$5711_storage_ptr_$","typeString":"function (struct EnumerableSet.UintSet storage pointer) view returns (uint256)"}},"id":6386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6263:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6259:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6388,"name":"amountNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"6294:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6309:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6294:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6259:51:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6497,"initializationExpression":{"assignments":[6380],"declarations":[{"constant":false,"id":6380,"mutability":"mutable","name":"i","nameLocation":"6240:1:23","nodeType":"VariableDeclaration","scope":6497,"src":"6232:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6379,"name":"uint256","nodeType":"ElementaryTypeName","src":"6232:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6382,"initialValue":{"hexValue":"30","id":6381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6244:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6232:13:23"},"loopExpression":{"expression":{"id":6393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6324:3:23","subExpression":{"id":6392,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"6324:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6394,"nodeType":"ExpressionStatement","src":"6324:3:23"},"nodeType":"ForStatement","src":"6214:1486:23"},{"expression":{"id":6503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6498,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"7710:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6500,"indexExpression":{"id":6499,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"7725:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7710:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7740:15:23","memberName":"approveExpected","nodeType":"MemberAccess","referencedDeclaration":8159,"src":"7710:45:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6502,"name":"strategyRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6376,"src":"7758:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7710:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6504,"nodeType":"ExpressionStatement","src":"7710:65:23"},{"expression":{"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6505,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"7785:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":6507,"indexExpression":{"id":6506,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"7800:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7785:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":6508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7815:10:23","memberName":"inProgress","nodeType":"MemberAccess","referencedDeclaration":8157,"src":"7785:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7828:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7785:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6511,"nodeType":"ExpressionStatement","src":"7785:47:23"}]},"functionSelector":"ef34253c","id":6513,"implemented":true,"kind":"function","modifiers":[{"id":6317,"kind":"modifierInvocation","modifierName":{"id":6316,"name":"onlyAuthorized","nameLocations":["5615:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"5615:14:23"},"nodeType":"ModifierInvocation","src":"5615:14:23"},{"id":6319,"kind":"modifierInvocation","modifierName":{"id":6318,"name":"WithdrawInProgress","nameLocations":["5630:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":6075,"src":"5630:18:23"},"nodeType":"ModifierInvocation","src":"5630:18:23"}],"name":"handleWithdrawals","nameLocation":"5577:17:23","nodeType":"FunctionDefinition","overrides":{"id":6315,"nodeType":"OverrideSpecifier","overrides":[],"src":"5606:8:23"},"parameters":{"id":6314,"nodeType":"ParameterList","parameters":[],"src":"5594:2:23"},"returnParameters":{"id":6320,"nodeType":"ParameterList","parameters":[],"src":"5649:0:23"},"scope":7921,"src":"5568:2271:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8297],"body":{"id":6526,"nodeType":"Block","src":"7911:53:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":6520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7940:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6521,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[6091],"referencedDeclaration":6091,"src":"7946:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":6522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7946:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7940:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6519,"name":"_shareValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7203,"src":"7928:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":6524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7928:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6518,"id":6525,"nodeType":"Return","src":"7921:36:23"}]},"functionSelector":"99530b06","id":6527,"implemented":true,"kind":"function","modifiers":[],"name":"pricePerShare","nameLocation":"7854:13:23","nodeType":"FunctionDefinition","overrides":{"id":6515,"nodeType":"OverrideSpecifier","overrides":[],"src":"7884:8:23"},"parameters":{"id":6514,"nodeType":"ParameterList","parameters":[],"src":"7867:2:23"},"returnParameters":{"id":6518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6527,"src":"7902:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6516,"name":"uint256","nodeType":"ElementaryTypeName","src":"7902:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7901:9:23"},"scope":7921,"src":"7845:119:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8304],"body":{"id":6542,"nodeType":"Block","src":"8085:53:23","statements":[{"expression":{"arguments":[{"id":6538,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6529,"src":"8111:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6539,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6531,"src":"8121:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6537,"name":"_revokeStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7380,"src":"8095:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$returns$__$","typeString":"function (uint16,address)"}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8095:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6541,"nodeType":"ExpressionStatement","src":"8095:36:23"}]},"functionSelector":"cfbcc644","id":6543,"implemented":true,"kind":"function","modifiers":[{"id":6535,"kind":"modifierInvocation","modifierName":{"id":6534,"name":"onlyAuthorized","nameLocations":["8070:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"8070:14:23"},"nodeType":"ModifierInvocation","src":"8070:14:23"}],"name":"revokeStrategy","nameLocation":"7979:14:23","nodeType":"FunctionDefinition","overrides":{"id":6533,"nodeType":"OverrideSpecifier","overrides":[],"src":"8061:8:23"},"parameters":{"id":6532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6529,"mutability":"mutable","name":"_chainId","nameLocation":"8010:8:23","nodeType":"VariableDeclaration","scope":6543,"src":"8003:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6528,"name":"uint16","nodeType":"ElementaryTypeName","src":"8003:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6531,"mutability":"mutable","name":"_strategy","nameLocation":"8036:9:23","nodeType":"VariableDeclaration","scope":6543,"src":"8028:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6530,"name":"address","nodeType":"ElementaryTypeName","src":"8028:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7993:58:23"},"returnParameters":{"id":6536,"nodeType":"ParameterList","parameters":[],"src":"8085:0:23"},"scope":7921,"src":"7970:168:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8313],"body":{"id":6586,"nodeType":"Block","src":"8296:241:23","statements":[{"expression":{"id":6562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6555,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"8306:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6556,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"8324:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6558,"indexExpression":{"id":6557,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6545,"src":"8335:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8324:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6560,"indexExpression":{"id":6559,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6547,"src":"8345:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8324:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8356:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"8324:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8306:59:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6563,"nodeType":"ExpressionStatement","src":"8306:59:23"},{"expression":{"id":6571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6564,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"8375:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6567,"indexExpression":{"id":6565,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6545,"src":"8386:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8375:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6568,"indexExpression":{"id":6566,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6547,"src":"8396:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8375:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8407:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"8375:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6570,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"8419:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8375:54:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6572,"nodeType":"ExpressionStatement","src":"8375:54:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6574,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"8448:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6575,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"8465:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8448:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31305f303030","id":6577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8479:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"src":"8448:37:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5636","id":6579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c1f3458591aa5dbadd866836ff54b5edb079a2e1de0432c95a85f45437b12bfe","typeString":"literal_string \"V6\""},"value":"V6"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c1f3458591aa5dbadd866836ff54b5edb079a2e1de0432c95a85f45437b12bfe","typeString":"literal_string \"V6\""}],"id":6573,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8440:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8440:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6581,"nodeType":"ExpressionStatement","src":"8440:52:23"},{"expression":{"id":6584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6582,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"8502:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6583,"name":"_debtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"8520:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8502:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6585,"nodeType":"ExpressionStatement","src":"8502:28:23"}]},"functionSelector":"0a97c254","id":6587,"implemented":true,"kind":"function","modifiers":[{"id":6553,"kind":"modifierInvocation","modifierName":{"id":6552,"name":"onlyAuthorized","nameLocations":["8281:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"8281:14:23"},"nodeType":"ModifierInvocation","src":"8281:14:23"}],"name":"updateStrategyDebtRatio","nameLocation":"8153:23:23","nodeType":"FunctionDefinition","overrides":{"id":6551,"nodeType":"OverrideSpecifier","overrides":[],"src":"8272:8:23"},"parameters":{"id":6550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6545,"mutability":"mutable","name":"_chainId","nameLocation":"8193:8:23","nodeType":"VariableDeclaration","scope":6587,"src":"8186:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6544,"name":"uint16","nodeType":"ElementaryTypeName","src":"8186:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6547,"mutability":"mutable","name":"_strategy","nameLocation":"8219:9:23","nodeType":"VariableDeclaration","scope":6587,"src":"8211:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6546,"name":"address","nodeType":"ElementaryTypeName","src":"8211:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6549,"mutability":"mutable","name":"_debtRatio","nameLocation":"8246:10:23","nodeType":"VariableDeclaration","scope":6587,"src":"8238:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6548,"name":"uint256","nodeType":"ElementaryTypeName","src":"8238:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8176:86:23"},"returnParameters":{"id":6554,"nodeType":"ParameterList","parameters":[],"src":"8296:0:23"},"scope":7921,"src":"8144:393:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6675,"nodeType":"Block","src":"8716:887:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6603,"name":"_newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"8734:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8758:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6604,"name":"address","nodeType":"ElementaryTypeName","src":"8750:7:23","typeDescriptions":{}}},"id":6607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8734:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5637","id":6609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8762:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_342cf7819a7b9d6be88d78d5ce1c249df923b883ccee4359201419a6fc792681","typeString":"literal_string \"V7\""},"value":"V7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_342cf7819a7b9d6be88d78d5ce1c249df923b883ccee4359201419a6fc792681","typeString":"literal_string \"V7\""}],"id":6602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8726:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8726:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6611,"nodeType":"ExpressionStatement","src":"8726:41:23"},{"assignments":[6614],"declarations":[{"constant":false,"id":6614,"mutability":"mutable","name":"params","nameLocation":"8800:6:23","nodeType":"VariableDeclaration","scope":6675,"src":"8778:28:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams"},"typeName":{"id":6613,"nodeType":"UserDefinedTypeName","pathNode":{"id":6612,"name":"StrategyParams","nameLocations":["8778:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8138,"src":"8778:14:23"},"referencedDeclaration":8138,"src":"8778:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams"}},"visibility":"internal"}],"id":6620,"initialValue":{"baseExpression":{"baseExpression":{"id":6615,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"8809:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6617,"indexExpression":{"id":6616,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"8820:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8809:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6619,"indexExpression":{"id":6618,"name":"_oldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6591,"src":"8830:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8809:34:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8778:65:23"},{"expression":{"id":6642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6621,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"8853:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6624,"indexExpression":{"id":6622,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"8864:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8853:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6625,"indexExpression":{"id":6623,"name":"_newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"8874:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8853:34:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":6627,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"8931:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8938:10:23","memberName":"lastReport","nodeType":"MemberAccess","referencedDeclaration":8133,"src":"8931:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6629,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"8973:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8980:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"8973:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6631,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"9014:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9021:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"9014:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":6633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9055:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9081:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":6635,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"9108:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9115:10:23","memberName":"lastReport","nodeType":"MemberAccess","referencedDeclaration":8133,"src":"9108:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6637,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"9155:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9162:14:23","memberName":"performanceFee","nodeType":"MemberAccess","referencedDeclaration":8135,"src":"9155:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6639,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6614,"src":"9202:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":6640,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9209:10:23","memberName":"strategist","nodeType":"MemberAccess","referencedDeclaration":8137,"src":"9202:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6626,"name":"StrategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8138,"src":"8890:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StrategyParams_$8138_storage_ptr_$","typeString":"type(struct StrategyParams storage pointer)"}},"id":6641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["8919:10:23","8962:9:23","9003:9:23","9044:9:23","9070:9:23","9096:10:23","9139:14:23","9190:10:23"],"names":["activation","debtRatio","totalDebt","totalGain","totalLoss","lastReport","performanceFee","strategist"],"nodeType":"FunctionCall","src":"8890:340:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"src":"8853:377:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6643,"nodeType":"ExpressionStatement","src":"8853:377:23"},{"expression":{"id":6651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6644,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"9240:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6647,"indexExpression":{"id":6645,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"9251:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9240:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6648,"indexExpression":{"id":6646,"name":"_oldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6591,"src":"9261:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9240:34:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9275:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"9240:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9240:48:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6652,"nodeType":"ExpressionStatement","src":"9240:48:23"},{"expression":{"id":6660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6653,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"9298:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6656,"indexExpression":{"id":6654,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"9309:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9298:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6657,"indexExpression":{"id":6655,"name":"_oldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6591,"src":"9319:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9298:34:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9333:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"9298:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9345:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9298:48:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6661,"nodeType":"ExpressionStatement","src":"9298:48:23"},{"expression":{"arguments":[{"id":6663,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"9393:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6664,"name":"_oldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6591,"src":"9415:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6667,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"9469:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":6668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9481:22:23","memberName":"MigrateStrategyRequest","nodeType":"MemberAccess","referencedDeclaration":8072,"src":"9469:34:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},{"arguments":[{"id":6670,"name":"_newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"9558:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6669,"name":"MigrateStrategyRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8116,"src":"9521:22:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MigrateStrategyRequest_$8116_storage_ptr_$","typeString":"type(struct IStrategyMessages.MigrateStrategyRequest storage pointer)"}},"id":6671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["9545:11:23"],"names":["newStrategy"],"nodeType":"FunctionCall","src":"9521:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MigrateStrategyRequest_$8116_memory_ptr","typeString":"struct IStrategyMessages.MigrateStrategyRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},{"typeIdentifier":"t_struct$_MigrateStrategyRequest_$8116_memory_ptr","typeString":"struct IStrategyMessages.MigrateStrategyRequest memory"}],"expression":{"id":6665,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9441:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9445:6:23","memberName":"encode","nodeType":"MemberAccess","src":"9441:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9441:145:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6662,"name":"_sendMessageToStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7334,"src":"9357:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,address,bytes memory)"}},"id":6673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9357:239:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6674,"nodeType":"ExpressionStatement","src":"9357:239:23"}]},"functionSelector":"a032a712","id":6676,"implemented":true,"kind":"function","modifiers":[{"id":6596,"kind":"modifierInvocation","modifierName":{"id":6595,"name":"onlyAuthorized","nameLocations":["8668:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":6022,"src":"8668:14:23"},"nodeType":"ModifierInvocation","src":"8668:14:23"},{"arguments":[{"id":6598,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6589,"src":"8693:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6599,"name":"_newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"8703:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6600,"kind":"modifierInvocation","modifierName":{"id":6597,"name":"nonAction","nameLocations":["8683:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":6062,"src":"8683:9:23"},"nodeType":"ModifierInvocation","src":"8683:33:23"}],"name":"migrateStrategy","nameLocation":"8552:15:23","nodeType":"FunctionDefinition","parameters":{"id":6594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6589,"mutability":"mutable","name":"_chainId","nameLocation":"8584:8:23","nodeType":"VariableDeclaration","scope":6676,"src":"8577:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6588,"name":"uint16","nodeType":"ElementaryTypeName","src":"8577:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6591,"mutability":"mutable","name":"_oldStrategy","nameLocation":"8610:12:23","nodeType":"VariableDeclaration","scope":6676,"src":"8602:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6590,"name":"address","nodeType":"ElementaryTypeName","src":"8602:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6593,"mutability":"mutable","name":"_newStrategy","nameLocation":"8640:12:23","nodeType":"VariableDeclaration","scope":6676,"src":"8632:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6592,"name":"address","nodeType":"ElementaryTypeName","src":"8632:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8567:91:23"},"returnParameters":{"id":6601,"nodeType":"ParameterList","parameters":[],"src":"8716:0:23"},"scope":7921,"src":"8543:1060:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[7938],"body":{"id":6756,"nodeType":"Block","src":"9810:468:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6693,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"9828:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6696,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"9846:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":6695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9838:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6694,"name":"address","nodeType":"ElementaryTypeName","src":"9838:7:23","typeDescriptions":{}}},"id":6697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9838:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9828:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5638","id":6699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9854:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b46a90f4b21e2dde8c773cf0c4d328fc87a1de68dc62806dc5c03b501b10e8c6","typeString":"literal_string \"V8\""},"value":"V8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b46a90f4b21e2dde8c773cf0c4d328fc87a1de68dc62806dc5c03b501b10e8c6","typeString":"literal_string \"V8\""}],"id":6692,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9820:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9820:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6701,"nodeType":"ExpressionStatement","src":"9820:39:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6703,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9890:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9894:6:23","memberName":"sender","nodeType":"MemberAccess","src":"9890:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6707,"name":"sgRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"9912:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9904:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6705,"name":"address","nodeType":"ElementaryTypeName","src":"9904:7:23","typeDescriptions":{}}},"id":6708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9904:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9890:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6710,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9941:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9945:6:23","memberName":"sender","nodeType":"MemberAccess","src":"9941:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6714,"name":"sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5966,"src":"9963:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}],"id":6713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9955:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6712,"name":"address","nodeType":"ElementaryTypeName","src":"9955:7:23","typeDescriptions":{}}},"id":6715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9955:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9941:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9890:82:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6718,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9992:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9996:6:23","memberName":"sender","nodeType":"MemberAccess","src":"9992:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6720,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"10006:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10006:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9992:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9890:123:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5639","id":6724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10027:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c17c46a066c2510546b70bc409727a4e4af3fc7d2ba2247252fb8067cfbd3da4","typeString":"literal_string \"V9\""},"value":"V9"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c17c46a066c2510546b70bc409727a4e4af3fc7d2ba2247252fb8067cfbd3da4","typeString":"literal_string \"V9\""}],"id":6702,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9869:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9869:172:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6726,"nodeType":"ExpressionStatement","src":"9869:172:23"},{"assignments":[6728],"declarations":[{"constant":false,"id":6728,"mutability":"mutable","name":"srcAddress","nameLocation":"10060:10:23","nodeType":"VariableDeclaration","scope":6756,"src":"10052:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6727,"name":"address","nodeType":"ElementaryTypeName","src":"10052:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6743,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":6737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10137:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"3230","id":6738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10140:2:23","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"id":6735,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6680,"src":"10119:11:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10131:5:23","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":1088,"src":"10119:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":6739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10119:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6733,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10102:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10106:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"10102:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10102:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10094:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":6731,"name":"bytes20","nodeType":"ElementaryTypeName","src":"10094:7:23","typeDescriptions":{}}},"id":6741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10094:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":6730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10073:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6729,"name":"address","nodeType":"ElementaryTypeName","src":"10073:7:23","typeDescriptions":{}}},"id":6742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10073:82:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10052:103:23"},{"expression":{"arguments":[{"id":6745,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6678,"src":"10181:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6746,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6688,"src":"10194:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6747,"name":"_amountLD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6686,"src":"10204:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6744,"name":"_handlePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6892,"src":"10166:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint16,bytes memory,uint256)"}},"id":6748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10166:48:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6749,"nodeType":"ExpressionStatement","src":"10166:48:23"},{"eventCall":{"arguments":[{"id":6751,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"10241:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6752,"name":"_amountLD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6686,"src":"10249:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6753,"name":"srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"10260:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6750,"name":"SgReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8188,"src":"10230:10:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":6754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10230:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6755,"nodeType":"EmitStatement","src":"10225:46:23"}]},"functionSelector":"ab8236f3","id":6757,"implemented":true,"kind":"function","modifiers":[],"name":"sgReceive","nameLocation":"9618:9:23","nodeType":"FunctionDefinition","overrides":{"id":6690,"nodeType":"OverrideSpecifier","overrides":[],"src":"9801:8:23"},"parameters":{"id":6689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6678,"mutability":"mutable","name":"_srcChainId","nameLocation":"9644:11:23","nodeType":"VariableDeclaration","scope":6757,"src":"9637:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6677,"name":"uint16","nodeType":"ElementaryTypeName","src":"9637:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6680,"mutability":"mutable","name":"_srcAddress","nameLocation":"9678:11:23","nodeType":"VariableDeclaration","scope":6757,"src":"9665:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6679,"name":"bytes","nodeType":"ElementaryTypeName","src":"9665:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6757,"src":"9699:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6681,"name":"uint","nodeType":"ElementaryTypeName","src":"9699:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6684,"mutability":"mutable","name":"_token","nameLocation":"9721:6:23","nodeType":"VariableDeclaration","scope":6757,"src":"9713:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6683,"name":"address","nodeType":"ElementaryTypeName","src":"9713:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6686,"mutability":"mutable","name":"_amountLD","nameLocation":"9745:9:23","nodeType":"VariableDeclaration","scope":6757,"src":"9737:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6685,"name":"uint256","nodeType":"ElementaryTypeName","src":"9737:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6688,"mutability":"mutable","name":"_payload","nameLocation":"9777:8:23","nodeType":"VariableDeclaration","scope":6757,"src":"9764:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6687,"name":"bytes","nodeType":"ElementaryTypeName","src":"9764:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9627:164:23"},"returnParameters":{"id":6691,"nodeType":"ParameterList","parameters":[],"src":"9810:0:23"},"scope":7921,"src":"9609:669:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[341],"body":{"id":6787,"nodeType":"Block","src":"10453:139:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6770,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10471:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10475:6:23","memberName":"sender","nodeType":"MemberAccess","src":"10471:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6774,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"10493:10:23","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}],"id":6773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10485:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6772,"name":"address","nodeType":"ElementaryTypeName","src":"10485:7:23","typeDescriptions":{}}},"id":6775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10485:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10471:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563130","id":6777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10506:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9cd8c9dc536286380c07cdfe5f9893dc9aaf35c1c68f6f6166f94a63d6ba2b48","typeString":"literal_string \"V10\""},"value":"V10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9cd8c9dc536286380c07cdfe5f9893dc9aaf35c1c68f6f6166f94a63d6ba2b48","typeString":"literal_string \"V10\""}],"id":6769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10463:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10463:49:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6779,"nodeType":"ExpressionStatement","src":"10463:49:23"},{"expression":{"arguments":[{"id":6781,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6759,"src":"10542:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6782,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"10555:11:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":6783,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6763,"src":"10568:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6784,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6765,"src":"10576:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":6780,"name":"_blockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[875],"referencedDeclaration":875,"src":"10523:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":6785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10523:62:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6786,"nodeType":"ExpressionStatement","src":"10523:62:23"}]},"functionSelector":"001d3567","id":6788,"implemented":true,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"10293:9:23","nodeType":"FunctionDefinition","overrides":{"id":6767,"nodeType":"OverrideSpecifier","overrides":[],"src":"10444:8:23"},"parameters":{"id":6766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6759,"mutability":"mutable","name":"_srcChainId","nameLocation":"10319:11:23","nodeType":"VariableDeclaration","scope":6788,"src":"10312:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6758,"name":"uint16","nodeType":"ElementaryTypeName","src":"10312:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6761,"mutability":"mutable","name":"_srcAddress","nameLocation":"10355:11:23","nodeType":"VariableDeclaration","scope":6788,"src":"10340:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6760,"name":"bytes","nodeType":"ElementaryTypeName","src":"10340:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6763,"mutability":"mutable","name":"_nonce","nameLocation":"10383:6:23","nodeType":"VariableDeclaration","scope":6788,"src":"10376:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6762,"name":"uint64","nodeType":"ElementaryTypeName","src":"10376:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6765,"mutability":"mutable","name":"_payload","nameLocation":"10414:8:23","nodeType":"VariableDeclaration","scope":6788,"src":"10399:23:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6764,"name":"bytes","nodeType":"ElementaryTypeName","src":"10399:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10302:126:23"},"returnParameters":{"id":6768,"nodeType":"ParameterList","parameters":[],"src":"10453:0:23"},"scope":7921,"src":"10284:308:23","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":6824,"nodeType":"Block","src":"10702:211:23","statements":[{"expression":{"arguments":[{"id":6799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10720:18:23","subExpression":{"id":6798,"name":"emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"10721:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563131","id":6800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10740:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5b7eade2f846c2d73550725c633f620b448355b3eadae1ce74efe009b42706a","typeString":"literal_string \"V11\""},"value":"V11"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5b7eade2f846c2d73550725c633f620b448355b3eadae1ce74efe009b42706a","typeString":"literal_string \"V11\""}],"id":6797,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10712:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10712:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6802,"nodeType":"ExpressionStatement","src":"10712:34:23"},{"assignments":[6804],"declarations":[{"constant":false,"id":6804,"mutability":"mutable","name":"shares","nameLocation":"10764:6:23","nodeType":"VariableDeclaration","scope":6824,"src":"10756:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6803,"name":"uint256","nodeType":"ElementaryTypeName","src":"10756:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6809,"initialValue":{"arguments":[{"id":6806,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6792,"src":"10795:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6807,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6790,"src":"10807:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6805,"name":"_issueSharesForAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7253,"src":"10773:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":6808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10773:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10756:59:23"},{"expression":{"arguments":[{"expression":{"id":6813,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10848:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10852:6:23","memberName":"sender","nodeType":"MemberAccess","src":"10848:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6817,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10868:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":6816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10860:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6815,"name":"address","nodeType":"ElementaryTypeName","src":"10860:7:23","typeDescriptions":{}}},"id":6818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10860:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6819,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6790,"src":"10875:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6810,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"10825:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":6812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10831:16:23","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3016,"src":"10825:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2920_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10825:58:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6821,"nodeType":"ExpressionStatement","src":"10825:58:23"},{"expression":{"id":6822,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6804,"src":"10900:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6796,"id":6823,"nodeType":"Return","src":"10893:13:23"}]},"id":6825,"implemented":true,"kind":"function","modifiers":[],"name":"_deposit","nameLocation":"10607:8:23","nodeType":"FunctionDefinition","parameters":{"id":6793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6790,"mutability":"mutable","name":"_amount","nameLocation":"10633:7:23","nodeType":"VariableDeclaration","scope":6825,"src":"10625:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6789,"name":"uint256","nodeType":"ElementaryTypeName","src":"10625:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6792,"mutability":"mutable","name":"_recipient","nameLocation":"10658:10:23","nodeType":"VariableDeclaration","scope":6825,"src":"10650:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6791,"name":"address","nodeType":"ElementaryTypeName","src":"10650:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10615:59:23"},"returnParameters":{"id":6796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6825,"src":"10693:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6794,"name":"uint256","nodeType":"ElementaryTypeName","src":"10693:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10692:9:23"},"scope":7921,"src":"10598:315:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6891,"nodeType":"Block","src":"11047:644:23","statements":[{"assignments":[6836],"declarations":[{"constant":false,"id":6836,"mutability":"mutable","name":"messageType","nameLocation":"11069:11:23","nodeType":"VariableDeclaration","scope":6891,"src":"11057:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},"typeName":{"id":6835,"nodeType":"UserDefinedTypeName","pathNode":{"id":6834,"name":"MessageType","nameLocations":["11057:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":8073,"src":"11057:11:23"},"referencedDeclaration":8073,"src":"11057:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"visibility":"internal"}],"id":6843,"initialValue":{"arguments":[{"id":6839,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6829,"src":"11094:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6840,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"11105:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}}],"id":6841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11104:13:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}],"expression":{"id":6837,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11083:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11087:6:23","memberName":"decode","nodeType":"MemberAccess","src":"11083:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11083:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"nodeType":"VariableDeclarationStatement","src":"11057:61:23"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},"id":6847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6844,"name":"messageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6836,"src":"11132:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6845,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"11147:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":6846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11159:14:23","memberName":"StrategyReport","nodeType":"MemberAccess","referencedDeclaration":8070,"src":"11147:26:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"src":"11132:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},"id":6870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6867,"name":"messageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6836,"src":"11410:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6868,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"11425:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":6869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11437:20:23","memberName":"WithdrawSomeResponse","nodeType":"MemberAccess","referencedDeclaration":8069,"src":"11425:32:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},"src":"11410:47:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6889,"nodeType":"IfStatement","src":"11406:279:23","trueBody":{"id":6888,"nodeType":"Block","src":"11459:226:23","statements":[{"assignments":[null,6873],"declarations":[null,{"constant":false,"id":6873,"mutability":"mutable","name":"message","nameLocation":"11504:7:23","nodeType":"VariableDeclaration","scope":6888,"src":"11476:35:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse"},"typeName":{"id":6872,"nodeType":"UserDefinedTypeName","pathNode":{"id":6871,"name":"WithdrawSomeResponse","nameLocations":["11476:20:23"],"nodeType":"IdentifierPath","referencedDeclaration":8087,"src":"11476:20:23"},"referencedDeclaration":8087,"src":"11476:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_storage_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse"}},"visibility":"internal"}],"id":6882,"initialValue":{"arguments":[{"id":6876,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6829,"src":"11543:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11570:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6877,"name":"uint256","nodeType":"ElementaryTypeName","src":"11570:7:23","typeDescriptions":{}}},{"id":6879,"name":"WithdrawSomeResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"11579:20:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_WithdrawSomeResponse_$8087_storage_ptr_$","typeString":"type(struct IStrategyMessages.WithdrawSomeResponse storage pointer)"}}],"id":6880,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11569:31:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_struct$_WithdrawSomeResponse_$8087_storage_ptr_$_$","typeString":"tuple(type(uint256),type(struct IStrategyMessages.WithdrawSomeResponse storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_struct$_WithdrawSomeResponse_$8087_storage_ptr_$_$","typeString":"tuple(type(uint256),type(struct IStrategyMessages.WithdrawSomeResponse storage pointer))"}],"expression":{"id":6874,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11515:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11519:6:23","memberName":"decode","nodeType":"MemberAccess","src":"11515:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11515:99:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_struct$_WithdrawSomeResponse_$8087_memory_ptr_$","typeString":"tuple(uint256,struct IStrategyMessages.WithdrawSomeResponse memory)"}},"nodeType":"VariableDeclarationStatement","src":"11473:141:23"},{"expression":{"arguments":[{"id":6884,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"11656:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6885,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6873,"src":"11666:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}],"id":6883,"name":"_handleWithdrawSomeResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7755,"src":"11628:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_struct$_WithdrawSomeResponse_$8087_memory_ptr_$returns$__$","typeString":"function (uint16,struct IStrategyMessages.WithdrawSomeResponse memory)"}},"id":6886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6887,"nodeType":"ExpressionStatement","src":"11628:46:23"}]}},"id":6890,"nodeType":"IfStatement","src":"11128:557:23","trueBody":{"id":6866,"nodeType":"Block","src":"11175:225:23","statements":[{"assignments":[null,6850],"declarations":[null,{"constant":false,"id":6850,"mutability":"mutable","name":"message","nameLocation":"11214:7:23","nodeType":"VariableDeclaration","scope":6866,"src":"11192:29:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport"},"typeName":{"id":6849,"nodeType":"UserDefinedTypeName","pathNode":{"id":6848,"name":"StrategyReport","nameLocations":["11192:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8110,"src":"11192:14:23"},"referencedDeclaration":8110,"src":"11192:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_storage_ptr","typeString":"struct IStrategyMessages.StrategyReport"}},"visibility":"internal"}],"id":6859,"initialValue":{"arguments":[{"id":6853,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6829,"src":"11253:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11280:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6854,"name":"uint256","nodeType":"ElementaryTypeName","src":"11280:7:23","typeDescriptions":{}}},{"id":6856,"name":"StrategyReport","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8110,"src":"11289:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StrategyReport_$8110_storage_ptr_$","typeString":"type(struct IStrategyMessages.StrategyReport storage pointer)"}}],"id":6857,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11279:25:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_struct$_StrategyReport_$8110_storage_ptr_$_$","typeString":"tuple(type(uint256),type(struct IStrategyMessages.StrategyReport storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_struct$_StrategyReport_$8110_storage_ptr_$_$","typeString":"tuple(type(uint256),type(struct IStrategyMessages.StrategyReport storage pointer))"}],"expression":{"id":6851,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11225:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11229:6:23","memberName":"decode","nodeType":"MemberAccess","src":"11225:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11225:93:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_struct$_StrategyReport_$8110_memory_ptr_$","typeString":"tuple(uint256,struct IStrategyMessages.StrategyReport memory)"}},"nodeType":"VariableDeclarationStatement","src":"11189:129:23"},{"expression":{"arguments":[{"id":6861,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"11354:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6862,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"11364:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},{"id":6863,"name":"_receivedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6831,"src":"11373:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6860,"name":"_handleStrategyReport","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7094,"src":"11332:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_struct$_StrategyReport_$8110_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint16,struct IStrategyMessages.StrategyReport memory,uint256)"}},"id":6864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11332:57:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6865,"nodeType":"ExpressionStatement","src":"11332:57:23"}]}}]},"id":6892,"implemented":true,"kind":"function","modifiers":[],"name":"_handlePayload","nameLocation":"10928:14:23","nodeType":"FunctionDefinition","parameters":{"id":6832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6827,"mutability":"mutable","name":"_chainId","nameLocation":"10959:8:23","nodeType":"VariableDeclaration","scope":6892,"src":"10952:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6826,"name":"uint16","nodeType":"ElementaryTypeName","src":"10952:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6829,"mutability":"mutable","name":"_payload","nameLocation":"10990:8:23","nodeType":"VariableDeclaration","scope":6892,"src":"10977:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6828,"name":"bytes","nodeType":"ElementaryTypeName","src":"10977:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6831,"mutability":"mutable","name":"_receivedTokens","nameLocation":"11016:15:23","nodeType":"VariableDeclaration","scope":6892,"src":"11008:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6830,"name":"uint256","nodeType":"ElementaryTypeName","src":"11008:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10942:95:23"},"returnParameters":{"id":6833,"nodeType":"ParameterList","parameters":[],"src":"11047:0:23"},"scope":7921,"src":"10919:772:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7093,"nodeType":"Block","src":"11841:2156:23","statements":[{"expression":{"arguments":[{"id":6903,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"11868:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":6904,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"11878:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}],"id":6902,"name":"_verifySignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7916,"src":"11851:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_struct$_StrategyReport_$8110_memory_ptr_$returns$__$","typeString":"function (uint16,struct IStrategyMessages.StrategyReport memory)"}},"id":6905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6906,"nodeType":"ExpressionStatement","src":"11851:36:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6907,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"11902:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11911:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8095,"src":"11902:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11918:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11902:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6920,"nodeType":"IfStatement","src":"11898:103:23","trueBody":{"id":6919,"nodeType":"Block","src":"11921:80:23","statements":[{"expression":{"arguments":[{"id":6912,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"11947:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":6913,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"11957:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11966:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"11957:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6915,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"11976:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11985:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8095,"src":"11976:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6911,"name":"_reportLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"11935:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint16,address,uint256)"}},"id":6917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11935:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6918,"nodeType":"ExpressionStatement","src":"11935:55:23"}]}},{"expression":{"id":6930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6921,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"12011:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6925,"indexExpression":{"id":6922,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12022:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12011:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6926,"indexExpression":{"expression":{"id":6923,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12032:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12041:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12032:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12011:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12051:9:23","memberName":"totalGain","nodeType":"MemberAccess","referencedDeclaration":8129,"src":"12011:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":6928,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12064:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12073:6:23","memberName":"profit","nodeType":"MemberAccess","referencedDeclaration":8093,"src":"12064:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12011:68:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6931,"nodeType":"ExpressionStatement","src":"12011:68:23"},{"assignments":[6933],"declarations":[{"constant":false,"id":6933,"mutability":"mutable","name":"debt","nameLocation":"12097:4:23","nodeType":"VariableDeclaration","scope":7093,"src":"12089:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6932,"name":"uint256","nodeType":"ElementaryTypeName","src":"12089:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6939,"initialValue":{"arguments":[{"id":6935,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12121:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":6936,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12131:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12140:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12131:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6934,"name":"_debtOutstanding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7486,"src":"12104:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint16_$_t_address_$returns$_t_uint256_$","typeString":"function (uint16,address) view returns (uint256)"}},"id":6938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12089:60:23"},{"assignments":[6941],"declarations":[{"constant":false,"id":6941,"mutability":"mutable","name":"debtPayment","nameLocation":"12167:11:23","nodeType":"VariableDeclaration","scope":7093,"src":"12159:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6940,"name":"uint256","nodeType":"ElementaryTypeName","src":"12159:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6948,"initialValue":{"arguments":[{"id":6944,"name":"debt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12190:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6945,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12196:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12205:11:23","memberName":"debtPayment","nodeType":"MemberAccess","referencedDeclaration":8097,"src":"12196:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6942,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"12181:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":6943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12186:3:23","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":4300,"src":"12181:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12181:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12159:58:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6949,"name":"debtPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6941,"src":"12232:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12246:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12232:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6971,"nodeType":"IfStatement","src":"12228:181:23","trueBody":{"id":6970,"nodeType":"Block","src":"12249:160:23","statements":[{"expression":{"id":6960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6952,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"12263:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6956,"indexExpression":{"id":6953,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12274:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12263:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6957,"indexExpression":{"expression":{"id":6954,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12284:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12293:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12284:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12263:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12303:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"12263:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6959,"name":"debtPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6941,"src":"12316:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12263:64:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6961,"nodeType":"ExpressionStatement","src":"12263:64:23"},{"expression":{"id":6964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6962,"name":"totalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5970,"src":"12341:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6963,"name":"debtPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6941,"src":"12354:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12341:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6965,"nodeType":"ExpressionStatement","src":"12341:24:23"},{"expression":{"id":6968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6966,"name":"debt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12379:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6967,"name":"debtPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6941,"src":"12387:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12379:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6969,"nodeType":"ExpressionStatement","src":"12379:19:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6972,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12423:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12432:15:23","memberName":"creditAvailable","nodeType":"MemberAccess","referencedDeclaration":8103,"src":"12423:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12450:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12423:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6993,"nodeType":"IfStatement","src":"12419:204:23","trueBody":{"id":6992,"nodeType":"Block","src":"12453:170:23","statements":[{"expression":{"id":6985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6976,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"12467:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6980,"indexExpression":{"id":6977,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12478:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12467:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6981,"indexExpression":{"expression":{"id":6978,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12488:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6979,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12497:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12488:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12467:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":6982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12507:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"12467:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":6983,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12520:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12546:15:23","memberName":"creditAvailable","nodeType":"MemberAccess","referencedDeclaration":8103,"src":"12520:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12467:94:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6986,"nodeType":"ExpressionStatement","src":"12467:94:23"},{"expression":{"id":6990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6987,"name":"totalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5970,"src":"12575:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":6988,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12588:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12597:15:23","memberName":"creditAvailable","nodeType":"MemberAccess","referencedDeclaration":8103,"src":"12588:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12575:37:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6991,"nodeType":"ExpressionStatement","src":"12575:37:23"}]}},{"expression":{"id":7003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":6994,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"12633:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":6998,"indexExpression":{"id":6995,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12644:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12633:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":6999,"indexExpression":{"expression":{"id":6996,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12654:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":6997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12663:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12654:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12633:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7000,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12673:10:23","memberName":"lastReport","nodeType":"MemberAccess","referencedDeclaration":8133,"src":"12633:50:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7001,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12686:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7002,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12695:9:23","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":8091,"src":"12686:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12633:71:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7004,"nodeType":"ExpressionStatement","src":"12633:71:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7005,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"12732:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7007,"indexExpression":{"id":7006,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"12743:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12732:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7010,"indexExpression":{"expression":{"id":7008,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12753:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7009,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12762:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"12753:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12732:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12772:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"12732:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12785:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12732:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":7014,"name":"emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"12802:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12732:87:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7022,"nodeType":"IfStatement","src":"12715:167:23","trueBody":{"id":7021,"nodeType":"Block","src":"12830:52:23","statements":[{"expression":{"id":7019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7016,"name":"debt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"12844:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7017,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12851:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12860:11:23","memberName":"totalAssets","nodeType":"MemberAccess","referencedDeclaration":8105,"src":"12851:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12844:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7020,"nodeType":"ExpressionStatement","src":"12844:27:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7023,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12896:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7024,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12905:14:23","memberName":"giveToStrategy","nodeType":"MemberAccess","referencedDeclaration":8099,"src":"12896:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12922:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12896:27:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7058,"nodeType":"Block","src":"13248:291:23","statements":[{"expression":{"arguments":[{"id":7045,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"13302:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7046,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13328:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13337:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"13328:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":7050,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"13395:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":7051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13407:21:23","memberName":"AdjustPositionRequest","nodeType":"MemberAccess","referencedDeclaration":8071,"src":"13395:33:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},{"arguments":[{"id":7053,"name":"debt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"13490:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7052,"name":"AdjustPositionRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8113,"src":"13450:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AdjustPositionRequest_$8113_storage_ptr_$","typeString":"type(struct IStrategyMessages.AdjustPositionRequest storage pointer)"}},"id":7054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["13473:15:23"],"names":["debtOutstanding"],"nodeType":"FunctionCall","src":"13450:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AdjustPositionRequest_$8113_memory_ptr","typeString":"struct IStrategyMessages.AdjustPositionRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},{"typeIdentifier":"t_struct$_AdjustPositionRequest_$8113_memory_ptr","typeString":"struct IStrategyMessages.AdjustPositionRequest memory"}],"expression":{"id":7048,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13363:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13367:6:23","memberName":"encode","nodeType":"MemberAccess","src":"13363:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13363:151:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7044,"name":"_sendMessageToStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7334,"src":"13262:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,address,bytes memory)"}},"id":7056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13262:266:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7057,"nodeType":"ExpressionStatement","src":"13262:266:23"}]},"id":7059,"nodeType":"IfStatement","src":"12892:647:23","trueBody":{"id":7043,"nodeType":"Block","src":"12925:317:23","statements":[{"expression":{"arguments":[{"expression":{"id":7028,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"12964:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12973:14:23","memberName":"giveToStrategy","nodeType":"MemberAccess","referencedDeclaration":8099,"src":"12964:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7030,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"13005:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7031,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13031:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13040:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"13031:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":7035,"name":"MessageType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"13098:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MessageType_$8073_$","typeString":"type(enum IStrategyMessages.MessageType)"}},"id":7036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13110:21:23","memberName":"AdjustPositionRequest","nodeType":"MemberAccess","referencedDeclaration":8071,"src":"13098:33:23","typeDescriptions":{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"}},{"arguments":[{"id":7038,"name":"debt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"13193:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7037,"name":"AdjustPositionRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8113,"src":"13153:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AdjustPositionRequest_$8113_storage_ptr_$","typeString":"type(struct IStrategyMessages.AdjustPositionRequest storage pointer)"}},"id":7039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["13176:15:23"],"names":["debtOutstanding"],"nodeType":"FunctionCall","src":"13153:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AdjustPositionRequest_$8113_memory_ptr","typeString":"struct IStrategyMessages.AdjustPositionRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MessageType_$8073","typeString":"enum IStrategyMessages.MessageType"},{"typeIdentifier":"t_struct$_AdjustPositionRequest_$8113_memory_ptr","typeString":"struct IStrategyMessages.AdjustPositionRequest memory"}],"expression":{"id":7033,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13066:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13070:6:23","memberName":"encode","nodeType":"MemberAccess","src":"13066:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13066:151:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7027,"name":"_bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7839,"src":"12939:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,uint16,address,bytes memory)"}},"id":7041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12939:292:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7042,"nodeType":"ExpressionStatement","src":"12939:292:23"}]}},{"assignments":[7062],"declarations":[{"constant":false,"id":7062,"mutability":"mutable","name":"params","nameLocation":"13571:6:23","nodeType":"VariableDeclaration","scope":7093,"src":"13549:28:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams"},"typeName":{"id":7061,"nodeType":"UserDefinedTypeName","pathNode":{"id":7060,"name":"StrategyParams","nameLocations":["13549:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8138,"src":"13549:14:23"},"referencedDeclaration":8138,"src":"13549:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage_ptr","typeString":"struct StrategyParams"}},"visibility":"internal"}],"id":7069,"initialValue":{"baseExpression":{"baseExpression":{"id":7063,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"13580:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7065,"indexExpression":{"id":7064,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"13591:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13580:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7068,"indexExpression":{"expression":{"id":7066,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13601:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13610:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"13601:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13580:39:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13549:70:23"},{"eventCall":{"arguments":[{"id":7071,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"13664:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7072,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13686:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13695:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"13686:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7074,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13717:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7075,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13726:6:23","memberName":"profit","nodeType":"MemberAccess","referencedDeclaration":8093,"src":"13717:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7076,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13746:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13755:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8095,"src":"13746:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7078,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13773:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7079,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13782:11:23","memberName":"debtPayment","nodeType":"MemberAccess","referencedDeclaration":8097,"src":"13773:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7080,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"13807:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":7081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13814:9:23","memberName":"totalGain","nodeType":"MemberAccess","referencedDeclaration":8129,"src":"13807:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7082,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"13837:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":7083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13844:9:23","memberName":"totalLoss","nodeType":"MemberAccess","referencedDeclaration":8131,"src":"13837:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7084,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"13867:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":7085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13874:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"13867:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7086,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"13897:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13906:15:23","memberName":"creditAvailable","nodeType":"MemberAccess","referencedDeclaration":8103,"src":"13897:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7088,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"13935:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_memory_ptr","typeString":"struct StrategyParams memory"}},"id":7089,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13942:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"13935:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7090,"name":"_receivedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6899,"src":"13965:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7070,"name":"StrategyReported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8230,"src":"13634:16:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint16,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"}},"id":7091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13634:356:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7092,"nodeType":"EmitStatement","src":"13629:361:23"}]},"id":7094,"implemented":true,"kind":"function","modifiers":[],"name":"_handleStrategyReport","nameLocation":"11706:21:23","nodeType":"FunctionDefinition","parameters":{"id":6900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6894,"mutability":"mutable","name":"_chainId","nameLocation":"11744:8:23","nodeType":"VariableDeclaration","scope":7094,"src":"11737:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6893,"name":"uint16","nodeType":"ElementaryTypeName","src":"11737:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6897,"mutability":"mutable","name":"_message","nameLocation":"11784:8:23","nodeType":"VariableDeclaration","scope":7094,"src":"11762:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport"},"typeName":{"id":6896,"nodeType":"UserDefinedTypeName","pathNode":{"id":6895,"name":"StrategyReport","nameLocations":["11762:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8110,"src":"11762:14:23"},"referencedDeclaration":8110,"src":"11762:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_storage_ptr","typeString":"struct IStrategyMessages.StrategyReport"}},"visibility":"internal"},{"constant":false,"id":6899,"mutability":"mutable","name":"_receivedTokens","nameLocation":"11810:15:23","nodeType":"VariableDeclaration","scope":7094,"src":"11802:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6898,"name":"uint256","nodeType":"ElementaryTypeName","src":"11802:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11727:104:23"},"returnParameters":{"id":6901,"nodeType":"ParameterList","parameters":[],"src":"11841:0:23"},"scope":7921,"src":"11697:2300:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7137,"nodeType":"Block","src":"14114:231:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7104,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"14132:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7106,"indexExpression":{"id":7105,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"14143:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14132:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7108,"indexExpression":{"id":7107,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7098,"src":"14153:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14132:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14164:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"14132:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7110,"name":"_loss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7100,"src":"14177:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14132:50:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563132","id":7112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14184:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_71efe16cba88fb6e6f90a0e977fb675ba6f9580f574329558474b34d137c4252","typeString":"literal_string \"V12\""},"value":"V12"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71efe16cba88fb6e6f90a0e977fb675ba6f9580f574329558474b34d137c4252","typeString":"literal_string \"V12\""}],"id":7103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14124:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14124:66:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7114,"nodeType":"ExpressionStatement","src":"14124:66:23"},{"expression":{"id":7122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":7115,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"14200:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7118,"indexExpression":{"id":7116,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"14211:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14200:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7119,"indexExpression":{"id":7117,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7098,"src":"14221:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14200:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14232:9:23","memberName":"totalLoss","nodeType":"MemberAccess","referencedDeclaration":8131,"src":"14200:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7121,"name":"_loss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7100,"src":"14245:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14200:50:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7123,"nodeType":"ExpressionStatement","src":"14200:50:23"},{"expression":{"id":7131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":7124,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"14260:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7127,"indexExpression":{"id":7125,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"14271:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14260:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7128,"indexExpression":{"id":7126,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7098,"src":"14281:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14260:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14292:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"14260:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7130,"name":"_loss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7100,"src":"14305:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14260:50:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7132,"nodeType":"ExpressionStatement","src":"14260:50:23"},{"expression":{"id":7135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7133,"name":"totalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5970,"src":"14320:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7134,"name":"_loss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7100,"src":"14333:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14320:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7136,"nodeType":"ExpressionStatement","src":"14320:18:23"}]},"id":7138,"implemented":true,"kind":"function","modifiers":[],"name":"_reportLoss","nameLocation":"14012:11:23","nodeType":"FunctionDefinition","parameters":{"id":7101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7096,"mutability":"mutable","name":"_chainId","nameLocation":"14040:8:23","nodeType":"VariableDeclaration","scope":7138,"src":"14033:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7095,"name":"uint16","nodeType":"ElementaryTypeName","src":"14033:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7098,"mutability":"mutable","name":"_strategy","nameLocation":"14066:9:23","nodeType":"VariableDeclaration","scope":7138,"src":"14058:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7097,"name":"address","nodeType":"ElementaryTypeName","src":"14058:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7100,"mutability":"mutable","name":"_loss","nameLocation":"14093:5:23","nodeType":"VariableDeclaration","scope":7138,"src":"14085:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7099,"name":"uint256","nodeType":"ElementaryTypeName","src":"14085:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14023:81:23"},"returnParameters":{"id":7102,"nodeType":"ParameterList","parameters":[],"src":"14114:0:23"},"scope":7921,"src":"14003:342:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7177,"nodeType":"Block","src":"14490:389:23","statements":[{"expression":{"arguments":[{"expression":{"id":7150,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14511:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14515:6:23","memberName":"sender","nodeType":"MemberAccess","src":"14511:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":7154,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14531:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14523:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7152,"name":"address","nodeType":"ElementaryTypeName","src":"14523:7:23","typeDescriptions":{}}},"id":7155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14523:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7156,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7140,"src":"14538:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7149,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"14501:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":7157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14501:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7158,"nodeType":"ExpressionStatement","src":"14501:45:23"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":7165,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14655:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14659:6:23","memberName":"sender","nodeType":"MemberAccess","src":"14655:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7167,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7142,"src":"14689:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7168,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7140,"src":"14725:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7169,"name":"_maxLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7144,"src":"14759:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":7171,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7140,"src":"14807:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7170,"name":"_shareValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7203,"src":"14795:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":7172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14795:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":7173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14842:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7164,"name":"WithdrawRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8151,"src":"14613:15:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_WithdrawRequest_$8151_storage_ptr_$","typeString":"type(struct WithdrawRequest storage pointer)"}},"id":7174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["14647:6:23","14683:4:23","14717:6:23","14750:7:23","14785:8:23","14833:7:23"],"names":["author","user","shares","maxLoss","expected","success"],"nodeType":"FunctionCall","src":"14613:249:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_memory_ptr","typeString":"struct WithdrawRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_memory_ptr","typeString":"struct WithdrawRequest memory"}],"expression":{"expression":{"baseExpression":{"id":7159,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"14556:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7161,"indexExpression":{"id":7160,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"14571:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14556:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14586:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"14556:38:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":7163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14595:4:23","memberName":"push","nodeType":"MemberAccess","src":"14556:43:23","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage_ptr_$_t_struct$_WithdrawRequest_$8151_storage_$returns$__$attached_to$_t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage_ptr_$","typeString":"function (struct WithdrawRequest storage ref[] storage pointer,struct WithdrawRequest storage ref)"}},"id":7175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14556:316:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7176,"nodeType":"ExpressionStatement","src":"14556:316:23"}]},"id":7178,"implemented":true,"kind":"function","modifiers":[{"id":7147,"kind":"modifierInvocation","modifierName":{"id":7146,"name":"WithdrawInProgress","nameLocations":["14472:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":6075,"src":"14472:18:23"},"nodeType":"ModifierInvocation","src":"14472:18:23"}],"name":"_initiateWithdraw","nameLocation":"14360:17:23","nodeType":"FunctionDefinition","parameters":{"id":7145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7140,"mutability":"mutable","name":"_shares","nameLocation":"14395:7:23","nodeType":"VariableDeclaration","scope":7178,"src":"14387:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7139,"name":"uint256","nodeType":"ElementaryTypeName","src":"14387:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7142,"mutability":"mutable","name":"_recipient","nameLocation":"14420:10:23","nodeType":"VariableDeclaration","scope":7178,"src":"14412:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7141,"name":"address","nodeType":"ElementaryTypeName","src":"14412:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7144,"mutability":"mutable","name":"_maxLoss","nameLocation":"14448:8:23","nodeType":"VariableDeclaration","scope":7178,"src":"14440:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7143,"name":"uint256","nodeType":"ElementaryTypeName","src":"14440:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14377:85:23"},"returnParameters":{"id":7148,"nodeType":"ParameterList","parameters":[],"src":"14490:0:23"},"scope":7921,"src":"14351:528:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7202,"nodeType":"Block","src":"14955:137:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7185,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"14969:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14969:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14986:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14969:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7192,"nodeType":"IfStatement","src":"14965:63:23","trueBody":{"id":7191,"nodeType":"Block","src":"14989:39:23","statements":[{"expression":{"id":7189,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"15010:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7184,"id":7190,"nodeType":"Return","src":"15003:14:23"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7193,"name":"_shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"15045:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7194,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"15055:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15055:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15045:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15044:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7198,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"15072:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15072:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15044:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7184,"id":7201,"nodeType":"Return","src":"15037:48:23"}]},"id":7203,"implemented":true,"kind":"function","modifiers":[],"name":"_shareValue","nameLocation":"14894:11:23","nodeType":"FunctionDefinition","parameters":{"id":7181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7180,"mutability":"mutable","name":"_shares","nameLocation":"14914:7:23","nodeType":"VariableDeclaration","scope":7203,"src":"14906:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7179,"name":"uint256","nodeType":"ElementaryTypeName","src":"14906:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14905:17:23"},"returnParameters":{"id":7184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7203,"src":"14946:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7182,"name":"uint256","nodeType":"ElementaryTypeName","src":"14946:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14945:9:23"},"scope":7921,"src":"14885:207:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7252,"nodeType":"Block","src":"15208:277:23","statements":[{"assignments":[7213],"declarations":[{"constant":false,"id":7213,"mutability":"mutable","name":"shares","nameLocation":"15226:6:23","nodeType":"VariableDeclaration","scope":7252,"src":"15218:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7212,"name":"uint256","nodeType":"ElementaryTypeName","src":"15218:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7215,"initialValue":{"hexValue":"30","id":7214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15235:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15218:18:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7216,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"15250:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15250:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15267:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15250:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7236,"nodeType":"Block","src":"15317:75:23","statements":[{"expression":{"id":7234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7225,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"15331:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7226,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7207,"src":"15341:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7227,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"15351:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15351:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15341:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15340:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7231,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"15368:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15368:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15340:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15331:50:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7235,"nodeType":"ExpressionStatement","src":"15331:50:23"}]},"id":7237,"nodeType":"IfStatement","src":"15246:146:23","trueBody":{"id":7224,"nodeType":"Block","src":"15270:41:23","statements":[{"expression":{"id":7222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7220,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"15284:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7221,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7207,"src":"15293:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15284:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7223,"nodeType":"ExpressionStatement","src":"15284:16:23"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7239,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"15409:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15418:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15409:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563133","id":7242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15421:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0496c2ac3cc54dcad1f20b85ceee7cff65b214f05b3c4cc3a656a3b2f58b3032","typeString":"literal_string \"V13\""},"value":"V13"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0496c2ac3cc54dcad1f20b85ceee7cff65b214f05b3c4cc3a656a3b2f58b3032","typeString":"literal_string \"V13\""}],"id":7238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15401:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15401:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7244,"nodeType":"ExpressionStatement","src":"15401:26:23"},{"expression":{"arguments":[{"id":7246,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7205,"src":"15443:3:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7247,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"15448:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7245,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"15437:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":7248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15437:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7249,"nodeType":"ExpressionStatement","src":"15437:18:23"},{"expression":{"id":7250,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"15472:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7211,"id":7251,"nodeType":"Return","src":"15465:13:23"}]},"id":7253,"implemented":true,"kind":"function","modifiers":[],"name":"_issueSharesForAmount","nameLocation":"15107:21:23","nodeType":"FunctionDefinition","parameters":{"id":7208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7205,"mutability":"mutable","name":"_to","nameLocation":"15146:3:23","nodeType":"VariableDeclaration","scope":7253,"src":"15138:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7204,"name":"address","nodeType":"ElementaryTypeName","src":"15138:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7207,"mutability":"mutable","name":"_amount","nameLocation":"15167:7:23","nodeType":"VariableDeclaration","scope":7253,"src":"15159:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7206,"name":"uint256","nodeType":"ElementaryTypeName","src":"15159:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15128:52:23"},"returnParameters":{"id":7211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7253,"src":"15199:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7209,"name":"uint256","nodeType":"ElementaryTypeName","src":"15199:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15198:9:23"},"scope":7921,"src":"15098:387:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7333,"nodeType":"Block","src":"15651:687:23","statements":[{"assignments":[7267],"declarations":[{"constant":false,"id":7267,"mutability":"mutable","name":"remoteAndLocalAddresses","nameLocation":"15675:23:23","nodeType":"VariableDeclaration","scope":7333,"src":"15662:36:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7266,"name":"bytes","nodeType":"ElementaryTypeName","src":"15662:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":7276,"initialValue":{"arguments":[{"id":7270,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7257,"src":"15731:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":7273,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15762:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15754:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7271,"name":"address","nodeType":"ElementaryTypeName","src":"15754:7:23","typeDescriptions":{}}},"id":7274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15754:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7268,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15701:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15705:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"15701:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15701:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"15662:115:23"},{"assignments":[7278,null],"declarations":[{"constant":false,"id":7278,"mutability":"mutable","name":"nativeFee","nameLocation":"15797:9:23","nodeType":"VariableDeclaration","scope":7333,"src":"15789:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7277,"name":"uint256","nodeType":"ElementaryTypeName","src":"15789:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":7291,"initialValue":{"arguments":[{"id":7281,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"15849:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"id":7284,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15879:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15871:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7282,"name":"address","nodeType":"ElementaryTypeName","src":"15871:7:23","typeDescriptions":{}}},"id":7285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15871:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7286,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7259,"src":"15898:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":7287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15920:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[],"expression":{"argumentTypes":[],"id":7288,"name":"_getAdapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7354,"src":"15939:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_memory_ptr_$","typeString":"function () view returns (bytes memory)"}},"id":7289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15939:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7279,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"15812:10:23","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":7280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15823:12:23","memberName":"estimateFees","nodeType":"MemberAccess","referencedDeclaration":69,"src":"15812:23:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint16,address,bytes memory,bool,bytes memory) view external returns (uint256,uint256)"}},"id":7290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15812:156:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15788:180:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":7294,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15991:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15983:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7292,"name":"address","nodeType":"ElementaryTypeName","src":"15983:7:23","typeDescriptions":{}}},"id":7295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15983:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15997:7:23","memberName":"balance","nodeType":"MemberAccess","src":"15983:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7297,"name":"nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7278,"src":"16007:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15983:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7309,"nodeType":"IfStatement","src":"15979:122:23","trueBody":{"id":7308,"nodeType":"Block","src":"16018:83:23","statements":[{"errorCall":{"arguments":[{"id":7300,"name":"nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7278,"src":"16057:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":7303,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16076:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16068:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7301,"name":"address","nodeType":"ElementaryTypeName","src":"16068:7:23","typeDescriptions":{}}},"id":7304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16068:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16082:7:23","memberName":"balance","nodeType":"MemberAccess","src":"16068:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7299,"name":"InsufficientFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8180,"src":"16039:17:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":7306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16039:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7307,"nodeType":"RevertStatement","src":"16032:58:23"}]}},{"expression":{"arguments":[{"id":7315,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"16158:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7316,"name":"remoteAndLocalAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7267,"src":"16180:23:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":7317,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7259,"src":"16217:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"arguments":[{"id":7322,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16255:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16247:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7320,"name":"address","nodeType":"ElementaryTypeName","src":"16247:7:23","typeDescriptions":{}}},"id":7323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16247:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16239:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":7318,"name":"address","nodeType":"ElementaryTypeName","src":"16239:8:23","stateMutability":"payable","typeDescriptions":{}}},"id":7324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16239:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"id":7327,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16283:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16275:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7325,"name":"address","nodeType":"ElementaryTypeName","src":"16275:7:23","typeDescriptions":{}}},"id":7328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16275:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":7329,"name":"_getAdapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7354,"src":"16302:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_memory_ptr_$","typeString":"function () view returns (bytes memory)"}},"id":7330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16302:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7310,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"16111:10:23","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointUpgradeable_$144","typeString":"contract ILayerZeroEndpointUpgradeable"}},"id":7312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16122:4:23","memberName":"send","nodeType":"MemberAccess","referencedDeclaration":19,"src":"16111:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":7314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":7313,"name":"nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7278,"src":"16134:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"16111:33:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":7331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16111:220:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7332,"nodeType":"ExpressionStatement","src":"16111:220:23"}]},"id":7334,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7262,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"15630:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7263,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7257,"src":"15640:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7264,"kind":"modifierInvocation","modifierName":{"id":7261,"name":"isAction","nameLocations":["15621:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":6042,"src":"15621:8:23"},"nodeType":"ModifierInvocation","src":"15621:29:23"}],"name":"_sendMessageToStrategy","nameLocation":"15500:22:23","nodeType":"FunctionDefinition","parameters":{"id":7260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7255,"mutability":"mutable","name":"_chainId","nameLocation":"15539:8:23","nodeType":"VariableDeclaration","scope":7334,"src":"15532:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7254,"name":"uint16","nodeType":"ElementaryTypeName","src":"15532:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7257,"mutability":"mutable","name":"_strategy","nameLocation":"15565:9:23","nodeType":"VariableDeclaration","scope":7334,"src":"15557:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7256,"name":"address","nodeType":"ElementaryTypeName","src":"15557:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7259,"mutability":"mutable","name":"_payload","nameLocation":"15597:8:23","nodeType":"VariableDeclaration","scope":7334,"src":"15584:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7258,"name":"bytes","nodeType":"ElementaryTypeName","src":"15584:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15522:89:23"},"returnParameters":{"id":7265,"nodeType":"ParameterList","parameters":[],"src":"15651:0:23"},"scope":7921,"src":"15491:847:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7353,"nodeType":"Block","src":"16418:161:23","statements":[{"assignments":[7340],"declarations":[{"constant":false,"id":7340,"mutability":"mutable","name":"version","nameLocation":"16435:7:23","nodeType":"VariableDeclaration","scope":7353,"src":"16428:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7339,"name":"uint16","nodeType":"ElementaryTypeName","src":"16428:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":7342,"initialValue":{"hexValue":"31","id":7341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16445:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"16428:18:23"},{"assignments":[7344],"declarations":[{"constant":false,"id":7344,"mutability":"mutable","name":"gasForDestinationLzReceive","nameLocation":"16464:26:23","nodeType":"VariableDeclaration","scope":7353,"src":"16456:34:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7343,"name":"uint256","nodeType":"ElementaryTypeName","src":"16456:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7346,"initialValue":{"hexValue":"315f3030305f303030","id":7345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16493:9:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1_000_000"},"nodeType":"VariableDeclarationStatement","src":"16456:46:23"},{"expression":{"arguments":[{"id":7349,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7340,"src":"16536:7:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7350,"name":"gasForDestinationLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7344,"src":"16545:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7347,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"16519:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16523:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"16519:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16519:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7338,"id":7352,"nodeType":"Return","src":"16512:60:23"}]},"id":7354,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdapterParams","nameLocation":"16353:17:23","nodeType":"FunctionDefinition","parameters":{"id":7335,"nodeType":"ParameterList","parameters":[],"src":"16370:2:23"},"returnParameters":{"id":7338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7354,"src":"16404:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7336,"name":"bytes","nodeType":"ElementaryTypeName","src":"16404:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16403:14:23"},"scope":7921,"src":"16344:235:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":7379,"nodeType":"Block","src":"16655:131:23","statements":[{"expression":{"id":7368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7361,"name":"totalDebtRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"16665:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":7362,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"16683:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7364,"indexExpression":{"id":7363,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7356,"src":"16694:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16683:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7366,"indexExpression":{"id":7365,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7358,"src":"16704:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16683:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16715:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"16683:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16665:59:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7369,"nodeType":"ExpressionStatement","src":"16665:59:23"},{"expression":{"id":7377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":7370,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"16734:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7373,"indexExpression":{"id":7371,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7356,"src":"16745:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16734:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7374,"indexExpression":{"id":7372,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7358,"src":"16755:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16734:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16766:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"16734:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":7376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16778:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16734:45:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7378,"nodeType":"ExpressionStatement","src":"16734:45:23"}]},"id":7380,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeStrategy","nameLocation":"16594:15:23","nodeType":"FunctionDefinition","parameters":{"id":7359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7356,"mutability":"mutable","name":"_chainId","nameLocation":"16617:8:23","nodeType":"VariableDeclaration","scope":7380,"src":"16610:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7355,"name":"uint16","nodeType":"ElementaryTypeName","src":"16610:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7358,"mutability":"mutable","name":"_strategy","nameLocation":"16635:9:23","nodeType":"VariableDeclaration","scope":7380,"src":"16627:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7357,"name":"address","nodeType":"ElementaryTypeName","src":"16627:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16609:36:23"},"returnParameters":{"id":7360,"nodeType":"ParameterList","parameters":[],"src":"16655:0:23"},"scope":7921,"src":"16585:201:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7434,"nodeType":"Block","src":"16908:435:23","statements":[{"condition":{"id":7389,"name":"emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"16922:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7393,"nodeType":"IfStatement","src":"16918:56:23","trueBody":{"id":7392,"nodeType":"Block","src":"16941:33:23","statements":[{"expression":{"hexValue":"30","id":7390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16962:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":7388,"id":7391,"nodeType":"Return","src":"16955:8:23"}]}},{"assignments":[7395],"declarations":[{"constant":false,"id":7395,"mutability":"mutable","name":"strategyDebtLimit","nameLocation":"16992:17:23","nodeType":"VariableDeclaration","scope":7434,"src":"16984:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7394,"name":"uint256","nodeType":"ElementaryTypeName","src":"16984:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7408,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7396,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"17013:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7398,"indexExpression":{"id":7397,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7382,"src":"17024:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17013:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7400,"indexExpression":{"id":7399,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7384,"src":"17034:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17013:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7401,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17045:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"17013:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7402,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"17069:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17069:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17013:69:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17012:71:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31305f303030","id":7406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17086:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"src":"17012:80:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16984:108:23"},{"assignments":[7410],"declarations":[{"constant":false,"id":7410,"mutability":"mutable","name":"strategyTotalDebt","nameLocation":"17110:17:23","nodeType":"VariableDeclaration","scope":7434,"src":"17102:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7409,"name":"uint256","nodeType":"ElementaryTypeName","src":"17102:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7417,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"id":7411,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"17130:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7413,"indexExpression":{"id":7412,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7382,"src":"17141:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17130:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7415,"indexExpression":{"id":7414,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7384,"src":"17151:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17130:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17162:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"17130:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17102:69:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7418,"name":"strategyDebtLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7395,"src":"17186:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7419,"name":"strategyTotalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7410,"src":"17207:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17186:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7424,"nodeType":"IfStatement","src":"17182:77:23","trueBody":{"id":7423,"nodeType":"Block","src":"17226:33:23","statements":[{"expression":{"hexValue":"30","id":7421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17247:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":7388,"id":7422,"nodeType":"Return","src":"17240:8:23"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":7427,"name":"totalIdle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"17285:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17285:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7429,"name":"strategyDebtLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7395,"src":"17298:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7430,"name":"strategyTotalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7410,"src":"17318:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17298:37:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7425,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"17276:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":7426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17281:3:23","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":4300,"src":"17276:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17276:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7388,"id":7433,"nodeType":"Return","src":"17269:67:23"}]},"id":7435,"implemented":true,"kind":"function","modifiers":[],"name":"_creditAvailable","nameLocation":"16801:16:23","nodeType":"FunctionDefinition","parameters":{"id":7385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7382,"mutability":"mutable","name":"_chainId","nameLocation":"16834:8:23","nodeType":"VariableDeclaration","scope":7435,"src":"16827:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7381,"name":"uint16","nodeType":"ElementaryTypeName","src":"16827:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7384,"mutability":"mutable","name":"_strategy","nameLocation":"16860:9:23","nodeType":"VariableDeclaration","scope":7435,"src":"16852:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7383,"name":"address","nodeType":"ElementaryTypeName","src":"16852:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16817:58:23"},"returnParameters":{"id":7388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7435,"src":"16899:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7386,"name":"uint256","nodeType":"ElementaryTypeName","src":"16899:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16898:9:23"},"scope":7921,"src":"16792:551:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7485,"nodeType":"Block","src":"17465:444:23","statements":[{"assignments":[7445],"declarations":[{"constant":false,"id":7445,"mutability":"mutable","name":"strategyDebtLimit","nameLocation":"17483:17:23","nodeType":"VariableDeclaration","scope":7485,"src":"17475:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7444,"name":"uint256","nodeType":"ElementaryTypeName","src":"17475:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7458,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7446,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"17504:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7448,"indexExpression":{"id":7447,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"17515:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17504:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7450,"indexExpression":{"id":7449,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"17525:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17504:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17536:9:23","memberName":"debtRatio","nodeType":"MemberAccess","referencedDeclaration":8125,"src":"17504:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7452,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"17560:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17560:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17504:69:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17503:71:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31305f303030","id":7456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17577:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"src":"17503:80:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17475:108:23"},{"assignments":[7460],"declarations":[{"constant":false,"id":7460,"mutability":"mutable","name":"strategyTotalDebt","nameLocation":"17601:17:23","nodeType":"VariableDeclaration","scope":7485,"src":"17593:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7459,"name":"uint256","nodeType":"ElementaryTypeName","src":"17593:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7467,"initialValue":{"expression":{"baseExpression":{"baseExpression":{"id":7461,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"17621:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7463,"indexExpression":{"id":7462,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"17632:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17621:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7465,"indexExpression":{"id":7464,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"17642:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17621:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17653:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"17621:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17593:69:23"},{"condition":{"id":7468,"name":"emergencyShutdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5972,"src":"17677:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7472,"name":"strategyTotalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"17755:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7473,"name":"strategyDebtLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7445,"src":"17776:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17755:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7482,"nodeType":"Block","src":"17834:69:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7478,"name":"strategyTotalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"17855:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7479,"name":"strategyDebtLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7445,"src":"17875:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17855:37:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7443,"id":7481,"nodeType":"Return","src":"17848:44:23"}]},"id":7483,"nodeType":"IfStatement","src":"17751:152:23","trueBody":{"id":7477,"nodeType":"Block","src":"17795:33:23","statements":[{"expression":{"hexValue":"30","id":7475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17816:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":7443,"id":7476,"nodeType":"Return","src":"17809:8:23"}]}},"id":7484,"nodeType":"IfStatement","src":"17673:230:23","trueBody":{"id":7471,"nodeType":"Block","src":"17696:49:23","statements":[{"expression":{"id":7469,"name":"strategyTotalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"17717:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7443,"id":7470,"nodeType":"Return","src":"17710:24:23"}]}}]},"id":7486,"implemented":true,"kind":"function","modifiers":[],"name":"_debtOutstanding","nameLocation":"17358:16:23","nodeType":"FunctionDefinition","parameters":{"id":7440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7437,"mutability":"mutable","name":"_chainId","nameLocation":"17391:8:23","nodeType":"VariableDeclaration","scope":7486,"src":"17384:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7436,"name":"uint16","nodeType":"ElementaryTypeName","src":"17384:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7439,"mutability":"mutable","name":"_strategy","nameLocation":"17417:9:23","nodeType":"VariableDeclaration","scope":7486,"src":"17409:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7438,"name":"address","nodeType":"ElementaryTypeName","src":"17409:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17374:58:23"},"returnParameters":{"id":7443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7486,"src":"17456:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7441,"name":"uint256","nodeType":"ElementaryTypeName","src":"17456:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17455:9:23"},"scope":7921,"src":"17349:560:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7662,"nodeType":"Block","src":"17957:1406:23","statements":[{"assignments":[7490],"declarations":[{"constant":false,"id":7490,"mutability":"mutable","name":"requestsLength","nameLocation":"17975:14:23","nodeType":"VariableDeclaration","scope":7662,"src":"17967:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7489,"name":"uint256","nodeType":"ElementaryTypeName","src":"17967:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7496,"initialValue":{"expression":{"expression":{"baseExpression":{"id":7491,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"17992:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7493,"indexExpression":{"id":7492,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"18007:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17992:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18022:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"17992:38:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":7495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18031:6:23","memberName":"length","nodeType":"MemberAccess","src":"17992:45:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17967:70:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7498,"name":"requestsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"18055:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18072:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18055:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563134","id":7501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18075:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_fff5bff707f8f14059842ca392bf43cb6be6f8f9059b23a37eaab9bbdc0ad70f","typeString":"literal_string \"V14\""},"value":"V14"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fff5bff707f8f14059842ca392bf43cb6be6f8f9059b23a37eaab9bbdc0ad70f","typeString":"literal_string \"V14\""}],"id":7497,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18047:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18047:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7503,"nodeType":"ExpressionStatement","src":"18047:34:23"},{"assignments":[7508],"declarations":[{"constant":false,"id":7508,"mutability":"mutable","name":"shareValues","nameLocation":"18109:11:23","nodeType":"VariableDeclaration","scope":7662,"src":"18092:28:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7506,"name":"uint256","nodeType":"ElementaryTypeName","src":"18092:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7507,"nodeType":"ArrayTypeName","src":"18092:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":7514,"initialValue":{"arguments":[{"id":7512,"name":"requestsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"18137:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18123:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":7509,"name":"uint256","nodeType":"ElementaryTypeName","src":"18127:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7510,"nodeType":"ArrayTypeName","src":"18127:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":7513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18123:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18092:60:23"},{"body":{"id":7544,"nodeType":"Block","src":"18208:175:23","statements":[{"assignments":[7527],"declarations":[{"constant":false,"id":7527,"mutability":"mutable","name":"request","nameLocation":"18246:7:23","nodeType":"VariableDeclaration","scope":7544,"src":"18222:31:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"},"typeName":{"id":7526,"nodeType":"UserDefinedTypeName","pathNode":{"id":7525,"name":"WithdrawRequest","nameLocations":["18222:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":8151,"src":"18222:15:23"},"referencedDeclaration":8151,"src":"18222:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"}},"visibility":"internal"}],"id":7534,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":7528,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"18256:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7530,"indexExpression":{"id":7529,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"18271:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18256:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18303:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"18256:55:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":7533,"indexExpression":{"id":7532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"18312:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18256:58:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage","typeString":"struct WithdrawRequest storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18222:92:23"},{"expression":{"id":7542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7535,"name":"shareValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7508,"src":"18328:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7537,"indexExpression":{"id":7536,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"18340:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18328:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":7539,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7527,"src":"18357:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18365:6:23","memberName":"shares","nodeType":"MemberAccess","referencedDeclaration":8144,"src":"18357:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7538,"name":"_shareValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7203,"src":"18345:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":7541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18345:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18328:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7543,"nodeType":"ExpressionStatement","src":"18328:44:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7519,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"18183:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7520,"name":"requestsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"18187:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18183:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7545,"initializationExpression":{"assignments":[7516],"declarations":[{"constant":false,"id":7516,"mutability":"mutable","name":"i","nameLocation":"18176:1:23","nodeType":"VariableDeclaration","scope":7545,"src":"18168:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7515,"name":"uint256","nodeType":"ElementaryTypeName","src":"18168:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7518,"initialValue":{"hexValue":"30","id":7517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18180:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18168:13:23"},"loopExpression":{"expression":{"id":7523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18203:3:23","subExpression":{"id":7522,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"18203:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7524,"nodeType":"ExpressionStatement","src":"18203:3:23"},"nodeType":"ForStatement","src":"18163:220:23"},{"body":{"id":7645,"nodeType":"Block","src":"18438:766:23","statements":[{"assignments":[7558],"declarations":[{"constant":false,"id":7558,"mutability":"mutable","name":"request","nameLocation":"18476:7:23","nodeType":"VariableDeclaration","scope":7645,"src":"18452:31:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"},"typeName":{"id":7557,"nodeType":"UserDefinedTypeName","pathNode":{"id":7556,"name":"WithdrawRequest","nameLocations":["18452:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":8151,"src":"18452:15:23"},"referencedDeclaration":8151,"src":"18452:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"}},"visibility":"internal"}],"id":7565,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":7559,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"18486:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7561,"indexExpression":{"id":7560,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"18501:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18486:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7562,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18533:8:23","memberName":"requests","nodeType":"MemberAccess","referencedDeclaration":8155,"src":"18486:55:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage","typeString":"struct WithdrawRequest storage ref[] storage ref"}},"id":7564,"indexExpression":{"id":7563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7547,"src":"18542:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18486:58:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage","typeString":"struct WithdrawRequest storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18452:92:23"},{"assignments":[7567],"declarations":[{"constant":false,"id":7567,"mutability":"mutable","name":"valueToTransfer","nameLocation":"18566:15:23","nodeType":"VariableDeclaration","scope":7645,"src":"18558:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7566,"name":"uint256","nodeType":"ElementaryTypeName","src":"18558:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7576,"initialValue":{"arguments":[{"baseExpression":{"id":7570,"name":"shareValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7508,"src":"18593:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7572,"indexExpression":{"id":7571,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7547,"src":"18605:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18593:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":7573,"name":"totalIdle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"18609:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18609:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7568,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"18584:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5123_$","typeString":"type(library Math)"}},"id":7569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18589:3:23","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":4300,"src":"18584:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18584:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18558:63:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7577,"name":"valueToTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7567,"src":"18640:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7578,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18658:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18666:8:23","memberName":"expected","nodeType":"MemberAccess","referencedDeclaration":8148,"src":"18658:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18640:34:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7621,"nodeType":"IfStatement","src":"18636:408:23","trueBody":{"id":7620,"nodeType":"Block","src":"18676:368:23","statements":[{"assignments":[7582],"declarations":[{"constant":false,"id":7582,"mutability":"mutable","name":"diff","nameLocation":"18702:4:23","nodeType":"VariableDeclaration","scope":7620,"src":"18694:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7581,"name":"uint256","nodeType":"ElementaryTypeName","src":"18694:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7587,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7583,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18709:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18717:8:23","memberName":"expected","nodeType":"MemberAccess","referencedDeclaration":8148,"src":"18709:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7585,"name":"valueToTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7567,"src":"18728:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18709:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18694:49:23"},{"assignments":[7589],"declarations":[{"constant":false,"id":7589,"mutability":"mutable","name":"diffScaled","nameLocation":"18769:10:23","nodeType":"VariableDeclaration","scope":7620,"src":"18761:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7588,"name":"uint256","nodeType":"ElementaryTypeName","src":"18761:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7597,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7590,"name":"diff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7582,"src":"18783:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31305f303030","id":7591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18790:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"src":"18783:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7593,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18782:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"expression":{"id":7594,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18800:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18808:8:23","memberName":"expected","nodeType":"MemberAccess","referencedDeclaration":8148,"src":"18800:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18782:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18761:55:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7598,"name":"diffScaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7589,"src":"18839:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":7599,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18852:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18860:7:23","memberName":"maxLoss","nodeType":"MemberAccess","referencedDeclaration":8146,"src":"18852:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18839:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7619,"nodeType":"IfStatement","src":"18835:195:23","trueBody":{"id":7618,"nodeType":"Block","src":"18869:161:23","statements":[{"expression":{"id":7606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7602,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18891:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"18899:7:23","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":8150,"src":"18891:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":7605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18909:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"18891:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7607,"nodeType":"ExpressionStatement","src":"18891:23:23"},{"expression":{"arguments":[{"expression":{"id":7611,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18950:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18958:6:23","memberName":"author","nodeType":"MemberAccess","referencedDeclaration":8140,"src":"18950:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7613,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"18966:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18974:6:23","memberName":"shares","nodeType":"MemberAccess","referencedDeclaration":8144,"src":"18966:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7608,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"18936:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}},"id":7610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18941:8:23","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1899,"src":"18936:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":7615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18936:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7616,"nodeType":"ExpressionStatement","src":"18936:45:23"},{"id":7617,"nodeType":"Continue","src":"19003:8:23"}]}}]}},{"expression":{"id":7626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7622,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"19058:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19066:7:23","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":8150,"src":"19058:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19076:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"19058:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7627,"nodeType":"ExpressionStatement","src":"19058:22:23"},{"expression":{"arguments":[{"expression":{"id":7631,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"19113:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19121:4:23","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":8142,"src":"19113:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7633,"name":"valueToTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7567,"src":"19127:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"19094:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"id":7630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19100:12:23","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":2989,"src":"19094:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2920_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2920_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19094:49:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7635,"nodeType":"ExpressionStatement","src":"19094:49:23"},{"expression":{"arguments":[{"arguments":[{"id":7639,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"19171:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Vault_$7921","typeString":"contract Vault"}],"id":7638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19163:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7637,"name":"address","nodeType":"ElementaryTypeName","src":"19163:7:23","typeDescriptions":{}}},"id":7640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19163:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7641,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7558,"src":"19178:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest storage pointer"}},"id":7642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19186:6:23","memberName":"shares","nodeType":"MemberAccess","referencedDeclaration":8144,"src":"19178:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7636,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"19157:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":7643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19157:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7644,"nodeType":"ExpressionStatement","src":"19157:36:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7550,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7547,"src":"18413:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7551,"name":"requestsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"18417:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18413:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7646,"initializationExpression":{"assignments":[7547],"declarations":[{"constant":false,"id":7547,"mutability":"mutable","name":"i","nameLocation":"18406:1:23","nodeType":"VariableDeclaration","scope":7646,"src":"18398:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7546,"name":"uint256","nodeType":"ElementaryTypeName","src":"18398:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7549,"initialValue":{"hexValue":"30","id":7548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18410:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18398:13:23"},"loopExpression":{"expression":{"id":7554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18433:3:23","subExpression":{"id":7553,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7547,"src":"18433:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7555,"nodeType":"ExpressionStatement","src":"18433:3:23"},"nodeType":"ForStatement","src":"18393:811:23"},{"eventCall":{"arguments":[{"id":7648,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"19242:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7649,"name":"requestsLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"19257:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7647,"name":"FulfilledWithdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"19219:22:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":7650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19219:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7651,"nodeType":"EmitStatement","src":"19214:58:23"},{"expression":{"id":7657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":7652,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"19283:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7654,"indexExpression":{"id":7653,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"19298:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19283:29:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7655,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19313:10:23","memberName":"inProgress","nodeType":"MemberAccess","referencedDeclaration":8157,"src":"19283:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":7656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19326:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"19283:48:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7658,"nodeType":"ExpressionStatement","src":"19283:48:23"},{"expression":{"id":7660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19341:15:23","subExpression":{"id":7659,"name":"withdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"19341:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7661,"nodeType":"ExpressionStatement","src":"19341:15:23"}]},"id":7663,"implemented":true,"kind":"function","modifiers":[],"name":"_fulfillWithdrawEpoch","nameLocation":"17924:21:23","nodeType":"FunctionDefinition","parameters":{"id":7487,"nodeType":"ParameterList","parameters":[],"src":"17945:2:23"},"returnParameters":{"id":7488,"nodeType":"ParameterList","parameters":[],"src":"17957:0:23"},"scope":7921,"src":"17915:1448:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7754,"nodeType":"Block","src":"19527:730:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7676,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19542:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19551:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8084,"src":"19542:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19558:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19542:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7689,"nodeType":"IfStatement","src":"19538:101:23","trueBody":{"id":7688,"nodeType":"Block","src":"19561:78:23","statements":[{"expression":{"arguments":[{"id":7681,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7665,"src":"19587:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7682,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19597:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7683,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19606:6:23","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":8080,"src":"19597:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7684,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19614:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7685,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19623:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8084,"src":"19614:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7680,"name":"_reportLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"19575:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint16,address,uint256)"}},"id":7686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19575:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7687,"nodeType":"ExpressionStatement","src":"19575:53:23"}]}},{"expression":{"id":7699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":7690,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"19648:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7694,"indexExpression":{"id":7691,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7665,"src":"19659:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19648:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7695,"indexExpression":{"expression":{"id":7692,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19669:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7693,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19678:6:23","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":8080,"src":"19669:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19648:37:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19686:9:23","memberName":"totalDebt","nodeType":"MemberAccess","referencedDeclaration":8127,"src":"19648:47:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":7697,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19699:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19708:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":8082,"src":"19699:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19648:66:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7700,"nodeType":"ExpressionStatement","src":"19648:66:23"},{"expression":{"id":7704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7701,"name":"totalDebt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5970,"src":"19724:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":7702,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19737:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19746:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":8082,"src":"19737:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19724:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7705,"nodeType":"ExpressionStatement","src":"19724:28:23"},{"expression":{"id":7711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19763:43:23","subExpression":{"expression":{"baseExpression":{"id":7706,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"19763:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7709,"indexExpression":{"expression":{"id":7707,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19778:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19787:2:23","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":8086,"src":"19778:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19763:27:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19791:13:23","memberName":"approveActual","nodeType":"MemberAccess","referencedDeclaration":8161,"src":"19763:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7712,"nodeType":"ExpressionStatement","src":"19763:43:23"},{"expression":{"id":7724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":7713,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"19816:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7716,"indexExpression":{"expression":{"id":7714,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19831:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19840:2:23","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":8086,"src":"19831:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19816:27:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19844:8:23","memberName":"approved","nodeType":"MemberAccess","referencedDeclaration":8167,"src":"19816:36:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint16 => mapping(address => bool))"}},"id":7719,"indexExpression":{"id":7718,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7665,"src":"19853:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19816:46:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7722,"indexExpression":{"expression":{"id":7720,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19863:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19872:6:23","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":8080,"src":"19863:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19816:63:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19882:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"19816:70:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7725,"nodeType":"ExpressionStatement","src":"19816:70:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7726,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"19913:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7729,"indexExpression":{"expression":{"id":7727,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19928:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19937:2:23","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":8086,"src":"19928:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19913:27:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7730,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19941:15:23","memberName":"approveExpected","nodeType":"MemberAccess","referencedDeclaration":8159,"src":"19913:43:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"baseExpression":{"id":7731,"name":"withdrawEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"19972:14:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WithdrawEpoch_$8174_storage_$","typeString":"mapping(uint256 => struct WithdrawEpoch storage ref)"}},"id":7734,"indexExpression":{"expression":{"id":7732,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19987:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19996:2:23","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":8086,"src":"19987:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19972:27:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawEpoch_$8174_storage","typeString":"struct WithdrawEpoch storage ref"}},"id":7735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20000:13:23","memberName":"approveActual","nodeType":"MemberAccess","referencedDeclaration":8161,"src":"19972:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19913:100:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7741,"nodeType":"IfStatement","src":"19896:176:23","trueBody":{"id":7740,"nodeType":"Block","src":"20024:48:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7737,"name":"_fulfillWithdrawEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7663,"src":"20038:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20038:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7739,"nodeType":"ExpressionStatement","src":"20038:23:23"}]}},{"eventCall":{"arguments":[{"id":7743,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7665,"src":"20122:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7744,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"20144:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20153:6:23","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":8080,"src":"20144:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7746,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"20173:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20182:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":8082,"src":"20173:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7748,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"20202:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20211:4:23","memberName":"loss","nodeType":"MemberAccess","referencedDeclaration":8084,"src":"20202:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7750,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"20229:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20238:2:23","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":8086,"src":"20229:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7742,"name":"StrategyWithdrawnSome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8200,"src":"20087:21:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint16,address,uint256,uint256,uint256)"}},"id":7752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20087:163:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7753,"nodeType":"EmitStatement","src":"20082:168:23"}]},"id":7755,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7671,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7665,"src":"19501:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":7672,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7668,"src":"19511:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse memory"}},"id":7673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19520:6:23","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":8080,"src":"19511:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7674,"kind":"modifierInvocation","modifierName":{"id":7670,"name":"isAction","nameLocations":["19492:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":6042,"src":"19492:8:23"},"nodeType":"ModifierInvocation","src":"19492:35:23"}],"name":"_handleWithdrawSomeResponse","nameLocation":"19378:27:23","nodeType":"FunctionDefinition","parameters":{"id":7669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7665,"mutability":"mutable","name":"_chainId","nameLocation":"19422:8:23","nodeType":"VariableDeclaration","scope":7755,"src":"19415:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7664,"name":"uint16","nodeType":"ElementaryTypeName","src":"19415:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7668,"mutability":"mutable","name":"_message","nameLocation":"19468:8:23","nodeType":"VariableDeclaration","scope":7755,"src":"19440:36:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_memory_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse"},"typeName":{"id":7667,"nodeType":"UserDefinedTypeName","pathNode":{"id":7666,"name":"WithdrawSomeResponse","nameLocations":["19440:20:23"],"nodeType":"IdentifierPath","referencedDeclaration":8087,"src":"19440:20:23"},"referencedDeclaration":8087,"src":"19440:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawSomeResponse_$8087_storage_ptr","typeString":"struct IStrategyMessages.WithdrawSomeResponse"}},"visibility":"internal"}],"src":"19405:77:23"},"returnParameters":{"id":7675,"nodeType":"ParameterList","parameters":[],"src":"19527:0:23"},"scope":7921,"src":"19369:888:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[950],"body":{"id":7802,"nodeType":"Block","src":"20427:247:23","statements":[{"assignments":[7768],"declarations":[{"constant":false,"id":7768,"mutability":"mutable","name":"srcAddress","nameLocation":"20445:10:23","nodeType":"VariableDeclaration","scope":7802,"src":"20437:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7767,"name":"address","nodeType":"ElementaryTypeName","src":"20437:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7783,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":7777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20522:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"3230","id":7778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20525:2:23","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"id":7775,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7759,"src":"20504:11:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20516:5:23","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":1088,"src":"20504:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":7779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20504:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7773,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20487:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20491:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"20487:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20487:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20479:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":7771,"name":"bytes20","nodeType":"ElementaryTypeName","src":"20479:7:23","typeDescriptions":{}}},"id":7781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20479:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":7770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20458:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7769,"name":"address","nodeType":"ElementaryTypeName","src":"20458:7:23","typeDescriptions":{}}},"id":7782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20458:82:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20437:103:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7785,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"20558:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7787,"indexExpression":{"id":7786,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7757,"src":"20569:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20558:23:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7789,"indexExpression":{"id":7788,"name":"srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7768,"src":"20582:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20558:35:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20594:10:23","memberName":"activation","nodeType":"MemberAccess","referencedDeclaration":8123,"src":"20558:46:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20607:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20558:50:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563135","id":7793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20610:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ffb1ab747312adb96abfb46262e30aa3e12a4ca4184395f7cc2e72f7b051731","typeString":"literal_string \"V15\""},"value":"V15"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ffb1ab747312adb96abfb46262e30aa3e12a4ca4184395f7cc2e72f7b051731","typeString":"literal_string \"V15\""}],"id":7784,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20550:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20550:66:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7795,"nodeType":"ExpressionStatement","src":"20550:66:23"},{"expression":{"arguments":[{"id":7797,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7757,"src":"20642:11:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7798,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7763,"src":"20655:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":7799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20665:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7796,"name":"_handlePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6892,"src":"20627:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint16,bytes memory,uint256)"}},"id":7800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20627:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7801,"nodeType":"ExpressionStatement","src":"20627:40:23"}]},"id":7803,"implemented":true,"kind":"function","modifiers":[],"name":"_nonblockingLzReceive","nameLocation":"20272:21:23","nodeType":"FunctionDefinition","overrides":{"id":7765,"nodeType":"OverrideSpecifier","overrides":[],"src":"20418:8:23"},"parameters":{"id":7764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7757,"mutability":"mutable","name":"_srcChainId","nameLocation":"20310:11:23","nodeType":"VariableDeclaration","scope":7803,"src":"20303:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7756,"name":"uint16","nodeType":"ElementaryTypeName","src":"20303:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7759,"mutability":"mutable","name":"_srcAddress","nameLocation":"20344:11:23","nodeType":"VariableDeclaration","scope":7803,"src":"20331:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7758,"name":"bytes","nodeType":"ElementaryTypeName","src":"20331:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7803,"src":"20365:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7760,"name":"uint64","nodeType":"ElementaryTypeName","src":"20365:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":7763,"mutability":"mutable","name":"_payload","nameLocation":"20394:8:23","nodeType":"VariableDeclaration","scope":7803,"src":"20381:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7762,"name":"bytes","nodeType":"ElementaryTypeName","src":"20381:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20293:115:23"},"returnParameters":{"id":7766,"nodeType":"ParameterList","parameters":[],"src":"20427:0:23"},"scope":7921,"src":"20263:411:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7838,"nodeType":"Block","src":"20820:246:23","statements":[{"assignments":[7815],"declarations":[{"constant":false,"id":7815,"mutability":"mutable","name":"fee","nameLocation":"20838:3:23","nodeType":"VariableDeclaration","scope":7838,"src":"20830:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7814,"name":"uint256","nodeType":"ElementaryTypeName","src":"20830:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7822,"initialValue":{"arguments":[{"id":7818,"name":"_destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7807,"src":"20866:12:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7819,"name":"_dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7809,"src":"20880:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7820,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7811,"src":"20887:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7816,"name":"sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5966,"src":"20844:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"id":7817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20853:12:23","memberName":"feeForBridge","nodeType":"MemberAccess","referencedDeclaration":8064,"src":"20844:21:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint16,address,bytes memory) view external returns (uint256)"}},"id":7821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20844:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20830:66:23"},{"expression":{"arguments":[{"arguments":[{"id":7830,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"20955:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}],"id":7829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20947:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7828,"name":"address","nodeType":"ElementaryTypeName","src":"20947:7:23","typeDescriptions":{}}},"id":7831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20947:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7832,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7805,"src":"20975:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7833,"name":"_destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7807,"src":"20996:12:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":7834,"name":"_dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7809,"src":"21022:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7835,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7811,"src":"21041:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7823,"name":"sgBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5966,"src":"20906:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_ISgBridge_$8065","typeString":"contract ISgBridge"}},"id":7825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20915:6:23","memberName":"bridge","nodeType":"MemberAccess","referencedDeclaration":8053,"src":"20906:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_uint256_$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint16,address,bytes memory) payable external"}},"id":7827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":7826,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7815,"src":"20929:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"20906:27:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_uint256_$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (address,uint256,uint16,address,bytes memory) payable external"}},"id":7836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20906:153:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7837,"nodeType":"ExpressionStatement","src":"20906:153:23"}]},"id":7839,"implemented":true,"kind":"function","modifiers":[],"name":"_bridge","nameLocation":"20689:7:23","nodeType":"FunctionDefinition","parameters":{"id":7812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7805,"mutability":"mutable","name":"_amount","nameLocation":"20714:7:23","nodeType":"VariableDeclaration","scope":7839,"src":"20706:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7804,"name":"uint256","nodeType":"ElementaryTypeName","src":"20706:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7807,"mutability":"mutable","name":"_destChainId","nameLocation":"20738:12:23","nodeType":"VariableDeclaration","scope":7839,"src":"20731:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7806,"name":"uint16","nodeType":"ElementaryTypeName","src":"20731:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7809,"mutability":"mutable","name":"_dest","nameLocation":"20768:5:23","nodeType":"VariableDeclaration","scope":7839,"src":"20760:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7808,"name":"address","nodeType":"ElementaryTypeName","src":"20760:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7811,"mutability":"mutable","name":"_payload","nameLocation":"20796:8:23","nodeType":"VariableDeclaration","scope":7839,"src":"20783:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7810,"name":"bytes","nodeType":"ElementaryTypeName","src":"20783:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20696:114:23"},"returnParameters":{"id":7813,"nodeType":"ParameterList","parameters":[],"src":"20820:0:23"},"scope":7921,"src":"20680:386:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7915,"nodeType":"Block","src":"21177:648:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":7848,"name":"_usedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6002,"src":"21208:11:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(uint16 => mapping(address => mapping(uint256 => bool)))"}},"id":7850,"indexExpression":{"id":7849,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7841,"src":"21220:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21208:21:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":7853,"indexExpression":{"expression":{"id":7851,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21230:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21238:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"21230:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21208:39:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":7856,"indexExpression":{"expression":{"id":7854,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21248:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7855,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21256:5:23","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":8107,"src":"21248:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21208:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":7857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21266:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"21208:63:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563136","id":7859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21285:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6955e6baaa624f389e0b20575e612dbaf853ad543050e752bced30fcb8433ae2","typeString":"literal_string \"V16\""},"value":"V16"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6955e6baaa624f389e0b20575e612dbaf853ad543050e752bced30fcb8433ae2","typeString":"literal_string \"V16\""}],"id":7847,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21187:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21187:113:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7861,"nodeType":"ExpressionStatement","src":"21187:113:23"},{"assignments":[7863],"declarations":[{"constant":false,"id":7863,"mutability":"mutable","name":"messageHash","nameLocation":"21318:11:23","nodeType":"VariableDeclaration","scope":7915,"src":"21310:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21310:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7874,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":7867,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21372:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21380:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"21372:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7869,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21390:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21398:5:23","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":8107,"src":"21390:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7871,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7841,"src":"21405:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":7865,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"21355:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21359:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"21355:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21355:59:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7864,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"21332:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21332:92:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"21310:114:23"},{"assignments":[7876],"declarations":[{"constant":false,"id":7876,"mutability":"mutable","name":"ethSignedMessageHash","nameLocation":"21442:20:23","nodeType":"VariableDeclaration","scope":7915,"src":"21434:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21434:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7884,"initialValue":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":7880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21505:34:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":7881,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7863,"src":"21541:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7878,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"21488:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21492:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"21488:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21488:65:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7877,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"21465:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21465:98:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"21434:129:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":7888,"name":"ethSignedMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7876,"src":"21608:20:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":7889,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21630:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21638:9:23","memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":8109,"src":"21630:17:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7886,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"21594:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$4257_$","typeString":"type(library ECDSA)"}},"id":7887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21600:7:23","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":4018,"src":"21594:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":7891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21594:54:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"baseExpression":{"baseExpression":{"id":7892,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"21668:10:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$_$","typeString":"mapping(uint16 => mapping(address => struct StrategyParams storage ref))"}},"id":7894,"indexExpression":{"id":7893,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7841,"src":"21679:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21668:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyParams_$8138_storage_$","typeString":"mapping(address => struct StrategyParams storage ref)"}},"id":7897,"indexExpression":{"expression":{"id":7895,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21689:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7896,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21697:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"21689:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21668:38:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$8138_storage","typeString":"struct StrategyParams storage ref"}},"id":7898,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21707:10:23","memberName":"strategist","nodeType":"MemberAccess","referencedDeclaration":8137,"src":"21668:49:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21594:123:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"563137","id":7900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21731:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d0fadbfd5581340d6125d75eec5c0f822af985ca29c469907ce2ae22a0db3fc","typeString":"literal_string \"V17\""},"value":"V17"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d0fadbfd5581340d6125d75eec5c0f822af985ca29c469907ce2ae22a0db3fc","typeString":"literal_string \"V17\""}],"id":7885,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21573:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21573:173:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7902,"nodeType":"ExpressionStatement","src":"21573:173:23"},{"expression":{"id":7913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":7903,"name":"_usedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6002,"src":"21757:11:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(uint16 => mapping(address => mapping(uint256 => bool)))"}},"id":7909,"indexExpression":{"id":7904,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7841,"src":"21769:8:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21757:21:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":7910,"indexExpression":{"expression":{"id":7905,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21779:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7906,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21787:8:23","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":8089,"src":"21779:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21757:39:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":7911,"indexExpression":{"expression":{"id":7907,"name":"_report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7844,"src":"21797:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport memory"}},"id":7908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21805:5:23","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":8107,"src":"21797:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21757:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21814:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"21757:61:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7914,"nodeType":"ExpressionStatement","src":"21757:61:23"}]},"id":7916,"implemented":true,"kind":"function","modifiers":[],"name":"_verifySignature","nameLocation":"21081:16:23","nodeType":"FunctionDefinition","parameters":{"id":7845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7841,"mutability":"mutable","name":"_chainId","nameLocation":"21114:8:23","nodeType":"VariableDeclaration","scope":7916,"src":"21107:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7840,"name":"uint16","nodeType":"ElementaryTypeName","src":"21107:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7844,"mutability":"mutable","name":"_report","nameLocation":"21154:7:23","nodeType":"VariableDeclaration","scope":7916,"src":"21132:29:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_memory_ptr","typeString":"struct IStrategyMessages.StrategyReport"},"typeName":{"id":7843,"nodeType":"UserDefinedTypeName","pathNode":{"id":7842,"name":"StrategyReport","nameLocations":["21132:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":8110,"src":"21132:14:23"},"referencedDeclaration":8110,"src":"21132:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyReport_$8110_storage_ptr","typeString":"struct IStrategyMessages.StrategyReport"}},"visibility":"internal"}],"src":"21097:70:23"},"returnParameters":{"id":7846,"nodeType":"ParameterList","parameters":[],"src":"21177:0:23"},"scope":7921,"src":"21072:753:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7919,"nodeType":"Block","src":"21858:2:23","statements":[]},"id":7920,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":7917,"nodeType":"ParameterList","parameters":[],"src":"21838:2:23"},"returnParameters":{"id":7918,"nodeType":"ParameterList","parameters":[],"src":"21858:0:23"},"scope":7921,"src":"21831:29:23","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":7922,"src":"1031:20831:23","usedErrors":[8180]}],"src":"33:21830:23"},"id":23},"contracts/integrations/stargate/IStargate.sol":{"ast":{"absolutePath":"contracts/integrations/stargate/IStargate.sol","exportedSymbols":{"IStargateReceiver":[7939],"IStargateRouter":[7987]},"id":7988,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7923,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":7939,"linearizedBaseContracts":[7939],"name":"IStargateReceiver","nameLocation":"69:17:24","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ab8236f3","id":7938,"implemented":false,"kind":"function","modifiers":[],"name":"sgReceive","nameLocation":"102:9:24","nodeType":"FunctionDefinition","parameters":{"id":7936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7925,"mutability":"mutable","name":"_srcChainId","nameLocation":"128:11:24","nodeType":"VariableDeclaration","scope":7938,"src":"121:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7924,"name":"uint16","nodeType":"ElementaryTypeName","src":"121:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7927,"mutability":"mutable","name":"_srcAddress","nameLocation":"162:11:24","nodeType":"VariableDeclaration","scope":7938,"src":"149:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7926,"name":"bytes","nodeType":"ElementaryTypeName","src":"149:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7929,"mutability":"mutable","name":"_nonce","nameLocation":"191:6:24","nodeType":"VariableDeclaration","scope":7938,"src":"183:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7928,"name":"uint256","nodeType":"ElementaryTypeName","src":"183:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7931,"mutability":"mutable","name":"_token","nameLocation":"215:6:24","nodeType":"VariableDeclaration","scope":7938,"src":"207:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7930,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7933,"mutability":"mutable","name":"amountLD","nameLocation":"239:8:24","nodeType":"VariableDeclaration","scope":7938,"src":"231:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7932,"name":"uint256","nodeType":"ElementaryTypeName","src":"231:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7935,"mutability":"mutable","name":"payload","nameLocation":"270:7:24","nodeType":"VariableDeclaration","scope":7938,"src":"257:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7934,"name":"bytes","nodeType":"ElementaryTypeName","src":"257:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"111:172:24"},"returnParameters":{"id":7937,"nodeType":"ParameterList","parameters":[],"src":"292:0:24"},"scope":7939,"src":"93:200:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":7988,"src":"59:236:24","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateRouter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":7987,"linearizedBaseContracts":[7987],"name":"IStargateRouter","nameLocation":"307:15:24","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9fbf10fc","id":7961,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"338:4:24","nodeType":"FunctionDefinition","parameters":{"id":7959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7941,"mutability":"mutable","name":"_dstChainId","nameLocation":"359:11:24","nodeType":"VariableDeclaration","scope":7961,"src":"352:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7940,"name":"uint16","nodeType":"ElementaryTypeName","src":"352:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7943,"mutability":"mutable","name":"_srcPoolId","nameLocation":"388:10:24","nodeType":"VariableDeclaration","scope":7961,"src":"380:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7942,"name":"uint256","nodeType":"ElementaryTypeName","src":"380:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7945,"mutability":"mutable","name":"_dstPoolId","nameLocation":"416:10:24","nodeType":"VariableDeclaration","scope":7961,"src":"408:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7944,"name":"uint256","nodeType":"ElementaryTypeName","src":"408:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7947,"mutability":"mutable","name":"_refundAddress","nameLocation":"452:14:24","nodeType":"VariableDeclaration","scope":7961,"src":"436:30:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":7946,"name":"address","nodeType":"ElementaryTypeName","src":"436:15:24","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":7949,"mutability":"mutable","name":"_amountLD","nameLocation":"484:9:24","nodeType":"VariableDeclaration","scope":7961,"src":"476:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7948,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7951,"mutability":"mutable","name":"_minAmountLD","nameLocation":"511:12:24","nodeType":"VariableDeclaration","scope":7961,"src":"503:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7950,"name":"uint256","nodeType":"ElementaryTypeName","src":"503:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7954,"mutability":"mutable","name":"_lzTxParams","nameLocation":"548:11:24","nodeType":"VariableDeclaration","scope":7961,"src":"533:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_LzTxObj_$7986_memory_ptr","typeString":"struct IStargateRouter.LzTxObj"},"typeName":{"id":7953,"nodeType":"UserDefinedTypeName","pathNode":{"id":7952,"name":"LzTxObj","nameLocations":["533:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":7986,"src":"533:7:24"},"referencedDeclaration":7986,"src":"533:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_LzTxObj_$7986_storage_ptr","typeString":"struct IStargateRouter.LzTxObj"}},"visibility":"internal"},{"constant":false,"id":7956,"mutability":"mutable","name":"_to","nameLocation":"584:3:24","nodeType":"VariableDeclaration","scope":7961,"src":"569:18:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7955,"name":"bytes","nodeType":"ElementaryTypeName","src":"569:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7958,"mutability":"mutable","name":"_payload","nameLocation":"612:8:24","nodeType":"VariableDeclaration","scope":7961,"src":"597:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7957,"name":"bytes","nodeType":"ElementaryTypeName","src":"597:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"342:284:24"},"returnParameters":{"id":7960,"nodeType":"ParameterList","parameters":[],"src":"643:0:24"},"scope":7987,"src":"329:315:24","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"0a512369","id":7979,"implemented":false,"kind":"function","modifiers":[],"name":"quoteLayerZeroFee","nameLocation":"659:17:24","nodeType":"FunctionDefinition","parameters":{"id":7973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7963,"mutability":"mutable","name":"_dstChainId","nameLocation":"693:11:24","nodeType":"VariableDeclaration","scope":7979,"src":"686:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7962,"name":"uint16","nodeType":"ElementaryTypeName","src":"686:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7965,"mutability":"mutable","name":"_functionType","nameLocation":"720:13:24","nodeType":"VariableDeclaration","scope":7979,"src":"714:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7964,"name":"uint8","nodeType":"ElementaryTypeName","src":"714:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7967,"mutability":"mutable","name":"_toAddress","nameLocation":"758:10:24","nodeType":"VariableDeclaration","scope":7979,"src":"743:25:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7966,"name":"bytes","nodeType":"ElementaryTypeName","src":"743:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7969,"mutability":"mutable","name":"_transferAndCallPayload","nameLocation":"793:23:24","nodeType":"VariableDeclaration","scope":7979,"src":"778:38:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7968,"name":"bytes","nodeType":"ElementaryTypeName","src":"778:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7972,"mutability":"mutable","name":"_lzTxParams","nameLocation":"841:11:24","nodeType":"VariableDeclaration","scope":7979,"src":"826:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_LzTxObj_$7986_memory_ptr","typeString":"struct IStargateRouter.LzTxObj"},"typeName":{"id":7971,"nodeType":"UserDefinedTypeName","pathNode":{"id":7970,"name":"LzTxObj","nameLocations":["826:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":7986,"src":"826:7:24"},"referencedDeclaration":7986,"src":"826:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_LzTxObj_$7986_storage_ptr","typeString":"struct IStargateRouter.LzTxObj"}},"visibility":"internal"}],"src":"676:182:24"},"returnParameters":{"id":7978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7979,"src":"882:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7974,"name":"uint256","nodeType":"ElementaryTypeName","src":"882:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7979,"src":"891:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7976,"name":"uint256","nodeType":"ElementaryTypeName","src":"891:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"881:18:24"},"scope":7987,"src":"650:250:24","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"IStargateRouter.LzTxObj","id":7986,"members":[{"constant":false,"id":7981,"mutability":"mutable","name":"dstGasForCall","nameLocation":"939:13:24","nodeType":"VariableDeclaration","scope":7986,"src":"931:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7980,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7983,"mutability":"mutable","name":"dstNativeAmount","nameLocation":"970:15:24","nodeType":"VariableDeclaration","scope":7986,"src":"962:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7982,"name":"uint256","nodeType":"ElementaryTypeName","src":"962:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7985,"mutability":"mutable","name":"dstNativeAddr","nameLocation":"1001:13:24","nodeType":"VariableDeclaration","scope":7986,"src":"995:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":7984,"name":"bytes","nodeType":"ElementaryTypeName","src":"995:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"LzTxObj","nameLocation":"913:7:24","nodeType":"StructDefinition","scope":7987,"src":"906:115:24","visibility":"public"}],"scope":7988,"src":"297:726:24","usedErrors":[]}],"src":"33:991:24"},"id":24},"contracts/interfaces/ISgBridge.sol":{"ast":{"absolutePath":"contracts/interfaces/ISgBridge.sol","exportedSymbols":{"ISgBridge":[8065]},"id":8066,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7989,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"ISgBridge","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8065,"linearizedBaseContracts":[8065],"name":"ISgBridge","nameLocation":"69:9:25","nodeType":"ContractDefinition","nodes":[{"errorSelector":"f7fcd8b1","id":7995,"name":"TokenNotSupported","nameLocation":"91:17:25","nodeType":"ErrorDefinition","parameters":{"id":7994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7991,"mutability":"mutable","name":"token","nameLocation":"117:5:25","nodeType":"VariableDeclaration","scope":7995,"src":"109:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7990,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7993,"mutability":"mutable","name":"destChainId","nameLocation":"131:11:25","nodeType":"VariableDeclaration","scope":7995,"src":"124:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7992,"name":"uint16","nodeType":"ElementaryTypeName","src":"124:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"108:35:25"},"src":"85:59:25"},{"anonymous":false,"eventSelector":"42fd8c99cc73fcf1104e49cb424169f7d7b874b92fc8aedee2ce6145784b6b93","id":8001,"name":"Bridge","nameLocation":"156:6:25","nodeType":"EventDefinition","parameters":{"id":8000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7997,"indexed":true,"mutability":"mutable","name":"chainId","nameLocation":"178:7:25","nodeType":"VariableDeclaration","scope":8001,"src":"163:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7996,"name":"uint16","nodeType":"ElementaryTypeName","src":"163:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7999,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"195:6:25","nodeType":"VariableDeclaration","scope":8001,"src":"187:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7998,"name":"uint256","nodeType":"ElementaryTypeName","src":"187:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"162:40:25"},"src":"150:53:25"},{"functionSelector":"f39e69a4","id":8008,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"218:10:25","nodeType":"FunctionDefinition","parameters":{"id":8006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8003,"mutability":"mutable","name":"_router","nameLocation":"237:7:25","nodeType":"VariableDeclaration","scope":8008,"src":"229:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8002,"name":"address","nodeType":"ElementaryTypeName","src":"229:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8005,"mutability":"mutable","name":"_currentChainId","nameLocation":"253:15:25","nodeType":"VariableDeclaration","scope":8008,"src":"246:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8004,"name":"uint16","nodeType":"ElementaryTypeName","src":"246:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"228:41:25"},"returnParameters":{"id":8007,"nodeType":"ParameterList","parameters":[],"src":"278:0:25"},"scope":8065,"src":"209:70:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c0d78655","id":8013,"implemented":false,"kind":"function","modifiers":[],"name":"setRouter","nameLocation":"294:9:25","nodeType":"FunctionDefinition","parameters":{"id":8011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8010,"mutability":"mutable","name":"_router","nameLocation":"312:7:25","nodeType":"VariableDeclaration","scope":8013,"src":"304:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8009,"name":"address","nodeType":"ElementaryTypeName","src":"304:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"303:17:25"},"returnParameters":{"id":8012,"nodeType":"ParameterList","parameters":[],"src":"329:0:25"},"scope":8065,"src":"285:45:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f0fa55a9","id":8018,"implemented":false,"kind":"function","modifiers":[],"name":"setSlippage","nameLocation":"345:11:25","nodeType":"FunctionDefinition","parameters":{"id":8016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8015,"mutability":"mutable","name":"_slippage","nameLocation":"365:9:25","nodeType":"VariableDeclaration","scope":8018,"src":"357:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8014,"name":"uint256","nodeType":"ElementaryTypeName","src":"357:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"356:19:25"},"returnParameters":{"id":8017,"nodeType":"ParameterList","parameters":[],"src":"384:0:25"},"scope":8065,"src":"336:49:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"991f2188","id":8023,"implemented":false,"kind":"function","modifiers":[],"name":"setDstGasForCall","nameLocation":"400:16:25","nodeType":"FunctionDefinition","parameters":{"id":8021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8020,"mutability":"mutable","name":"_dstGasForCall","nameLocation":"425:14:25","nodeType":"VariableDeclaration","scope":8023,"src":"417:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8019,"name":"uint256","nodeType":"ElementaryTypeName","src":"417:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"416:24:25"},"returnParameters":{"id":8022,"nodeType":"ParameterList","parameters":[],"src":"449:0:25"},"scope":8065,"src":"391:59:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"24bb7293","id":8028,"implemented":false,"kind":"function","modifiers":[],"name":"setCurrentChainId","nameLocation":"465:17:25","nodeType":"FunctionDefinition","parameters":{"id":8026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8025,"mutability":"mutable","name":"_currentChainId","nameLocation":"490:15:25","nodeType":"VariableDeclaration","scope":8028,"src":"483:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8024,"name":"uint16","nodeType":"ElementaryTypeName","src":"483:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"482:24:25"},"returnParameters":{"id":8027,"nodeType":"ParameterList","parameters":[],"src":"515:0:25"},"scope":8065,"src":"456:60:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7de07f04","id":8037,"implemented":false,"kind":"function","modifiers":[],"name":"setStargatePoolId","nameLocation":"531:17:25","nodeType":"FunctionDefinition","parameters":{"id":8035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8030,"mutability":"mutable","name":"_token","nameLocation":"566:6:25","nodeType":"VariableDeclaration","scope":8037,"src":"558:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8029,"name":"address","nodeType":"ElementaryTypeName","src":"558:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8032,"mutability":"mutable","name":"_chainId","nameLocation":"589:8:25","nodeType":"VariableDeclaration","scope":8037,"src":"582:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8031,"name":"uint16","nodeType":"ElementaryTypeName","src":"582:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8034,"mutability":"mutable","name":"_poolId","nameLocation":"615:7:25","nodeType":"VariableDeclaration","scope":8037,"src":"607:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8033,"name":"uint256","nodeType":"ElementaryTypeName","src":"607:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"548:80:25"},"returnParameters":{"id":8036,"nodeType":"ParameterList","parameters":[],"src":"637:0:25"},"scope":8065,"src":"522:116:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2d606843","id":8040,"implemented":false,"kind":"function","modifiers":[],"name":"revokeFunds","nameLocation":"653:11:25","nodeType":"FunctionDefinition","parameters":{"id":8038,"nodeType":"ParameterList","parameters":[],"src":"664:2:25"},"returnParameters":{"id":8039,"nodeType":"ParameterList","parameters":[],"src":"675:0:25"},"scope":8065,"src":"644:32:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"72408ab6","id":8053,"implemented":false,"kind":"function","modifiers":[],"name":"bridge","nameLocation":"691:6:25","nodeType":"FunctionDefinition","parameters":{"id":8051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8042,"mutability":"mutable","name":"_token","nameLocation":"715:6:25","nodeType":"VariableDeclaration","scope":8053,"src":"707:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8041,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8044,"mutability":"mutable","name":"_amount","nameLocation":"739:7:25","nodeType":"VariableDeclaration","scope":8053,"src":"731:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8043,"name":"uint256","nodeType":"ElementaryTypeName","src":"731:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8046,"mutability":"mutable","name":"_destChainId","nameLocation":"763:12:25","nodeType":"VariableDeclaration","scope":8053,"src":"756:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8045,"name":"uint16","nodeType":"ElementaryTypeName","src":"756:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8048,"mutability":"mutable","name":"_destinationAddress","nameLocation":"793:19:25","nodeType":"VariableDeclaration","scope":8053,"src":"785:27:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8047,"name":"address","nodeType":"ElementaryTypeName","src":"785:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8050,"mutability":"mutable","name":"_message","nameLocation":"835:8:25","nodeType":"VariableDeclaration","scope":8053,"src":"822:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8049,"name":"bytes","nodeType":"ElementaryTypeName","src":"822:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"697:152:25"},"returnParameters":{"id":8052,"nodeType":"ParameterList","parameters":[],"src":"866:0:25"},"scope":8065,"src":"682:185:25","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"0dc63461","id":8064,"implemented":false,"kind":"function","modifiers":[],"name":"feeForBridge","nameLocation":"882:12:25","nodeType":"FunctionDefinition","parameters":{"id":8060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8055,"mutability":"mutable","name":"_destChainId","nameLocation":"911:12:25","nodeType":"VariableDeclaration","scope":8064,"src":"904:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8054,"name":"uint16","nodeType":"ElementaryTypeName","src":"904:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8057,"mutability":"mutable","name":"_destinationContract","nameLocation":"941:20:25","nodeType":"VariableDeclaration","scope":8064,"src":"933:28:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8056,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8059,"mutability":"mutable","name":"_payload","nameLocation":"984:8:25","nodeType":"VariableDeclaration","scope":8064,"src":"971:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8058,"name":"bytes","nodeType":"ElementaryTypeName","src":"971:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"894:104:25"},"returnParameters":{"id":8063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8064,"src":"1022:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8061,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1021:9:25"},"scope":8065,"src":"873:158:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8066,"src":"59:974:25","usedErrors":[7995]}],"src":"33:1001:25"},"id":25},"contracts/interfaces/IStrategyMessages.sol":{"ast":{"absolutePath":"contracts/interfaces/IStrategyMessages.sol","exportedSymbols":{"IStrategyMessages":[8117]},"id":8118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8067,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IStrategyMessages","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":8117,"linearizedBaseContracts":[8117],"name":"IStrategyMessages","nameLocation":"69:17:26","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IStrategyMessages.MessageType","id":8073,"members":[{"id":8068,"name":"WithdrawSomeRequest","nameLocation":"120:19:26","nodeType":"EnumValue","src":"120:19:26"},{"id":8069,"name":"WithdrawSomeResponse","nameLocation":"149:20:26","nodeType":"EnumValue","src":"149:20:26"},{"id":8070,"name":"StrategyReport","nameLocation":"179:14:26","nodeType":"EnumValue","src":"179:14:26"},{"id":8071,"name":"AdjustPositionRequest","nameLocation":"203:21:26","nodeType":"EnumValue","src":"203:21:26"},{"id":8072,"name":"MigrateStrategyRequest","nameLocation":"234:22:26","nodeType":"EnumValue","src":"234:22:26"}],"name":"MessageType","nameLocation":"98:11:26","nodeType":"EnumDefinition","src":"93:169:26"},{"canonicalName":"IStrategyMessages.WithdrawSomeRequest","id":8078,"members":[{"constant":false,"id":8075,"mutability":"mutable","name":"amount","nameLocation":"313:6:26","nodeType":"VariableDeclaration","scope":8078,"src":"305:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8074,"name":"uint256","nodeType":"ElementaryTypeName","src":"305:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8077,"mutability":"mutable","name":"id","nameLocation":"337:2:26","nodeType":"VariableDeclaration","scope":8078,"src":"329:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8076,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WithdrawSomeRequest","nameLocation":"275:19:26","nodeType":"StructDefinition","scope":8117,"src":"268:78:26","visibility":"public"},{"canonicalName":"IStrategyMessages.WithdrawSomeResponse","id":8087,"members":[{"constant":false,"id":8080,"mutability":"mutable","name":"source","nameLocation":"398:6:26","nodeType":"VariableDeclaration","scope":8087,"src":"390:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8079,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8082,"mutability":"mutable","name":"amount","nameLocation":"422:6:26","nodeType":"VariableDeclaration","scope":8087,"src":"414:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8081,"name":"uint256","nodeType":"ElementaryTypeName","src":"414:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8084,"mutability":"mutable","name":"loss","nameLocation":"446:4:26","nodeType":"VariableDeclaration","scope":8087,"src":"438:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8083,"name":"uint256","nodeType":"ElementaryTypeName","src":"438:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8086,"mutability":"mutable","name":"id","nameLocation":"468:2:26","nodeType":"VariableDeclaration","scope":8087,"src":"460:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8085,"name":"uint256","nodeType":"ElementaryTypeName","src":"460:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WithdrawSomeResponse","nameLocation":"359:20:26","nodeType":"StructDefinition","scope":8117,"src":"352:125:26","visibility":"public"},{"canonicalName":"IStrategyMessages.StrategyReport","id":8110,"members":[{"constant":false,"id":8089,"mutability":"mutable","name":"strategy","nameLocation":"523:8:26","nodeType":"VariableDeclaration","scope":8110,"src":"515:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8088,"name":"address","nodeType":"ElementaryTypeName","src":"515:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8091,"mutability":"mutable","name":"timestamp","nameLocation":"549:9:26","nodeType":"VariableDeclaration","scope":8110,"src":"541:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8090,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8093,"mutability":"mutable","name":"profit","nameLocation":"576:6:26","nodeType":"VariableDeclaration","scope":8110,"src":"568:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8092,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8095,"mutability":"mutable","name":"loss","nameLocation":"600:4:26","nodeType":"VariableDeclaration","scope":8110,"src":"592:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8094,"name":"uint256","nodeType":"ElementaryTypeName","src":"592:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8097,"mutability":"mutable","name":"debtPayment","nameLocation":"622:11:26","nodeType":"VariableDeclaration","scope":8110,"src":"614:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8096,"name":"uint256","nodeType":"ElementaryTypeName","src":"614:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8099,"mutability":"mutable","name":"giveToStrategy","nameLocation":"651:14:26","nodeType":"VariableDeclaration","scope":8110,"src":"643:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8098,"name":"uint256","nodeType":"ElementaryTypeName","src":"643:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8101,"mutability":"mutable","name":"requestFromStrategy","nameLocation":"683:19:26","nodeType":"VariableDeclaration","scope":8110,"src":"675:27:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8100,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8103,"mutability":"mutable","name":"creditAvailable","nameLocation":"720:15:26","nodeType":"VariableDeclaration","scope":8110,"src":"712:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8102,"name":"uint256","nodeType":"ElementaryTypeName","src":"712:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8105,"mutability":"mutable","name":"totalAssets","nameLocation":"753:11:26","nodeType":"VariableDeclaration","scope":8110,"src":"745:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8104,"name":"uint256","nodeType":"ElementaryTypeName","src":"745:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8107,"mutability":"mutable","name":"nonce","nameLocation":"782:5:26","nodeType":"VariableDeclaration","scope":8110,"src":"774:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8106,"name":"uint256","nodeType":"ElementaryTypeName","src":"774:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8109,"mutability":"mutable","name":"signature","nameLocation":"803:9:26","nodeType":"VariableDeclaration","scope":8110,"src":"797:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":8108,"name":"bytes","nodeType":"ElementaryTypeName","src":"797:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"StrategyReport","nameLocation":"490:14:26","nodeType":"StructDefinition","scope":8117,"src":"483:336:26","visibility":"public"},{"canonicalName":"IStrategyMessages.AdjustPositionRequest","id":8113,"members":[{"constant":false,"id":8112,"mutability":"mutable","name":"debtOutstanding","nameLocation":"872:15:26","nodeType":"VariableDeclaration","scope":8113,"src":"864:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8111,"name":"uint256","nodeType":"ElementaryTypeName","src":"864:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AdjustPositionRequest","nameLocation":"832:21:26","nodeType":"StructDefinition","scope":8117,"src":"825:69:26","visibility":"public"},{"canonicalName":"IStrategyMessages.MigrateStrategyRequest","id":8116,"members":[{"constant":false,"id":8115,"mutability":"mutable","name":"newStrategy","nameLocation":"948:11:26","nodeType":"VariableDeclaration","scope":8116,"src":"940:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8114,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"MigrateStrategyRequest","nameLocation":"907:22:26","nodeType":"StructDefinition","scope":8117,"src":"900:66:26","visibility":"public"}],"scope":8118,"src":"59:909:26","usedErrors":[]}],"src":"33:936:26"},"id":26},"contracts/interfaces/IVault.sol":{"ast":{"absolutePath":"contracts/interfaces/IVault.sol","exportedSymbols":{"IERC20":[2920],"IVault":[8319],"StrategyParams":[8138],"WithdrawEpoch":[8174],"WithdrawRequest":[8151]},"id":8320,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8119,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:27"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":8121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8320,"sourceUnit":2921,"src":"59:70:27","symbolAliases":[{"foreign":{"id":8120,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"67:6:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"StrategyParams","id":8138,"members":[{"constant":false,"id":8123,"mutability":"mutable","name":"activation","nameLocation":"167:10:27","nodeType":"VariableDeclaration","scope":8138,"src":"159:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8122,"name":"uint256","nodeType":"ElementaryTypeName","src":"159:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8125,"mutability":"mutable","name":"debtRatio","nameLocation":"191:9:27","nodeType":"VariableDeclaration","scope":8138,"src":"183:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8124,"name":"uint256","nodeType":"ElementaryTypeName","src":"183:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8127,"mutability":"mutable","name":"totalDebt","nameLocation":"214:9:27","nodeType":"VariableDeclaration","scope":8138,"src":"206:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8126,"name":"uint256","nodeType":"ElementaryTypeName","src":"206:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8129,"mutability":"mutable","name":"totalGain","nameLocation":"237:9:27","nodeType":"VariableDeclaration","scope":8138,"src":"229:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8128,"name":"uint256","nodeType":"ElementaryTypeName","src":"229:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8131,"mutability":"mutable","name":"totalLoss","nameLocation":"260:9:27","nodeType":"VariableDeclaration","scope":8138,"src":"252:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8130,"name":"uint256","nodeType":"ElementaryTypeName","src":"252:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8133,"mutability":"mutable","name":"lastReport","nameLocation":"283:10:27","nodeType":"VariableDeclaration","scope":8138,"src":"275:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8132,"name":"uint256","nodeType":"ElementaryTypeName","src":"275:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8135,"mutability":"mutable","name":"performanceFee","nameLocation":"307:14:27","nodeType":"VariableDeclaration","scope":8138,"src":"299:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8134,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8137,"mutability":"mutable","name":"strategist","nameLocation":"335:10:27","nodeType":"VariableDeclaration","scope":8138,"src":"327:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8136,"name":"address","nodeType":"ElementaryTypeName","src":"327:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"StrategyParams","nameLocation":"138:14:27","nodeType":"StructDefinition","scope":8320,"src":"131:217:27","visibility":"public"},{"canonicalName":"WithdrawRequest","id":8151,"members":[{"constant":false,"id":8140,"mutability":"mutable","name":"author","nameLocation":"387:6:27","nodeType":"VariableDeclaration","scope":8151,"src":"379:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8139,"name":"address","nodeType":"ElementaryTypeName","src":"379:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8142,"mutability":"mutable","name":"user","nameLocation":"407:4:27","nodeType":"VariableDeclaration","scope":8151,"src":"399:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8141,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8144,"mutability":"mutable","name":"shares","nameLocation":"425:6:27","nodeType":"VariableDeclaration","scope":8151,"src":"417:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8143,"name":"uint256","nodeType":"ElementaryTypeName","src":"417:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8146,"mutability":"mutable","name":"maxLoss","nameLocation":"445:7:27","nodeType":"VariableDeclaration","scope":8151,"src":"437:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8145,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8148,"mutability":"mutable","name":"expected","nameLocation":"466:8:27","nodeType":"VariableDeclaration","scope":8151,"src":"458:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8147,"name":"uint256","nodeType":"ElementaryTypeName","src":"458:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8150,"mutability":"mutable","name":"success","nameLocation":"485:7:27","nodeType":"VariableDeclaration","scope":8151,"src":"480:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8149,"name":"bool","nodeType":"ElementaryTypeName","src":"480:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"WithdrawRequest","nameLocation":"357:15:27","nodeType":"StructDefinition","scope":8320,"src":"350:145:27","visibility":"public"},{"canonicalName":"WithdrawEpoch","id":8174,"members":[{"constant":false,"id":8155,"mutability":"mutable","name":"requests","nameLocation":"542:8:27","nodeType":"VariableDeclaration","scope":8174,"src":"524:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage_ptr","typeString":"struct WithdrawRequest[]"},"typeName":{"baseType":{"id":8153,"nodeType":"UserDefinedTypeName","pathNode":{"id":8152,"name":"WithdrawRequest","nameLocations":["524:15:27"],"nodeType":"IdentifierPath","referencedDeclaration":8151,"src":"524:15:27"},"referencedDeclaration":8151,"src":"524:15:27","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawRequest_$8151_storage_ptr","typeString":"struct WithdrawRequest"}},"id":8154,"nodeType":"ArrayTypeName","src":"524:17:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WithdrawRequest_$8151_storage_$dyn_storage_ptr","typeString":"struct WithdrawRequest[]"}},"visibility":"internal"},{"constant":false,"id":8157,"mutability":"mutable","name":"inProgress","nameLocation":"561:10:27","nodeType":"VariableDeclaration","scope":8174,"src":"556:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8156,"name":"bool","nodeType":"ElementaryTypeName","src":"556:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":8159,"mutability":"mutable","name":"approveExpected","nameLocation":"585:15:27","nodeType":"VariableDeclaration","scope":8174,"src":"577:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8158,"name":"uint256","nodeType":"ElementaryTypeName","src":"577:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8161,"mutability":"mutable","name":"approveActual","nameLocation":"614:13:27","nodeType":"VariableDeclaration","scope":8174,"src":"606:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8160,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8167,"mutability":"mutable","name":"approved","nameLocation":"677:8:27","nodeType":"VariableDeclaration","scope":8174,"src":"633:52:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint16 => mapping(address => bool))"},"typeName":{"id":8166,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8162,"name":"uint16","nodeType":"ElementaryTypeName","src":"641:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"633:43:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint16 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8165,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8163,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"651:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8164,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"},{"constant":false,"id":8173,"mutability":"mutable","name":"requestedAmount","nameLocation":"738:15:27","nodeType":"VariableDeclaration","scope":8174,"src":"691:62:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(address => uint256))"},"typeName":{"id":8172,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8168,"name":"uint16","nodeType":"ElementaryTypeName","src":"699:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"691:46:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8171,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8169,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"709:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8170,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"}],"name":"WithdrawEpoch","nameLocation":"504:13:27","nodeType":"StructDefinition","scope":8320,"src":"497:259:27","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8319,"linearizedBaseContracts":[8319],"name":"IVault","nameLocation":"768:6:27","nodeType":"ContractDefinition","nodes":[{"errorSelector":"03eb8b54","id":8180,"name":"InsufficientFunds","nameLocation":"787:17:27","nodeType":"ErrorDefinition","parameters":{"id":8179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8176,"mutability":"mutable","name":"amount","nameLocation":"813:6:27","nodeType":"VariableDeclaration","scope":8180,"src":"805:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8175,"name":"uint256","nodeType":"ElementaryTypeName","src":"805:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8178,"mutability":"mutable","name":"balance","nameLocation":"829:7:27","nodeType":"VariableDeclaration","scope":8180,"src":"821:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8177,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"804:33:27"},"src":"781:57:27"},{"anonymous":false,"eventSelector":"92073a89a07a000083eb8b2575fc15e7bb936efe55d00727d6942a796d7211a7","id":8188,"name":"SgReceived","nameLocation":"850:10:27","nodeType":"EventDefinition","parameters":{"id":8187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8182,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"877:5:27","nodeType":"VariableDeclaration","scope":8188,"src":"861:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8181,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8184,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"892:6:27","nodeType":"VariableDeclaration","scope":8188,"src":"884:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8183,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8186,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"908:6:27","nodeType":"VariableDeclaration","scope":8188,"src":"900:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8185,"name":"address","nodeType":"ElementaryTypeName","src":"900:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"860:55:27"},"src":"844:72:27"},{"anonymous":false,"eventSelector":"046368a4ca42efbdd968b9025440eb5590bdcda7da09f4fef8ac4ef2f44a5ed0","id":8200,"name":"StrategyWithdrawnSome","nameLocation":"927:21:27","nodeType":"EventDefinition","parameters":{"id":8199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8190,"indexed":true,"mutability":"mutable","name":"chainId","nameLocation":"973:7:27","nodeType":"VariableDeclaration","scope":8200,"src":"958:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8189,"name":"uint16","nodeType":"ElementaryTypeName","src":"958:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8192,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"1006:8:27","nodeType":"VariableDeclaration","scope":8200,"src":"990:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8191,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8194,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1032:6:27","nodeType":"VariableDeclaration","scope":8200,"src":"1024:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8196,"indexed":false,"mutability":"mutable","name":"loss","nameLocation":"1056:4:27","nodeType":"VariableDeclaration","scope":8200,"src":"1048:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8195,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8198,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1078:2:27","nodeType":"VariableDeclaration","scope":8200,"src":"1070:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8197,"name":"uint256","nodeType":"ElementaryTypeName","src":"1070:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"948:138:27"},"src":"921:166:27"},{"anonymous":false,"eventSelector":"c682eb885c208b8aaaa811c05902e24a4f14b388960311623a8f31404f655129","id":8206,"name":"FulfilledWithdrawEpoch","nameLocation":"1098:22:27","nodeType":"EventDefinition","parameters":{"id":8205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8202,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"1129:7:27","nodeType":"VariableDeclaration","scope":8206,"src":"1121:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1121:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8204,"indexed":false,"mutability":"mutable","name":"requestCount","nameLocation":"1146:12:27","nodeType":"VariableDeclaration","scope":8206,"src":"1138:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1138:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1120:39:27"},"src":"1092:68:27"},{"anonymous":false,"eventSelector":"08bc8eff67f79e18165507d64024f5ca5e90a2593c7a45cb5caf7f9d843e404c","id":8230,"name":"StrategyReported","nameLocation":"1171:16:27","nodeType":"EventDefinition","parameters":{"id":8229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8208,"indexed":false,"mutability":"mutable","name":"chainId","nameLocation":"1204:7:27","nodeType":"VariableDeclaration","scope":8230,"src":"1197:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8207,"name":"uint16","nodeType":"ElementaryTypeName","src":"1197:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8210,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"1229:8:27","nodeType":"VariableDeclaration","scope":8230,"src":"1221:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8209,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8212,"indexed":false,"mutability":"mutable","name":"gain","nameLocation":"1255:4:27","nodeType":"VariableDeclaration","scope":8230,"src":"1247:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1247:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8214,"indexed":false,"mutability":"mutable","name":"loss","nameLocation":"1277:4:27","nodeType":"VariableDeclaration","scope":8230,"src":"1269:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8213,"name":"uint256","nodeType":"ElementaryTypeName","src":"1269:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8216,"indexed":false,"mutability":"mutable","name":"debtPaid","nameLocation":"1299:8:27","nodeType":"VariableDeclaration","scope":8230,"src":"1291:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8218,"indexed":false,"mutability":"mutable","name":"totalGain","nameLocation":"1325:9:27","nodeType":"VariableDeclaration","scope":8230,"src":"1317:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1317:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8220,"indexed":false,"mutability":"mutable","name":"totalLoss","nameLocation":"1352:9:27","nodeType":"VariableDeclaration","scope":8230,"src":"1344:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1344:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8222,"indexed":false,"mutability":"mutable","name":"totalDebt","nameLocation":"1379:9:27","nodeType":"VariableDeclaration","scope":8230,"src":"1371:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1371:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8224,"indexed":false,"mutability":"mutable","name":"debtAdded","nameLocation":"1406:9:27","nodeType":"VariableDeclaration","scope":8230,"src":"1398:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1398:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8226,"indexed":false,"mutability":"mutable","name":"debtRatio","nameLocation":"1433:9:27","nodeType":"VariableDeclaration","scope":8230,"src":"1425:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8225,"name":"uint256","nodeType":"ElementaryTypeName","src":"1425:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8228,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"1460:6:27","nodeType":"VariableDeclaration","scope":8230,"src":"1452:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8227,"name":"uint256","nodeType":"ElementaryTypeName","src":"1452:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1187:285:27"},"src":"1165:308:27"},{"functionSelector":"1459457a","id":8244,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"1488:10:27","nodeType":"FunctionDefinition","parameters":{"id":8242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8232,"mutability":"mutable","name":"_governance","nameLocation":"1516:11:27","nodeType":"VariableDeclaration","scope":8244,"src":"1508:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8231,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8234,"mutability":"mutable","name":"_lzEndpoint","nameLocation":"1545:11:27","nodeType":"VariableDeclaration","scope":8244,"src":"1537:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8233,"name":"address","nodeType":"ElementaryTypeName","src":"1537:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8237,"mutability":"mutable","name":"_token","nameLocation":"1573:6:27","nodeType":"VariableDeclaration","scope":8244,"src":"1566:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":8236,"nodeType":"UserDefinedTypeName","pathNode":{"id":8235,"name":"IERC20","nameLocations":["1566:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1566:6:27"},"referencedDeclaration":2920,"src":"1566:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":8239,"mutability":"mutable","name":"_sgBridge","nameLocation":"1597:9:27","nodeType":"VariableDeclaration","scope":8244,"src":"1589:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8238,"name":"address","nodeType":"ElementaryTypeName","src":"1589:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8241,"mutability":"mutable","name":"_sgRouter","nameLocation":"1624:9:27","nodeType":"VariableDeclaration","scope":8244,"src":"1616:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8240,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1498:141:27"},"returnParameters":{"id":8243,"nodeType":"ParameterList","parameters":[],"src":"1648:0:27"},"scope":8319,"src":"1479:170:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fc0c546a","id":8250,"implemented":false,"kind":"function","modifiers":[],"name":"token","nameLocation":"1664:5:27","nodeType":"FunctionDefinition","parameters":{"id":8245,"nodeType":"ParameterList","parameters":[],"src":"1669:2:27"},"returnParameters":{"id":8249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8250,"src":"1695:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"},"typeName":{"id":8247,"nodeType":"UserDefinedTypeName","pathNode":{"id":8246,"name":"IERC20","nameLocations":["1695:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"1695:6:27"},"referencedDeclaration":2920,"src":"1695:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2920","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1694:8:27"},"scope":8319,"src":"1655:48:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2d606843","id":8253,"implemented":false,"kind":"function","modifiers":[],"name":"revokeFunds","nameLocation":"1718:11:27","nodeType":"FunctionDefinition","parameters":{"id":8251,"nodeType":"ParameterList","parameters":[],"src":"1729:2:27"},"returnParameters":{"id":8252,"nodeType":"ParameterList","parameters":[],"src":"1740:0:27"},"scope":8319,"src":"1709:32:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"01e1d114","id":8258,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1756:11:27","nodeType":"FunctionDefinition","parameters":{"id":8254,"nodeType":"ParameterList","parameters":[],"src":"1767:2:27"},"returnParameters":{"id":8257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8258,"src":"1793:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1792:9:27"},"scope":8319,"src":"1747:55:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6e553f65","id":8267,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1817:7:27","nodeType":"FunctionDefinition","parameters":{"id":8263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8260,"mutability":"mutable","name":"_amount","nameLocation":"1842:7:27","nodeType":"VariableDeclaration","scope":8267,"src":"1834:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8259,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8262,"mutability":"mutable","name":"_recipient","nameLocation":"1867:10:27","nodeType":"VariableDeclaration","scope":8267,"src":"1859:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8261,"name":"address","nodeType":"ElementaryTypeName","src":"1859:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1824:59:27"},"returnParameters":{"id":8266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8267,"src":"1902:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1902:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1901:9:27"},"scope":8319,"src":"1808:103:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e63697c8","id":8276,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1926:8:27","nodeType":"FunctionDefinition","parameters":{"id":8274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8269,"mutability":"mutable","name":"_maxShares","nameLocation":"1952:10:27","nodeType":"VariableDeclaration","scope":8276,"src":"1944:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8271,"mutability":"mutable","name":"_recipient","nameLocation":"1980:10:27","nodeType":"VariableDeclaration","scope":8276,"src":"1972:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8270,"name":"address","nodeType":"ElementaryTypeName","src":"1972:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8273,"mutability":"mutable","name":"_maxLoss","nameLocation":"2008:8:27","nodeType":"VariableDeclaration","scope":8276,"src":"2000:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2000:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1934:88:27"},"returnParameters":{"id":8275,"nodeType":"ParameterList","parameters":[],"src":"2031:0:27"},"scope":8319,"src":"1917:115:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"52106a49","id":8289,"implemented":false,"kind":"function","modifiers":[],"name":"addStrategy","nameLocation":"2047:11:27","nodeType":"FunctionDefinition","parameters":{"id":8287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8278,"mutability":"mutable","name":"_chainId","nameLocation":"2075:8:27","nodeType":"VariableDeclaration","scope":8289,"src":"2068:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8277,"name":"uint16","nodeType":"ElementaryTypeName","src":"2068:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8280,"mutability":"mutable","name":"_strategy","nameLocation":"2101:9:27","nodeType":"VariableDeclaration","scope":8289,"src":"2093:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8279,"name":"address","nodeType":"ElementaryTypeName","src":"2093:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8282,"mutability":"mutable","name":"_debtRatio","nameLocation":"2128:10:27","nodeType":"VariableDeclaration","scope":8289,"src":"2120:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8281,"name":"uint256","nodeType":"ElementaryTypeName","src":"2120:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8284,"mutability":"mutable","name":"_performanceFee","nameLocation":"2156:15:27","nodeType":"VariableDeclaration","scope":8289,"src":"2148:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8283,"name":"uint256","nodeType":"ElementaryTypeName","src":"2148:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8286,"mutability":"mutable","name":"_strategist","nameLocation":"2189:11:27","nodeType":"VariableDeclaration","scope":8289,"src":"2181:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8285,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2058:148:27"},"returnParameters":{"id":8288,"nodeType":"ParameterList","parameters":[],"src":"2215:0:27"},"scope":8319,"src":"2038:178:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ef34253c","id":8292,"implemented":false,"kind":"function","modifiers":[],"name":"handleWithdrawals","nameLocation":"2231:17:27","nodeType":"FunctionDefinition","parameters":{"id":8290,"nodeType":"ParameterList","parameters":[],"src":"2248:2:27"},"returnParameters":{"id":8291,"nodeType":"ParameterList","parameters":[],"src":"2259:0:27"},"scope":8319,"src":"2222:38:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"99530b06","id":8297,"implemented":false,"kind":"function","modifiers":[],"name":"pricePerShare","nameLocation":"2275:13:27","nodeType":"FunctionDefinition","parameters":{"id":8293,"nodeType":"ParameterList","parameters":[],"src":"2288:2:27"},"returnParameters":{"id":8296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8297,"src":"2314:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2314:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2313:9:27"},"scope":8319,"src":"2266:57:27","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cfbcc644","id":8304,"implemented":false,"kind":"function","modifiers":[],"name":"revokeStrategy","nameLocation":"2338:14:27","nodeType":"FunctionDefinition","parameters":{"id":8302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8299,"mutability":"mutable","name":"_chainId","nameLocation":"2360:8:27","nodeType":"VariableDeclaration","scope":8304,"src":"2353:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8298,"name":"uint16","nodeType":"ElementaryTypeName","src":"2353:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8301,"mutability":"mutable","name":"_strategy","nameLocation":"2378:9:27","nodeType":"VariableDeclaration","scope":8304,"src":"2370:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8300,"name":"address","nodeType":"ElementaryTypeName","src":"2370:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2352:36:27"},"returnParameters":{"id":8303,"nodeType":"ParameterList","parameters":[],"src":"2397:0:27"},"scope":8319,"src":"2329:69:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0a97c254","id":8313,"implemented":false,"kind":"function","modifiers":[],"name":"updateStrategyDebtRatio","nameLocation":"2413:23:27","nodeType":"FunctionDefinition","parameters":{"id":8311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8306,"mutability":"mutable","name":"_chainId","nameLocation":"2453:8:27","nodeType":"VariableDeclaration","scope":8313,"src":"2446:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8305,"name":"uint16","nodeType":"ElementaryTypeName","src":"2446:6:27","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":8308,"mutability":"mutable","name":"_strategy","nameLocation":"2479:9:27","nodeType":"VariableDeclaration","scope":8313,"src":"2471:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8307,"name":"address","nodeType":"ElementaryTypeName","src":"2471:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8310,"mutability":"mutable","name":"_debtRatio","nameLocation":"2506:10:27","nodeType":"VariableDeclaration","scope":8313,"src":"2498:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8309,"name":"uint256","nodeType":"ElementaryTypeName","src":"2498:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2436:86:27"},"returnParameters":{"id":8312,"nodeType":"ParameterList","parameters":[],"src":"2531:0:27"},"scope":8319,"src":"2404:128:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5aa6e675","id":8318,"implemented":false,"kind":"function","modifiers":[],"name":"governance","nameLocation":"2547:10:27","nodeType":"FunctionDefinition","parameters":{"id":8314,"nodeType":"ParameterList","parameters":[],"src":"2557:2:27"},"returnParameters":{"id":8317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8318,"src":"2583:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8315,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2582:9:27"},"scope":8319,"src":"2538:54:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8320,"src":"758:1836:27","usedErrors":[8180]}],"src":"33:2562:27"},"id":27}},"contracts":{"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol":{"ILayerZeroEndpointUpgradeable":{"abi":[{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"address","name":"_userApplication","type":"address"},{"internalType":"bytes","name":"_payload","type":"bytes"},{"internalType":"bool","name":"_payInZRO","type":"bool"},{"internalType":"bytes","name":"_adapterParam","type":"bytes"}],"name":"estimateFees","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"zroFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_userApplication","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"getInboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"address","name":"_srcAddress","type":"address"}],"name":"getOutboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getReceiveLibraryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getReceiveVersion","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getSendLibraryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getSendVersion","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"hasStoredPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isReceivingPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSendingPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"address","name":"_dstAddress","type":"address"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"receivePayload","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryPayload","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_destination","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"address","name":"_zroPaymentAddress","type":"address"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"estimateFees(uint16,address,bytes,bool,bytes)":"40a7bb10","forceResumeReceive(uint16,bytes)":"42d65a8d","getChainId()":"3408e470","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getInboundNonce(uint16,bytes)":"fdc07c70","getOutboundNonce(uint16,address)":"7a145748","getReceiveLibraryAddress(address)":"71ba2fd6","getReceiveVersion(address)":"da1a7c9a","getSendLibraryAddress(address)":"9c729da1","getSendVersion(address)":"096568f6","hasStoredPayload(uint16,bytes)":"0eaf6ea6","isReceivingPayload()":"ca066b35","isSendingPayload()":"e97a448a","receivePayload(uint16,bytes,address,uint64,uint256,bytes)":"c2fa4813","retryPayload(uint16,bytes,bytes)":"aaff5f16","send(uint16,bytes,bytes,address,address,bytes)":"c5803100","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParam\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"getInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"}],\"name\":\"getOutboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getReceiveLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getReceiveVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getSendLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getSendVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"hasStoredPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceivingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"receivePayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_destination\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":\"ILayerZeroEndpointUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x748e7abf8908f264c6fff8ea7730b1766ab5a262be7962404f7d263066b41487\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol":{"ILayerZeroReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"lzReceive(uint16,bytes,uint64,bytes)":"001d3567"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":\"ILayerZeroReceiverUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x6ce5593a1247719f7209cad8068573c249674b41b859c6379ace1baaea0ed2a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol":{"ILayerZeroUserApplicationConfigUpgradeable":{"abi":[{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forceResumeReceive(uint16,bytes)":"42d65a8d","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":\"ILayerZeroUserApplicationConfigUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol":{"LzAppUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"inputs":[],"name":"DEFAULT_PAYLOAD_SIZE_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpointUpgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"payloadSizeLimitLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setPayloadSizeLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_PAYLOAD_SIZE_LIMIT()":"c4461834","forceResumeReceive(uint16,bytes)":"42d65a8d","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getTrustedRemoteAddress(uint16)":"9f38369a","isTrustedRemote(uint16,bytes)":"3d8b38f6","lzEndpoint()":"b353aaa7","lzReceive(uint16,bytes,uint64,bytes)":"001d3567","minDstGasLookup(uint16,uint16)":"8cfd8f5c","owner()":"8da5cb5b","payloadSizeLimitLookup(uint16)":"3f1f4fa4","precrime()":"950c8a74","renounceOwnership()":"715018a6","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setMinDstGas(uint16,uint16,uint256)":"df2a5b3b","setPayloadSizeLimit(uint16,uint256)":"0df37483","setPrecrime(address)":"baf3292d","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17","setTrustedRemote(uint16,bytes)":"eb8d72b7","setTrustedRemoteAddress(uint16,bytes)":"a6c3d165","transferOwnership(address)":"f2fde38b","trustedRemoteLookup(uint16)":"7533d788"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\":\"LzAppUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x748e7abf8908f264c6fff8ea7730b1766ab5a262be7962404f7d263066b41487\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x6ce5593a1247719f7209cad8068573c249674b41b859c6379ace1baaea0ed2a3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiverUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpointUpgradeable.sol\\\";\\nimport \\\"../../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[45] private __gap;\\n}\\n\",\"keccak256\":\"0xdb4821e980d9ae21ed437cdcedbdac901253f2411f518704eaa1de9af250f4b0\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1465,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":1585,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":213,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"lzEndpoint","offset":0,"slot":"101","type":"t_contract(ILayerZeroEndpointUpgradeable)144"},{"astId":217,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"trustedRemoteLookup","offset":0,"slot":"102","type":"t_mapping(t_uint16,t_bytes_storage)"},{"astId":223,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"minDstGasLookup","offset":0,"slot":"103","type":"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"},{"astId":227,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"payloadSizeLimitLookup","offset":0,"slot":"104","type":"t_mapping(t_uint16,t_uint256)"},{"astId":229,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"precrime","offset":0,"slot":"105","type":"t_address"},{"astId":761,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol:LzAppUpgradeable","label":"__gap","offset":0,"slot":"106","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(ILayerZeroEndpointUpgradeable)144":{"encoding":"inplace","label":"contract ILayerZeroEndpointUpgradeable","numberOfBytes":"20"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(uint16 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_uint256)"},"t_mapping(t_uint16,t_uint256)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol":{"NonblockingLzAppUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes","name":"_payload","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"_reason","type":"bytes"}],"name":"MessageFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"RetryMessageSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"inputs":[],"name":"DEFAULT_PAYLOAD_SIZE_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"failedMessages","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpointUpgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"nonblockingLzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"payloadSizeLimitLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setPayloadSizeLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_PAYLOAD_SIZE_LIMIT()":"c4461834","failedMessages(uint16,bytes,uint64)":"5b8c41e6","forceResumeReceive(uint16,bytes)":"42d65a8d","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getTrustedRemoteAddress(uint16)":"9f38369a","isTrustedRemote(uint16,bytes)":"3d8b38f6","lzEndpoint()":"b353aaa7","lzReceive(uint16,bytes,uint64,bytes)":"001d3567","minDstGasLookup(uint16,uint16)":"8cfd8f5c","nonblockingLzReceive(uint16,bytes,uint64,bytes)":"66ad5c8a","owner()":"8da5cb5b","payloadSizeLimitLookup(uint16)":"3f1f4fa4","precrime()":"950c8a74","renounceOwnership()":"715018a6","retryMessage(uint16,bytes,uint64,bytes)":"d1deba1f","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setMinDstGas(uint16,uint16,uint256)":"df2a5b3b","setPayloadSizeLimit(uint16,uint256)":"0df37483","setPrecrime(address)":"baf3292d","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17","setTrustedRemote(uint16,bytes)":"eb8d72b7","setTrustedRemoteAddress(uint16,bytes)":"a6c3d165","transferOwnership(address)":"f2fde38b","trustedRemoteLookup(uint16)":"7533d788"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\":\"NonblockingLzAppUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x748e7abf8908f264c6fff8ea7730b1766ab5a262be7962404f7d263066b41487\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x6ce5593a1247719f7209cad8068573c249674b41b859c6379ace1baaea0ed2a3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiverUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpointUpgradeable.sol\\\";\\nimport \\\"../../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[45] private __gap;\\n}\\n\",\"keccak256\":\"0xdb4821e980d9ae21ed437cdcedbdac901253f2411f518704eaa1de9af250f4b0\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./LzAppUpgradeable.sol\\\";\\nimport \\\"../../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\\n    using ExcessivelySafeCall for address;\\n\\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[49] private __gap;\\n}\\n\",\"keccak256\":\"0x128f7c8d0d1d04c147cea7a2a6c2244387bef408f2a6f0a9c2a01cf54a66eea3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1465,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":1585,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":213,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"lzEndpoint","offset":0,"slot":"101","type":"t_contract(ILayerZeroEndpointUpgradeable)144"},{"astId":217,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"trustedRemoteLookup","offset":0,"slot":"102","type":"t_mapping(t_uint16,t_bytes_storage)"},{"astId":223,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"minDstGasLookup","offset":0,"slot":"103","type":"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"},{"astId":227,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"payloadSizeLimitLookup","offset":0,"slot":"104","type":"t_mapping(t_uint16,t_uint256)"},{"astId":229,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"precrime","offset":0,"slot":"105","type":"t_address"},{"astId":761,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"__gap","offset":0,"slot":"106","type":"t_array(t_uint256)45_storage"},{"astId":804,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"failedMessages","offset":0,"slot":"151","type":"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"},{"astId":1023,"contract":"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol:NonblockingLzAppUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_memory_ptr":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(ILayerZeroEndpointUpgradeable)144":{"encoding":"inplace","label":"contract ILayerZeroEndpointUpgradeable","numberOfBytes":"20"},"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))":{"encoding":"mapping","key":"t_bytes_memory_ptr","label":"mapping(bytes => mapping(uint64 => bytes32))","numberOfBytes":"32","value":"t_mapping(t_uint64,t_bytes32)"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))","numberOfBytes":"32","value":"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"},"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(uint16 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_uint256)"},"t_mapping(t_uint16,t_uint256)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint64,t_bytes32)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ca851de3c1f01d1b21b33213f35e3fc5bede1fc3603453ae3be467f606de36864736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xA8 MLOAD 0xDE EXTCODECOPY 0x1F ADD 0xD1 0xB2 SHL CALLER 0x21 EXTCODEHASH CALLDATALOAD 0xE3 0xFC JUMPDEST 0xED 0xE1 0xFC CALLDATASIZE SUB GASLIMIT GASPRICE 0xE3 0xBE CHAINID PUSH32 0x606DE36864736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"370:18108:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;370:18108:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ca851de3c1f01d1b21b33213f35e3fc5bede1fc3603453ae3be467f606de36864736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xA8 MLOAD 0xDE EXTCODECOPY 0x1F ADD 0xD1 0xB2 SHL CALLER 0x21 EXTCODEHASH CALLDATALOAD 0xE3 0xFC JUMPDEST 0xED 0xE1 0xFC CALLDATASIZE SUB GASLIMIT GASPRICE 0xE3 0xBE CHAINID PUSH32 0x606DE36864736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"370:18108:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"concat(bytes memory,bytes memory)":"infinite","concatStorage(bytes storage pointer,bytes memory)":"infinite","equal(bytes memory,bytes memory)":"infinite","equalStorage(bytes storage pointer,bytes memory)":"infinite","slice(bytes memory,uint256,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toBytes32(bytes memory,uint256)":"infinite","toUint128(bytes memory,uint256)":"infinite","toUint16(bytes memory,uint256)":"infinite","toUint256(bytes memory,uint256)":"infinite","toUint32(bytes memory,uint256)":"infinite","toUint64(bytes memory,uint256)":"infinite","toUint8(bytes memory,uint256)":"infinite","toUint96(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol":{"ExcessivelySafeCall":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122024736e344819b55014d737e2a11acd77b37325e8e67c2087775a93786ee194e464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 PUSH20 0x6E344819B55014D737E2A11ACD77B37325E8E67C KECCAK256 DUP8 PUSH24 0x5A93786EE194E464736F6C63430008130033000000000000 ","sourceMap":"72:5333:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;72:5333:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122024736e344819b55014d737e2a11acd77b37325e8e67c2087775a93786ee194e464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 PUSH20 0x6E344819B55014D737E2A11ACD77B37325E8E67C KECCAK256 DUP8 PUSH24 0x5A93786EE194E464736F6C63430008130033000000000000 ","sourceMap":"72:5333:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"excessivelySafeCall(address,uint256,uint16,bytes memory)":"infinite","excessivelySafeStaticCall(address,uint256,uint16,bytes memory)":"infinite","swapSelector(bytes4,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":\"ExcessivelySafeCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1465,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":1585,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610849806100206000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b3146100bc57806318160ddd146100df57806323b872dd146100f1578063313ce56714610104578063395093511461011357806370a082311461012657806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d575b600080fd5b6100a6610190565b6040516100b39190610693565b60405180910390f35b6100cf6100ca3660046106fd565b610222565b60405190151581526020016100b3565b6035545b6040519081526020016100b3565b6100cf6100ff366004610727565b61023c565b604051601281526020016100b3565b6100cf6101213660046106fd565b610260565b6100e3610134366004610763565b6001600160a01b031660009081526033602052604090205490565b6100a6610282565b6100cf6101653660046106fd565b610291565b6100cf6101783660046106fd565b610311565b6100e361018b366004610785565b61031f565b60606036805461019f906107b8565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906107b8565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b60003361023081858561034a565b60019150505b92915050565b60003361024a85828561046e565b6102558585856104e8565b506001949350505050565b600033610230818585610273838361031f565b61027d91906107f2565b61034a565b60606037805461019f906107b8565b6000338161029f828661031f565b9050838110156103045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610255828686840361034a565b6000336102308185856104e8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ac5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fb565b6001600160a01b03821661040d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fb565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061047a848461031f565b905060001981146104e257818110156104d55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016102fb565b6104e2848484840361034a565b50505050565b6001600160a01b03831661054c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fb565b6001600160a01b0382166105ae5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fb565b6001600160a01b038316600090815260336020526040902054818110156106265760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fb565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106869086815260200190565b60405180910390a36104e2565b600060208083528351808285015260005b818110156106c0578581018301518582016040015282016106a4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106f857600080fd5b919050565b6000806040838503121561071057600080fd5b610719836106e1565b946020939093013593505050565b60008060006060848603121561073c57600080fd5b610745846106e1565b9250610753602085016106e1565b9150604084013590509250925092565b60006020828403121561077557600080fd5b61077e826106e1565b9392505050565b6000806040838503121561079857600080fd5b6107a1836106e1565b91506107af602084016106e1565b90509250929050565b600181811c908216806107cc57607f821691505b6020821081036107ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023657634e487b7160e01b600052601160045260246000fdfea26469706673582212201fcef38054750d65610ce92e256530ad0719f6957262d994cf5ebc4cf666f8d664736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x849 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB3 SWAP2 SWAP1 PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCF PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xCF PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x727 JUMP JUMPDEST PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x260 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA6 PUSH2 0x282 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x291 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x785 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x7B8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x7B8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x34A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x24A DUP6 DUP3 DUP6 PUSH2 0x46E JUMP JUMPDEST PUSH2 0x255 DUP6 DUP6 DUP6 PUSH2 0x4E8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x273 DUP4 DUP4 PUSH2 0x31F JUMP JUMPDEST PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x7B8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x29F DUP3 DUP7 PUSH2 0x31F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x304 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x255 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x34A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47A DUP5 DUP5 PUSH2 0x31F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x4E2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x34A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x54C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x626 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x686 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x719 DUP4 PUSH2 0x6E1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x745 DUP5 PUSH2 0x6E1 JUMP JUMPDEST SWAP3 POP PUSH2 0x753 PUSH1 0x20 DUP6 ADD PUSH2 0x6E1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77E DUP3 PUSH2 0x6E1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A1 DUP4 PUSH2 0x6E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7AF PUSH1 0x20 DUP5 ADD PUSH2 0x6E1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7CC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x236 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xCE RETURN DUP1 SLOAD PUSH22 0xD65610CE92E256530AD0719F6957262D994CF5EBC4C 0xF6 PUSH7 0xF8D664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"1611:11861:9:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2361":{"entryPoint":null,"id":2361,"parameterSlots":3,"returnSlots":0},"@_approve_2296":{"entryPoint":842,"id":2296,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_2350":{"entryPoint":null,"id":2350,"parameterSlots":3,"returnSlots":0},"@_msgSender_2827":{"entryPoint":null,"id":2827,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_2339":{"entryPoint":1134,"id":2339,"parameterSlots":3,"returnSlots":0},"@_transfer_2122":{"entryPoint":1256,"id":2122,"parameterSlots":3,"returnSlots":0},"@allowance_1917":{"entryPoint":799,"id":1917,"parameterSlots":2,"returnSlots":1},"@approve_1942":{"entryPoint":546,"id":1942,"parameterSlots":2,"returnSlots":1},"@balanceOf_1874":{"entryPoint":null,"id":1874,"parameterSlots":1,"returnSlots":1},"@decimals_1850":{"entryPoint":null,"id":1850,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_2045":{"entryPoint":657,"id":2045,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_2004":{"entryPoint":608,"id":2004,"parameterSlots":2,"returnSlots":1},"@name_1830":{"entryPoint":400,"id":1830,"parameterSlots":0,"returnSlots":1},"@symbol_1840":{"entryPoint":642,"id":1840,"parameterSlots":0,"returnSlots":1},"@totalSupply_1860":{"entryPoint":null,"id":1860,"parameterSlots":0,"returnSlots":1},"@transferFrom_1975":{"entryPoint":572,"id":1975,"parameterSlots":3,"returnSlots":1},"@transfer_1899":{"entryPoint":785,"id":1899,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":1761,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":1925,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":1831,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1789,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2034,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1976,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5754:28","statements":[{"nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:427:28","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:28","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:28","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:28"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:28"},"nodeType":"YulFunctionCall","src":"166:21:28"},"nodeType":"YulExpressionStatement","src":"166:21:28"},{"nodeType":"YulVariableDeclaration","src":"196:27:28","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:28"},"nodeType":"YulFunctionCall","src":"210:13:28"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:28"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:28"},"nodeType":"YulFunctionCall","src":"239:18:28"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:28"},"nodeType":"YulFunctionCall","src":"232:34:28"},"nodeType":"YulExpressionStatement","src":"232:34:28"},{"nodeType":"YulVariableDeclaration","src":"275:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:28","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:28","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:28"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:28"},"nodeType":"YulFunctionCall","src":"369:17:28"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:28"},"nodeType":"YulFunctionCall","src":"365:26:28"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:28"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:28"},"nodeType":"YulFunctionCall","src":"403:14:28"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:28"},"nodeType":"YulFunctionCall","src":"399:23:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:28"},"nodeType":"YulFunctionCall","src":"393:30:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:28"},"nodeType":"YulFunctionCall","src":"358:66:28"},"nodeType":"YulExpressionStatement","src":"358:66:28"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:28"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:28"},"nodeType":"YulFunctionCall","src":"302:13:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:28","statements":[{"nodeType":"YulAssignment","src":"318:15:28","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:28"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:28"},"nodeType":"YulFunctionCall","src":"323:10:28"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:28"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:28","statements":[]},"src":"294:140:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"458:9:28"},{"name":"length","nodeType":"YulIdentifier","src":"469:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"454:3:28"},"nodeType":"YulFunctionCall","src":"454:22:28"},{"kind":"number","nodeType":"YulLiteral","src":"478:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"450:3:28"},"nodeType":"YulFunctionCall","src":"450:31:28"},{"kind":"number","nodeType":"YulLiteral","src":"483:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"443:6:28"},"nodeType":"YulFunctionCall","src":"443:42:28"},"nodeType":"YulExpressionStatement","src":"443:42:28"},{"nodeType":"YulAssignment","src":"494:62:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:28"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"529:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"537:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:28"},"nodeType":"YulFunctionCall","src":"525:15:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"542:3:28"},"nodeType":"YulFunctionCall","src":"542:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"521:3:28"},"nodeType":"YulFunctionCall","src":"521:29:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:28"},"nodeType":"YulFunctionCall","src":"506:45:28"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:28"},"nodeType":"YulFunctionCall","src":"502:54:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:28"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:28","type":""}],"src":"14:548:28"},{"body":{"nodeType":"YulBlock","src":"616:124:28","statements":[{"nodeType":"YulAssignment","src":"626:29:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"648:6:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"635:12:28"},"nodeType":"YulFunctionCall","src":"635:20:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"626:5:28"}]},{"body":{"nodeType":"YulBlock","src":"718:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"727:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"730:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"720:6:28"},"nodeType":"YulFunctionCall","src":"720:12:28"},"nodeType":"YulExpressionStatement","src":"720:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"677:5:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"688:5:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"703:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"708:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"699:3:28"},"nodeType":"YulFunctionCall","src":"699:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"712:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"695:3:28"},"nodeType":"YulFunctionCall","src":"695:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"684:3:28"},"nodeType":"YulFunctionCall","src":"684:31:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"674:2:28"},"nodeType":"YulFunctionCall","src":"674:42:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"667:6:28"},"nodeType":"YulFunctionCall","src":"667:50:28"},"nodeType":"YulIf","src":"664:70:28"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:28","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"606:5:28","type":""}],"src":"567:173:28"},{"body":{"nodeType":"YulBlock","src":"832:167:28","statements":[{"body":{"nodeType":"YulBlock","src":"878:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"887:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"890:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"880:6:28"},"nodeType":"YulFunctionCall","src":"880:12:28"},"nodeType":"YulExpressionStatement","src":"880:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"853:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"862:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"849:3:28"},"nodeType":"YulFunctionCall","src":"849:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"874:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"845:3:28"},"nodeType":"YulFunctionCall","src":"845:32:28"},"nodeType":"YulIf","src":"842:52:28"},{"nodeType":"YulAssignment","src":"903:39:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"932:9:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"913:18:28"},"nodeType":"YulFunctionCall","src":"913:29:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"903:6:28"}]},{"nodeType":"YulAssignment","src":"951:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"978:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"989:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"974:3:28"},"nodeType":"YulFunctionCall","src":"974:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"961:12:28"},"nodeType":"YulFunctionCall","src":"961:32:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"951:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"790:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"801:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"813:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"821:6:28","type":""}],"src":"745:254:28"},{"body":{"nodeType":"YulBlock","src":"1099:92:28","statements":[{"nodeType":"YulAssignment","src":"1109:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1121:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1132:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1117:3:28"},"nodeType":"YulFunctionCall","src":"1117:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1109:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:28"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1176:6:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1169:6:28"},"nodeType":"YulFunctionCall","src":"1169:14:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1162:6:28"},"nodeType":"YulFunctionCall","src":"1162:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1144:6:28"},"nodeType":"YulFunctionCall","src":"1144:41:28"},"nodeType":"YulExpressionStatement","src":"1144:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1068:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1079:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1090:4:28","type":""}],"src":"1004:187:28"},{"body":{"nodeType":"YulBlock","src":"1297:76:28","statements":[{"nodeType":"YulAssignment","src":"1307:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1319:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1330:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1315:3:28"},"nodeType":"YulFunctionCall","src":"1315:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1307:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1349:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"1360:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1342:6:28"},"nodeType":"YulFunctionCall","src":"1342:25:28"},"nodeType":"YulExpressionStatement","src":"1342:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1266:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1277:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1288:4:28","type":""}],"src":"1196:177:28"},{"body":{"nodeType":"YulBlock","src":"1482:224:28","statements":[{"body":{"nodeType":"YulBlock","src":"1528:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1537:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1540:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1530:6:28"},"nodeType":"YulFunctionCall","src":"1530:12:28"},"nodeType":"YulExpressionStatement","src":"1530:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1503:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1499:3:28"},"nodeType":"YulFunctionCall","src":"1499:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"1524:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1495:3:28"},"nodeType":"YulFunctionCall","src":"1495:32:28"},"nodeType":"YulIf","src":"1492:52:28"},{"nodeType":"YulAssignment","src":"1553:39:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1582:9:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1563:18:28"},"nodeType":"YulFunctionCall","src":"1563:29:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1553:6:28"}]},{"nodeType":"YulAssignment","src":"1601:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1634:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1645:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1630:3:28"},"nodeType":"YulFunctionCall","src":"1630:18:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1611:18:28"},"nodeType":"YulFunctionCall","src":"1611:38:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1601:6:28"}]},{"nodeType":"YulAssignment","src":"1658:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1685:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1696:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1681:3:28"},"nodeType":"YulFunctionCall","src":"1681:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1668:12:28"},"nodeType":"YulFunctionCall","src":"1668:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1658:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1432:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1443:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1455:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1463:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1471:6:28","type":""}],"src":"1378:328:28"},{"body":{"nodeType":"YulBlock","src":"1808:87:28","statements":[{"nodeType":"YulAssignment","src":"1818:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1830:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1841:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1826:3:28"},"nodeType":"YulFunctionCall","src":"1826:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1818:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1860:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1875:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"1883:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1871:3:28"},"nodeType":"YulFunctionCall","src":"1871:17:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1853:6:28"},"nodeType":"YulFunctionCall","src":"1853:36:28"},"nodeType":"YulExpressionStatement","src":"1853:36:28"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1777:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1788:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1799:4:28","type":""}],"src":"1711:184:28"},{"body":{"nodeType":"YulBlock","src":"1970:116:28","statements":[{"body":{"nodeType":"YulBlock","src":"2016:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2025:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2028:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2018:6:28"},"nodeType":"YulFunctionCall","src":"2018:12:28"},"nodeType":"YulExpressionStatement","src":"2018:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1991:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"2000:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1987:3:28"},"nodeType":"YulFunctionCall","src":"1987:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"2012:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1983:3:28"},"nodeType":"YulFunctionCall","src":"1983:32:28"},"nodeType":"YulIf","src":"1980:52:28"},{"nodeType":"YulAssignment","src":"2041:39:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2070:9:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2051:18:28"},"nodeType":"YulFunctionCall","src":"2051:29:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2041:6:28"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1936:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1947:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1959:6:28","type":""}],"src":"1900:186:28"},{"body":{"nodeType":"YulBlock","src":"2178:173:28","statements":[{"body":{"nodeType":"YulBlock","src":"2224:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2233:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2236:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2226:6:28"},"nodeType":"YulFunctionCall","src":"2226:12:28"},"nodeType":"YulExpressionStatement","src":"2226:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2199:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"2208:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2195:3:28"},"nodeType":"YulFunctionCall","src":"2195:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"2220:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2191:3:28"},"nodeType":"YulFunctionCall","src":"2191:32:28"},"nodeType":"YulIf","src":"2188:52:28"},{"nodeType":"YulAssignment","src":"2249:39:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2278:9:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2259:18:28"},"nodeType":"YulFunctionCall","src":"2259:29:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2249:6:28"}]},{"nodeType":"YulAssignment","src":"2297:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2330:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"2341:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2326:3:28"},"nodeType":"YulFunctionCall","src":"2326:18:28"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2307:18:28"},"nodeType":"YulFunctionCall","src":"2307:38:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2297:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2136:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2147:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2159:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2167:6:28","type":""}],"src":"2091:260:28"},{"body":{"nodeType":"YulBlock","src":"2411:325:28","statements":[{"nodeType":"YulAssignment","src":"2421:22:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2435:1:28","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2438:4:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2431:3:28"},"nodeType":"YulFunctionCall","src":"2431:12:28"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2421:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"2452:38:28","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2482:4:28"},{"kind":"number","nodeType":"YulLiteral","src":"2488:1:28","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2478:3:28"},"nodeType":"YulFunctionCall","src":"2478:12:28"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2456:18:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"2529:31:28","statements":[{"nodeType":"YulAssignment","src":"2531:27:28","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2545:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"2553:4:28","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2541:3:28"},"nodeType":"YulFunctionCall","src":"2541:17:28"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2531:6:28"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2509:18:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2502:6:28"},"nodeType":"YulFunctionCall","src":"2502:26:28"},"nodeType":"YulIf","src":"2499:61:28"},{"body":{"nodeType":"YulBlock","src":"2619:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2640:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2647:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2652:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2643:3:28"},"nodeType":"YulFunctionCall","src":"2643:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2633:6:28"},"nodeType":"YulFunctionCall","src":"2633:31:28"},"nodeType":"YulExpressionStatement","src":"2633:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2684:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2687:4:28","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2677:6:28"},"nodeType":"YulFunctionCall","src":"2677:15:28"},"nodeType":"YulExpressionStatement","src":"2677:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2712:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2715:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2705:6:28"},"nodeType":"YulFunctionCall","src":"2705:15:28"},"nodeType":"YulExpressionStatement","src":"2705:15:28"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2575:18:28"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2598:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"2606:2:28","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2595:2:28"},"nodeType":"YulFunctionCall","src":"2595:14:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2572:2:28"},"nodeType":"YulFunctionCall","src":"2572:38:28"},"nodeType":"YulIf","src":"2569:161:28"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2391:4:28","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2400:6:28","type":""}],"src":"2356:380:28"},{"body":{"nodeType":"YulBlock","src":"2789:174:28","statements":[{"nodeType":"YulAssignment","src":"2799:16:28","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2810:1:28"},{"name":"y","nodeType":"YulIdentifier","src":"2813:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2806:3:28"},"nodeType":"YulFunctionCall","src":"2806:9:28"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2799:3:28"}]},{"body":{"nodeType":"YulBlock","src":"2846:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2867:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2874:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2879:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2870:3:28"},"nodeType":"YulFunctionCall","src":"2870:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2860:6:28"},"nodeType":"YulFunctionCall","src":"2860:31:28"},"nodeType":"YulExpressionStatement","src":"2860:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2911:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2914:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2904:6:28"},"nodeType":"YulFunctionCall","src":"2904:15:28"},"nodeType":"YulExpressionStatement","src":"2904:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2939:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2942:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2932:6:28"},"nodeType":"YulFunctionCall","src":"2932:15:28"},"nodeType":"YulExpressionStatement","src":"2932:15:28"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2830:1:28"},{"name":"sum","nodeType":"YulIdentifier","src":"2833:3:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2827:2:28"},"nodeType":"YulFunctionCall","src":"2827:10:28"},"nodeType":"YulIf","src":"2824:133:28"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2772:1:28","type":""},{"name":"y","nodeType":"YulTypedName","src":"2775:1:28","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2781:3:28","type":""}],"src":"2741:222:28"},{"body":{"nodeType":"YulBlock","src":"3142:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3159:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3170:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3152:6:28"},"nodeType":"YulFunctionCall","src":"3152:21:28"},"nodeType":"YulExpressionStatement","src":"3152:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3193:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3204:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3189:3:28"},"nodeType":"YulFunctionCall","src":"3189:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"3209:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3182:6:28"},"nodeType":"YulFunctionCall","src":"3182:30:28"},"nodeType":"YulExpressionStatement","src":"3182:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3232:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3243:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3228:3:28"},"nodeType":"YulFunctionCall","src":"3228:18:28"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3248:34:28","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3221:6:28"},"nodeType":"YulFunctionCall","src":"3221:62:28"},"nodeType":"YulExpressionStatement","src":"3221:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3303:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3314:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:28"},"nodeType":"YulFunctionCall","src":"3299:18:28"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3319:7:28","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3292:6:28"},"nodeType":"YulFunctionCall","src":"3292:35:28"},"nodeType":"YulExpressionStatement","src":"3292:35:28"},{"nodeType":"YulAssignment","src":"3336:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3348:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3359:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3344:3:28"},"nodeType":"YulFunctionCall","src":"3344:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3336:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3119:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3133:4:28","type":""}],"src":"2968:401:28"},{"body":{"nodeType":"YulBlock","src":"3548:226:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3565:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3576:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3558:6:28"},"nodeType":"YulFunctionCall","src":"3558:21:28"},"nodeType":"YulExpressionStatement","src":"3558:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3610:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3595:3:28"},"nodeType":"YulFunctionCall","src":"3595:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"3615:2:28","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3588:6:28"},"nodeType":"YulFunctionCall","src":"3588:30:28"},"nodeType":"YulExpressionStatement","src":"3588:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3638:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3649:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3634:3:28"},"nodeType":"YulFunctionCall","src":"3634:18:28"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3654:34:28","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3627:6:28"},"nodeType":"YulFunctionCall","src":"3627:62:28"},"nodeType":"YulExpressionStatement","src":"3627:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3709:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3720:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3705:3:28"},"nodeType":"YulFunctionCall","src":"3705:18:28"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3725:6:28","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3698:6:28"},"nodeType":"YulFunctionCall","src":"3698:34:28"},"nodeType":"YulExpressionStatement","src":"3698:34:28"},{"nodeType":"YulAssignment","src":"3741:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3753:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3764:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3749:3:28"},"nodeType":"YulFunctionCall","src":"3749:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3741:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3525:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3539:4:28","type":""}],"src":"3374:400:28"},{"body":{"nodeType":"YulBlock","src":"3953:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3970:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3981:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3963:6:28"},"nodeType":"YulFunctionCall","src":"3963:21:28"},"nodeType":"YulExpressionStatement","src":"3963:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4004:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4015:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4000:3:28"},"nodeType":"YulFunctionCall","src":"4000:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"4020:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3993:6:28"},"nodeType":"YulFunctionCall","src":"3993:30:28"},"nodeType":"YulExpressionStatement","src":"3993:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4043:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4054:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4039:3:28"},"nodeType":"YulFunctionCall","src":"4039:18:28"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4059:34:28","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4032:6:28"},"nodeType":"YulFunctionCall","src":"4032:62:28"},"nodeType":"YulExpressionStatement","src":"4032:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4114:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4125:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4110:3:28"},"nodeType":"YulFunctionCall","src":"4110:18:28"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4130:4:28","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4103:6:28"},"nodeType":"YulFunctionCall","src":"4103:32:28"},"nodeType":"YulExpressionStatement","src":"4103:32:28"},{"nodeType":"YulAssignment","src":"4144:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4156:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4167:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4152:3:28"},"nodeType":"YulFunctionCall","src":"4152:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4144:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3930:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3944:4:28","type":""}],"src":"3779:398:28"},{"body":{"nodeType":"YulBlock","src":"4356:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4373:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4366:6:28"},"nodeType":"YulFunctionCall","src":"4366:21:28"},"nodeType":"YulExpressionStatement","src":"4366:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4407:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4418:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4403:3:28"},"nodeType":"YulFunctionCall","src":"4403:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4396:6:28"},"nodeType":"YulFunctionCall","src":"4396:30:28"},"nodeType":"YulExpressionStatement","src":"4396:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4446:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4457:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:28"},"nodeType":"YulFunctionCall","src":"4442:18:28"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4462:31:28","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:28"},"nodeType":"YulFunctionCall","src":"4435:59:28"},"nodeType":"YulExpressionStatement","src":"4435:59:28"},{"nodeType":"YulAssignment","src":"4503:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4515:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4526:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4511:3:28"},"nodeType":"YulFunctionCall","src":"4511:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4503:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4333:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4347:4:28","type":""}],"src":"4182:353:28"},{"body":{"nodeType":"YulBlock","src":"4714:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4731:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4742:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4724:6:28"},"nodeType":"YulFunctionCall","src":"4724:21:28"},"nodeType":"YulExpressionStatement","src":"4724:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4765:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4776:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4761:3:28"},"nodeType":"YulFunctionCall","src":"4761:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"4781:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4754:6:28"},"nodeType":"YulFunctionCall","src":"4754:30:28"},"nodeType":"YulExpressionStatement","src":"4754:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4804:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4815:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4800:3:28"},"nodeType":"YulFunctionCall","src":"4800:18:28"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"4820:34:28","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4793:6:28"},"nodeType":"YulFunctionCall","src":"4793:62:28"},"nodeType":"YulExpressionStatement","src":"4793:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4886:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:28"},"nodeType":"YulFunctionCall","src":"4871:18:28"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"4891:7:28","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4864:6:28"},"nodeType":"YulFunctionCall","src":"4864:35:28"},"nodeType":"YulExpressionStatement","src":"4864:35:28"},{"nodeType":"YulAssignment","src":"4908:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4920:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4931:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4916:3:28"},"nodeType":"YulFunctionCall","src":"4916:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4908:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4691:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4705:4:28","type":""}],"src":"4540:401:28"},{"body":{"nodeType":"YulBlock","src":"5120:225:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5148:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5130:6:28"},"nodeType":"YulFunctionCall","src":"5130:21:28"},"nodeType":"YulExpressionStatement","src":"5130:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5171:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5182:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5167:3:28"},"nodeType":"YulFunctionCall","src":"5167:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"5187:2:28","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5160:6:28"},"nodeType":"YulFunctionCall","src":"5160:30:28"},"nodeType":"YulExpressionStatement","src":"5160:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5210:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5221:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5206:3:28"},"nodeType":"YulFunctionCall","src":"5206:18:28"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5226:34:28","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5199:6:28"},"nodeType":"YulFunctionCall","src":"5199:62:28"},"nodeType":"YulExpressionStatement","src":"5199:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5281:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5292:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5277:3:28"},"nodeType":"YulFunctionCall","src":"5277:18:28"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5297:5:28","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5270:6:28"},"nodeType":"YulFunctionCall","src":"5270:33:28"},"nodeType":"YulExpressionStatement","src":"5270:33:28"},{"nodeType":"YulAssignment","src":"5312:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5324:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5335:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5320:3:28"},"nodeType":"YulFunctionCall","src":"5320:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5312:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5097:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5111:4:28","type":""}],"src":"4946:399:28"},{"body":{"nodeType":"YulBlock","src":"5524:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5541:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5552:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5534:6:28"},"nodeType":"YulFunctionCall","src":"5534:21:28"},"nodeType":"YulExpressionStatement","src":"5534:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5575:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5586:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5571:3:28"},"nodeType":"YulFunctionCall","src":"5571:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"5591:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5564:6:28"},"nodeType":"YulFunctionCall","src":"5564:30:28"},"nodeType":"YulExpressionStatement","src":"5564:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5614:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5625:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5610:3:28"},"nodeType":"YulFunctionCall","src":"5610:18:28"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5630:34:28","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5603:6:28"},"nodeType":"YulFunctionCall","src":"5603:62:28"},"nodeType":"YulExpressionStatement","src":"5603:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5685:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5696:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5681:3:28"},"nodeType":"YulFunctionCall","src":"5681:18:28"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5701:8:28","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5674:6:28"},"nodeType":"YulFunctionCall","src":"5674:36:28"},"nodeType":"YulExpressionStatement","src":"5674:36:28"},{"nodeType":"YulAssignment","src":"5719:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5731:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5742:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5727:3:28"},"nodeType":"YulFunctionCall","src":"5727:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5719:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5501:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5515:4:28","type":""}],"src":"5350:402:28"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b3146100bc57806318160ddd146100df57806323b872dd146100f1578063313ce56714610104578063395093511461011357806370a082311461012657806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d575b600080fd5b6100a6610190565b6040516100b39190610693565b60405180910390f35b6100cf6100ca3660046106fd565b610222565b60405190151581526020016100b3565b6035545b6040519081526020016100b3565b6100cf6100ff366004610727565b61023c565b604051601281526020016100b3565b6100cf6101213660046106fd565b610260565b6100e3610134366004610763565b6001600160a01b031660009081526033602052604090205490565b6100a6610282565b6100cf6101653660046106fd565b610291565b6100cf6101783660046106fd565b610311565b6100e361018b366004610785565b61031f565b60606036805461019f906107b8565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906107b8565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b60003361023081858561034a565b60019150505b92915050565b60003361024a85828561046e565b6102558585856104e8565b506001949350505050565b600033610230818585610273838361031f565b61027d91906107f2565b61034a565b60606037805461019f906107b8565b6000338161029f828661031f565b9050838110156103045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610255828686840361034a565b6000336102308185856104e8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ac5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fb565b6001600160a01b03821661040d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fb565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061047a848461031f565b905060001981146104e257818110156104d55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016102fb565b6104e2848484840361034a565b50505050565b6001600160a01b03831661054c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fb565b6001600160a01b0382166105ae5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fb565b6001600160a01b038316600090815260336020526040902054818110156106265760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fb565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106869086815260200190565b60405180910390a36104e2565b600060208083528351808285015260005b818110156106c0578581018301518582016040015282016106a4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106f857600080fd5b919050565b6000806040838503121561071057600080fd5b610719836106e1565b946020939093013593505050565b60008060006060848603121561073c57600080fd5b610745846106e1565b9250610753602085016106e1565b9150604084013590509250925092565b60006020828403121561077557600080fd5b61077e826106e1565b9392505050565b6000806040838503121561079857600080fd5b6107a1836106e1565b91506107af602084016106e1565b90509250929050565b600181811c908216806107cc57607f821691505b6020821081036107ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023657634e487b7160e01b600052601160045260246000fdfea26469706673582212201fcef38054750d65610ce92e256530ad0719f6957262d994cf5ebc4cf666f8d664736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB3 SWAP2 SWAP1 PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCF PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xCF PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x727 JUMP JUMPDEST PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x121 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x260 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA6 PUSH2 0x282 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x291 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x785 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x7B8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x7B8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x34A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x24A DUP6 DUP3 DUP6 PUSH2 0x46E JUMP JUMPDEST PUSH2 0x255 DUP6 DUP6 DUP6 PUSH2 0x4E8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x273 DUP4 DUP4 PUSH2 0x31F JUMP JUMPDEST PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x7B8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x29F DUP3 DUP7 PUSH2 0x31F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x304 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x255 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x34A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x230 DUP2 DUP6 DUP6 PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47A DUP5 DUP5 PUSH2 0x31F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4E2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x4E2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x34A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x54C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x626 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x686 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x719 DUP4 PUSH2 0x6E1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x745 DUP5 PUSH2 0x6E1 JUMP JUMPDEST SWAP3 POP PUSH2 0x753 PUSH1 0x20 DUP6 ADD PUSH2 0x6E1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x77E DUP3 PUSH2 0x6E1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A1 DUP4 PUSH2 0x6E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7AF PUSH1 0x20 DUP5 ADD PUSH2 0x6E1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7CC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x236 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xCE RETURN DUP1 SLOAD PUSH22 0xD65610CE92E256530AD0719F6957262D994CF5EBC4C 0xF6 PUSH7 0xF8D664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"1611:11861:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4781:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:28;;1162:22;1144:41;;1132:2;1117:18;4781:197:9;1004:187:28;3592:106:9;3679:12;;3592:106;;;1342:25:28;;;1330:2;1315:18;3592:106:9;1196:177:28;5540:256:9;;;;;;:::i;:::-;;:::i;3441:91::-;;;3523:2;1853:36:28;;1841:2;1826:18;3441:91:9;1711:184:28;6191:234:9;;;;;;:::i;:::-;;:::i;3756:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:9;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;2706:102;;;:::i;6912:427::-;;;;;;:::i;:::-;;:::i;4077:189::-;;;;;;:::i;:::-;;:::i;4324:149::-;;;;;;:::i;:::-;;:::i;2495:98::-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4781:197::-;4864:4;929:10:13;4918:32:9;929:10:13;4934:7:9;4943:6;4918:8;:32::i;:::-;4967:4;4960:11;;;4781:197;;;;;:::o;5540:256::-;5637:4;929:10:13;5693:38:9;5709:4;929:10:13;5724:6:9;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:9;;5540:256;-1:-1:-1;;;;5540:256:9:o;6191:234::-;6279:4;929:10:13;6333:64:9;929:10:13;6349:7:9;6386:10;6358:25;929:10:13;6349:7:9;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;2706:102::-;2762:13;2794:7;2787:14;;;;;:::i;6912:427::-;7005:4;929:10:13;7005:4:9;7086:25;929:10:13;7103:7:9;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:9;;3170:2:28;7121:85:9;;;3152:21:28;3209:2;3189:18;;;3182:30;3248:34;3228:18;;;3221:62;-1:-1:-1;;;3299:18:28;;;3292:35;3344:19;;7121:85:9;;;;;;;;;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;4077:189::-;4156:4;929:10:13;4210:28:9;929:10:13;4227:2:9;4231:6;4210:9;:28::i;4324:149::-;-1:-1:-1;;;;;4439:18:9;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;10794:340::-;-1:-1:-1;;;;;10895:19:9;;10887:68;;;;-1:-1:-1;;;10887:68:9;;3576:2:28;10887:68:9;;;3558:21:28;3615:2;3595:18;;;3588:30;3654:34;3634:18;;;3627:62;-1:-1:-1;;;3705:18:28;;;3698:34;3749:19;;10887:68:9;3374:400:28;10887:68:9;-1:-1:-1;;;;;10973:21:9;;10965:68;;;;-1:-1:-1;;;10965:68:9;;3981:2:28;10965:68:9;;;3963:21:28;4020:2;4000:18;;;3993:30;4059:34;4039:18;;;4032:62;-1:-1:-1;;;4110:18:28;;;4103:32;4152:19;;10965:68:9;3779:398:28;10965:68:9;-1:-1:-1;;;;;11044:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;1342:25:28;;;11095:32:9;;1315:18:28;11095:32:9;;;;;;;10794:340;;;:::o;11415:411::-;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:9;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:9;;4384:2:28;11634:68:9;;;4366:21:28;4423:2;4403:18;;;4396:30;4462:31;4442:18;;;4435:59;4511:18;;11634:68:9;4182:353:28;11634:68:9;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11505:321;11415:411;;;:::o;7793:788::-;-1:-1:-1;;;;;7889:18:9;;7881:68;;;;-1:-1:-1;;;7881:68:9;;4742:2:28;7881:68:9;;;4724:21:28;4781:2;4761:18;;;4754:30;4820:34;4800:18;;;4793:62;-1:-1:-1;;;4871:18:28;;;4864:35;4916:19;;7881:68:9;4540:401:28;7881:68:9;-1:-1:-1;;;;;7967:16:9;;7959:64;;;;-1:-1:-1;;;7959:64:9;;5148:2:28;7959:64:9;;;5130:21:28;5187:2;5167:18;;;5160:30;5226:34;5206:18;;;5199:62;-1:-1:-1;;;5277:18:28;;;5270:33;5320:19;;7959:64:9;4946:399:28;7959:64:9;-1:-1:-1;;;;;8105:15:9;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:9;;5552:2:28;8130:72:9;;;5534:21:28;5591:2;5571:18;;;5564:30;5630:34;5610:18;;;5603:62;-1:-1:-1;;;5681:18:28;;;5674:36;5727:19;;8130:72:9;5350:402:28;8130:72:9;-1:-1:-1;;;;;8236:15:9;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;;;;;8268:6;1342:25:28;;1330:2;1315:18;;1196:177;8500:26:9;;;;;;;;8537:37;12410:91;14:548:28;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:28;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:28:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:28:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:380::-;2435:1;2431:12;;;;2478;;;2499:61;;2553:4;2545:6;2541:17;2531:27;;2499:61;2606:2;2598:6;2595:14;2575:18;2572:38;2569:161;;2652:10;2647:3;2643:20;2640:1;2633:31;2687:4;2684:1;2677:15;2715:4;2712:1;2705:15;2569:161;;2356:380;;;:::o;2741:222::-;2806:9;;;2827:10;;;2824:133;;;2879:10;2874:3;2870:20;2867:1;2860:31;2914:4;2911:1;2904:15;2942:4;2939:1;2932:15"},"gasEstimates":{"creation":{"codeDepositCost":"424200","executionCost":"461","totalCost":"424661"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24605","balanceOf(address)":"2647","decimals()":"243","decreaseAllowance(address,uint256)":"27104","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2303","transfer(address,uint256)":"51235","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1774,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1780,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1782,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1784,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1786,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":2366,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4d18adee153164ecf0a9213018813b2c2287313d51015ab4ac451650ad524d464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xD1 DUP11 0xDE 0xE1 MSTORE8 AND 0x4E 0xCF EXP SWAP3 SGT ADD DUP9 SGT 0xB2 0xC2 0x28 PUSH20 0x13D51015AB4AC451650AD524D464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4d18adee153164ecf0a9213018813b2c2287313d51015ab4ac451650ad524d464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xD1 DUP11 0xDE 0xE1 MSTORE8 AND 0x4E 0xCF EXP SWAP3 SGT ADD DUP9 SGT 0xB2 0xC2 0x28 PUSH20 0x13D51015AB4AC451650AD524D464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220297903615573add3940eb1ef9be0ec1c2fb129a69e761ebd171f093eb8705c5c64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 PUSH26 0x3615573ADD3940EB1EF9BE0EC1C2FB129A69E761EBD171F093E 0xB8 PUSH17 0x5C5C64736F6C6343000813003300000000 ","sourceMap":"701:6234:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220297903615573add3940eb1ef9be0ec1c2fb129a69e761ebd171f093eb8705c5c64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 PUSH26 0x3615573ADD3940EB1EF9BE0EC1C2FB129A69E761EBD171F093E 0xB8 PUSH17 0x5C5C64736F6C6343000813003300000000 ","sourceMap":"701:6234:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e382614e3aef45690d210f0d593a0eb486fac0f3ae4786e472db05d5c852164a64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 DUP3 PUSH2 0x4E3A 0xEF GASLIMIT PUSH10 0xD210F0D593A0EB486FA 0xC0 RETURN 0xAE SELFBALANCE DUP7 0xE4 PUSH19 0xDB05D5C852164A64736F6C6343000813003300 ","sourceMap":"194:9169:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e382614e3aef45690d210f0d593a0eb486fac0f3ae4786e472db05d5c852164a64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 DUP3 PUSH2 0x4E3A 0xEF GASLIMIT PUSH10 0xD210F0D593A0EB486FA 0xC0 RETURN 0xAE SELFBALANCE DUP7 0xE4 PUSH19 0xDB05D5C852164A64736F6C6343000813003300 ","sourceMap":"194:9169:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664743c505bbfa6acfac5cb69e477d0f5441fbf2d8cd0f23c1d305be28bacab664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4743C505BBFA6A 0xCF 0xAC 0x5C 0xB6 SWAP15 SELFBALANCE PUSH30 0xF5441FBF2D8CD0F23C1D305BE28BACAB664736F6C634300081300330000 ","sourceMap":"220:2559:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220664743c505bbfa6acfac5cb69e477d0f5441fbf2d8cd0f23c1d305be28bacab664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x4743C505BBFA6A 0xCF 0xAC 0x5C 0xB6 SWAP15 SELFBALANCE PUSH30 0xF5441FBF2D8CD0F23C1D305BE28BACAB664736F6C634300081300330000 ","sourceMap":"220:2559:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220528760f5dfa3eb98b42809c3cf5e56da8c66cd5954b69e56fa0ebcfa97387c9164736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE DUP8 PUSH1 0xF5 0xDF LOG3 0xEB SWAP9 0xB4 0x28 MULMOD 0xC3 0xCF 0x5E JUMP 0xDA DUP13 PUSH7 0xCD5954B69E56FA 0xE 0xBC STATICCALL SWAP8 CODESIZE PUSH29 0x9164736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"369:8761:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8761:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220528760f5dfa3eb98b42809c3cf5e56da8c66cd5954b69e56fa0ebcfa97387c9164736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE DUP8 PUSH1 0xF5 0xDF LOG3 0xEB SWAP9 0xB4 0x28 MULMOD 0xC3 0xCF 0x5E JUMP 0xDA DUP13 PUSH7 0xCD5954B69E56FA 0xE 0xBC STATICCALL SWAP8 CODESIZE PUSH29 0x9164736F6C634300081300330000000000000000000000000000000000 ","sourceMap":"369:8761:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7499831d1f6db3e9834fb5682d66dfa721706b1aecf2edc76afd0febac6e55e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x49 SWAP9 BALANCE 0xD1 0xF6 0xDB RETURNDATACOPY SWAP9 CALLVALUE 0xFB JUMP DUP3 0xD6 PUSH14 0xFA721706B1AECF2EDC76AFD0FEBA 0xC6 0xE5 0x5E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7499831d1f6db3e9834fb5682d66dfa721706b1aecf2edc76afd0febac6e55e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x49 SWAP9 BALANCE 0xD1 0xF6 0xDB RETURNDATACOPY SWAP9 CALLVALUE 0xFB JUMP DUP3 0xD6 PUSH14 0xFA721706B1AECF2EDC76AFD0FEBA 0xC6 0xE5 0x5E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016fe6515600aac18bb76641b91ec3f1b29758955299277bef24636e296c21e0464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND INVALID PUSH6 0x15600AAC18BB PUSH23 0x641B91EC3F1B29758955299277BEF24636E296C21E0464 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016fe6515600aac18bb76641b91ec3f1b29758955299277bef24636e296c21e0464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND INVALID PUSH6 0x15600AAC18BB PUSH23 0x641B91EC3F1B29758955299277BEF24636E296C21E0464 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220225b45c276d4ba687eec44c8cbe63f6c2bb6e856691432f810d215c61813ccdf64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 JUMPDEST GASLIMIT 0xC2 PUSH23 0xD4BA687EEC44C8CBE63F6C2BB6E856691432F810D215C6 XOR SGT 0xCC 0xDF PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1329:11630:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220225b45c276d4ba687eec44c8cbe63f6c2bb6e856691432f810d215c61813ccdf64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 JUMPDEST GASLIMIT 0xC2 PUSH23 0xD4BA687EEC44C8CBE63F6C2BB6E856691432F810D215C6 XOR SGT 0xCC 0xDF PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Vault.sol":{"Vault":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"InsufficientFunds","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"requestCount","type":"uint256"}],"name":"FulfilledWithdrawEpoch","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes","name":"_payload","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"_reason","type":"bytes"}],"name":"MessageFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"RetryMessageSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"}],"name":"SgReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"gain","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtPaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalGain","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalLoss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalDebt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtAdded","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtRatio","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokens","type":"uint256"}],"name":"StrategyReported","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"}],"name":"StrategyWithdrawnSome","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_PAYLOAD_SIZE_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"uint256","name":"_debtRatio","type":"uint256"},{"internalType":"uint256","name":"_performanceFee","type":"uint256"},{"internalType":"address","name":"_strategist","type":"address"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"creditAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"debtOutstanding","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyShutdown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"failedMessages","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governance","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"handleWithdrawals","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_governance","type":"address"},{"internalType":"address","name":"_lzEndpoint","type":"address"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_sgBridge","type":"address"},{"internalType":"address","name":"_sgRouter","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpointUpgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_oldStrategy","type":"address"},{"internalType":"address","name":"_newStrategy","type":"address"}],"name":"migrateStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"nonblockingLzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"payloadSizeLimitLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pricePerShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"revokeFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"revokeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_emergencyShutdown","type":"bool"}],"name":"setEmergencyShutdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newGovernance","type":"address"}],"name":"setGovernance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setPayloadSizeLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"address","name":"_newStrategist","type":"address"}],"name":"setStrategist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sgBridge","outputs":[{"internalType":"contract ISgBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amountLD","type":"uint256"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"sgReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sgRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"address","name":"","type":"address"}],"name":"strategies","outputs":[{"internalType":"uint256","name":"activation","type":"uint256"},{"internalType":"uint256","name":"debtRatio","type":"uint256"},{"internalType":"uint256","name":"totalDebt","type":"uint256"},{"internalType":"uint256","name":"totalGain","type":"uint256"},{"internalType":"uint256","name":"totalLoss","type":"uint256"},{"internalType":"uint256","name":"lastReport","type":"uint256"},{"internalType":"uint256","name":"performanceFee","type":"uint256"},{"internalType":"address","name":"strategist","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebtRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalIdle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"uint256","name":"_debtRatio","type":"uint256"}],"name":"updateStrategyDebtRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxShares","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_maxLoss","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdrawEpochs","outputs":[{"internalType":"bool","name":"inProgress","type":"bool"},{"internalType":"uint256","name":"approveExpected","type":"uint256"},{"internalType":"uint256","name":"approveActual","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50615f7480620000216000396000f3fe6080604052600436106102e65760003560e01c80637533d788116101825780637533d7881461081d5780638cfd8f5c1461083d5780638da5cb5b14610875578063950c8a741461088a57806395d89b41146108aa57806399530b06146108bf5780639aa7df94146108d45780639f38369a146108e9578063a032a71214610909578063a457c2d714610929578063a6c3d16514610949578063a9059cbb14610969578063ab033ea914610989578063ab73ce46146109a9578063ab8236f3146109c0578063b353aaa7146109e0578063baf3292d14610a00578063c446183414610a20578063cbed8b9c14610a36578063cfbcc64414610a56578063d1deba1f14610a76578063dd62ed3e14610a89578063dde4f08e14610aa9578063df2a5b3b14610ac9578063e63697c814610ae9578063e7fda06114610b09578063eb8d72b714610b29578063ef34253c14610b49578063f2fde38b14610b5e578063f5ecbdbc14610b7e578063fc0c546a14610b9e578063fc7b9c1814610bbe57600080fd5b80621d3567146102f257806301dc2eb11461031457806301e1d114146103475780630517cb761461035c57806306fdde031461038a57806307e0db17146103ac578063095ea7b3146103cc5780630a97c254146103fc5780630df374831461041c57806310ddb1371461043c5780631459457a1461045c57806314c644021461047c57806318160ddd1461049c57806323b872dd146104b15780632d606843146104d15780632df9eab9146104e6578063313ce567146104fc5780633403c2fc1461052357806337fded911461053e578063395093511461055e5780633d8b38f61461057e5780633f1f4fa41461059e5780634067cb9e146105cb57806342d65a8d1461068257806352106a49146106a25780635aa6e675146106c25780635b8c41e6146106e25780635fe1a0271461073157806366ad5c8a146107925780636e553f65146107b257806370a08231146107d2578063715018a61461080857600080fd5b366102ed57005b600080fd5b3480156102fe57600080fd5b5061031261030d366004614d40565b610bd4565b005b34801561032057600080fd5b5061033461032f366004614de8565b610c97565b6040519081526020015b60405180910390f35b34801561035357600080fd5b50610334610cac565b34801561036857600080fd5b506101085461037d906001600160a01b031681565b60405161033e9190614e1f565b34801561039657600080fd5b5061039f610cc8565b60405161033e9190614e83565b3480156103b857600080fd5b506103126103c7366004614e96565b610d5a565b3480156103d857600080fd5b506103ec6103e7366004614eb1565b610dc7565b604051901515815260200161033e565b34801561040857600080fd5b50610312610417366004614edd565b610ddf565b34801561042857600080fd5b50610312610437366004614f1c565b610eff565b34801561044857600080fd5b50610312610457366004614e96565b610f1e565b34801561046857600080fd5b50610312610477366004614f38565b610f5a565b34801561048857600080fd5b50610312610497366004614fb7565b611182565b3480156104a857600080fd5b50603554610334565b3480156104bd57600080fd5b506103ec6104cc366004614fd4565b6111e3565b3480156104dd57600080fd5b50610312611207565b3480156104f257600080fd5b5061033460fe5481565b34801561050857600080fd5b50610511611283565b60405160ff909116815260200161033e565b34801561052f57600080fd5b50610100546103ec9060ff1681565b34801561054a57600080fd5b5060fd5461037d906001600160a01b031681565b34801561056a57600080fd5b506103ec610579366004614eb1565b6112f1565b34801561058a57600080fd5b506103ec610599366004614ff4565b611313565b3480156105aa57600080fd5b506103346105b9366004614e96565b609a6020526000908152604090205481565b3480156105d757600080fd5b5061063e6105e6366004614de8565b610101602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b031688565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c08301526001600160a01b031660e08201526101000161033e565b34801561068e57600080fd5b5061031261069d366004614ff4565b6113df565b3480156106ae57600080fd5b506103126106bd366004615046565b611452565b3480156106ce57600080fd5b5060fb5461037d906001600160a01b031681565b3480156106ee57600080fd5b506103346106fd366004615181565b60c9602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561073d57600080fd5b5061077561074c3660046151de565b6101066020526000908152604090206001810154600282015460039092015460ff909116919083565b60408051931515845260208401929092529082015260600161033e565b34801561079e57600080fd5b506103126107ad366004614d40565b611689565b3480156107be57600080fd5b506103346107cd3660046151f7565b61175d565b3480156107de57600080fd5b506103346107ed36600461521c565b6001600160a01b031660009081526033602052604090205490565b34801561081457600080fd5b50610312611769565b34801561082957600080fd5b5061039f610838366004614e96565b61177d565b34801561084957600080fd5b50610334610858366004615239565b609960209081526000928352604080842090915290825290205481565b34801561088157600080fd5b5061037d611817565b34801561089657600080fd5b50609b5461037d906001600160a01b031681565b3480156108b657600080fd5b5061039f611826565b3480156108cb57600080fd5b50610334611835565b3480156108e057600080fd5b50610334611852565b3480156108f557600080fd5b5061039f610904366004614e96565b6118c4565b34801561091557600080fd5b5061031261092436600461526c565b6119da565b34801561093557600080fd5b506103ec610944366004614eb1565b611d56565b34801561095557600080fd5b50610312610964366004614ff4565b611dd1565b34801561097557600080fd5b506103ec610984366004614eb1565b611e5a565b34801561099557600080fd5b506103126109a436600461521c565b611e68565b3480156109b557600080fd5b506103346101025481565b3480156109cc57600080fd5b506103126109db3660046152b5565b611ed7565b3480156109ec57600080fd5b5060975461037d906001600160a01b031681565b348015610a0c57600080fd5b50610312610a1b36600461521c565b612025565b348015610a2c57600080fd5b5061033461271081565b348015610a4257600080fd5b50610312610a5136600461534f565b612083565b348015610a6257600080fd5b50610312610a71366004614de8565b6120fc565b610312610a84366004614d40565b612157565b348015610a9557600080fd5b50610334610aa43660046153bd565b61236d565b348015610ab557600080fd5b50610312610ac436600461526c565b612398565b348015610ad557600080fd5b50610312610ae43660046153db565b612428565b348015610af557600080fd5b50610312610b04366004615417565b6124da565b348015610b1557600080fd5b50610334610b24366004614de8565b6124ea565b348015610b3557600080fd5b50610312610b44366004614ff4565b6124f6565b348015610b5557600080fd5b50610312612550565b348015610b6a57600080fd5b50610312610b7936600461521c565b612826565b348015610b8a57600080fd5b5061039f610b9936600461543e565b61289c565b348015610baa57600080fd5b5060fc5461037d906001600160a01b031681565b348015610bca57600080fd5b5061033460ff5481565b6097546001600160a01b03163314610c195760405162461bcd60e51b815260206004820152600360248201526205631360ec1b60448201526064015b60405180910390fd5b610c8f8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061293192505050565b505050505050565b6000610ca383836129aa565b90505b92915050565b6000610cb6611852565b60ff54610cc391906154a1565b905090565b606060368054610cd7906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d03906154b4565b8015610d505780601f10610d2557610100808354040283529160200191610d50565b820191906000526020600020905b815481529060010190602001808311610d3357829003601f168201915b5050505050905090565b610d62612a72565b6097546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b5050505050565b600033610dd5818585612ad1565b5060019392505050565b60fb546001600160a01b0316331480610e105750610dfb611817565b6001600160a01b0316336001600160a01b0316145b610e2c5760405162461bcd60e51b8152600401610c10906154ee565b61ffff83166000908152610101602090815260408083206001600160a01b038616845290915281206001015460fe805491929091610e6b90849061550a565b909155505061ffff83166000908152610101602090815260408083206001600160a01b0386168452909152902060010181905560fe5461271090610eb09083906154a1565b1115610ee35760405162461bcd60e51b81526020600482015260026024820152612b1b60f11b6044820152606401610c10565b8060fe6000828254610ef591906154a1565b9091555050505050565b610f07612a72565b61ffff9091166000908152609a6020526040902055565b610f26612a72565b6097546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401610d92565b600054610100900460ff1615808015610f7a5750600054600160ff909116105b80610f9b5750610f8930612bf5565b158015610f9b575060005460ff166001145b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c10565b6000805460ff191660011790558015611021576000805461ff0019166101001790555b61102a85612c04565b611032612c3c565b61107e6040518060400160405280600f81526020016e13db5b9a58da185a5b8815985d5b1d608a1b8152506040518060400160405280600381526020016227a6ab60e91b815250612c6b565b60fb80546001600160a01b038089166001600160a01b03199283161790925560fc8054878416908316811790915560fd805487851690841617905561010880549386169390921692909217905560405163095ea7b360e01b815263095ea7b3906110f09086906000199060040161551d565b6020604051808303816000875af115801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190615536565b508015610c8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050505050565b60fb546001600160a01b03163314806111b3575061119e611817565b6001600160a01b0316336001600160a01b0316145b6111cf5760405162461bcd60e51b8152600401610c10906154ee565b610100805460ff1916911515919091179055565b6000336111f1858285612c9c565b6111fc858585612d16565b506001949350505050565b60fb546001600160a01b03163314806112385750611223611817565b6001600160a01b0316336001600160a01b0316145b6112545760405162461bcd60e51b8152600401610c10906154ee565b60405133904780156108fc02916000818181858888f19350505050158015611280573d6000803e3d6000fd5b50565b60fc546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190615553565b600033610dd5818585611304838361236d565b61130e91906154a1565b612ad1565b61ffff831660009081526098602052604081208054829190611334906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611360906154b4565b80156113ad5780601f10611382576101008083540402835291602001916113ad565b820191906000526020600020905b81548152906001019060200180831161139057829003601f168201915b5050505050905083836040516113c4929190615576565b60405180910390208180519060200120149150509392505050565b6113e7612a72565b6097546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d9061141b908690869086906004016155af565b600060405180830381600087803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b50505050505050565b60fb546001600160a01b0316331480611483575061146e611817565b6001600160a01b0316336001600160a01b0316145b61149f5760405162461bcd60e51b8152600401610c10906154ee565b61ffff85166000908152610101602090815260408083206001600160a01b038816845290915290205485908590156114e95760405162461bcd60e51b8152600401610c10906155cd565b6127108560fe546114fa91906154a1565b111561152d5760405162461bcd60e51b8152602060048201526002602482015261563560f01b6044820152606401610c10565b60405180610100016040528042815260200186815260200160008152602001600081526020016000815260200160008152602001858152602001846001600160a01b031681525061010160008961ffff1661ffff1681526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506116578661010360008a61ffff1661ffff168152602001908152602001600020612eaf90919063ffffffff16565b5061166861010461ffff8916612ec4565b508460fe600082825461167b91906154a1565b909155505050505050505050565b3330146116e75760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610c10565b610c8f8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612ed092505050565b6000610ca38383612f6e565b611771612a72565b61177b6000612fd2565b565b60986020526000908152604090208054611796906154b4565b80601f01602080910402602001604051908101604052809291908181526020018280546117c2906154b4565b801561180f5780601f106117e45761010080835404028352916020019161180f565b820191906000526020600020905b8154815290600101906020018083116117f257829003601f168201915b505050505081565b6065546001600160a01b031690565b606060378054610cd7906154b4565b6000610cc3611842611283565b61184d90600a6156cd565b613024565b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611883903090600401614e1f565b602060405180830381865afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc391906156dc565b61ffff81166000908152609860205260408120805460609291906118e7906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611913906154b4565b80156119605780601f1061193557610100808354040283529160200191611960565b820191906000526020600020905b81548152906001019060200180831161194357829003601f168201915b5050505050905080516000036119b85760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610c10565b6119d36000601483516119cb919061550a565b839190613059565b9392505050565b60fb546001600160a01b0316331480611a0b57506119f6611817565b6001600160a01b0316336001600160a01b0316145b611a275760405162461bcd60e51b8152600401610c10906154ee565b61ffff83166000908152610101602090815260408083206001600160a01b03851684529091529020548390829015611a715760405162461bcd60e51b8152600401610c10906155cd565b6001600160a01b038316611aac5760405162461bcd60e51b8152602060048201526002602482015261563760f01b6044820152606401610c10565b600061010160008761ffff1661ffff1681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518061010001604052808260a001518152602001826020015181526020018260400151815260200160008152602001600081526020018260a0015181526020018260c0015181526020018260e001516001600160a01b031681525061010160008861ffff1661ffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600061010160008861ffff1661ffff1681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060010181905550600061010160008861ffff1661ffff1681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060020181905550610c8f868660046040518060200160405280896001600160a01b0316815250604051602001611d4292919061572d565b604051602081830303815290604052613166565b60003381611d64828661236d565b905083811015611dc45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c10565b6111fc8286868403612ad1565b611dd9612a72565b818130604051602001611dee93929190615752565b60408051601f1981840301815291815261ffff8516600090815260986020522090611e1990826157ce565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611e4d939291906155af565b60405180910390a1505050565b600033610dd5818585612d16565b60fb546001600160a01b0316331480611e995750611e84611817565b6001600160a01b0316336001600160a01b0316145b611eb55760405162461bcd60e51b8152600401610c10906154ee565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b60fc546001600160a01b03848116911614611f195760405162461bcd60e51b81526020600482015260026024820152610ac760f31b6044820152606401610c10565b610108546001600160a01b0316331480611f3d575060fd546001600160a01b031633145b80611f605750611f4b611817565b6001600160a01b0316336001600160a01b0316145b611f915760405162461bcd60e51b8152602060048201526002602482015261563960f01b6044820152606401610c10565b6000611f9f86826014613059565b604051602001611faf9190615887565b604051602081830303815290604052611fc7906158a3565b60601c9050611fd7878385613310565b604080518481526001600160a01b0383811660208301528616917f92073a89a07a000083eb8b2575fc15e7bb936efe55d00727d6942a796d7211a7910160405180910390a250505050505050565b61202d612a72565b609b80546001600160a01b0319166001600160a01b0383161790556040517f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90612078908390614e1f565b60405180910390a150565b61208b612a72565b6097546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c906120c390889088908890889088906004016158da565b600060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b505050505050505050565b60fb546001600160a01b031633148061212d5750612118611817565b6001600160a01b0316336001600160a01b0316145b6121495760405162461bcd60e51b8152600401610c10906154ee565b61215382826133a7565b5050565b61ffff8616600090815260c96020526040808220905161217a9088908890615576565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806121fa5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610c10565b80838360405161220b929190615576565b60405180910390201461226a5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610c10565b61ffff8716600090815260c96020526040808220905161228d9089908990615576565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612325918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612ed092505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161235c959493929190615908565b60405180910390a150505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60fb546001600160a01b03163314806123c957506123b4611817565b6001600160a01b0316336001600160a01b0316145b6123e55760405162461bcd60e51b8152600401610c10906154ee565b61ffff929092166000908152610101602090815260408083206001600160a01b039485168452909152902060070180546001600160a01b03191691909216179055565b612430612a72565b600081116124785760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610c10565b61ffff83811660008181526099602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611e4d565b6124e583838361341c565b505050565b6000610ca38383613547565b6124fe612a72565b61ffff8316600090815260986020526040902061251c828483615943565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611e4d939291906155af565b60fb546001600160a01b0316331480612581575061256c611817565b6001600160a01b0316336001600160a01b0316145b61259d5760405162461bcd60e51b8152600401610c10906154ee565b610102546000908152610106602052604090206001015460ff16156125d45760405162461bcd60e51b8152600401610c10906159fc565b6000805b6101025460009081526101066020526040902054811015612655576101025460009081526101066020526040812080548390811061261857612618615a18565b906000526020600020906006020190506126358160020154613024565b61263f90846154a1565b925050808061264d90615a2e565b9150506125d8565b5061265e611852565b811161266c576112806135ff565b6000612676611852565b612680908361550a565b90506000805b612691610104613915565b8110801561269f5750600083115b156127f05760006126b26101048361391f565b61ffff81166000908152610103602052604081209192505b6126d382613915565b811080156126e15750600086115b156127da5760006126f2838361391f565b61ffff85166000908152610101602090815260408083206001600160a01b0385168452909152812060028101549293509190036127305750506127c8565b600061274089836002015461392b565b6101025460009081526101066020908152604080832061ffff8b16845260050182528083206001600160a01b038816845290915290208190559050612785818a61550a565b98506127b786846000604051806040016040528086815260200161010254815250604051602001611d42929190615a47565b876127c181615a2e565b9850505050505b806127d281615a2e565b9150506126ca565b50505080806127e890615a2e565b915050612686565b506101028054600090815261010660205260408082206002019390935590548152206001908101805460ff191690911790555050565b61282e612a72565b6001600160a01b0381166128935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c10565b61128081612fd2565b609754604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156128fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129269190810190615ab2565b90505b949350505050565b6000806129945a60966366ad5c8a60e01b898989896040516024016129599493929190615ae6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190613941565b9150915081610c8f57610c8f86868686856139cd565b6101005460009060ff16156129c157506000610ca6565b60006127106129ce610cac565b61ffff86166000908152610101602090815260408083206001600160a01b0389168452909152902060010154612a049190615b24565b612a0e9190615b3b565b61ffff85166000908152610101602090815260408083206001600160a01b0388168452909152902060020154909150808211612a4f57600092505050610ca6565b612a69612a5a611852565b612a64838561550a565b61392b565b95945050505050565b33612a7b611817565b6001600160a01b03161461177b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c10565b6001600160a01b038316612b335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c10565b6001600160a01b038216612b945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c10565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03163b151590565b600054610100900460ff16612c2b5760405162461bcd60e51b8152600401610c1090615b5d565b612c33613a6a565b61128081613a9a565b600054610100900460ff16612c635760405162461bcd60e51b8152600401610c1090615b5d565b61177b613a6a565b600054610100900460ff16612c925760405162461bcd60e51b8152600401610c1090615b5d565b6121538282613ae3565b6000612ca8848461236d565b90506000198114612d105781811015612d035760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c10565b612d108484848403612ad1565b50505050565b6001600160a01b038316612d7a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c10565b6001600160a01b038216612ddc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c10565b6001600160a01b03831660009081526033602052604090205481811015612e545760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c10565b6001600160a01b038085166000818152603360205260408082208686039055928616808252908390208054860190559151600080516020615f1f83398151915290612ea29086815260200190565b60405180910390a3612d10565b6000610ca3836001600160a01b038416613b23565b6000610ca38383613b23565b6000612ede84826014613059565b604051602001612eee9190615887565b604051602081830303815290604052612f06906158a3565b61ffff861660009081526101016020908152604080832060609490941c80845293909152902054909150612f625760405162461bcd60e51b815260206004820152600360248201526256313560e81b6044820152606401610c10565b610dc085836000613310565b6101005460009060ff1615612fab5760405162461bcd60e51b815260206004820152600360248201526256313160e81b6044820152606401610c10565b6000612fb78385613b72565b60fc54909150610ca3906001600160a01b0316333087613bee565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061302f60355490565b60000361303a575090565b603554613045610cac565b61304f9084615b24565b610ca69190615b3b565b60608161306781601f6154a1565b10156130a65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610c10565b6130b082846154a1565b845110156130f45760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610c10565b606082158015613113576040519150600082526020820160405261315d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561314c578051835260209283019201613134565b5050858452601f01601f1916604052505b50949350505050565b61ffff83166000908152610101602090815260408083206001600160a01b0386168452909152902054839083906131af5760405162461bcd60e51b8152600401610c1090615ba8565b6040516001600160601b0319606086811b8216602084015230901b16603482015260009060480160408051601f198184030181529190526097549091506000906001600160a01b03166340a7bb1088308885613209613c59565b6040518663ffffffff1660e01b8152600401613229959493929190615bc4565b6040805180830381865afa158015613245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132699190615c18565b509050804710156132955760405162fae2d560e21b815260048101829052476024820152604401610c10565b6097546001600160a01b031663c58031008289858930806132b4613c59565b6040518863ffffffff1660e01b81526004016132d596959493929190615c3c565b6000604051808303818588803b1580156132ee57600080fd5b505af1158015613302573d6000803e3d6000fd5b505050505050505050505050565b6000828060200190518101906133269190615ca3565b9050600281600481111561333c5761333c6156f5565b0361336b576000838060200190518101906133579190615ccf565b915050613365858285613c89565b50612d10565b600181600481111561337f5761337f6156f5565b03612d105760008380602001905181019061339a9190615dba565b915050610dc08582614063565b61ffff82166000908152610101602090815260408083206001600160a01b038516845290915281206001015460fe8054919290916133e690849061550a565b909155505061ffff9091166000908152610101602090815260408083206001600160a01b03909416835292905290812060010155565b610102546000908152610106602052604090206001015460ff16156134535760405162461bcd60e51b8152600401610c10906159fc565b61345e333085612d16565b61010660006101025481526020019081526020016000206000016040518060c00160405280336001600160a01b03168152602001846001600160a01b031681526020018581526020018381526020016134b686613024565b81526000602091820181905283546001808201865594825290829020835160069092020180546001600160a01b03199081166001600160a01b039384161782559284015194810180549093169490911693909317905560408101516002830155606081015160038301556080810151600483015560a001516005909101805460ff1916911515919091179055505050565b600080612710613555610cac565b61ffff86166000908152610101602090815260408083206001600160a01b038916845290915290206001015461358b9190615b24565b6135959190615b3b565b61ffff85166000908152610101602090815260408083206001600160a01b0388168452909152902060020154610100549192509060ff16156135da579150610ca69050565b8181116135ec57600092505050610ca6565b6135f6828261550a565b92505050610ca6565b6101025460009081526101066020526040902054806136465760405162461bcd60e51b8152602060048201526003602482015262158c4d60ea1b6044820152606401610c10565b6000816001600160401b0381111561366057613660615095565b604051908082528060200260200182016040528015613689578160200160208202803683370190505b50905060005b8281101561370957610102546000908152610106602052604081208054839081106136bc576136bc615a18565b906000526020600020906006020190506136d98160020154613024565b8383815181106136eb576136eb615a18565b6020908102919091010152508061370181615a2e565b91505061368f565b5060005b828110156138a2576101025460009081526101066020526040812080548390811061373a5761373a615a18565b90600052602060002090600602019050600061377184848151811061376157613761615a18565b6020026020010151612a64611852565b90508160040154811015613850576000818360040154613791919061550a565b905060008360040154826127106137a89190615b24565b6137b29190615b3b565b9050836003015481111561384d5760058401805460ff191690558354600285015460405163a9059cbb60e01b8152309263a9059cbb92613800926001600160a01b039092169160040161551d565b6020604051808303816000875af115801561381f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138439190615536565b5050505050613890565b50505b60058201805460ff1916600190811790915582015460fc5461387f916001600160a01b0391821691168361422e565b61388d30836002015461424d565b50505b8061389a81615a2e565b91505061370d565b506101025460408051918252602082018490527fc682eb885c208b8aaaa811c05902e24a4f14b388960311623a8f31404f655129910160405180910390a16101028054600090815261010660205260408120600101805460ff191690558154919061390c83615a2e565b91905055505050565b6000610ca6825490565b6000610ca3838361436f565b600081831061393a5781610ca3565b5090919050565b6000606060008060008661ffff166001600160401b0381111561396657613966615095565b6040519080825280601f01601f191660200182016040528015613990576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156139b2578692505b828152826000602083013e9093509150505b94509492505050565b818051906020012060c960008761ffff1661ffff168152602001908152602001600020856040516139fe9190615887565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90613a5b9087908790879087908790615e45565b60405180910390a15050505050565b600054610100900460ff16613a915760405162461bcd60e51b8152600401610c1090615b5d565b61177b33612fd2565b600054610100900460ff16613ac15760405162461bcd60e51b8152600401610c1090615b5d565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16613b0a5760405162461bcd60e51b8152600401610c1090615b5d565b6036613b1683826157ce565b5060376124e582826157ce565b6000818152600183016020526040812054613b6a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca6565b506000610ca6565b600080613b7e60355490565b600003613b8c575081613bae565b613b94610cac565b603554613ba19085615b24565b613bab9190615b3b565b90505b60008111613be45760405162461bcd60e51b815260206004820152600360248201526256313360e81b6044820152606401610c10565b610ca38482614399565b6040516001600160a01b0380851660248301528316604482015260648101829052612d109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614448565b60408051600160f01b6020820152620f424060228083019190915282518083039091018152604290910190915290565b613c93838361451d565b606082015115613cb057613cb083836000015184606001516146fc565b60408083015161ffff85166000908152610101602090815283822086516001600160a01b031683529052918220600301805491929091613cf19084906154a1565b90915550508151600090613d06908590613547565b90506000613d1882856080015161392b565b90508015613d885761ffff851660009081526101016020908152604080832087516001600160a01b0316845290915281206002018054839290613d5c90849061550a565b925050819055508060ff6000828254613d75919061550a565b90915550613d859050818361550a565b91505b60e084015115613df55760e084015161ffff861660009081526101016020908152604080832088516001600160a01b0316845290915281206002018054909190613dd39084906154a1565b909155505060e084015160ff8054600090613def9084906154a1565b90915550505b60208085015161ffff8716600081815261010180855260408083208a516001600160a01b039081168552818852828520600501969096559383529085528851909316815292529020600101541580613e5057506101005460ff165b15613e5e5783610100015191505b60a084015115613eb157613eac8460a001518686600001516003604051806020016040528088815250604051602001613e98929190615e97565b6040516020818303038152906040526147f1565b613edc565b613edc8585600001516003604051806020016040528087815250604051602001611d42929190615e97565b600061010160008761ffff1661ffff168152602001908152602001600020600086600001516001600160a01b03166001600160a01b0316815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090507f08bc8eff67f79e18165507d64024f5ca5e90a2593c7a45cb5caf7f9d843e404c8686600001518760400151886060015189608001518660600151876080015188604001518d60e001518a602001518e6040516111729b9a9998979695949392919061ffff9b909b168b526001600160a01b039990991660208b015260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b805161ffff83166000908152610101602090815260408083206001600160a01b03851684529091529020548391906140ad5760405162461bcd60e51b8152600401610c1090615ba8565b6040830151156140ca576140ca84846000015185604001516146fc565b60208084015161ffff861660009081526101018352604080822087516001600160a01b0316835290935291822060020180549192909161410b90849061550a565b9091555050602083015160ff805460009061412790849061550a565b9091555050606083015160009081526101066020526040812060030180549161414f83615a2e565b909155505060608301805160009081526101066020818152604080842061ffff8a168552600401825280842088516001600160a01b031685528252808420805460ff19166001179055845184529190528082206003015492518252902060020154036141bd576141bd6135ff565b82600001516001600160a01b03168461ffff167f046368a4ca42efbdd968b9025440eb5590bdcda7da09f4fef8ac4ef2f44a5ed0856020015186604001518760600151604051614220939291909283526020830191909152604082015260600190565b60405180910390a350505050565b6124e58363a9059cbb60e01b8484604051602401613c2292919061551d565b6001600160a01b0382166142ad5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c10565b6001600160a01b038216600090815260336020526040902054818110156143215760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c10565b6001600160a01b0383166000818152603360209081526040808320868603905560358054879003905551858152919291600080516020615f1f833981519152910160405180910390a3505050565b600082600001828154811061438657614386615a18565b9060005260206000200154905092915050565b6001600160a01b0382166143ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c10565b806035600082825461440191906154a1565b90915550506001600160a01b038216600081815260336020908152604080832080548601905551848152600080516020615f1f833981519152910160405180910390a35050565b600061449d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148e19092919063ffffffff16565b90508051600014806144be5750808060200190518101906144be9190615536565b6124e55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c10565b61ffff821660009081526101076020908152604080832084516001600160a01b031684528252808320610120850151845290915290205460ff161561458a5760405162461bcd60e51b81526020600482015260036024820152622b189b60e91b6044820152606401610c10565b805161012082015160405160609290921b6001600160601b0319166020830152603482015260f083901b6001600160f01b031916605482015260009060560160405160208183030381529060405280519060200120905060008160405160200161461f91907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f19818403018152918152815160209283012061ffff87166000908152610101845282812087516001600160a01b039081168352945291909120600701546101408601519193509091169061467a9083906148f0565b6001600160a01b0316146146b65760405162461bcd60e51b815260206004820152600360248201526256313760e81b6044820152606401610c10565b505061ffff90911660009081526101076020908152604080832084516001600160a01b03168452825280832061012090940151835292905220805460ff19166001179055565b61ffff83166000908152610101602090815260408083206001600160a01b038616845290915290206002015481111561475d5760405162461bcd60e51b81526020600482015260036024820152622b189960e91b6044820152606401610c10565b61ffff83166000908152610101602090815260408083206001600160a01b0386168452909152812060040180548392906147989084906154a1565b909155505061ffff83166000908152610101602090815260408083206001600160a01b0386168452909152812060020180548392906147d890849061550a565b925050819055508060ff6000828254610ef5919061550a565b60fd54604051630dc6346160e01b81526000916001600160a01b031690630dc634619061482690879087908790600401615eb3565b602060405180830381865afa158015614843573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061486791906156dc565b60fd5460fc54604051633920455b60e11b81529293506001600160a01b03918216926372408ab69285926148a8929116908a908a908a908a90600401615ee1565b6000604051808303818588803b1580156148c157600080fd5b505af11580156148d5573d6000803e3d6000fd5b50505050505050505050565b60606129298484600085614914565b60008060006148ff85856149ef565b9150915061490c81614a34565b509392505050565b6060824710156149755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c10565b600080866001600160a01b031685876040516149919190615887565b60006040518083038185875af1925050503d80600081146149ce576040519150601f19603f3d011682016040523d82523d6000602084013e6149d3565b606091505b50915091506149e487838387614b79565b979650505050505050565b6000808251604103614a255760208301516040840151606085015160001a614a1987828585614bf0565b94509450505050614a2d565b506000905060025b9250929050565b6000816004811115614a4857614a486156f5565b03614a505750565b6001816004811115614a6457614a646156f5565b03614aac5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c10565b6002816004811115614ac057614ac06156f5565b03614b0d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c10565b6003816004811115614b2157614b216156f5565b036112805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c10565b60608315614be6578251600003614bdf57614b9385612bf5565b614bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c10565b5081612929565b6129298383614ca7565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115614c1d57506000905060036139c4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614c71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614c9a576000600192509250506139c4565b9660009650945050505050565b815115614cb75781518083602001fd5b8060405162461bcd60e51b8152600401610c109190614e83565b803561ffff81168114614ce357600080fd5b919050565b60008083601f840112614cfa57600080fd5b5081356001600160401b03811115614d1157600080fd5b602083019150836020828501011115614a2d57600080fd5b80356001600160401b0381168114614ce357600080fd5b60008060008060008060808789031215614d5957600080fd5b614d6287614cd1565b955060208701356001600160401b0380821115614d7e57600080fd5b614d8a8a838b01614ce8565b9097509550859150614d9e60408a01614d29565b94506060890135915080821115614db457600080fd5b50614dc189828a01614ce8565b979a9699509497509295939492505050565b6001600160a01b038116811461128057600080fd5b60008060408385031215614dfb57600080fd5b614e0483614cd1565b91506020830135614e1481614dd3565b809150509250929050565b6001600160a01b0391909116815260200190565b60005b83811015614e4e578181015183820152602001614e36565b50506000910152565b60008151808452614e6f816020860160208601614e33565b601f01601f19169290920160200192915050565b602081526000610ca36020830184614e57565b600060208284031215614ea857600080fd5b610ca382614cd1565b60008060408385031215614ec457600080fd5b8235614ecf81614dd3565b946020939093013593505050565b600080600060608486031215614ef257600080fd5b614efb84614cd1565b92506020840135614f0b81614dd3565b929592945050506040919091013590565b60008060408385031215614f2f57600080fd5b614ecf83614cd1565b600080600080600060a08688031215614f5057600080fd5b8535614f5b81614dd3565b94506020860135614f6b81614dd3565b93506040860135614f7b81614dd3565b92506060860135614f8b81614dd3565b91506080860135614f9b81614dd3565b809150509295509295909350565b801515811461128057600080fd5b600060208284031215614fc957600080fd5b8135610ca381614fa9565b600080600060608486031215614fe957600080fd5b8335614efb81614dd3565b60008060006040848603121561500957600080fd5b61501284614cd1565b925060208401356001600160401b0381111561502d57600080fd5b61503986828701614ce8565b9497909650939450505050565b600080600080600060a0868803121561505e57600080fd5b61506786614cd1565b9450602086013561507781614dd3565b935060408601359250606086013591506080860135614f9b81614dd3565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b03811182821017156150ce576150ce615095565b60405290565b604051601f8201601f191681016001600160401b03811182821017156150fc576150fc615095565b604052919050565b60006001600160401b0382111561511d5761511d615095565b50601f01601f191660200190565b600082601f83011261513c57600080fd5b813561514f61514a82615104565b6150d4565b81815284602083860101111561516457600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561519657600080fd5b61519f84614cd1565b925060208401356001600160401b038111156151ba57600080fd5b6151c68682870161512b565b9250506151d560408501614d29565b90509250925092565b6000602082840312156151f057600080fd5b5035919050565b6000806040838503121561520a57600080fd5b823591506020830135614e1481614dd3565b60006020828403121561522e57600080fd5b8135610ca381614dd3565b6000806040838503121561524c57600080fd5b61525583614cd1565b915061526360208401614cd1565b90509250929050565b60008060006060848603121561528157600080fd5b61528a84614cd1565b9250602084013561529a81614dd3565b915060408401356152aa81614dd3565b809150509250925092565b60008060008060008060c087890312156152ce57600080fd5b6152d787614cd1565b955060208701356001600160401b03808211156152f357600080fd5b6152ff8a838b0161512b565b9650604089013595506060890135915061531882614dd3565b9093506080880135925060a0880135908082111561533557600080fd5b5061534289828a0161512b565b9150509295509295509295565b60008060008060006080868803121561536757600080fd5b61537086614cd1565b945061537e60208701614cd1565b93506040860135925060608601356001600160401b038111156153a057600080fd5b6153ac88828901614ce8565b969995985093965092949392505050565b600080604083850312156153d057600080fd5b8235614e0481614dd3565b6000806000606084860312156153f057600080fd5b6153f984614cd1565b925061540760208501614cd1565b9150604084013590509250925092565b60008060006060848603121561542c57600080fd5b833592506020840135614f0b81614dd3565b6000806000806080858703121561545457600080fd5b61545d85614cd1565b935061546b60208601614cd1565b9250604085013561547b81614dd3565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ca657610ca661548b565b600181811c908216806154c857607f821691505b6020821081036154e857634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260029082015261563160f01b604082015260600190565b81810381811115610ca657610ca661548b565b6001600160a01b03929092168252602082015260400190565b60006020828403121561554857600080fd5b8151610ca381614fa9565b60006020828403121561556557600080fd5b815160ff81168114610ca357600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612926604083018486615586565b602080825260029082015261563360f01b604082015260600190565b600181815b8085111561562457816000190482111561560a5761560a61548b565b8085161561561757918102915b93841c93908002906155ee565b509250929050565b60008261563b57506001610ca6565b8161564857506000610ca6565b816001811461565e576002811461566857615684565b6001915050610ca6565b60ff8411156156795761567961548b565b50506001821b610ca6565b5060208310610133831016604e8410600b84101617156156a7575081810a610ca6565b6156b183836155e9565b80600019048211156156c5576156c561548b565b029392505050565b6000610ca360ff84168361562c565b6000602082840312156156ee57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6005811061572957634e487b7160e01b600052602160045260246000fd5b9052565b6040810161573b828561570b565b91516001600160a01b031660209190910152919050565b8284823760609190911b6001600160601b0319169101908152601401919050565b601f8211156124e557600081815260208120601f850160051c8101602086101561579a5750805b601f850160051c820191505b81811015610c8f578281556001016157a6565b600019600383901b1c191660019190911b1790565b81516001600160401b038111156157e7576157e7615095565b6157fb816157f584546154b4565b84615773565b602080601f83116001811461582a57600084156158185750858301515b61582285826157b9565b865550610c8f565b600085815260208120601f198616915b828110156158595788860151825594840194600190910190840161583a565b50858210156158775787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251615899818460208701614e33565b9190910192915050565b805160208201516001600160601b031980821692919060148310156158d25780818460140360031b1b83161693505b505050919050565b600061ffff8088168352808716602084015250846040830152608060608301526149e4608083018486615586565b61ffff86168152608060208201526000615926608083018688615586565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561595a5761595a615095565b61596e8361596883546154b4565b83615773565b6000601f84116001811461599c576000851561598a5750838201355b61599486826157b9565b845550610dc0565b600083815260209020601f19861690835b828110156159cd57868501358255602094850194600190920191016159ad565b50868210156159ea5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602080825260029082015261158d60f21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201615a4057615a4061548b565b5060010190565b60608101615a55828561570b565b82516020830152602083015160408301529392505050565b600082601f830112615a7e57600080fd5b8151615a8c61514a82615104565b818152846020838601011115615aa157600080fd5b612929826020830160208701614e33565b600060208284031215615ac457600080fd5b81516001600160401b03811115615ada57600080fd5b61292984828501615a6d565b61ffff85168152608060208201526000615b036080830186614e57565b6001600160401b038516604084015282810360608401526149e48185614e57565b8082028115828204841417610ca657610ca661548b565b600082615b5857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600290820152612b1960f11b604082015260600190565b61ffff861681526001600160a01b038516602082015260a060408201819052600090615bf290830186614e57565b84151560608401528281036080840152615c0c8185614e57565b98975050505050505050565b60008060408385031215615c2b57600080fd5b505080516020909101519092909150565b61ffff8716815260c060208201526000615c5960c0830188614e57565b8281036040840152615c6b8188614e57565b6001600160a01b0387811660608601528616608085015283810360a08501529050615c968185614e57565b9998505050505050505050565b600060208284031215615cb557600080fd5b815160058110610ca357600080fd5b8051614ce381614dd3565b60008060408385031215615ce257600080fd5b825160208401519092506001600160401b0380821115615d0157600080fd5b908401906101608287031215615d1657600080fd5b615d1e6150ab565b615d2783615cc4565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015183811115615d9b57600080fd5b615da789828701615a6d565b8284015250508093505050509250929050565b60008082840360a0811215615dce57600080fd5b835192506080601f1982011215615de457600080fd5b50604051608081016001600160401b0381118282101715615e0757615e07615095565b6040526020840151615e1881614dd3565b80825250604084015160208201526060840151604082015260808401516060820152809150509250929050565b61ffff8616815260a060208201526000615e6260a0830187614e57565b6001600160401b03861660408401528281036060840152615e838186614e57565b90508281036080840152615c0c8185614e57565b60408101615ea5828561570b565b825160208301529392505050565b61ffff841681526001600160a01b038316602082015260606040820181905260009061292690830184614e57565b6001600160a01b0386811682526020820186905261ffff851660408301528316606082015260a0608082018190526000906149e490830184614e5756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207077938609b62d02291f92527a2cf12899418eb44bd7930873af89a95b3d205c64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F74 DUP1 PUSH3 0x21 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7533D788 GT PUSH2 0x182 JUMPI DUP1 PUSH4 0x7533D788 EQ PUSH2 0x81D JUMPI DUP1 PUSH4 0x8CFD8F5C EQ PUSH2 0x83D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x875 JUMPI DUP1 PUSH4 0x950C8A74 EQ PUSH2 0x88A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x8AA JUMPI DUP1 PUSH4 0x99530B06 EQ PUSH2 0x8BF JUMPI DUP1 PUSH4 0x9AA7DF94 EQ PUSH2 0x8D4 JUMPI DUP1 PUSH4 0x9F38369A EQ PUSH2 0x8E9 JUMPI DUP1 PUSH4 0xA032A712 EQ PUSH2 0x909 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x929 JUMPI DUP1 PUSH4 0xA6C3D165 EQ PUSH2 0x949 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x969 JUMPI DUP1 PUSH4 0xAB033EA9 EQ PUSH2 0x989 JUMPI DUP1 PUSH4 0xAB73CE46 EQ PUSH2 0x9A9 JUMPI DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x9C0 JUMPI DUP1 PUSH4 0xB353AAA7 EQ PUSH2 0x9E0 JUMPI DUP1 PUSH4 0xBAF3292D EQ PUSH2 0xA00 JUMPI DUP1 PUSH4 0xC4461834 EQ PUSH2 0xA20 JUMPI DUP1 PUSH4 0xCBED8B9C EQ PUSH2 0xA36 JUMPI DUP1 PUSH4 0xCFBCC644 EQ PUSH2 0xA56 JUMPI DUP1 PUSH4 0xD1DEBA1F EQ PUSH2 0xA76 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xA89 JUMPI DUP1 PUSH4 0xDDE4F08E EQ PUSH2 0xAA9 JUMPI DUP1 PUSH4 0xDF2A5B3B EQ PUSH2 0xAC9 JUMPI DUP1 PUSH4 0xE63697C8 EQ PUSH2 0xAE9 JUMPI DUP1 PUSH4 0xE7FDA061 EQ PUSH2 0xB09 JUMPI DUP1 PUSH4 0xEB8D72B7 EQ PUSH2 0xB29 JUMPI DUP1 PUSH4 0xEF34253C EQ PUSH2 0xB49 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0xF5ECBDBC EQ PUSH2 0xB7E JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xB9E JUMPI DUP1 PUSH4 0xFC7B9C18 EQ PUSH2 0xBBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x1D3567 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x1DC2EB1 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x517CB76 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x7E0DB17 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0xA97C254 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0xDF37483 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x10DDB137 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x1459457A EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x14C64402 EQ PUSH2 0x47C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0x2D606843 EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x2DF9EAB9 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x4FC JUMPI DUP1 PUSH4 0x3403C2FC EQ PUSH2 0x523 JUMPI DUP1 PUSH4 0x37FDED91 EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x3D8B38F6 EQ PUSH2 0x57E JUMPI DUP1 PUSH4 0x3F1F4FA4 EQ PUSH2 0x59E JUMPI DUP1 PUSH4 0x4067CB9E EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0x42D65A8D EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0x52106A49 EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0x5AA6E675 EQ PUSH2 0x6C2 JUMPI DUP1 PUSH4 0x5B8C41E6 EQ PUSH2 0x6E2 JUMPI DUP1 PUSH4 0x5FE1A027 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0x66AD5C8A EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x7B2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x2ED JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0xBD4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xCAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x108 SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x4E1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0xD5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0xDC7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EDD JUMP JUMPDEST PUSH2 0xDDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F1C JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F38 JUMP JUMPDEST PUSH2 0xF5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FB7 JUMP JUMPDEST PUSH2 0x1182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x334 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4FD4 JUMP JUMPDEST PUSH2 0x11E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x1207 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x511 PUSH2 0x1283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 SLOAD PUSH2 0x3EC SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFD SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x579 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x12F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x599 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x1313 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x5B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63E PUSH2 0x5E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 SWAP1 SWAP8 ADD SLOAD SWAP6 SWAP7 SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x69D CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x13DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x5046 JUMP JUMPDEST PUSH2 0x1452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0x5181 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP5 MLOAD DUP1 DUP7 ADD DUP5 ADD DUP1 MLOAD SWAP3 DUP2 MSTORE SWAP1 DUP5 ADD SWAP6 DUP5 ADD SWAP6 SWAP1 SWAP6 KECCAK256 SWAP5 MSTORE SWAP3 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x775 PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x51DE JUMP JUMPDEST PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x7AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0x1689 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x7CD CALLDATASIZE PUSH1 0x4 PUSH2 0x51F7 JUMP JUMPDEST PUSH2 0x175D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x1769 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x829 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x838 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0x177D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x858 CALLDATASIZE PUSH1 0x4 PUSH2 0x5239 JUMP JUMPDEST PUSH1 0x99 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37D PUSH2 0x1817 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9B SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x1826 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1835 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1852 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x904 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0x18C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x924 CALLDATASIZE PUSH1 0x4 PUSH2 0x526C JUMP JUMPDEST PUSH2 0x19DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x944 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x1D56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x964 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x1DD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x984 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x1E5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x9A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1E68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x102 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x9DB CALLDATASIZE PUSH1 0x4 PUSH2 0x52B5 JUMP JUMPDEST PUSH2 0x1ED7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA1B CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x2025 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA51 CALLDATASIZE PUSH1 0x4 PUSH2 0x534F JUMP JUMPDEST PUSH2 0x2083 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA71 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x20FC JUMP JUMPDEST PUSH2 0x312 PUSH2 0xA84 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0x2157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xAA4 CALLDATASIZE PUSH1 0x4 PUSH2 0x53BD JUMP JUMPDEST PUSH2 0x236D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xAC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x526C JUMP JUMPDEST PUSH2 0x2398 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xAE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x53DB JUMP JUMPDEST PUSH2 0x2428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB04 CALLDATASIZE PUSH1 0x4 PUSH2 0x5417 JUMP JUMPDEST PUSH2 0x24DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xB24 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x24EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB44 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x24F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x2550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB79 CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x2826 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0xB99 CALLDATASIZE PUSH1 0x4 PUSH2 0x543E JUMP JUMPDEST PUSH2 0x289C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFC SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH1 0xFF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x56313 PUSH1 0xEC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC8F DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE DUP10 SWAP4 POP SWAP2 POP DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2931 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x29AA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB6 PUSH2 0x1852 JUMP JUMPDEST PUSH1 0xFF SLOAD PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0xCD7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD03 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD50 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD25 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD50 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD33 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD62 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7E0DB17 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E0DB17 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x2AD1 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xE10 JUMPI POP PUSH2 0xDFB PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0xE6B SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE PUSH1 0xFE SLOAD PUSH2 0x2710 SWAP1 PUSH2 0xEB0 SWAP1 DUP4 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST GT ISZERO PUSH2 0xEE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x2B1B PUSH1 0xF1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEF5 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF07 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0xF26 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x10DDB137 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x10DDB137 SWAP1 PUSH1 0x24 ADD PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xF7A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xF9B JUMPI POP PUSH2 0xF89 ADDRESS PUSH2 0x2BF5 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF9B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1021 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x102A DUP6 PUSH2 0x2C04 JUMP JUMPDEST PUSH2 0x1032 PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x107E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x13DB5B9A58DA185A5B8815985D5B1D PUSH1 0x8A SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x27A6AB PUSH1 0xE9 SHL DUP2 MSTORE POP PUSH2 0x2C6B JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xFC DUP1 SLOAD DUP8 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xFD DUP1 SLOAD DUP8 DUP6 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH2 0x108 DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x95EA7B3 SWAP1 PUSH2 0x10F0 SWAP1 DUP7 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x551D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1133 SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x11B3 JUMPI POP PUSH2 0x119E PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x11CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x100 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x11F1 DUP6 DUP3 DUP6 PUSH2 0x2C9C JUMP JUMPDEST PUSH2 0x11FC DUP6 DUP6 DUP6 PUSH2 0x2D16 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1238 JUMPI POP PUSH2 0x1223 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1280 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x5553 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x1304 DUP4 DUP4 PUSH2 0x236D JUMP JUMPDEST PUSH2 0x130E SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH2 0x1334 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1360 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1382 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1390 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x13C4 SWAP3 SWAP2 SWAP1 PUSH2 0x5576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13E7 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x42D65A8D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x42D65A8D SWAP1 PUSH2 0x141B SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x55AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1449 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1483 JUMPI POP PUSH2 0x146E PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x149F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 SWAP1 DUP6 SWAP1 ISZERO PUSH2 0x14E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x55CD JUMP JUMPDEST PUSH2 0x2710 DUP6 PUSH1 0xFE SLOAD PUSH2 0x14FA SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST GT ISZERO PUSH2 0x152D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5635 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x101 PUSH1 0x0 DUP10 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x1657 DUP7 PUSH2 0x103 PUSH1 0x0 DUP11 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x2EAF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0x1668 PUSH2 0x104 PUSH2 0xFFFF DUP10 AND PUSH2 0x2EC4 JUMP JUMPDEST POP DUP5 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x16E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A2063616C6C6572206D757374206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x204C7A41707 PUSH1 0xD4 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xC8F DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE DUP10 SWAP4 POP SWAP2 POP DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2ED0 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x2F6E JUMP JUMPDEST PUSH2 0x1771 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0x177B PUSH1 0x0 PUSH2 0x2FD2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x1796 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17C2 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x180F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17E4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x180F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17F2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0xCD7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC3 PUSH2 0x1842 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x184D SWAP1 PUSH1 0xA PUSH2 0x56CD JUMP JUMPDEST PUSH2 0x3024 JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1883 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x4E1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x56DC JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x18E7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1913 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1960 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1935 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1960 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1943 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x19B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C7A4170703A206E6F20747275737465642070617468207265636F7264000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x19D3 PUSH1 0x0 PUSH1 0x14 DUP4 MLOAD PUSH2 0x19CB SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST DUP4 SWAP2 SWAP1 PUSH2 0x3059 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1A0B JUMPI POP PUSH2 0x19F6 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1A27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP1 DUP3 SWAP1 ISZERO PUSH2 0x1A71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x55CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1AAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5637 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xC8F DUP7 DUP7 PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x572D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x3166 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1D64 DUP3 DUP7 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1DC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x11FC DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0x1DD9 PUSH2 0x2A72 JUMP JUMPDEST DUP2 DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1DEE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5752 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH2 0x1E19 SWAP1 DUP3 PUSH2 0x57CE JUMP JUMPDEST POP PUSH32 0x8C0400CFE2D1199B1A725C78960BCC2A344D869B80590D0F2BD005DB15A572CE DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x55AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x2D16 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1E99 JUMPI POP PUSH2 0x1E84 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1EB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x1F19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xAC7 PUSH1 0xF3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x108 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1F3D JUMPI POP PUSH1 0xFD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST DUP1 PUSH2 0x1F60 JUMPI POP PUSH2 0x1F4B PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1F91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5639 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F9F DUP7 DUP3 PUSH1 0x14 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1FAF SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1FC7 SWAP1 PUSH2 0x58A3 JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 POP PUSH2 0x1FD7 DUP8 DUP4 DUP6 PUSH2 0x3310 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP7 AND SWAP2 PUSH32 0x92073A89A07A000083EB8B2575FC15E7BB936EFE55D00727D6942A796D7211A7 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x202D PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x9B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5DB758E995A17EC1AD84BDEF7E8C3293A0BD6179BCCE400DFF5D4C3D87DB726B SWAP1 PUSH2 0x2078 SWAP1 DUP4 SWAP1 PUSH2 0x4E1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x208B PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x32FB62E7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xCBED8B9C SWAP1 PUSH2 0x20C3 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x58DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x212D JUMPI POP PUSH2 0x2118 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x2149 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x2153 DUP3 DUP3 PUSH2 0x33A7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH2 0x217A SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x5576 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH2 0x21FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A206E6F2073746F726564206D657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x616765 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x220B SWAP3 SWAP2 SWAP1 PUSH2 0x5576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ PUSH2 0x226A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A20696E76616C6964207061796C6F61 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH2 0x228D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x5576 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP5 MSTORE DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x1F DUP9 ADD DUP3 SWAP1 DIV DUP3 MUL DUP4 ADD DUP3 ADD SWAP1 MSTORE DUP7 DUP3 MSTORE PUSH2 0x2325 SWAP2 DUP10 SWAP2 DUP10 SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP11 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP9 DUP2 MSTORE DUP11 SWAP4 POP SWAP2 POP DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2ED0 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xC264D91F3ADC5588250E1551F547752CA0CFA8F6B530D243B9F9F4CAB10EA8E5 DUP8 DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0x235C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x23C9 JUMPI POP PUSH2 0x23B4 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x23E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2430 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2478 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4C7A4170703A20696E76616C6964206D696E476173 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x9D5C7C0B934DA8FEFA9C7760C98383778A12DFBFC0C3B3106518F43FB9508AC0 SWAP1 PUSH1 0x60 ADD PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x24E5 DUP4 DUP4 DUP4 PUSH2 0x341C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x3547 JUMP JUMPDEST PUSH2 0x24FE PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x251C DUP3 DUP5 DUP4 PUSH2 0x5943 JUMP JUMPDEST POP PUSH32 0xFA41487AD5D6728F0B19276FA1EDDC16558578F5109FC39D2DC33C3230470DAB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x55AF JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2581 JUMPI POP PUSH2 0x256C PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x259D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x59FC JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2655 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x2618 JUMPI PUSH2 0x2618 PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH2 0x2635 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x263F SWAP1 DUP5 PUSH2 0x54A1 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x264D SWAP1 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25D8 JUMP JUMPDEST POP PUSH2 0x265E PUSH2 0x1852 JUMP JUMPDEST DUP2 GT PUSH2 0x266C JUMPI PUSH2 0x1280 PUSH2 0x35FF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2676 PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x2680 SWAP1 DUP4 PUSH2 0x550A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x2691 PUSH2 0x104 PUSH2 0x3915 JUMP JUMPDEST DUP2 LT DUP1 ISZERO PUSH2 0x269F JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x27F0 JUMPI PUSH1 0x0 PUSH2 0x26B2 PUSH2 0x104 DUP4 PUSH2 0x391F JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST PUSH2 0x26D3 DUP3 PUSH2 0x3915 JUMP JUMPDEST DUP2 LT DUP1 ISZERO PUSH2 0x26E1 JUMPI POP PUSH1 0x0 DUP7 GT JUMPDEST ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 PUSH2 0x26F2 DUP4 DUP4 PUSH2 0x391F JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD SWAP3 SWAP4 POP SWAP2 SWAP1 SUB PUSH2 0x2730 JUMPI POP POP PUSH2 0x27C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2740 DUP10 DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x392B JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP12 AND DUP5 MSTORE PUSH1 0x5 ADD DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0x2785 DUP2 DUP11 PUSH2 0x550A JUMP JUMPDEST SWAP9 POP PUSH2 0x27B7 DUP7 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x102 SLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x5A47 JUMP JUMPDEST DUP8 PUSH2 0x27C1 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP9 POP POP POP POP POP JUMPDEST DUP1 PUSH2 0x27D2 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26CA JUMP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x27E8 SWAP1 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2686 JUMP JUMPDEST POP PUSH2 0x102 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MSTORE KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x282E PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x1280 DUP2 PUSH2 0x2FD2 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3D7B2F6F PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0xFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5ECBDBC SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2926 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5AB2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2994 GAS PUSH1 0x96 PUSH4 0x66AD5C8A PUSH1 0xE0 SHL DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2959 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE ADDRESS SWAP3 SWAP2 SWAP1 PUSH2 0x3941 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xC8F JUMPI PUSH2 0xC8F DUP7 DUP7 DUP7 DUP7 DUP6 PUSH2 0x39CD JUMP JUMPDEST PUSH2 0x100 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x29C1 JUMPI POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0x29CE PUSH2 0xCAC JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x2A04 SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP DUP1 DUP3 GT PUSH2 0x2A4F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x2A69 PUSH2 0x2A5A PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x2A64 DUP4 DUP6 PUSH2 0x550A JUMP JUMPDEST PUSH2 0x392B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x2A7B PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x177B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2B33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2B94 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x2C33 PUSH2 0x3A6A JUMP JUMPDEST PUSH2 0x1280 DUP2 PUSH2 0x3A9A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x177B PUSH2 0x3A6A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C92 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x2153 DUP3 DUP3 PUSH2 0x3AE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA8 DUP5 DUP5 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2D10 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x2D10 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x2AD1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2DDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2E54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x2EA2 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3B23 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x3B23 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EDE DUP5 DUP3 PUSH1 0x14 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EEE SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2F06 SWAP1 PUSH2 0x58A3 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 SWAP5 SWAP1 SWAP5 SHR DUP1 DUP5 MSTORE SWAP4 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x2F62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563135 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xDC0 DUP6 DUP4 PUSH1 0x0 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0x100 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2FAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563131 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB7 DUP4 DUP6 PUSH2 0x3B72 JUMP JUMPDEST PUSH1 0xFC SLOAD SWAP1 SWAP2 POP PUSH2 0xCA3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP8 PUSH2 0x3BEE JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x302F PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x303A JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x3045 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x304F SWAP1 DUP5 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0xCA6 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x3067 DUP2 PUSH1 0x1F PUSH2 0x54A1 JUMP JUMPDEST LT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x30B0 DUP3 DUP5 PUSH2 0x54A1 JUMP JUMPDEST DUP5 MLOAD LT ISZERO PUSH2 0x30F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x3113 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x315D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x314C JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x3134 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x31AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP7 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE ADDRESS SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x97 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40A7BB10 DUP9 ADDRESS DUP9 DUP6 PUSH2 0x3209 PUSH2 0x3C59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3229 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5BC4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3245 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3269 SWAP2 SWAP1 PUSH2 0x5C18 JUMP JUMPDEST POP SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x3295 JUMPI PUSH1 0x40 MLOAD PUSH3 0xFAE2D5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SELFBALANCE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5803100 DUP3 DUP10 DUP6 DUP10 ADDRESS DUP1 PUSH2 0x32B4 PUSH2 0x3C59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32D5 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3326 SWAP2 SWAP1 PUSH2 0x5CA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x333C JUMPI PUSH2 0x333C PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x336B JUMPI PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3357 SWAP2 SWAP1 PUSH2 0x5CCF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3365 DUP6 DUP3 DUP6 PUSH2 0x3C89 JUMP JUMPDEST POP PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x337F JUMPI PUSH2 0x337F PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x2D10 JUMPI PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x339A SWAP2 SWAP1 PUSH2 0x5DBA JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDC0 DUP6 DUP3 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x33E6 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 PUSH1 0x1 ADD SSTORE JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3453 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x59FC JUMP JUMPDEST PUSH2 0x345E CALLER ADDRESS DUP6 PUSH2 0x2D16 JUMP JUMPDEST PUSH2 0x106 PUSH1 0x0 PUSH2 0x102 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x34B6 DUP7 PUSH2 0x3024 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP4 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP7 SSTORE SWAP5 DUP3 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x6 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR DUP3 SSTORE SWAP3 DUP5 ADD MLOAD SWAP5 DUP2 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2710 PUSH2 0x3555 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x358B SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x3595 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x35DA JUMPI SWAP2 POP PUSH2 0xCA6 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0x35EC JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x35F6 DUP3 DUP3 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x3646 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x158C4D PUSH1 0xEA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3660 JUMPI PUSH2 0x3660 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3689 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3709 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x36BC JUMPI PUSH2 0x36BC PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH2 0x36D9 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x3024 JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x36EB JUMPI PUSH2 0x36EB PUSH2 0x5A18 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP DUP1 PUSH2 0x3701 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x368F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38A2 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x373A JUMPI PUSH2 0x373A PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH1 0x0 PUSH2 0x3771 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3761 JUMPI PUSH2 0x3761 PUSH2 0x5A18 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A64 PUSH2 0x1852 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x3850 JUMPI PUSH1 0x0 DUP2 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x3791 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2710 PUSH2 0x37A8 SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x37B2 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x3 ADD SLOAD DUP2 GT ISZERO PUSH2 0x384D JUMPI PUSH1 0x5 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP4 SLOAD PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0x3800 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x4 ADD PUSH2 0x551D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x381F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3843 SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST POP POP POP POP POP PUSH2 0x3890 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 ADD SLOAD PUSH1 0xFC SLOAD PUSH2 0x387F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x422E JUMP JUMPDEST PUSH2 0x388D ADDRESS DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x424D JUMP JUMPDEST POP POP JUMPDEST DUP1 PUSH2 0x389A DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x370D JUMP JUMPDEST POP PUSH2 0x102 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0xC682EB885C208B8AAAA811C05902E24A4F14B388960311623A8F31404F655129 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x102 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP2 SLOAD SWAP2 SWAP1 PUSH2 0x390C DUP4 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x436F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x393A JUMPI DUP2 PUSH2 0xCA3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 PUSH2 0xFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3966 JUMPI PUSH2 0x3966 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3990 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP8 MLOAD PUSH1 0x20 DUP10 ADD PUSH1 0x0 DUP14 DUP14 CALL SWAP2 POP RETURNDATASIZE SWAP3 POP DUP7 DUP4 GT ISZERO PUSH2 0x39B2 JUMPI DUP7 SWAP3 POP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC9 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x40 MLOAD PUSH2 0x39FE SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB PUSH1 0x20 SWAP1 DUP2 ADD DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 MSTORE KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0xE183F33DE2837795525B4792CA4CD60535BD77C53B7E7030060BFCF5734D6B0C SWAP1 PUSH2 0x3A5B SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5E45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x177B CALLER PUSH2 0x2FD2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3AC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3B0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH1 0x36 PUSH2 0x3B16 DUP4 DUP3 PUSH2 0x57CE JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0x24E5 DUP3 DUP3 PUSH2 0x57CE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x3B6A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xCA6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3B7E PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x3B8C JUMPI POP DUP2 PUSH2 0x3BAE JUMP JUMPDEST PUSH2 0x3B94 PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x3BA1 SWAP1 DUP6 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x3BAB SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x3BE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563133 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xCA3 DUP5 DUP3 PUSH2 0x4399 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2D10 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x4448 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xF4240 PUSH1 0x22 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x42 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3C93 DUP4 DUP4 PUSH2 0x451D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD ISZERO PUSH2 0x3CB0 JUMPI PUSH2 0x3CB0 DUP4 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x46FC JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP1 MSTORE SWAP2 DUP3 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x3CF1 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3D06 SWAP1 DUP6 SWAP1 PUSH2 0x3547 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D18 DUP3 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x392B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3D88 JUMPI PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x3D5C SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3D75 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3D85 SWAP1 POP DUP2 DUP4 PUSH2 0x550A JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD ISZERO PUSH2 0x3DF5 JUMPI PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3DD3 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0xFF DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x3DEF SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH2 0xFFFF DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x101 DUP1 DUP6 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE DUP2 DUP9 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x5 ADD SWAP7 SWAP1 SWAP7 SSTORE SWAP4 DUP4 MSTORE SWAP1 DUP6 MSTORE DUP9 MLOAD SWAP1 SWAP4 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO DUP1 PUSH2 0x3E50 JUMPI POP PUSH2 0x100 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x3E5E JUMPI DUP4 PUSH2 0x100 ADD MLOAD SWAP2 POP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD ISZERO PUSH2 0x3EB1 JUMPI PUSH2 0x3EAC DUP5 PUSH1 0xA0 ADD MLOAD DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E98 SWAP3 SWAP2 SWAP1 PUSH2 0x5E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x47F1 JUMP JUMPDEST PUSH2 0x3EDC JUMP JUMPDEST PUSH2 0x3EDC DUP6 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x5E97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH32 0x8BC8EFF67F79E18165507D64024F5CA5E90A2593C7A45CB5CAF7F9D843E404C DUP7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD DUP15 PUSH1 0x40 MLOAD PUSH2 0x1172 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFFFF SWAP12 SWAP1 SWAP12 AND DUP12 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 SWAP1 SWAP10 AND PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP10 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP9 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP2 SWAP1 PUSH2 0x40AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD ISZERO PUSH2 0x40CA JUMPI PUSH2 0x40CA DUP5 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x46FC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 DUP3 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x410B SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0xFF DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4127 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 PUSH2 0x414F DUP4 PUSH2 0x5A2E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH2 0xFFFF DUP11 AND DUP6 MSTORE PUSH1 0x4 ADD DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 MLOAD DUP5 MSTORE SWAP2 SWAP1 MSTORE DUP1 DUP3 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP3 MLOAD DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0x41BD JUMPI PUSH2 0x41BD PUSH2 0x35FF JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0xFFFF AND PUSH32 0x46368A4CA42EFBDD968B9025440EB5590BDCDA7DA09F4FEF8AC4EF2F44A5ED0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x4220 SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x24E5 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3C22 SWAP3 SWAP2 SWAP1 PUSH2 0x551D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x42AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4386 JUMPI PUSH2 0x4386 PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x43EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4401 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x44BE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x44BE SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST PUSH2 0x24E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x107 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0x120 DUP6 ADD MLOAD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x458A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x2B189B PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0xF0 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x54 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x56 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x461F SWAP2 SWAP1 PUSH28 0xCA2BA3432B932BAB69029B4B3B732B21026B2B9B9B0B3B29D051999 PUSH1 0x21 SHL DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 DUP5 MSTORE DUP3 DUP2 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE SWAP5 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x140 DUP7 ADD MLOAD SWAP2 SWAP4 POP SWAP1 SWAP2 AND SWAP1 PUSH2 0x467A SWAP1 DUP4 SWAP1 PUSH2 0x48F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x46B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563137 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST POP POP PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x107 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0x120 SWAP1 SWAP5 ADD MLOAD DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP2 GT ISZERO PUSH2 0x475D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x2B1899 PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x4 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x4798 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x47D8 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEF5 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH4 0xDC63461 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDC63461 SWAP1 PUSH2 0x4826 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5EB3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4843 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4867 SWAP2 SWAP1 PUSH2 0x56DC JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0xFC SLOAD PUSH1 0x40 MLOAD PUSH4 0x3920455B PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x72408AB6 SWAP3 DUP6 SWAP3 PUSH2 0x48A8 SWAP3 SWAP2 AND SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5EE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2929 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x4914 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x48FF DUP6 DUP6 PUSH2 0x49EF JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x490C DUP2 PUSH2 0x4A34 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4975 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4991 SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x49CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x49D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x49E4 DUP8 DUP4 DUP4 DUP8 PUSH2 0x4B79 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x4A25 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x4A19 DUP8 DUP3 DUP6 DUP6 PUSH2 0x4BF0 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x4A2D JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4A48 JUMPI PUSH2 0x4A48 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4A50 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4A64 JUMPI PUSH2 0x4A64 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4AAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4AC0 JUMPI PUSH2 0x4AC0 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4B0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4B21 JUMPI PUSH2 0x4B21 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4BE6 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x4BDF JUMPI PUSH2 0x4B93 DUP6 PUSH2 0x2BF5 JUMP JUMPDEST PUSH2 0x4BDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST POP DUP2 PUSH2 0x2929 JUMP JUMPDEST PUSH2 0x2929 DUP4 DUP4 PUSH2 0x4CA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF60 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 GT ISZERO PUSH2 0x4C1D JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x39C4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4C9A JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x39C4 JUMP JUMPDEST SWAP7 PUSH1 0x0 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x4CB7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4D11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D62 DUP8 PUSH2 0x4CD1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4D7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D8A DUP11 DUP4 DUP12 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP DUP6 SWAP2 POP PUSH2 0x4D9E PUSH1 0x40 DUP11 ADD PUSH2 0x4D29 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4DB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC1 DUP10 DUP3 DUP11 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4DFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E04 DUP4 PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4E14 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E4E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E36 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E6F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4E33 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCA3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCA3 DUP3 PUSH2 0x4CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4ECF DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EFB DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4F0B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4ECF DUP4 PUSH2 0x4CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4F5B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4F6B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4F7B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4F8B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F9B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4EFB DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5012 DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x502D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5039 DUP7 DUP3 DUP8 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x505E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5067 DUP7 PUSH2 0x4CD1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x5077 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F9B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x50CE JUMPI PUSH2 0x50CE PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x50FC JUMPI PUSH2 0x50FC PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x511D JUMPI PUSH2 0x511D PUSH2 0x5095 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x513C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x514F PUSH2 0x514A DUP3 PUSH2 0x5104 JUMP JUMPDEST PUSH2 0x50D4 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x519F DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51C6 DUP7 DUP3 DUP8 ADD PUSH2 0x512B JUMP JUMPDEST SWAP3 POP POP PUSH2 0x51D5 PUSH1 0x40 DUP6 ADD PUSH2 0x4D29 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x520A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4E14 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x524C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5255 DUP4 PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH2 0x5263 PUSH1 0x20 DUP5 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x528A DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x529A DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x52AA DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x52CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x52D7 DUP8 PUSH2 0x4CD1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x52F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x52FF DUP11 DUP4 DUP12 ADD PUSH2 0x512B JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x5318 DUP3 PUSH2 0x4DD3 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x5335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5342 DUP10 DUP3 DUP11 ADD PUSH2 0x512B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5370 DUP7 PUSH2 0x4CD1 JUMP JUMPDEST SWAP5 POP PUSH2 0x537E PUSH1 0x20 DUP8 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x53A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x53AC DUP9 DUP3 DUP10 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x53D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4E04 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x53F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x53F9 DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH2 0x5407 PUSH1 0x20 DUP6 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x542C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4F0B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x545D DUP6 PUSH2 0x4CD1 JUMP JUMPDEST SWAP4 POP PUSH2 0x546B PUSH1 0x20 DUP7 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x547B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x54C8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x54E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x5631 PUSH1 0xF0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xCA3 DUP2 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2926 PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0x5586 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x5633 PUSH1 0xF0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x5624 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x560A JUMPI PUSH2 0x560A PUSH2 0x548B JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x5617 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x55EE JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x563B JUMPI POP PUSH1 0x1 PUSH2 0xCA6 JUMP JUMPDEST DUP2 PUSH2 0x5648 JUMPI POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x565E JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5668 JUMPI PUSH2 0x5684 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x5679 JUMPI PUSH2 0x5679 PUSH2 0x548B JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xCA6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x56A7 JUMPI POP DUP2 DUP2 EXP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x56B1 DUP4 DUP4 PUSH2 0x55E9 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x56C5 JUMPI PUSH2 0x56C5 PUSH2 0x548B JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x562C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x5729 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x573B DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x24E5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x579A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x57A6 JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND PUSH1 0x1 SWAP2 SWAP1 SWAP2 SHL OR SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x57E7 JUMPI PUSH2 0x57E7 PUSH2 0x5095 JUMP JUMPDEST PUSH2 0x57FB DUP2 PUSH2 0x57F5 DUP5 SLOAD PUSH2 0x54B4 JUMP JUMPDEST DUP5 PUSH2 0x5773 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x582A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x5818 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH2 0x5822 DUP6 DUP3 PUSH2 0x57B9 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5859 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x583A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x5877 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5899 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4E33 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x58D2 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x49E4 PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x5586 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5926 PUSH1 0x80 DUP4 ADD DUP7 DUP9 PUSH2 0x5586 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x595A JUMPI PUSH2 0x595A PUSH2 0x5095 JUMP JUMPDEST PUSH2 0x596E DUP4 PUSH2 0x5968 DUP4 SLOAD PUSH2 0x54B4 JUMP JUMPDEST DUP4 PUSH2 0x5773 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x599C JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x598A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH2 0x5994 DUP7 DUP3 PUSH2 0x57B9 JUMP JUMPDEST DUP5 SSTORE POP PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x59CD JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x59AD JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x59EA JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x158D PUSH1 0xF2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5A40 JUMPI PUSH2 0x5A40 PUSH2 0x548B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5A55 DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5A8C PUSH2 0x514A DUP3 PUSH2 0x5104 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5AA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2929 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4E33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2929 DUP5 DUP3 DUP6 ADD PUSH2 0x5A6D JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5B03 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x49E4 DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B58 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x2B19 PUSH1 0xF1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5BF2 SWAP1 DUP4 ADD DUP7 PUSH2 0x4E57 JUMP JUMPDEST DUP5 ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C0C DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND DUP2 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5C59 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x4E57 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5C6B DUP2 DUP9 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x60 DUP7 ADD MSTORE DUP7 AND PUSH1 0x80 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0xA0 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x5C96 DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x4CE3 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5D01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x5D16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D1E PUSH2 0x50AB JUMP JUMPDEST PUSH2 0x5D27 DUP4 PUSH2 0x5CC4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x5D9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5DA7 DUP10 DUP3 DUP8 ADD PUSH2 0x5A6D JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x80 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x5DE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5E07 JUMPI PUSH2 0x5E07 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x5E18 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5E62 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x5E83 DUP2 DUP7 PUSH2 0x4E57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C0C DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5EA5 DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2926 SWAP1 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE PUSH2 0xFFFF DUP6 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x49E4 SWAP1 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x77938609B62D02291F92527A2CF1289941 DUP15 0xB4 0x4B 0xD7 SWAP4 ADDMOD PUSH20 0xAF89A95B3D205C64736F6C634300081300330000 ","sourceMap":"1031:20831:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_PAYLOAD_SIZE_LIMIT_210":{"entryPoint":null,"id":210,"parameterSlots":0,"returnSlots":0},"@_7920":{"entryPoint":null,"id":7920,"parameterSlots":0,"returnSlots":0},"@__ERC20_init_1802":{"entryPoint":11371,"id":1802,"parameterSlots":2,"returnSlots":0},"@__ERC20_init_unchained_1820":{"entryPoint":15075,"id":1820,"parameterSlots":2,"returnSlots":0},"@__LzAppUpgradeable_init_unchained_282":{"entryPoint":15002,"id":282,"parameterSlots":1,"returnSlots":0},"@__NonblockingLzAppUpgradeable_init_788":{"entryPoint":11268,"id":788,"parameterSlots":1,"returnSlots":0},"@__Ownable_init_1481":{"entryPoint":11324,"id":1481,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_1492":{"entryPoint":14954,"id":1492,"parameterSlots":0,"returnSlots":0},"@_add_5281":{"entryPoint":15139,"id":5281,"parameterSlots":2,"returnSlots":1},"@_afterTokenTransfer_2361":{"entryPoint":null,"id":2361,"parameterSlots":3,"returnSlots":0},"@_approve_2296":{"entryPoint":10961,"id":2296,"parameterSlots":3,"returnSlots":0},"@_at_5415":{"entryPoint":17263,"id":5415,"parameterSlots":2,"returnSlots":1},"@_beforeTokenTransfer_2350":{"entryPoint":null,"id":2350,"parameterSlots":3,"returnSlots":0},"@_blockingLzReceive_875":{"entryPoint":10545,"id":875,"parameterSlots":4,"returnSlots":0},"@_bridge_7839":{"entryPoint":18417,"id":7839,"parameterSlots":4,"returnSlots":0},"@_burn_2251":{"entryPoint":16973,"id":2251,"parameterSlots":2,"returnSlots":0},"@_callOptionalReturn_3283":{"entryPoint":17480,"id":3283,"parameterSlots":2,"returnSlots":0},"@_checkOwner_1523":{"entryPoint":10866,"id":1523,"parameterSlots":0,"returnSlots":0},"@_contains_5384":{"entryPoint":null,"id":5384,"parameterSlots":2,"returnSlots":1},"@_creditAvailable_7435":{"entryPoint":10666,"id":7435,"parameterSlots":2,"returnSlots":1},"@_debtOutstanding_7486":{"entryPoint":13639,"id":7486,"parameterSlots":2,"returnSlots":1},"@_deposit_6825":{"entryPoint":12142,"id":6825,"parameterSlots":2,"returnSlots":1},"@_fulfillWithdrawEpoch_7663":{"entryPoint":13823,"id":7663,"parameterSlots":0,"returnSlots":0},"@_getAdapterParams_7354":{"entryPoint":15449,"id":7354,"parameterSlots":0,"returnSlots":1},"@_handlePayload_6892":{"entryPoint":13072,"id":6892,"parameterSlots":3,"returnSlots":0},"@_handleStrategyReport_7094":{"entryPoint":15497,"id":7094,"parameterSlots":3,"returnSlots":0},"@_handleWithdrawSomeResponse_7755":{"entryPoint":16483,"id":7755,"parameterSlots":2,"returnSlots":0},"@_initiateWithdraw_7178":{"entryPoint":13340,"id":7178,"parameterSlots":3,"returnSlots":0},"@_issueSharesForAmount_7253":{"entryPoint":15218,"id":7253,"parameterSlots":2,"returnSlots":1},"@_length_5398":{"entryPoint":null,"id":5398,"parameterSlots":1,"returnSlots":1},"@_mint_2179":{"entryPoint":17305,"id":2179,"parameterSlots":2,"returnSlots":0},"@_msgSender_2827":{"entryPoint":null,"id":2827,"parameterSlots":0,"returnSlots":1},"@_nonblockingLzReceive_7803":{"entryPoint":11984,"id":7803,"parameterSlots":4,"returnSlots":0},"@_reportLoss_7138":{"entryPoint":18172,"id":7138,"parameterSlots":3,"returnSlots":0},"@_revert_3661":{"entryPoint":19623,"id":3661,"parameterSlots":2,"returnSlots":0},"@_revokeStrategy_7380":{"entryPoint":13223,"id":7380,"parameterSlots":2,"returnSlots":0},"@_sendMessageToStrategy_7334":{"entryPoint":12646,"id":7334,"parameterSlots":3,"returnSlots":0},"@_shareValue_7203":{"entryPoint":12324,"id":7203,"parameterSlots":1,"returnSlots":1},"@_spendAllowance_2339":{"entryPoint":11420,"id":2339,"parameterSlots":3,"returnSlots":0},"@_storeFailedMessage_909":{"entryPoint":14797,"id":909,"parameterSlots":5,"returnSlots":0},"@_throwError_3945":{"entryPoint":18996,"id":3945,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_1580":{"entryPoint":12242,"id":1580,"parameterSlots":1,"returnSlots":0},"@_transfer_2122":{"entryPoint":11542,"id":2122,"parameterSlots":3,"returnSlots":0},"@_verifySignature_7916":{"entryPoint":17693,"id":7916,"parameterSlots":2,"returnSlots":0},"@addStrategy_6283":{"entryPoint":5202,"id":6283,"parameterSlots":5,"returnSlots":0},"@add_5581":{"entryPoint":11951,"id":5581,"parameterSlots":2,"returnSlots":1},"@add_5732":{"entryPoint":11972,"id":5732,"parameterSlots":2,"returnSlots":1},"@allowance_1917":{"entryPoint":9069,"id":1917,"parameterSlots":2,"returnSlots":1},"@approve_1942":{"entryPoint":3527,"id":1942,"parameterSlots":2,"returnSlots":1},"@at_5677":{"entryPoint":null,"id":5677,"parameterSlots":2,"returnSlots":1},"@at_5810":{"entryPoint":14623,"id":5810,"parameterSlots":2,"returnSlots":1},"@balanceOf_1874":{"entryPoint":null,"id":1874,"parameterSlots":1,"returnSlots":1},"@creditAvailable_6313":{"entryPoint":3223,"id":6313,"parameterSlots":2,"returnSlots":1},"@debtOutstanding_6298":{"entryPoint":9450,"id":6298,"parameterSlots":2,"returnSlots":1},"@decimals_6091":{"entryPoint":4739,"id":6091,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_2045":{"entryPoint":7510,"id":2045,"parameterSlots":2,"returnSlots":1},"@deposit_6198":{"entryPoint":5981,"id":6198,"parameterSlots":2,"returnSlots":1},"@emergencyShutdown_5972":{"entryPoint":null,"id":5972,"parameterSlots":0,"returnSlots":0},"@excessivelySafeCall_1397":{"entryPoint":14657,"id":1397,"parameterSlots":4,"returnSlots":2},"@failedMessages_804":{"entryPoint":null,"id":804,"parameterSlots":0,"returnSlots":0},"@forceResumeReceive_587":{"entryPoint":5087,"id":587,"parameterSlots":3,"returnSlots":0},"@functionCallWithValue_3486":{"entryPoint":18708,"id":3486,"parameterSlots":4,"returnSlots":1},"@functionCall_3422":{"entryPoint":18657,"id":3422,"parameterSlots":3,"returnSlots":1},"@getConfig_515":{"entryPoint":10396,"id":515,"parameterSlots":4,"returnSlots":1},"@getTrustedRemoteAddress_667":{"entryPoint":6340,"id":667,"parameterSlots":1,"returnSlots":1},"@governance_5959":{"entryPoint":null,"id":5959,"parameterSlots":0,"returnSlots":0},"@handleWithdrawals_6513":{"entryPoint":9552,"id":6513,"parameterSlots":0,"returnSlots":0},"@increaseAllowance_2004":{"entryPoint":4849,"id":2004,"parameterSlots":2,"returnSlots":1},"@initialize_5956":{"entryPoint":3930,"id":5956,"parameterSlots":5,"returnSlots":0},"@isContract_2488":{"entryPoint":11253,"id":2488,"parameterSlots":1,"returnSlots":1},"@isContract_3350":{"entryPoint":null,"id":3350,"parameterSlots":1,"returnSlots":1},"@isTrustedRemote_756":{"entryPoint":4883,"id":756,"parameterSlots":3,"returnSlots":1},"@length_5650":{"entryPoint":null,"id":5650,"parameterSlots":1,"returnSlots":1},"@length_5789":{"entryPoint":14613,"id":5789,"parameterSlots":1,"returnSlots":1},"@lzEndpoint_213":{"entryPoint":null,"id":213,"parameterSlots":0,"returnSlots":0},"@lzReceive_6788":{"entryPoint":3028,"id":6788,"parameterSlots":6,"returnSlots":0},"@migrateStrategy_6676":{"entryPoint":6618,"id":6676,"parameterSlots":3,"returnSlots":0},"@minDstGasLookup_223":{"entryPoint":null,"id":223,"parameterSlots":0,"returnSlots":0},"@min_4300":{"entryPoint":14635,"id":4300,"parameterSlots":2,"returnSlots":1},"@name_1830":{"entryPoint":3272,"id":1830,"parameterSlots":0,"returnSlots":1},"@nonblockingLzReceive_939":{"entryPoint":5769,"id":939,"parameterSlots":6,"returnSlots":0},"@owner_1509":{"entryPoint":6167,"id":1509,"parameterSlots":0,"returnSlots":1},"@payloadSizeLimitLookup_227":{"entryPoint":null,"id":227,"parameterSlots":0,"returnSlots":0},"@precrime_229":{"entryPoint":null,"id":229,"parameterSlots":0,"returnSlots":0},"@pricePerShare_6527":{"entryPoint":6197,"id":6527,"parameterSlots":0,"returnSlots":1},"@recover_4018":{"entryPoint":18672,"id":4018,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_1537":{"entryPoint":5993,"id":1537,"parameterSlots":0,"returnSlots":0},"@retryMessage_1018":{"entryPoint":8535,"id":1018,"parameterSlots":6,"returnSlots":0},"@revokeFunds_6111":{"entryPoint":4615,"id":6111,"parameterSlots":0,"returnSlots":0},"@revokeStrategy_6543":{"entryPoint":8444,"id":6543,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_3016":{"entryPoint":15342,"id":3016,"parameterSlots":4,"returnSlots":0},"@safeTransfer_2989":{"entryPoint":16942,"id":2989,"parameterSlots":3,"returnSlots":0},"@setConfig_539":{"entryPoint":8323,"id":539,"parameterSlots":5,"returnSlots":0},"@setEmergencyShutdown_6123":{"entryPoint":4482,"id":6123,"parameterSlots":1,"returnSlots":0},"@setGovernance_6135":{"entryPoint":7784,"id":6135,"parameterSlots":1,"returnSlots":0},"@setMinDstGas_716":{"entryPoint":9256,"id":716,"parameterSlots":3,"returnSlots":0},"@setPayloadSizeLimit_732":{"entryPoint":3839,"id":732,"parameterSlots":2,"returnSlots":0},"@setPrecrime_683":{"entryPoint":8229,"id":683,"parameterSlots":1,"returnSlots":0},"@setReceiveVersion_569":{"entryPoint":3870,"id":569,"parameterSlots":1,"returnSlots":0},"@setSendVersion_554":{"entryPoint":3418,"id":554,"parameterSlots":1,"returnSlots":0},"@setStrategist_6156":{"entryPoint":9112,"id":6156,"parameterSlots":3,"returnSlots":0},"@setTrustedRemoteAddress_636":{"entryPoint":7633,"id":636,"parameterSlots":3,"returnSlots":0},"@setTrustedRemote_608":{"entryPoint":9462,"id":608,"parameterSlots":3,"returnSlots":0},"@sgBridge_5966":{"entryPoint":null,"id":5966,"parameterSlots":0,"returnSlots":0},"@sgReceive_6757":{"entryPoint":7895,"id":6757,"parameterSlots":6,"returnSlots":0},"@sgRouter_6004":{"entryPoint":null,"id":6004,"parameterSlots":0,"returnSlots":0},"@slice_1088":{"entryPoint":12377,"id":1088,"parameterSlots":3,"returnSlots":1},"@strategies_5979":{"entryPoint":null,"id":5979,"parameterSlots":0,"returnSlots":0},"@symbol_1840":{"entryPoint":6182,"id":1840,"parameterSlots":0,"returnSlots":1},"@token_5963":{"entryPoint":null,"id":5963,"parameterSlots":0,"returnSlots":0},"@totalAssets_6168":{"entryPoint":3244,"id":6168,"parameterSlots":0,"returnSlots":1},"@totalDebtRatio_5968":{"entryPoint":null,"id":5968,"parameterSlots":0,"returnSlots":0},"@totalDebt_5970":{"entryPoint":null,"id":5970,"parameterSlots":0,"returnSlots":0},"@totalIdle_6182":{"entryPoint":6226,"id":6182,"parameterSlots":0,"returnSlots":1},"@totalSupply_1860":{"entryPoint":null,"id":1860,"parameterSlots":0,"returnSlots":1},"@transferFrom_1975":{"entryPoint":4579,"id":1975,"parameterSlots":3,"returnSlots":1},"@transferOwnership_1560":{"entryPoint":10278,"id":1560,"parameterSlots":1,"returnSlots":0},"@transfer_1899":{"entryPoint":7770,"id":1899,"parameterSlots":2,"returnSlots":1},"@trustedRemoteLookup_217":{"entryPoint":6013,"id":217,"parameterSlots":0,"returnSlots":0},"@tryRecover_3991":{"entryPoint":18927,"id":3991,"parameterSlots":2,"returnSlots":2},"@tryRecover_4159":{"entryPoint":19440,"id":4159,"parameterSlots":4,"returnSlots":2},"@updateStrategyDebtRatio_6587":{"entryPoint":3551,"id":6587,"parameterSlots":3,"returnSlots":0},"@verifyCallResultFromTarget_3617":{"entryPoint":19321,"id":3617,"parameterSlots":4,"returnSlots":1},"@withdrawEpoch_5981":{"entryPoint":null,"id":5981,"parameterSlots":0,"returnSlots":0},"@withdrawEpochs_5994":{"entryPoint":null,"id":5994,"parameterSlots":0,"returnSlots":0},"@withdraw_6215":{"entryPoint":9434,"id":6215,"parameterSlots":3,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":23748,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":20779,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":19688,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_fromMemory":{"entryPoint":23149,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":21020,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":21437,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_contract$_IERC20_$2920t_addresst_address":{"entryPoint":20280,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":20436,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":20145,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":20407,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":21814,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr_fromMemory":{"entryPoint":23218,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_enum$_MessageType_$8073_fromMemory":{"entryPoint":23715,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint16":{"entryPoint":20118,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint16t_address":{"entryPoint":19944,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint16t_addresst_address":{"entryPoint":21100,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_addresst_uint256":{"entryPoint":20189,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_addresst_uint256t_uint256t_address":{"entryPoint":20550,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint16t_bytes_calldata_ptr":{"entryPoint":20468,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_bytes_calldata_ptrt_uint64t_bytes_calldata_ptr":{"entryPoint":19776,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr":{"entryPoint":21173,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint64":{"entryPoint":20865,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_uint16":{"entryPoint":21049,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint16t_uint16t_addresst_uint256":{"entryPoint":21566,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint16t_uint16t_uint256":{"entryPoint":21467,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_uint16t_uint256t_bytes_calldata_ptr":{"entryPoint":21327,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint16t_uint256":{"entryPoint":20252,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":20958,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":22236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":20983,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_addresst_uint256":{"entryPoint":21527,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_struct$_StrategyReport_$8110_memory_ptr_fromMemory":{"entryPoint":23759,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_struct$_WithdrawSomeResponse_$8087_memory_ptr_fromMemory":{"entryPoint":23994,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256_fromMemory":{"entryPoint":23576,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint8_fromMemory":{"entryPoint":21843,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint16":{"entryPoint":19665,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":19753,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":21894,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_enum_MessageType":{"entryPoint":22283,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":20055,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":21878,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address__to_t_bytes_memory_ptr_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":22354,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":22663,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_uint16_t_uint256__to_t_uint16_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":19999,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":21789,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":24289,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$2920__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ILayerZeroEndpointUpgradeable_$144__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ISgBridge_$8065__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_AdjustPositionRequest_$8113_memory_ptr__to_t_uint8_t_struct$_AdjustPositionRequest_$8113_memory_ptr__fromStack_reversed":{"entryPoint":24215,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__to_t_uint8_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__fromStack_reversed":{"entryPoint":22317,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__to_t_uint8_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__fromStack_reversed":{"entryPoint":23111,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20099,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0496c2ac3cc54dcad1f20b85ceee7cff65b214f05b3c4cc3a656a3b2f58b3032__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d0fadbfd5581340d6125d75eec5c0f822af985ca29c469907ce2ae22a0db3fc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":23464,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_342cf7819a7b9d6be88d78d5ce1c249df923b883ccee4359201419a6fc792681__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4ade54ca82b345967b61d43a7b6e1c256d140cceb65202e7117104371c17959c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":21965,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a2283__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":21742,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6955e6baaa624f389e0b20575e612dbaf853ad543050e752bced30fcb8433ae2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_71efe16cba88fb6e6f90a0e977fb675ba6f9580f574329558474b34d137c4252__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_81685035bf6e9d5f45bbedb20e2e5ca3f52663efad8040454930d989b0bd1f49__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ffb1ab747312adb96abfb46262e30aa3e12a4ca4184395f7cc2e72f7b051731__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_936a052e832d05db833c1fb152ee9d04cb963f54db694a4cc58e037932bdbf61__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":23036,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9cd8c9dc536286380c07cdfe5f9893dc9aaf35c1c68f6f6166f94a63d6ba2b48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b46a90f4b21e2dde8c773cf0c4d328fc87a1de68dc62806dc5c03b501b10e8c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c17c46a066c2510546b70bc409727a4e4af3fc7d2ba2247252fb8067cfbd3da4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c1f3458591aa5dbadd866836ff54b5edb079a2e1de0432c95a85f45437b12bfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c5b7eade2f846c2d73550725c633f620b448355b3eadae1ce74efe009b42706a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":23389,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fff5bff707f8f14059842ca392bf43cb6be6f8f9059b23a37eaab9bbdc0ad70f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":24243,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":23492,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":12,"returnSlots":1},"abi_encode_tuple_t_uint16_t_bytes_calldata_ptr__to_t_uint16_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":21935,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint16_t_bytes_calldata_ptr_t_uint64_t_bytes32__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes32__fromStack_reversed":{"entryPoint":22792,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":23612,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":23270,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":24133,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_address_t_uint256__to_t_uint16_t_uint16_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint256__to_t_uint16_t_uint16_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint256_t_bytes_calldata_ptr__to_t_uint16_t_uint16_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":22746,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":20692,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_6770":{"entryPoint":20651,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":20740,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":21665,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":23355,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":21993,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":22221,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":22060,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":23332,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":21770,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":22387,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20":{"entryPoint":22691,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":22851,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":22478,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":20019,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":21684,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":22457,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":23086,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":21643,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":22261,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":23064,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":20629,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":19923,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":20393,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:57657:28","statements":[{"nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nodeType":"YulBlock","src":"62:111:28","statements":[{"nodeType":"YulAssignment","src":"72:29:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"94:6:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"81:12:28"},"nodeType":"YulFunctionCall","src":"81:20:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"72:5:28"}]},{"body":{"nodeType":"YulBlock","src":"151:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"160:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"153:6:28"},"nodeType":"YulFunctionCall","src":"153:12:28"},"nodeType":"YulExpressionStatement","src":"153:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"123:5:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"141:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"130:3:28"},"nodeType":"YulFunctionCall","src":"130:18:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"120:2:28"},"nodeType":"YulFunctionCall","src":"120:29:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"113:6:28"},"nodeType":"YulFunctionCall","src":"113:37:28"},"nodeType":"YulIf","src":"110:57:28"}]},"name":"abi_decode_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"41:6:28","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"52:5:28","type":""}],"src":"14:159:28"},{"body":{"nodeType":"YulBlock","src":"250:275:28","statements":[{"body":{"nodeType":"YulBlock","src":"299:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"308:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"311:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"301:6:28"},"nodeType":"YulFunctionCall","src":"301:12:28"},"nodeType":"YulExpressionStatement","src":"301:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"278:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"286:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:28"},"nodeType":"YulFunctionCall","src":"274:17:28"},{"name":"end","nodeType":"YulIdentifier","src":"293:3:28"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"270:3:28"},"nodeType":"YulFunctionCall","src":"270:27:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"263:6:28"},"nodeType":"YulFunctionCall","src":"263:35:28"},"nodeType":"YulIf","src":"260:55:28"},{"nodeType":"YulAssignment","src":"324:30:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"347:6:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"334:12:28"},"nodeType":"YulFunctionCall","src":"334:20:28"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"324:6:28"}]},{"body":{"nodeType":"YulBlock","src":"397:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"406:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"409:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"399:6:28"},"nodeType":"YulFunctionCall","src":"399:12:28"},"nodeType":"YulExpressionStatement","src":"399:12:28"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"385:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"389:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"381:3:28"},"nodeType":"YulFunctionCall","src":"381:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"393:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"377:3:28"},"nodeType":"YulFunctionCall","src":"377:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"366:2:28"},"nodeType":"YulFunctionCall","src":"366:30:28"},"nodeType":"YulIf","src":"363:50:28"},{"nodeType":"YulAssignment","src":"422:29:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"438:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"446:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"434:3:28"},"nodeType":"YulFunctionCall","src":"434:17:28"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"422:8:28"}]},{"body":{"nodeType":"YulBlock","src":"503:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"512:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"515:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"505:6:28"},"nodeType":"YulFunctionCall","src":"505:12:28"},"nodeType":"YulExpressionStatement","src":"505:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"474:6:28"},{"name":"length","nodeType":"YulIdentifier","src":"482:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"470:3:28"},"nodeType":"YulFunctionCall","src":"470:19:28"},{"kind":"number","nodeType":"YulLiteral","src":"491:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"466:3:28"},"nodeType":"YulFunctionCall","src":"466:30:28"},{"name":"end","nodeType":"YulIdentifier","src":"498:3:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"463:2:28"},"nodeType":"YulFunctionCall","src":"463:39:28"},"nodeType":"YulIf","src":"460:59:28"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"213:6:28","type":""},{"name":"end","nodeType":"YulTypedName","src":"221:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"229:8:28","type":""},{"name":"length","nodeType":"YulTypedName","src":"239:6:28","type":""}],"src":"178:347:28"},{"body":{"nodeType":"YulBlock","src":"578:123:28","statements":[{"nodeType":"YulAssignment","src":"588:29:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"610:6:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"597:12:28"},"nodeType":"YulFunctionCall","src":"597:20:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"588:5:28"}]},{"body":{"nodeType":"YulBlock","src":"679:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"688:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"691:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"681:6:28"},"nodeType":"YulFunctionCall","src":"681:12:28"},"nodeType":"YulExpressionStatement","src":"681:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"639:5:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"650:5:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"665:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"669:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"661:3:28"},"nodeType":"YulFunctionCall","src":"661:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"673:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"657:3:28"},"nodeType":"YulFunctionCall","src":"657:18:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"646:3:28"},"nodeType":"YulFunctionCall","src":"646:30:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"636:2:28"},"nodeType":"YulFunctionCall","src":"636:41:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"629:6:28"},"nodeType":"YulFunctionCall","src":"629:49:28"},"nodeType":"YulIf","src":"626:69:28"}]},"name":"abi_decode_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"557:6:28","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"568:5:28","type":""}],"src":"530:171:28"},{"body":{"nodeType":"YulBlock","src":"863:705:28","statements":[{"body":{"nodeType":"YulBlock","src":"910:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"919:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"922:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"912:6:28"},"nodeType":"YulFunctionCall","src":"912:12:28"},"nodeType":"YulExpressionStatement","src":"912:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"884:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"893:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"880:3:28"},"nodeType":"YulFunctionCall","src":"880:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"905:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"876:3:28"},"nodeType":"YulFunctionCall","src":"876:33:28"},"nodeType":"YulIf","src":"873:53:28"},{"nodeType":"YulAssignment","src":"935:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"963:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"945:17:28"},"nodeType":"YulFunctionCall","src":"945:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"935:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"982:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1013:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1024:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:28"},"nodeType":"YulFunctionCall","src":"1009:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"996:12:28"},"nodeType":"YulFunctionCall","src":"996:32:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"986:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1037:28:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1055:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1059:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1051:3:28"},"nodeType":"YulFunctionCall","src":"1051:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"1063:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1047:3:28"},"nodeType":"YulFunctionCall","src":"1047:18:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1041:2:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"1092:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1101:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1104:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1094:6:28"},"nodeType":"YulFunctionCall","src":"1094:12:28"},"nodeType":"YulExpressionStatement","src":"1094:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1080:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"1088:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1077:2:28"},"nodeType":"YulFunctionCall","src":"1077:14:28"},"nodeType":"YulIf","src":"1074:34:28"},{"nodeType":"YulVariableDeclaration","src":"1117:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1173:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"1184:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1169:3:28"},"nodeType":"YulFunctionCall","src":"1169:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1193:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1143:25:28"},"nodeType":"YulFunctionCall","src":"1143:58:28"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"1121:8:28","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"1131:8:28","type":""}]},{"nodeType":"YulAssignment","src":"1210:18:28","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1220:8:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1210:6:28"}]},{"nodeType":"YulAssignment","src":"1237:18:28","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1247:8:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1237:6:28"}]},{"nodeType":"YulAssignment","src":"1264:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1296:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1307:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1292:3:28"},"nodeType":"YulFunctionCall","src":"1292:18:28"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"1274:17:28"},"nodeType":"YulFunctionCall","src":"1274:37:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1264:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"1320:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1353:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1364:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1349:3:28"},"nodeType":"YulFunctionCall","src":"1349:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1336:12:28"},"nodeType":"YulFunctionCall","src":"1336:32:28"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1324:8:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"1397:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1406:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1409:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1399:6:28"},"nodeType":"YulFunctionCall","src":"1399:12:28"},"nodeType":"YulExpressionStatement","src":"1399:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1383:8:28"},{"name":"_1","nodeType":"YulIdentifier","src":"1393:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1380:2:28"},"nodeType":"YulFunctionCall","src":"1380:16:28"},"nodeType":"YulIf","src":"1377:36:28"},{"nodeType":"YulVariableDeclaration","src":"1422:86:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1478:9:28"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1489:8:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1474:3:28"},"nodeType":"YulFunctionCall","src":"1474:24:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1500:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1448:25:28"},"nodeType":"YulFunctionCall","src":"1448:60:28"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1426:8:28","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1436:8:28","type":""}]},{"nodeType":"YulAssignment","src":"1517:18:28","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1527:8:28"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1517:6:28"}]},{"nodeType":"YulAssignment","src":"1544:18:28","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1554:8:28"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1544:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_bytes_calldata_ptrt_uint64t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"789:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"800:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"812:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"820:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"828:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"836:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"844:6:28","type":""},{"name":"value5","nodeType":"YulTypedName","src":"852:6:28","type":""}],"src":"706:862:28"},{"body":{"nodeType":"YulBlock","src":"1618:86:28","statements":[{"body":{"nodeType":"YulBlock","src":"1682:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1691:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1694:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1684:6:28"},"nodeType":"YulFunctionCall","src":"1684:12:28"},"nodeType":"YulExpressionStatement","src":"1684:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1641:5:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1652:5:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1667:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1672:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1663:3:28"},"nodeType":"YulFunctionCall","src":"1663:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"1676:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1659:3:28"},"nodeType":"YulFunctionCall","src":"1659:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1648:3:28"},"nodeType":"YulFunctionCall","src":"1648:31:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1638:2:28"},"nodeType":"YulFunctionCall","src":"1638:42:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1631:6:28"},"nodeType":"YulFunctionCall","src":"1631:50:28"},"nodeType":"YulIf","src":"1628:70:28"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1607:5:28","type":""}],"src":"1573:131:28"},{"body":{"nodeType":"YulBlock","src":"1795:233:28","statements":[{"body":{"nodeType":"YulBlock","src":"1841:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1850:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1853:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1843:6:28"},"nodeType":"YulFunctionCall","src":"1843:12:28"},"nodeType":"YulExpressionStatement","src":"1843:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1816:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"1825:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1812:3:28"},"nodeType":"YulFunctionCall","src":"1812:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"1837:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1808:3:28"},"nodeType":"YulFunctionCall","src":"1808:32:28"},"nodeType":"YulIf","src":"1805:52:28"},{"nodeType":"YulAssignment","src":"1866:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1894:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"1876:17:28"},"nodeType":"YulFunctionCall","src":"1876:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1866:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"1913:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1943:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"1954:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1939:3:28"},"nodeType":"YulFunctionCall","src":"1939:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1926:12:28"},"nodeType":"YulFunctionCall","src":"1926:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1917:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1992:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1967:24:28"},"nodeType":"YulFunctionCall","src":"1967:31:28"},"nodeType":"YulExpressionStatement","src":"1967:31:28"},{"nodeType":"YulAssignment","src":"2007:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"2017:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2007:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1753:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1764:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1776:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1784:6:28","type":""}],"src":"1709:319:28"},{"body":{"nodeType":"YulBlock","src":"2134:76:28","statements":[{"nodeType":"YulAssignment","src":"2144:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2156:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"2167:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2152:3:28"},"nodeType":"YulFunctionCall","src":"2152:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2144:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2186:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"2197:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2179:6:28"},"nodeType":"YulFunctionCall","src":"2179:25:28"},"nodeType":"YulExpressionStatement","src":"2179:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2103:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2114:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2125:4:28","type":""}],"src":"2033:177:28"},{"body":{"nodeType":"YulBlock","src":"2316:102:28","statements":[{"nodeType":"YulAssignment","src":"2326:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2338:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"2349:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2334:3:28"},"nodeType":"YulFunctionCall","src":"2334:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2326:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2368:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2383:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2399:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2404:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2395:3:28"},"nodeType":"YulFunctionCall","src":"2395:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"2408:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:28"},"nodeType":"YulFunctionCall","src":"2391:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2379:3:28"},"nodeType":"YulFunctionCall","src":"2379:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2361:6:28"},"nodeType":"YulFunctionCall","src":"2361:51:28"},"nodeType":"YulExpressionStatement","src":"2361:51:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2285:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2296:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2307:4:28","type":""}],"src":"2215:203:28"},{"body":{"nodeType":"YulBlock","src":"2489:184:28","statements":[{"nodeType":"YulVariableDeclaration","src":"2499:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"2508:1:28","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2503:1:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"2568:63:28","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2593:3:28"},{"name":"i","nodeType":"YulIdentifier","src":"2598:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2589:3:28"},"nodeType":"YulFunctionCall","src":"2589:11:28"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2612:3:28"},{"name":"i","nodeType":"YulIdentifier","src":"2617:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2608:3:28"},"nodeType":"YulFunctionCall","src":"2608:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2602:5:28"},"nodeType":"YulFunctionCall","src":"2602:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2582:6:28"},"nodeType":"YulFunctionCall","src":"2582:39:28"},"nodeType":"YulExpressionStatement","src":"2582:39:28"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2529:1:28"},{"name":"length","nodeType":"YulIdentifier","src":"2532:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2526:2:28"},"nodeType":"YulFunctionCall","src":"2526:13:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2540:19:28","statements":[{"nodeType":"YulAssignment","src":"2542:15:28","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2551:1:28"},{"kind":"number","nodeType":"YulLiteral","src":"2554:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2547:3:28"},"nodeType":"YulFunctionCall","src":"2547:10:28"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2542:1:28"}]}]},"pre":{"nodeType":"YulBlock","src":"2522:3:28","statements":[]},"src":"2518:113:28"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2651:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"2656:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2647:3:28"},"nodeType":"YulFunctionCall","src":"2647:16:28"},{"kind":"number","nodeType":"YulLiteral","src":"2665:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2640:6:28"},"nodeType":"YulFunctionCall","src":"2640:27:28"},"nodeType":"YulExpressionStatement","src":"2640:27:28"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2467:3:28","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2472:3:28","type":""},{"name":"length","nodeType":"YulTypedName","src":"2477:6:28","type":""}],"src":"2423:250:28"},{"body":{"nodeType":"YulBlock","src":"2728:221:28","statements":[{"nodeType":"YulVariableDeclaration","src":"2738:26:28","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2758:5:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2752:5:28"},"nodeType":"YulFunctionCall","src":"2752:12:28"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2742:6:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2780:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"2785:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2773:6:28"},"nodeType":"YulFunctionCall","src":"2773:19:28"},"nodeType":"YulExpressionStatement","src":"2773:19:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2840:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"2847:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:28"},"nodeType":"YulFunctionCall","src":"2836:16:28"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2858:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"2863:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2854:3:28"},"nodeType":"YulFunctionCall","src":"2854:14:28"},{"name":"length","nodeType":"YulIdentifier","src":"2870:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2801:34:28"},"nodeType":"YulFunctionCall","src":"2801:76:28"},"nodeType":"YulExpressionStatement","src":"2801:76:28"},{"nodeType":"YulAssignment","src":"2886:57:28","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2901:3:28"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2914:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"2922:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2910:3:28"},"nodeType":"YulFunctionCall","src":"2910:15:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2931:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2927:3:28"},"nodeType":"YulFunctionCall","src":"2927:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2906:3:28"},"nodeType":"YulFunctionCall","src":"2906:29:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2897:3:28"},"nodeType":"YulFunctionCall","src":"2897:39:28"},{"kind":"number","nodeType":"YulLiteral","src":"2938:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2893:3:28"},"nodeType":"YulFunctionCall","src":"2893:50:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2886:3:28"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2705:5:28","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2712:3:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2720:3:28","type":""}],"src":"2678:271:28"},{"body":{"nodeType":"YulBlock","src":"3075:99:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3092:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3103:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3085:6:28"},"nodeType":"YulFunctionCall","src":"3085:21:28"},"nodeType":"YulExpressionStatement","src":"3085:21:28"},{"nodeType":"YulAssignment","src":"3115:53:28","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3141:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3153:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3164:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3149:3:28"},"nodeType":"YulFunctionCall","src":"3149:18:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"3123:17:28"},"nodeType":"YulFunctionCall","src":"3123:45:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3115:4:28"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3044:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3055:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3066:4:28","type":""}],"src":"2954:220:28"},{"body":{"nodeType":"YulBlock","src":"3248:115:28","statements":[{"body":{"nodeType":"YulBlock","src":"3294:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3303:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3306:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3296:6:28"},"nodeType":"YulFunctionCall","src":"3296:12:28"},"nodeType":"YulExpressionStatement","src":"3296:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3269:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"3278:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3265:3:28"},"nodeType":"YulFunctionCall","src":"3265:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"3290:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3261:3:28"},"nodeType":"YulFunctionCall","src":"3261:32:28"},"nodeType":"YulIf","src":"3258:52:28"},{"nodeType":"YulAssignment","src":"3319:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3347:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"3329:17:28"},"nodeType":"YulFunctionCall","src":"3329:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3319:6:28"}]}]},"name":"abi_decode_tuple_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3214:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3225:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3237:6:28","type":""}],"src":"3179:184:28"},{"body":{"nodeType":"YulBlock","src":"3455:228:28","statements":[{"body":{"nodeType":"YulBlock","src":"3501:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3510:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3513:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3503:6:28"},"nodeType":"YulFunctionCall","src":"3503:12:28"},"nodeType":"YulExpressionStatement","src":"3503:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3476:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3472:3:28"},"nodeType":"YulFunctionCall","src":"3472:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"3497:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3468:3:28"},"nodeType":"YulFunctionCall","src":"3468:32:28"},"nodeType":"YulIf","src":"3465:52:28"},{"nodeType":"YulVariableDeclaration","src":"3526:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3552:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3539:12:28"},"nodeType":"YulFunctionCall","src":"3539:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3530:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3596:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3571:24:28"},"nodeType":"YulFunctionCall","src":"3571:31:28"},"nodeType":"YulExpressionStatement","src":"3571:31:28"},{"nodeType":"YulAssignment","src":"3611:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"3621:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3611:6:28"}]},{"nodeType":"YulAssignment","src":"3635:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3662:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3673:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3658:3:28"},"nodeType":"YulFunctionCall","src":"3658:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3645:12:28"},"nodeType":"YulFunctionCall","src":"3645:32:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3635:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3413:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3424:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3436:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3444:6:28","type":""}],"src":"3368:315:28"},{"body":{"nodeType":"YulBlock","src":"3783:92:28","statements":[{"nodeType":"YulAssignment","src":"3793:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"3816:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3801:3:28"},"nodeType":"YulFunctionCall","src":"3801:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3793:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3835:9:28"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3860:6:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3853:6:28"},"nodeType":"YulFunctionCall","src":"3853:14:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3846:6:28"},"nodeType":"YulFunctionCall","src":"3846:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3828:6:28"},"nodeType":"YulFunctionCall","src":"3828:41:28"},"nodeType":"YulExpressionStatement","src":"3828:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3752:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3763:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3774:4:28","type":""}],"src":"3688:187:28"},{"body":{"nodeType":"YulBlock","src":"3983:284:28","statements":[{"body":{"nodeType":"YulBlock","src":"4029:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4038:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4041:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4031:6:28"},"nodeType":"YulFunctionCall","src":"4031:12:28"},"nodeType":"YulExpressionStatement","src":"4031:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4004:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"4013:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4000:3:28"},"nodeType":"YulFunctionCall","src":"4000:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"4025:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3996:3:28"},"nodeType":"YulFunctionCall","src":"3996:32:28"},"nodeType":"YulIf","src":"3993:52:28"},{"nodeType":"YulAssignment","src":"4054:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4082:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4064:17:28"},"nodeType":"YulFunctionCall","src":"4064:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4054:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"4101:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4131:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4142:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4127:3:28"},"nodeType":"YulFunctionCall","src":"4127:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4114:12:28"},"nodeType":"YulFunctionCall","src":"4114:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4105:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4180:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4155:24:28"},"nodeType":"YulFunctionCall","src":"4155:31:28"},"nodeType":"YulExpressionStatement","src":"4155:31:28"},{"nodeType":"YulAssignment","src":"4195:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"4205:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4195:6:28"}]},{"nodeType":"YulAssignment","src":"4219:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4246:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4257:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4242:3:28"},"nodeType":"YulFunctionCall","src":"4242:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4229:12:28"},"nodeType":"YulFunctionCall","src":"4229:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4219:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3933:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3944:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3956:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3964:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3972:6:28","type":""}],"src":"3880:387:28"},{"body":{"nodeType":"YulBlock","src":"4358:166:28","statements":[{"body":{"nodeType":"YulBlock","src":"4404:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4413:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4416:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4406:6:28"},"nodeType":"YulFunctionCall","src":"4406:12:28"},"nodeType":"YulExpressionStatement","src":"4406:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4379:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"4388:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4375:3:28"},"nodeType":"YulFunctionCall","src":"4375:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"4400:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4371:3:28"},"nodeType":"YulFunctionCall","src":"4371:32:28"},"nodeType":"YulIf","src":"4368:52:28"},{"nodeType":"YulAssignment","src":"4429:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4457:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"4439:17:28"},"nodeType":"YulFunctionCall","src":"4439:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4429:6:28"}]},{"nodeType":"YulAssignment","src":"4476:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4503:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4514:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4499:3:28"},"nodeType":"YulFunctionCall","src":"4499:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4486:12:28"},"nodeType":"YulFunctionCall","src":"4486:32:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4476:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4316:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4327:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4339:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4347:6:28","type":""}],"src":"4272:252:28"},{"body":{"nodeType":"YulBlock","src":"4682:675:28","statements":[{"body":{"nodeType":"YulBlock","src":"4729:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4738:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4741:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4731:6:28"},"nodeType":"YulFunctionCall","src":"4731:12:28"},"nodeType":"YulExpressionStatement","src":"4731:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4703:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"4712:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4699:3:28"},"nodeType":"YulFunctionCall","src":"4699:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"4724:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4695:3:28"},"nodeType":"YulFunctionCall","src":"4695:33:28"},"nodeType":"YulIf","src":"4692:53:28"},{"nodeType":"YulVariableDeclaration","src":"4754:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4780:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4767:12:28"},"nodeType":"YulFunctionCall","src":"4767:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4758:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4824:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4799:24:28"},"nodeType":"YulFunctionCall","src":"4799:31:28"},"nodeType":"YulExpressionStatement","src":"4799:31:28"},{"nodeType":"YulAssignment","src":"4839:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"4849:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4839:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"4863:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4895:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"4906:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:28"},"nodeType":"YulFunctionCall","src":"4891:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4878:12:28"},"nodeType":"YulFunctionCall","src":"4878:32:28"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4867:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4944:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4919:24:28"},"nodeType":"YulFunctionCall","src":"4919:33:28"},"nodeType":"YulExpressionStatement","src":"4919:33:28"},{"nodeType":"YulAssignment","src":"4961:17:28","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4971:7:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4961:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"4987:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5019:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5030:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5015:3:28"},"nodeType":"YulFunctionCall","src":"5015:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5002:12:28"},"nodeType":"YulFunctionCall","src":"5002:32:28"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"4991:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"5068:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5043:24:28"},"nodeType":"YulFunctionCall","src":"5043:33:28"},"nodeType":"YulExpressionStatement","src":"5043:33:28"},{"nodeType":"YulAssignment","src":"5085:17:28","value":{"name":"value_2","nodeType":"YulIdentifier","src":"5095:7:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5085:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"5111:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5143:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5154:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5139:3:28"},"nodeType":"YulFunctionCall","src":"5139:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5126:12:28"},"nodeType":"YulFunctionCall","src":"5126:32:28"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"5115:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"5192:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5167:24:28"},"nodeType":"YulFunctionCall","src":"5167:33:28"},"nodeType":"YulExpressionStatement","src":"5167:33:28"},{"nodeType":"YulAssignment","src":"5209:17:28","value":{"name":"value_3","nodeType":"YulIdentifier","src":"5219:7:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5209:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"5235:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5267:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"5278:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5263:3:28"},"nodeType":"YulFunctionCall","src":"5263:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5250:12:28"},"nodeType":"YulFunctionCall","src":"5250:33:28"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"5239:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"5317:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5292:24:28"},"nodeType":"YulFunctionCall","src":"5292:33:28"},"nodeType":"YulExpressionStatement","src":"5292:33:28"},{"nodeType":"YulAssignment","src":"5334:17:28","value":{"name":"value_4","nodeType":"YulIdentifier","src":"5344:7:28"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5334:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_contract$_IERC20_$2920t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4616:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4627:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4639:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4647:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4655:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4663:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4671:6:28","type":""}],"src":"4529:828:28"},{"body":{"nodeType":"YulBlock","src":"5404:76:28","statements":[{"body":{"nodeType":"YulBlock","src":"5458:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5467:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5470:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5460:6:28"},"nodeType":"YulFunctionCall","src":"5460:12:28"},"nodeType":"YulExpressionStatement","src":"5460:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5427:5:28"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5448:5:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5441:6:28"},"nodeType":"YulFunctionCall","src":"5441:13:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5434:6:28"},"nodeType":"YulFunctionCall","src":"5434:21:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5424:2:28"},"nodeType":"YulFunctionCall","src":"5424:32:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5417:6:28"},"nodeType":"YulFunctionCall","src":"5417:40:28"},"nodeType":"YulIf","src":"5414:60:28"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5393:5:28","type":""}],"src":"5362:118:28"},{"body":{"nodeType":"YulBlock","src":"5552:174:28","statements":[{"body":{"nodeType":"YulBlock","src":"5598:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5607:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5610:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5600:6:28"},"nodeType":"YulFunctionCall","src":"5600:12:28"},"nodeType":"YulExpressionStatement","src":"5600:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5573:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"5582:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5569:3:28"},"nodeType":"YulFunctionCall","src":"5569:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"5594:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5565:3:28"},"nodeType":"YulFunctionCall","src":"5565:32:28"},"nodeType":"YulIf","src":"5562:52:28"},{"nodeType":"YulVariableDeclaration","src":"5623:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5649:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5636:12:28"},"nodeType":"YulFunctionCall","src":"5636:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5627:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5690:5:28"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"5668:21:28"},"nodeType":"YulFunctionCall","src":"5668:28:28"},"nodeType":"YulExpressionStatement","src":"5668:28:28"},{"nodeType":"YulAssignment","src":"5705:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"5715:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5705:6:28"}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5518:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5529:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5541:6:28","type":""}],"src":"5485:241:28"},{"body":{"nodeType":"YulBlock","src":"5835:352:28","statements":[{"body":{"nodeType":"YulBlock","src":"5881:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5890:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5893:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5883:6:28"},"nodeType":"YulFunctionCall","src":"5883:12:28"},"nodeType":"YulExpressionStatement","src":"5883:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5856:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"5865:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5852:3:28"},"nodeType":"YulFunctionCall","src":"5852:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"5877:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5848:3:28"},"nodeType":"YulFunctionCall","src":"5848:32:28"},"nodeType":"YulIf","src":"5845:52:28"},{"nodeType":"YulVariableDeclaration","src":"5906:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5932:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5919:12:28"},"nodeType":"YulFunctionCall","src":"5919:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5910:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5976:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5951:24:28"},"nodeType":"YulFunctionCall","src":"5951:31:28"},"nodeType":"YulExpressionStatement","src":"5951:31:28"},{"nodeType":"YulAssignment","src":"5991:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"6001:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5991:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"6015:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6047:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"6058:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6043:3:28"},"nodeType":"YulFunctionCall","src":"6043:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6030:12:28"},"nodeType":"YulFunctionCall","src":"6030:32:28"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6019:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6096:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6071:24:28"},"nodeType":"YulFunctionCall","src":"6071:33:28"},"nodeType":"YulExpressionStatement","src":"6071:33:28"},{"nodeType":"YulAssignment","src":"6113:17:28","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6123:7:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6113:6:28"}]},{"nodeType":"YulAssignment","src":"6139:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6166:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"6177:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6162:3:28"},"nodeType":"YulFunctionCall","src":"6162:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6149:12:28"},"nodeType":"YulFunctionCall","src":"6149:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6139:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5785:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5796:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5808:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5816:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5824:6:28","type":""}],"src":"5731:456:28"},{"body":{"nodeType":"YulBlock","src":"6289:87:28","statements":[{"nodeType":"YulAssignment","src":"6299:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6311:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"6322:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6307:3:28"},"nodeType":"YulFunctionCall","src":"6307:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6299:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6341:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6356:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"6364:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6352:3:28"},"nodeType":"YulFunctionCall","src":"6352:17:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6334:6:28"},"nodeType":"YulFunctionCall","src":"6334:36:28"},"nodeType":"YulExpressionStatement","src":"6334:36:28"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6258:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6269:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6280:4:28","type":""}],"src":"6192:184:28"},{"body":{"nodeType":"YulBlock","src":"6500:102:28","statements":[{"nodeType":"YulAssignment","src":"6510:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6522:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"6533:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:28"},"nodeType":"YulFunctionCall","src":"6518:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6510:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6552:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6567:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6583:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6588:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6579:3:28"},"nodeType":"YulFunctionCall","src":"6579:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"6592:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6575:3:28"},"nodeType":"YulFunctionCall","src":"6575:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6563:3:28"},"nodeType":"YulFunctionCall","src":"6563:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6545:6:28"},"nodeType":"YulFunctionCall","src":"6545:51:28"},"nodeType":"YulExpressionStatement","src":"6545:51:28"}]},"name":"abi_encode_tuple_t_contract$_ISgBridge_$8065__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6469:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6480:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6491:4:28","type":""}],"src":"6381:221:28"},{"body":{"nodeType":"YulBlock","src":"6712:376:28","statements":[{"body":{"nodeType":"YulBlock","src":"6758:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6767:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6770:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6760:6:28"},"nodeType":"YulFunctionCall","src":"6760:12:28"},"nodeType":"YulExpressionStatement","src":"6760:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6733:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"6742:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6729:3:28"},"nodeType":"YulFunctionCall","src":"6729:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"6754:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6725:3:28"},"nodeType":"YulFunctionCall","src":"6725:32:28"},"nodeType":"YulIf","src":"6722:52:28"},{"nodeType":"YulAssignment","src":"6783:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6811:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"6793:17:28"},"nodeType":"YulFunctionCall","src":"6793:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6783:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"6830:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6861:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"6872:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6857:3:28"},"nodeType":"YulFunctionCall","src":"6857:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6844:12:28"},"nodeType":"YulFunctionCall","src":"6844:32:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6834:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"6919:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6928:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6931:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6921:6:28"},"nodeType":"YulFunctionCall","src":"6921:12:28"},"nodeType":"YulExpressionStatement","src":"6921:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6891:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6907:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"6911:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6903:3:28"},"nodeType":"YulFunctionCall","src":"6903:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"6915:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6899:3:28"},"nodeType":"YulFunctionCall","src":"6899:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6888:2:28"},"nodeType":"YulFunctionCall","src":"6888:30:28"},"nodeType":"YulIf","src":"6885:50:28"},{"nodeType":"YulVariableDeclaration","src":"6944:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7000:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"7011:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6996:3:28"},"nodeType":"YulFunctionCall","src":"6996:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7020:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"6970:25:28"},"nodeType":"YulFunctionCall","src":"6970:58:28"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"6948:8:28","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"6958:8:28","type":""}]},{"nodeType":"YulAssignment","src":"7037:18:28","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"7047:8:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7037:6:28"}]},{"nodeType":"YulAssignment","src":"7064:18:28","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7074:8:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7064:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6662:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6673:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6685:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6693:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6701:6:28","type":""}],"src":"6607:481:28"},{"body":{"nodeType":"YulBlock","src":"7390:408:28","statements":[{"nodeType":"YulAssignment","src":"7400:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7412:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7423:3:28","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7408:3:28"},"nodeType":"YulFunctionCall","src":"7408:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7400:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7443:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"7454:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7436:6:28"},"nodeType":"YulFunctionCall","src":"7436:25:28"},"nodeType":"YulExpressionStatement","src":"7436:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7481:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7492:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7477:3:28"},"nodeType":"YulFunctionCall","src":"7477:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"7497:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7470:6:28"},"nodeType":"YulFunctionCall","src":"7470:34:28"},"nodeType":"YulExpressionStatement","src":"7470:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7524:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7535:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7520:3:28"},"nodeType":"YulFunctionCall","src":"7520:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"7540:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7513:6:28"},"nodeType":"YulFunctionCall","src":"7513:34:28"},"nodeType":"YulExpressionStatement","src":"7513:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7567:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7578:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7563:3:28"},"nodeType":"YulFunctionCall","src":"7563:18:28"},{"name":"value3","nodeType":"YulIdentifier","src":"7583:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7556:6:28"},"nodeType":"YulFunctionCall","src":"7556:34:28"},"nodeType":"YulExpressionStatement","src":"7556:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7610:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7621:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7606:3:28"},"nodeType":"YulFunctionCall","src":"7606:19:28"},{"name":"value4","nodeType":"YulIdentifier","src":"7627:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7599:6:28"},"nodeType":"YulFunctionCall","src":"7599:35:28"},"nodeType":"YulExpressionStatement","src":"7599:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7654:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7665:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7650:3:28"},"nodeType":"YulFunctionCall","src":"7650:19:28"},{"name":"value5","nodeType":"YulIdentifier","src":"7671:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7643:6:28"},"nodeType":"YulFunctionCall","src":"7643:35:28"},"nodeType":"YulExpressionStatement","src":"7643:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7698:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7709:3:28","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:28"},"nodeType":"YulFunctionCall","src":"7694:19:28"},{"name":"value6","nodeType":"YulIdentifier","src":"7715:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7687:6:28"},"nodeType":"YulFunctionCall","src":"7687:35:28"},"nodeType":"YulExpressionStatement","src":"7687:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7742:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"7753:3:28","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7738:3:28"},"nodeType":"YulFunctionCall","src":"7738:19:28"},{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"7763:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7779:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7784:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7775:3:28"},"nodeType":"YulFunctionCall","src":"7775:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"7788:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7771:3:28"},"nodeType":"YulFunctionCall","src":"7771:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7759:3:28"},"nodeType":"YulFunctionCall","src":"7759:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7731:6:28"},"nodeType":"YulFunctionCall","src":"7731:61:28"},"nodeType":"YulExpressionStatement","src":"7731:61:28"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7303:9:28","type":""},{"name":"value7","nodeType":"YulTypedName","src":"7314:6:28","type":""},{"name":"value6","nodeType":"YulTypedName","src":"7322:6:28","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7330:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7338:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7346:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7354:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7362:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7370:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7381:4:28","type":""}],"src":"7093:705:28"},{"body":{"nodeType":"YulBlock","src":"7940:461:28","statements":[{"body":{"nodeType":"YulBlock","src":"7987:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7996:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7999:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7989:6:28"},"nodeType":"YulFunctionCall","src":"7989:12:28"},"nodeType":"YulExpressionStatement","src":"7989:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7961:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"7970:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7957:3:28"},"nodeType":"YulFunctionCall","src":"7957:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"7982:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7953:3:28"},"nodeType":"YulFunctionCall","src":"7953:33:28"},"nodeType":"YulIf","src":"7950:53:28"},{"nodeType":"YulAssignment","src":"8012:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8040:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"8022:17:28"},"nodeType":"YulFunctionCall","src":"8022:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8012:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"8059:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8089:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"8100:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8085:3:28"},"nodeType":"YulFunctionCall","src":"8085:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8072:12:28"},"nodeType":"YulFunctionCall","src":"8072:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8063:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8138:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8113:24:28"},"nodeType":"YulFunctionCall","src":"8113:31:28"},"nodeType":"YulExpressionStatement","src":"8113:31:28"},{"nodeType":"YulAssignment","src":"8153:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"8163:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8153:6:28"}]},{"nodeType":"YulAssignment","src":"8177:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8204:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"8215:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8200:3:28"},"nodeType":"YulFunctionCall","src":"8200:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8187:12:28"},"nodeType":"YulFunctionCall","src":"8187:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8177:6:28"}]},{"nodeType":"YulAssignment","src":"8228:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8255:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"8266:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8251:3:28"},"nodeType":"YulFunctionCall","src":"8251:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8238:12:28"},"nodeType":"YulFunctionCall","src":"8238:32:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8228:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"8279:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8311:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"8322:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8307:3:28"},"nodeType":"YulFunctionCall","src":"8307:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8294:12:28"},"nodeType":"YulFunctionCall","src":"8294:33:28"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"8283:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"8361:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8336:24:28"},"nodeType":"YulFunctionCall","src":"8336:33:28"},"nodeType":"YulExpressionStatement","src":"8336:33:28"},{"nodeType":"YulAssignment","src":"8378:17:28","value":{"name":"value_1","nodeType":"YulIdentifier","src":"8388:7:28"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8378:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_addresst_uint256t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7874:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7885:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7897:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7905:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7913:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7921:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7929:6:28","type":""}],"src":"7803:598:28"},{"body":{"nodeType":"YulBlock","src":"8438:95:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8455:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8462:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8467:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8458:3:28"},"nodeType":"YulFunctionCall","src":"8458:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8448:6:28"},"nodeType":"YulFunctionCall","src":"8448:31:28"},"nodeType":"YulExpressionStatement","src":"8448:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8495:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8498:4:28","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8488:6:28"},"nodeType":"YulFunctionCall","src":"8488:15:28"},"nodeType":"YulExpressionStatement","src":"8488:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8519:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8522:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8512:6:28"},"nodeType":"YulFunctionCall","src":"8512:15:28"},"nodeType":"YulExpressionStatement","src":"8512:15:28"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8406:127:28"},{"body":{"nodeType":"YulBlock","src":"8584:209:28","statements":[{"nodeType":"YulAssignment","src":"8594:19:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8610:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8604:5:28"},"nodeType":"YulFunctionCall","src":"8604:9:28"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8594:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"8622:37:28","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8644:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"8652:6:28","type":"","value":"0x0160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8640:3:28"},"nodeType":"YulFunctionCall","src":"8640:19:28"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8626:10:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"8734:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8736:16:28"},"nodeType":"YulFunctionCall","src":"8736:18:28"},"nodeType":"YulExpressionStatement","src":"8736:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8677:10:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8697:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"8701:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8693:3:28"},"nodeType":"YulFunctionCall","src":"8693:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"8705:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8689:3:28"},"nodeType":"YulFunctionCall","src":"8689:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8674:2:28"},"nodeType":"YulFunctionCall","src":"8674:34:28"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8713:10:28"},{"name":"memPtr","nodeType":"YulIdentifier","src":"8725:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8710:2:28"},"nodeType":"YulFunctionCall","src":"8710:22:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8671:2:28"},"nodeType":"YulFunctionCall","src":"8671:62:28"},"nodeType":"YulIf","src":"8668:88:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8772:2:28","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8776:10:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8765:6:28"},"nodeType":"YulFunctionCall","src":"8765:22:28"},"nodeType":"YulExpressionStatement","src":"8765:22:28"}]},"name":"allocate_memory_6770","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8573:6:28","type":""}],"src":"8538:255:28"},{"body":{"nodeType":"YulBlock","src":"8843:230:28","statements":[{"nodeType":"YulAssignment","src":"8853:19:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8869:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8863:5:28"},"nodeType":"YulFunctionCall","src":"8863:9:28"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8853:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"8881:58:28","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8903:6:28"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8919:4:28"},{"kind":"number","nodeType":"YulLiteral","src":"8925:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8915:3:28"},"nodeType":"YulFunctionCall","src":"8915:13:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8934:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8930:3:28"},"nodeType":"YulFunctionCall","src":"8930:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8911:3:28"},"nodeType":"YulFunctionCall","src":"8911:27:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8899:3:28"},"nodeType":"YulFunctionCall","src":"8899:40:28"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8885:10:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"9014:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9016:16:28"},"nodeType":"YulFunctionCall","src":"9016:18:28"},"nodeType":"YulExpressionStatement","src":"9016:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8957:10:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8977:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"8981:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8973:3:28"},"nodeType":"YulFunctionCall","src":"8973:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"8985:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8969:3:28"},"nodeType":"YulFunctionCall","src":"8969:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8954:2:28"},"nodeType":"YulFunctionCall","src":"8954:34:28"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8993:10:28"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9005:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8990:2:28"},"nodeType":"YulFunctionCall","src":"8990:22:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8951:2:28"},"nodeType":"YulFunctionCall","src":"8951:62:28"},"nodeType":"YulIf","src":"8948:88:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9052:2:28","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9056:10:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9045:6:28"},"nodeType":"YulFunctionCall","src":"9045:22:28"},"nodeType":"YulExpressionStatement","src":"9045:22:28"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8823:4:28","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8832:6:28","type":""}],"src":"8798:275:28"},{"body":{"nodeType":"YulBlock","src":"9135:129:28","statements":[{"body":{"nodeType":"YulBlock","src":"9179:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9181:16:28"},"nodeType":"YulFunctionCall","src":"9181:18:28"},"nodeType":"YulExpressionStatement","src":"9181:18:28"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9151:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9167:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"9171:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9163:3:28"},"nodeType":"YulFunctionCall","src":"9163:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"9175:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9159:3:28"},"nodeType":"YulFunctionCall","src":"9159:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9148:2:28"},"nodeType":"YulFunctionCall","src":"9148:30:28"},"nodeType":"YulIf","src":"9145:56:28"},{"nodeType":"YulAssignment","src":"9210:48:28","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9230:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"9238:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9226:3:28"},"nodeType":"YulFunctionCall","src":"9226:15:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9243:3:28"},"nodeType":"YulFunctionCall","src":"9243:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9222:3:28"},"nodeType":"YulFunctionCall","src":"9222:29:28"},{"kind":"number","nodeType":"YulLiteral","src":"9253:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9218:3:28"},"nodeType":"YulFunctionCall","src":"9218:40:28"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9210:4:28"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9115:6:28","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9126:4:28","type":""}],"src":"9078:186:28"},{"body":{"nodeType":"YulBlock","src":"9321:410:28","statements":[{"body":{"nodeType":"YulBlock","src":"9370:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9379:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9382:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9372:6:28"},"nodeType":"YulFunctionCall","src":"9372:12:28"},"nodeType":"YulExpressionStatement","src":"9372:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9349:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"9357:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9345:3:28"},"nodeType":"YulFunctionCall","src":"9345:17:28"},{"name":"end","nodeType":"YulIdentifier","src":"9364:3:28"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9341:3:28"},"nodeType":"YulFunctionCall","src":"9341:27:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9334:6:28"},"nodeType":"YulFunctionCall","src":"9334:35:28"},"nodeType":"YulIf","src":"9331:55:28"},{"nodeType":"YulVariableDeclaration","src":"9395:30:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9418:6:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9405:12:28"},"nodeType":"YulFunctionCall","src":"9405:20:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9399:2:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9434:63:28","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9493:2:28"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"9465:27:28"},"nodeType":"YulFunctionCall","src":"9465:31:28"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9449:15:28"},"nodeType":"YulFunctionCall","src":"9449:48:28"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"9438:7:28","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"9513:7:28"},{"name":"_1","nodeType":"YulIdentifier","src":"9522:2:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9506:6:28"},"nodeType":"YulFunctionCall","src":"9506:19:28"},"nodeType":"YulExpressionStatement","src":"9506:19:28"},{"body":{"nodeType":"YulBlock","src":"9573:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9582:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9585:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9575:6:28"},"nodeType":"YulFunctionCall","src":"9575:12:28"},"nodeType":"YulExpressionStatement","src":"9575:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9548:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"9556:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9544:3:28"},"nodeType":"YulFunctionCall","src":"9544:15:28"},{"kind":"number","nodeType":"YulLiteral","src":"9561:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9540:3:28"},"nodeType":"YulFunctionCall","src":"9540:26:28"},{"name":"end","nodeType":"YulIdentifier","src":"9568:3:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9537:2:28"},"nodeType":"YulFunctionCall","src":"9537:35:28"},"nodeType":"YulIf","src":"9534:55:28"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"9615:7:28"},{"kind":"number","nodeType":"YulLiteral","src":"9624:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9611:3:28"},"nodeType":"YulFunctionCall","src":"9611:18:28"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9635:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"9643:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9631:3:28"},"nodeType":"YulFunctionCall","src":"9631:17:28"},{"name":"_1","nodeType":"YulIdentifier","src":"9650:2:28"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9598:12:28"},"nodeType":"YulFunctionCall","src":"9598:55:28"},"nodeType":"YulExpressionStatement","src":"9598:55:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"9677:7:28"},{"name":"_1","nodeType":"YulIdentifier","src":"9686:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9673:3:28"},"nodeType":"YulFunctionCall","src":"9673:16:28"},{"kind":"number","nodeType":"YulLiteral","src":"9691:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9669:3:28"},"nodeType":"YulFunctionCall","src":"9669:27:28"},{"kind":"number","nodeType":"YulLiteral","src":"9698:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9662:6:28"},"nodeType":"YulFunctionCall","src":"9662:38:28"},"nodeType":"YulExpressionStatement","src":"9662:38:28"},{"nodeType":"YulAssignment","src":"9709:16:28","value":{"name":"array_1","nodeType":"YulIdentifier","src":"9718:7:28"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"9709:5:28"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9295:6:28","type":""},{"name":"end","nodeType":"YulTypedName","src":"9303:3:28","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9311:5:28","type":""}],"src":"9269:462:28"},{"body":{"nodeType":"YulBlock","src":"9847:353:28","statements":[{"body":{"nodeType":"YulBlock","src":"9893:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9902:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9905:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9895:6:28"},"nodeType":"YulFunctionCall","src":"9895:12:28"},"nodeType":"YulExpressionStatement","src":"9895:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9868:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"9877:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9864:3:28"},"nodeType":"YulFunctionCall","src":"9864:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"9889:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9860:3:28"},"nodeType":"YulFunctionCall","src":"9860:32:28"},"nodeType":"YulIf","src":"9857:52:28"},{"nodeType":"YulAssignment","src":"9918:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9946:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"9928:17:28"},"nodeType":"YulFunctionCall","src":"9928:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9918:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"9965:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9996:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10007:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9992:3:28"},"nodeType":"YulFunctionCall","src":"9992:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9979:12:28"},"nodeType":"YulFunctionCall","src":"9979:32:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9969:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"10054:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10063:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10066:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10056:6:28"},"nodeType":"YulFunctionCall","src":"10056:12:28"},"nodeType":"YulExpressionStatement","src":"10056:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10026:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10042:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"10046:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10038:3:28"},"nodeType":"YulFunctionCall","src":"10038:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"10050:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10034:3:28"},"nodeType":"YulFunctionCall","src":"10034:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10023:2:28"},"nodeType":"YulFunctionCall","src":"10023:30:28"},"nodeType":"YulIf","src":"10020:50:28"},{"nodeType":"YulAssignment","src":"10079:59:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10110:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"10121:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10106:3:28"},"nodeType":"YulFunctionCall","src":"10106:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10130:7:28"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10089:16:28"},"nodeType":"YulFunctionCall","src":"10089:49:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10079:6:28"}]},{"nodeType":"YulAssignment","src":"10147:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10179:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10190:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:28"},"nodeType":"YulFunctionCall","src":"10175:18:28"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"10157:17:28"},"nodeType":"YulFunctionCall","src":"10157:37:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10147:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9797:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9808:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9820:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9828:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9836:6:28","type":""}],"src":"9736:464:28"},{"body":{"nodeType":"YulBlock","src":"10306:76:28","statements":[{"nodeType":"YulAssignment","src":"10316:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10328:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10339:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10324:3:28"},"nodeType":"YulFunctionCall","src":"10324:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10316:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10358:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"10369:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10351:6:28"},"nodeType":"YulFunctionCall","src":"10351:25:28"},"nodeType":"YulExpressionStatement","src":"10351:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10275:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10286:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10297:4:28","type":""}],"src":"10205:177:28"},{"body":{"nodeType":"YulBlock","src":"10457:110:28","statements":[{"body":{"nodeType":"YulBlock","src":"10503:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10512:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10515:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10505:6:28"},"nodeType":"YulFunctionCall","src":"10505:12:28"},"nodeType":"YulExpressionStatement","src":"10505:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10478:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"10487:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10474:3:28"},"nodeType":"YulFunctionCall","src":"10474:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"10499:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10470:3:28"},"nodeType":"YulFunctionCall","src":"10470:32:28"},"nodeType":"YulIf","src":"10467:52:28"},{"nodeType":"YulAssignment","src":"10528:33:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10551:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10538:12:28"},"nodeType":"YulFunctionCall","src":"10538:23:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10528:6:28"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10423:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10434:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10446:6:28","type":""}],"src":"10387:180:28"},{"body":{"nodeType":"YulBlock","src":"10723:178:28","statements":[{"nodeType":"YulAssignment","src":"10733:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10745:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10756:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10741:3:28"},"nodeType":"YulFunctionCall","src":"10741:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10733:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10775:9:28"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10800:6:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10793:6:28"},"nodeType":"YulFunctionCall","src":"10793:14:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10786:6:28"},"nodeType":"YulFunctionCall","src":"10786:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10768:6:28"},"nodeType":"YulFunctionCall","src":"10768:41:28"},"nodeType":"YulExpressionStatement","src":"10768:41:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10829:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10840:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10825:3:28"},"nodeType":"YulFunctionCall","src":"10825:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"10845:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10818:6:28"},"nodeType":"YulFunctionCall","src":"10818:34:28"},"nodeType":"YulExpressionStatement","src":"10818:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10872:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"10883:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10868:3:28"},"nodeType":"YulFunctionCall","src":"10868:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"10888:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10861:6:28"},"nodeType":"YulFunctionCall","src":"10861:34:28"},"nodeType":"YulExpressionStatement","src":"10861:34:28"}]},"name":"abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10676:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10687:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10695:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10703:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10714:4:28","type":""}],"src":"10572:329:28"},{"body":{"nodeType":"YulBlock","src":"10993:228:28","statements":[{"body":{"nodeType":"YulBlock","src":"11039:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11048:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11051:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11041:6:28"},"nodeType":"YulFunctionCall","src":"11041:12:28"},"nodeType":"YulExpressionStatement","src":"11041:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11014:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"11023:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11010:3:28"},"nodeType":"YulFunctionCall","src":"11010:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"11035:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11006:3:28"},"nodeType":"YulFunctionCall","src":"11006:32:28"},"nodeType":"YulIf","src":"11003:52:28"},{"nodeType":"YulAssignment","src":"11064:33:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11087:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11074:12:28"},"nodeType":"YulFunctionCall","src":"11074:23:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11064:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"11106:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11136:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"11147:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11132:3:28"},"nodeType":"YulFunctionCall","src":"11132:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11119:12:28"},"nodeType":"YulFunctionCall","src":"11119:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11110:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11185:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11160:24:28"},"nodeType":"YulFunctionCall","src":"11160:31:28"},"nodeType":"YulExpressionStatement","src":"11160:31:28"},{"nodeType":"YulAssignment","src":"11200:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"11210:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11200:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10951:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10962:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10974:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10982:6:28","type":""}],"src":"10906:315:28"},{"body":{"nodeType":"YulBlock","src":"11296:177:28","statements":[{"body":{"nodeType":"YulBlock","src":"11342:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11351:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11354:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11344:6:28"},"nodeType":"YulFunctionCall","src":"11344:12:28"},"nodeType":"YulExpressionStatement","src":"11344:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11317:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"11326:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11313:3:28"},"nodeType":"YulFunctionCall","src":"11313:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"11338:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11309:3:28"},"nodeType":"YulFunctionCall","src":"11309:32:28"},"nodeType":"YulIf","src":"11306:52:28"},{"nodeType":"YulVariableDeclaration","src":"11367:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11393:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11380:12:28"},"nodeType":"YulFunctionCall","src":"11380:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11371:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11437:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11412:24:28"},"nodeType":"YulFunctionCall","src":"11412:31:28"},"nodeType":"YulExpressionStatement","src":"11412:31:28"},{"nodeType":"YulAssignment","src":"11452:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"11462:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11452:6:28"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11262:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11273:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11285:6:28","type":""}],"src":"11226:247:28"},{"body":{"nodeType":"YulBlock","src":"11597:99:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11614:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"11625:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11607:6:28"},"nodeType":"YulFunctionCall","src":"11607:21:28"},"nodeType":"YulExpressionStatement","src":"11607:21:28"},{"nodeType":"YulAssignment","src":"11637:53:28","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11663:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11675:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"11686:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11671:3:28"},"nodeType":"YulFunctionCall","src":"11671:18:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11645:17:28"},"nodeType":"YulFunctionCall","src":"11645:45:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11637:4:28"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11566:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11577:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11588:4:28","type":""}],"src":"11478:218:28"},{"body":{"nodeType":"YulBlock","src":"11786:171:28","statements":[{"body":{"nodeType":"YulBlock","src":"11832:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11841:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11844:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11834:6:28"},"nodeType":"YulFunctionCall","src":"11834:12:28"},"nodeType":"YulExpressionStatement","src":"11834:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11807:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"11816:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11803:3:28"},"nodeType":"YulFunctionCall","src":"11803:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11799:3:28"},"nodeType":"YulFunctionCall","src":"11799:32:28"},"nodeType":"YulIf","src":"11796:52:28"},{"nodeType":"YulAssignment","src":"11857:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11885:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"11867:17:28"},"nodeType":"YulFunctionCall","src":"11867:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11857:6:28"}]},{"nodeType":"YulAssignment","src":"11904:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11936:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"11947:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11932:3:28"},"nodeType":"YulFunctionCall","src":"11932:18:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"11914:17:28"},"nodeType":"YulFunctionCall","src":"11914:37:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11904:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11744:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11755:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11767:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11775:6:28","type":""}],"src":"11701:256:28"},{"body":{"nodeType":"YulBlock","src":"12065:357:28","statements":[{"body":{"nodeType":"YulBlock","src":"12111:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12120:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12123:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12113:6:28"},"nodeType":"YulFunctionCall","src":"12113:12:28"},"nodeType":"YulExpressionStatement","src":"12113:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12086:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"12095:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12082:3:28"},"nodeType":"YulFunctionCall","src":"12082:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"12107:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12078:3:28"},"nodeType":"YulFunctionCall","src":"12078:32:28"},"nodeType":"YulIf","src":"12075:52:28"},{"nodeType":"YulAssignment","src":"12136:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12164:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"12146:17:28"},"nodeType":"YulFunctionCall","src":"12146:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12136:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"12183:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12213:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"12224:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12209:3:28"},"nodeType":"YulFunctionCall","src":"12209:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12196:12:28"},"nodeType":"YulFunctionCall","src":"12196:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12187:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12262:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12237:24:28"},"nodeType":"YulFunctionCall","src":"12237:31:28"},"nodeType":"YulExpressionStatement","src":"12237:31:28"},{"nodeType":"YulAssignment","src":"12277:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"12287:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12277:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"12301:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12333:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"12344:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12329:3:28"},"nodeType":"YulFunctionCall","src":"12329:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12316:12:28"},"nodeType":"YulFunctionCall","src":"12316:32:28"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"12305:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"12382:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12357:24:28"},"nodeType":"YulFunctionCall","src":"12357:33:28"},"nodeType":"YulExpressionStatement","src":"12357:33:28"},{"nodeType":"YulAssignment","src":"12399:17:28","value":{"name":"value_1","nodeType":"YulIdentifier","src":"12409:7:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12399:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12015:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12026:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12038:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12046:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12054:6:28","type":""}],"src":"11962:460:28"},{"body":{"nodeType":"YulBlock","src":"12599:713:28","statements":[{"body":{"nodeType":"YulBlock","src":"12646:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12655:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12658:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12648:6:28"},"nodeType":"YulFunctionCall","src":"12648:12:28"},"nodeType":"YulExpressionStatement","src":"12648:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12620:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"12629:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12616:3:28"},"nodeType":"YulFunctionCall","src":"12616:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"12641:3:28","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12612:3:28"},"nodeType":"YulFunctionCall","src":"12612:33:28"},"nodeType":"YulIf","src":"12609:53:28"},{"nodeType":"YulAssignment","src":"12671:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12699:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"12681:17:28"},"nodeType":"YulFunctionCall","src":"12681:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12671:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"12718:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12749:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"12760:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12745:3:28"},"nodeType":"YulFunctionCall","src":"12745:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12732:12:28"},"nodeType":"YulFunctionCall","src":"12732:32:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12722:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12773:28:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12791:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"12795:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12787:3:28"},"nodeType":"YulFunctionCall","src":"12787:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"12799:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12783:3:28"},"nodeType":"YulFunctionCall","src":"12783:18:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12777:2:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"12828:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12837:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12840:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12830:6:28"},"nodeType":"YulFunctionCall","src":"12830:12:28"},"nodeType":"YulExpressionStatement","src":"12830:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12816:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"12824:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12813:2:28"},"nodeType":"YulFunctionCall","src":"12813:14:28"},"nodeType":"YulIf","src":"12810:34:28"},{"nodeType":"YulAssignment","src":"12853:59:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12884:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"12895:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12880:3:28"},"nodeType":"YulFunctionCall","src":"12880:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12904:7:28"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12863:16:28"},"nodeType":"YulFunctionCall","src":"12863:49:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12853:6:28"}]},{"nodeType":"YulAssignment","src":"12921:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12948:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"12959:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12944:3:28"},"nodeType":"YulFunctionCall","src":"12944:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12931:12:28"},"nodeType":"YulFunctionCall","src":"12931:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12921:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"12972:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13002:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13013:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12998:3:28"},"nodeType":"YulFunctionCall","src":"12998:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12985:12:28"},"nodeType":"YulFunctionCall","src":"12985:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12976:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13051:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13026:24:28"},"nodeType":"YulFunctionCall","src":"13026:31:28"},"nodeType":"YulExpressionStatement","src":"13026:31:28"},{"nodeType":"YulAssignment","src":"13066:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"13076:5:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"13066:6:28"}]},{"nodeType":"YulAssignment","src":"13090:43:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13117:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13128:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13113:3:28"},"nodeType":"YulFunctionCall","src":"13113:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13100:12:28"},"nodeType":"YulFunctionCall","src":"13100:33:28"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"13090:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"13142:49:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13175:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13186:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13171:3:28"},"nodeType":"YulFunctionCall","src":"13171:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13158:12:28"},"nodeType":"YulFunctionCall","src":"13158:33:28"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"13146:8:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"13220:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13229:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13232:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13222:6:28"},"nodeType":"YulFunctionCall","src":"13222:12:28"},"nodeType":"YulExpressionStatement","src":"13222:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"13206:8:28"},{"name":"_1","nodeType":"YulIdentifier","src":"13216:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13203:2:28"},"nodeType":"YulFunctionCall","src":"13203:16:28"},"nodeType":"YulIf","src":"13200:36:28"},{"nodeType":"YulAssignment","src":"13245:61:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13276:9:28"},{"name":"offset_1","nodeType":"YulIdentifier","src":"13287:8:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:28"},"nodeType":"YulFunctionCall","src":"13272:24:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13298:7:28"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"13255:16:28"},"nodeType":"YulFunctionCall","src":"13255:51:28"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"13245:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12525:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12536:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12548:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12556:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12564:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12572:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12580:6:28","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12588:6:28","type":""}],"src":"12427:885:28"},{"body":{"nodeType":"YulBlock","src":"13455:102:28","statements":[{"nodeType":"YulAssignment","src":"13465:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13477:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13488:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13473:3:28"},"nodeType":"YulFunctionCall","src":"13473:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13465:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13507:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13522:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13538:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13543:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13534:3:28"},"nodeType":"YulFunctionCall","src":"13534:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"13547:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13530:3:28"},"nodeType":"YulFunctionCall","src":"13530:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13518:3:28"},"nodeType":"YulFunctionCall","src":"13518:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13500:6:28"},"nodeType":"YulFunctionCall","src":"13500:51:28"},"nodeType":"YulExpressionStatement","src":"13500:51:28"}]},"name":"abi_encode_tuple_t_contract$_ILayerZeroEndpointUpgradeable_$144__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13424:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13435:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13446:4:28","type":""}],"src":"13317:240:28"},{"body":{"nodeType":"YulBlock","src":"13700:484:28","statements":[{"body":{"nodeType":"YulBlock","src":"13747:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13756:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13759:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13749:6:28"},"nodeType":"YulFunctionCall","src":"13749:12:28"},"nodeType":"YulExpressionStatement","src":"13749:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13721:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"13730:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13717:3:28"},"nodeType":"YulFunctionCall","src":"13717:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"13742:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13713:3:28"},"nodeType":"YulFunctionCall","src":"13713:33:28"},"nodeType":"YulIf","src":"13710:53:28"},{"nodeType":"YulAssignment","src":"13772:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13800:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"13782:17:28"},"nodeType":"YulFunctionCall","src":"13782:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13772:6:28"}]},{"nodeType":"YulAssignment","src":"13819:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13851:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13862:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13847:3:28"},"nodeType":"YulFunctionCall","src":"13847:18:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"13829:17:28"},"nodeType":"YulFunctionCall","src":"13829:37:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13819:6:28"}]},{"nodeType":"YulAssignment","src":"13875:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13902:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13913:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13898:3:28"},"nodeType":"YulFunctionCall","src":"13898:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13885:12:28"},"nodeType":"YulFunctionCall","src":"13885:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"13875:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"13926:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13957:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"13968:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13953:3:28"},"nodeType":"YulFunctionCall","src":"13953:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13940:12:28"},"nodeType":"YulFunctionCall","src":"13940:32:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13930:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"14015:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14024:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14027:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14017:6:28"},"nodeType":"YulFunctionCall","src":"14017:12:28"},"nodeType":"YulExpressionStatement","src":"14017:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13987:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14003:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"14007:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13999:3:28"},"nodeType":"YulFunctionCall","src":"13999:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"14011:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13995:3:28"},"nodeType":"YulFunctionCall","src":"13995:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13984:2:28"},"nodeType":"YulFunctionCall","src":"13984:30:28"},"nodeType":"YulIf","src":"13981:50:28"},{"nodeType":"YulVariableDeclaration","src":"14040:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14096:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"14107:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14092:3:28"},"nodeType":"YulFunctionCall","src":"14092:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14116:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"14066:25:28"},"nodeType":"YulFunctionCall","src":"14066:58:28"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"14044:8:28","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"14054:8:28","type":""}]},{"nodeType":"YulAssignment","src":"14133:18:28","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"14143:8:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14133:6:28"}]},{"nodeType":"YulAssignment","src":"14160:18:28","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"14170:8:28"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"14160:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_uint16t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13634:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13645:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13657:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13665:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13673:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13681:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13689:6:28","type":""}],"src":"13562:622:28"},{"body":{"nodeType":"YulBlock","src":"14276:301:28","statements":[{"body":{"nodeType":"YulBlock","src":"14322:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14331:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14334:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14324:6:28"},"nodeType":"YulFunctionCall","src":"14324:12:28"},"nodeType":"YulExpressionStatement","src":"14324:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14297:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"14306:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14293:3:28"},"nodeType":"YulFunctionCall","src":"14293:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"14318:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14289:3:28"},"nodeType":"YulFunctionCall","src":"14289:32:28"},"nodeType":"YulIf","src":"14286:52:28"},{"nodeType":"YulVariableDeclaration","src":"14347:36:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14373:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14360:12:28"},"nodeType":"YulFunctionCall","src":"14360:23:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14351:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14417:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14392:24:28"},"nodeType":"YulFunctionCall","src":"14392:31:28"},"nodeType":"YulExpressionStatement","src":"14392:31:28"},{"nodeType":"YulAssignment","src":"14432:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"14442:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14432:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"14456:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14488:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"14499:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14484:3:28"},"nodeType":"YulFunctionCall","src":"14484:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14471:12:28"},"nodeType":"YulFunctionCall","src":"14471:32:28"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"14460:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"14537:7:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14512:24:28"},"nodeType":"YulFunctionCall","src":"14512:33:28"},"nodeType":"YulExpressionStatement","src":"14512:33:28"},{"nodeType":"YulAssignment","src":"14554:17:28","value":{"name":"value_1","nodeType":"YulIdentifier","src":"14564:7:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14554:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14234:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14245:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14257:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14265:6:28","type":""}],"src":"14189:388:28"},{"body":{"nodeType":"YulBlock","src":"14684:222:28","statements":[{"body":{"nodeType":"YulBlock","src":"14730:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14739:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14742:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14732:6:28"},"nodeType":"YulFunctionCall","src":"14732:12:28"},"nodeType":"YulExpressionStatement","src":"14732:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14705:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"14714:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14701:3:28"},"nodeType":"YulFunctionCall","src":"14701:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"14726:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14697:3:28"},"nodeType":"YulFunctionCall","src":"14697:32:28"},"nodeType":"YulIf","src":"14694:52:28"},{"nodeType":"YulAssignment","src":"14755:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14783:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"14765:17:28"},"nodeType":"YulFunctionCall","src":"14765:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14755:6:28"}]},{"nodeType":"YulAssignment","src":"14802:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14834:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"14845:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14830:3:28"},"nodeType":"YulFunctionCall","src":"14830:18:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"14812:17:28"},"nodeType":"YulFunctionCall","src":"14812:37:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14802:6:28"}]},{"nodeType":"YulAssignment","src":"14858:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14885:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"14896:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14881:3:28"},"nodeType":"YulFunctionCall","src":"14881:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14868:12:28"},"nodeType":"YulFunctionCall","src":"14868:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14858:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_uint16t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14634:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14645:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14657:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14665:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14673:6:28","type":""}],"src":"14582:324:28"},{"body":{"nodeType":"YulBlock","src":"15015:279:28","statements":[{"body":{"nodeType":"YulBlock","src":"15061:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15070:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15073:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15063:6:28"},"nodeType":"YulFunctionCall","src":"15063:12:28"},"nodeType":"YulExpressionStatement","src":"15063:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15036:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"15045:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15032:3:28"},"nodeType":"YulFunctionCall","src":"15032:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"15057:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15028:3:28"},"nodeType":"YulFunctionCall","src":"15028:32:28"},"nodeType":"YulIf","src":"15025:52:28"},{"nodeType":"YulAssignment","src":"15086:33:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15109:9:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15096:12:28"},"nodeType":"YulFunctionCall","src":"15096:23:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15086:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"15128:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15158:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15169:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15154:3:28"},"nodeType":"YulFunctionCall","src":"15154:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15141:12:28"},"nodeType":"YulFunctionCall","src":"15141:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15132:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15207:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15182:24:28"},"nodeType":"YulFunctionCall","src":"15182:31:28"},"nodeType":"YulExpressionStatement","src":"15182:31:28"},{"nodeType":"YulAssignment","src":"15222:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"15232:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15222:6:28"}]},{"nodeType":"YulAssignment","src":"15246:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15273:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15284:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15269:3:28"},"nodeType":"YulFunctionCall","src":"15269:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15256:12:28"},"nodeType":"YulFunctionCall","src":"15256:32:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15246:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14965:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14976:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14988:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14996:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15004:6:28","type":""}],"src":"14911:383:28"},{"body":{"nodeType":"YulBlock","src":"15418:341:28","statements":[{"body":{"nodeType":"YulBlock","src":"15465:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15474:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15477:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15467:6:28"},"nodeType":"YulFunctionCall","src":"15467:12:28"},"nodeType":"YulExpressionStatement","src":"15467:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15439:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"15448:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15435:3:28"},"nodeType":"YulFunctionCall","src":"15435:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"15460:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15431:3:28"},"nodeType":"YulFunctionCall","src":"15431:33:28"},"nodeType":"YulIf","src":"15428:53:28"},{"nodeType":"YulAssignment","src":"15490:38:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15518:9:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"15500:17:28"},"nodeType":"YulFunctionCall","src":"15500:28:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15490:6:28"}]},{"nodeType":"YulAssignment","src":"15537:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15569:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15580:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15565:3:28"},"nodeType":"YulFunctionCall","src":"15565:18:28"}],"functionName":{"name":"abi_decode_uint16","nodeType":"YulIdentifier","src":"15547:17:28"},"nodeType":"YulFunctionCall","src":"15547:37:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15537:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"15593:45:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15623:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15634:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15619:3:28"},"nodeType":"YulFunctionCall","src":"15619:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15606:12:28"},"nodeType":"YulFunctionCall","src":"15606:32:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15597:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15672:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15647:24:28"},"nodeType":"YulFunctionCall","src":"15647:31:28"},"nodeType":"YulExpressionStatement","src":"15647:31:28"},{"nodeType":"YulAssignment","src":"15687:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"15697:5:28"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15687:6:28"}]},{"nodeType":"YulAssignment","src":"15711:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15738:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15749:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15734:3:28"},"nodeType":"YulFunctionCall","src":"15734:18:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15721:12:28"},"nodeType":"YulFunctionCall","src":"15721:32:28"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15711:6:28"}]}]},"name":"abi_decode_tuple_t_uint16t_uint16t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15360:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15371:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15383:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15391:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15399:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15407:6:28","type":""}],"src":"15299:460:28"},{"body":{"nodeType":"YulBlock","src":"15880:102:28","statements":[{"nodeType":"YulAssignment","src":"15890:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15902:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"15913:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15898:3:28"},"nodeType":"YulFunctionCall","src":"15898:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15890:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15932:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15947:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15963:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15968:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15959:3:28"},"nodeType":"YulFunctionCall","src":"15959:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"15972:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15955:3:28"},"nodeType":"YulFunctionCall","src":"15955:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15943:3:28"},"nodeType":"YulFunctionCall","src":"15943:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15925:6:28"},"nodeType":"YulFunctionCall","src":"15925:51:28"},"nodeType":"YulExpressionStatement","src":"15925:51:28"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$2920__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15849:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15860:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15871:4:28","type":""}],"src":"15764:218:28"},{"body":{"nodeType":"YulBlock","src":"16161:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16178:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"16189:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16171:6:28"},"nodeType":"YulFunctionCall","src":"16171:21:28"},"nodeType":"YulExpressionStatement","src":"16171:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16212:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"16223:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16208:3:28"},"nodeType":"YulFunctionCall","src":"16208:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"16228:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16201:6:28"},"nodeType":"YulFunctionCall","src":"16201:29:28"},"nodeType":"YulExpressionStatement","src":"16201:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16250:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"16261:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16246:3:28"},"nodeType":"YulFunctionCall","src":"16246:18:28"},{"hexValue":"563130","kind":"string","nodeType":"YulLiteral","src":"16266:5:28","type":"","value":"V10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16239:6:28"},"nodeType":"YulFunctionCall","src":"16239:33:28"},"nodeType":"YulExpressionStatement","src":"16239:33:28"},{"nodeType":"YulAssignment","src":"16281:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16293:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"16304:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16289:3:28"},"nodeType":"YulFunctionCall","src":"16289:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16281:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_9cd8c9dc536286380c07cdfe5f9893dc9aaf35c1c68f6f6166f94a63d6ba2b48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16138:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16152:4:28","type":""}],"src":"15987:326:28"},{"body":{"nodeType":"YulBlock","src":"16350:95:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16367:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16374:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"16379:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16370:3:28"},"nodeType":"YulFunctionCall","src":"16370:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16360:6:28"},"nodeType":"YulFunctionCall","src":"16360:31:28"},"nodeType":"YulExpressionStatement","src":"16360:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16407:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16410:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16400:6:28"},"nodeType":"YulFunctionCall","src":"16400:15:28"},"nodeType":"YulExpressionStatement","src":"16400:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16431:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16434:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16424:6:28"},"nodeType":"YulFunctionCall","src":"16424:15:28"},"nodeType":"YulExpressionStatement","src":"16424:15:28"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"16318:127:28"},{"body":{"nodeType":"YulBlock","src":"16498:77:28","statements":[{"nodeType":"YulAssignment","src":"16508:16:28","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16519:1:28"},{"name":"y","nodeType":"YulIdentifier","src":"16522:1:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16515:3:28"},"nodeType":"YulFunctionCall","src":"16515:9:28"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"16508:3:28"}]},{"body":{"nodeType":"YulBlock","src":"16547:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16549:16:28"},"nodeType":"YulFunctionCall","src":"16549:18:28"},"nodeType":"YulExpressionStatement","src":"16549:18:28"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16539:1:28"},{"name":"sum","nodeType":"YulIdentifier","src":"16542:3:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16536:2:28"},"nodeType":"YulFunctionCall","src":"16536:10:28"},"nodeType":"YulIf","src":"16533:36:28"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16481:1:28","type":""},{"name":"y","nodeType":"YulTypedName","src":"16484:1:28","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"16490:3:28","type":""}],"src":"16450:125:28"},{"body":{"nodeType":"YulBlock","src":"16635:325:28","statements":[{"nodeType":"YulAssignment","src":"16645:22:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16659:1:28","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"16662:4:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16655:3:28"},"nodeType":"YulFunctionCall","src":"16655:12:28"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16645:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"16676:38:28","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16706:4:28"},{"kind":"number","nodeType":"YulLiteral","src":"16712:1:28","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16702:3:28"},"nodeType":"YulFunctionCall","src":"16702:12:28"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"16680:18:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"16753:31:28","statements":[{"nodeType":"YulAssignment","src":"16755:27:28","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16769:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"16777:4:28","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16765:3:28"},"nodeType":"YulFunctionCall","src":"16765:17:28"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16755:6:28"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16733:18:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16726:6:28"},"nodeType":"YulFunctionCall","src":"16726:26:28"},"nodeType":"YulIf","src":"16723:61:28"},{"body":{"nodeType":"YulBlock","src":"16843:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16864:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16871:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"16876:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16867:3:28"},"nodeType":"YulFunctionCall","src":"16867:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16857:6:28"},"nodeType":"YulFunctionCall","src":"16857:31:28"},"nodeType":"YulExpressionStatement","src":"16857:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16908:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16911:4:28","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16901:6:28"},"nodeType":"YulFunctionCall","src":"16901:15:28"},"nodeType":"YulExpressionStatement","src":"16901:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16936:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16939:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16929:6:28"},"nodeType":"YulFunctionCall","src":"16929:15:28"},"nodeType":"YulExpressionStatement","src":"16929:15:28"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16799:18:28"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16822:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"16830:2:28","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16819:2:28"},"nodeType":"YulFunctionCall","src":"16819:14:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16796:2:28"},"nodeType":"YulFunctionCall","src":"16796:38:28"},"nodeType":"YulIf","src":"16793:161:28"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"16615:4:28","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16624:6:28","type":""}],"src":"16580:380:28"},{"body":{"nodeType":"YulBlock","src":"17064:89:28","statements":[{"nodeType":"YulAssignment","src":"17074:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17086:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17097:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17082:3:28"},"nodeType":"YulFunctionCall","src":"17082:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17074:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17116:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17131:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"17139:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17127:3:28"},"nodeType":"YulFunctionCall","src":"17127:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17109:6:28"},"nodeType":"YulFunctionCall","src":"17109:38:28"},"nodeType":"YulExpressionStatement","src":"17109:38:28"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17033:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17044:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17055:4:28","type":""}],"src":"16965:188:28"},{"body":{"nodeType":"YulBlock","src":"17332:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17349:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17360:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17342:6:28"},"nodeType":"YulFunctionCall","src":"17342:21:28"},"nodeType":"YulExpressionStatement","src":"17342:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17383:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17394:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17379:3:28"},"nodeType":"YulFunctionCall","src":"17379:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"17399:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17372:6:28"},"nodeType":"YulFunctionCall","src":"17372:29:28"},"nodeType":"YulExpressionStatement","src":"17372:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17421:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17432:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17417:3:28"},"nodeType":"YulFunctionCall","src":"17417:18:28"},{"hexValue":"5631","kind":"string","nodeType":"YulLiteral","src":"17437:4:28","type":"","value":"V1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17410:6:28"},"nodeType":"YulFunctionCall","src":"17410:32:28"},"nodeType":"YulExpressionStatement","src":"17410:32:28"},{"nodeType":"YulAssignment","src":"17451:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17463:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17474:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17459:3:28"},"nodeType":"YulFunctionCall","src":"17459:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17451:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a2283__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17309:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17323:4:28","type":""}],"src":"17158:325:28"},{"body":{"nodeType":"YulBlock","src":"17537:79:28","statements":[{"nodeType":"YulAssignment","src":"17547:17:28","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17559:1:28"},{"name":"y","nodeType":"YulIdentifier","src":"17562:1:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17555:3:28"},"nodeType":"YulFunctionCall","src":"17555:9:28"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"17547:4:28"}]},{"body":{"nodeType":"YulBlock","src":"17588:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17590:16:28"},"nodeType":"YulFunctionCall","src":"17590:18:28"},"nodeType":"YulExpressionStatement","src":"17590:18:28"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"17579:4:28"},{"name":"x","nodeType":"YulIdentifier","src":"17585:1:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17576:2:28"},"nodeType":"YulFunctionCall","src":"17576:11:28"},"nodeType":"YulIf","src":"17573:37:28"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17519:1:28","type":""},{"name":"y","nodeType":"YulTypedName","src":"17522:1:28","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"17528:4:28","type":""}],"src":"17488:128:28"},{"body":{"nodeType":"YulBlock","src":"17795:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17812:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17823:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17805:6:28"},"nodeType":"YulFunctionCall","src":"17805:21:28"},"nodeType":"YulExpressionStatement","src":"17805:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17846:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17857:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17842:3:28"},"nodeType":"YulFunctionCall","src":"17842:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"17862:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17835:6:28"},"nodeType":"YulFunctionCall","src":"17835:29:28"},"nodeType":"YulExpressionStatement","src":"17835:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17884:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17895:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17880:3:28"},"nodeType":"YulFunctionCall","src":"17880:18:28"},{"hexValue":"5636","kind":"string","nodeType":"YulLiteral","src":"17900:4:28","type":"","value":"V6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17873:6:28"},"nodeType":"YulFunctionCall","src":"17873:32:28"},"nodeType":"YulExpressionStatement","src":"17873:32:28"},{"nodeType":"YulAssignment","src":"17914:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17926:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"17937:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17922:3:28"},"nodeType":"YulFunctionCall","src":"17922:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17914:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c1f3458591aa5dbadd866836ff54b5edb079a2e1de0432c95a85f45437b12bfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17772:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17786:4:28","type":""}],"src":"17621:325:28"},{"body":{"nodeType":"YulBlock","src":"18125:236:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18142:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18153:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18135:6:28"},"nodeType":"YulFunctionCall","src":"18135:21:28"},"nodeType":"YulExpressionStatement","src":"18135:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18176:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18187:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18172:3:28"},"nodeType":"YulFunctionCall","src":"18172:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"18192:2:28","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18165:6:28"},"nodeType":"YulFunctionCall","src":"18165:30:28"},"nodeType":"YulExpressionStatement","src":"18165:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18215:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18226:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18211:3:28"},"nodeType":"YulFunctionCall","src":"18211:18:28"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"18231:34:28","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18204:6:28"},"nodeType":"YulFunctionCall","src":"18204:62:28"},"nodeType":"YulExpressionStatement","src":"18204:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18286:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18297:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18282:3:28"},"nodeType":"YulFunctionCall","src":"18282:18:28"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"18302:16:28","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18275:6:28"},"nodeType":"YulFunctionCall","src":"18275:44:28"},"nodeType":"YulExpressionStatement","src":"18275:44:28"},{"nodeType":"YulAssignment","src":"18328:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18340:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18351:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18336:3:28"},"nodeType":"YulFunctionCall","src":"18336:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18328:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18102:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18116:4:28","type":""}],"src":"17951:410:28"},{"body":{"nodeType":"YulBlock","src":"18495:145:28","statements":[{"nodeType":"YulAssignment","src":"18505:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18517:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18528:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18513:3:28"},"nodeType":"YulFunctionCall","src":"18513:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18505:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18547:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18562:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18578:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18583:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18574:3:28"},"nodeType":"YulFunctionCall","src":"18574:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"18587:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18570:3:28"},"nodeType":"YulFunctionCall","src":"18570:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18558:3:28"},"nodeType":"YulFunctionCall","src":"18558:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18540:6:28"},"nodeType":"YulFunctionCall","src":"18540:51:28"},"nodeType":"YulExpressionStatement","src":"18540:51:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18611:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"18622:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18607:3:28"},"nodeType":"YulFunctionCall","src":"18607:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"18627:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18600:6:28"},"nodeType":"YulFunctionCall","src":"18600:34:28"},"nodeType":"YulExpressionStatement","src":"18600:34:28"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18456:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18467:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18475:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18486:4:28","type":""}],"src":"18366:274:28"},{"body":{"nodeType":"YulBlock","src":"18723:167:28","statements":[{"body":{"nodeType":"YulBlock","src":"18769:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18778:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18781:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18771:6:28"},"nodeType":"YulFunctionCall","src":"18771:12:28"},"nodeType":"YulExpressionStatement","src":"18771:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18744:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"18753:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18740:3:28"},"nodeType":"YulFunctionCall","src":"18740:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"18765:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18736:3:28"},"nodeType":"YulFunctionCall","src":"18736:32:28"},"nodeType":"YulIf","src":"18733:52:28"},{"nodeType":"YulVariableDeclaration","src":"18794:29:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18813:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18807:5:28"},"nodeType":"YulFunctionCall","src":"18807:16:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18798:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18854:5:28"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"18832:21:28"},"nodeType":"YulFunctionCall","src":"18832:28:28"},"nodeType":"YulExpressionStatement","src":"18832:28:28"},{"nodeType":"YulAssignment","src":"18869:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"18879:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18869:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18689:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18700:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18712:6:28","type":""}],"src":"18645:245:28"},{"body":{"nodeType":"YulBlock","src":"19002:87:28","statements":[{"nodeType":"YulAssignment","src":"19012:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19024:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"19035:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19020:3:28"},"nodeType":"YulFunctionCall","src":"19020:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19012:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19054:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19069:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"19077:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19065:3:28"},"nodeType":"YulFunctionCall","src":"19065:17:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19047:6:28"},"nodeType":"YulFunctionCall","src":"19047:36:28"},"nodeType":"YulExpressionStatement","src":"19047:36:28"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18971:9:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18982:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18993:4:28","type":""}],"src":"18895:194:28"},{"body":{"nodeType":"YulBlock","src":"19173:194:28","statements":[{"body":{"nodeType":"YulBlock","src":"19219:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19228:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19231:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19221:6:28"},"nodeType":"YulFunctionCall","src":"19221:12:28"},"nodeType":"YulExpressionStatement","src":"19221:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19194:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"19203:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19190:3:28"},"nodeType":"YulFunctionCall","src":"19190:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"19215:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19186:3:28"},"nodeType":"YulFunctionCall","src":"19186:32:28"},"nodeType":"YulIf","src":"19183:52:28"},{"nodeType":"YulVariableDeclaration","src":"19244:29:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19263:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19257:5:28"},"nodeType":"YulFunctionCall","src":"19257:16:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19248:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"19321:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19330:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19333:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19323:6:28"},"nodeType":"YulFunctionCall","src":"19323:12:28"},"nodeType":"YulExpressionStatement","src":"19323:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19295:5:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19306:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"19313:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19302:3:28"},"nodeType":"YulFunctionCall","src":"19302:16:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19292:2:28"},"nodeType":"YulFunctionCall","src":"19292:27:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19285:6:28"},"nodeType":"YulFunctionCall","src":"19285:35:28"},"nodeType":"YulIf","src":"19282:55:28"},{"nodeType":"YulAssignment","src":"19346:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"19356:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19346:6:28"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19139:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19150:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19162:6:28","type":""}],"src":"19094:273:28"},{"body":{"nodeType":"YulBlock","src":"19519:124:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19542:3:28"},{"name":"value0","nodeType":"YulIdentifier","src":"19547:6:28"},{"name":"value1","nodeType":"YulIdentifier","src":"19555:6:28"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19529:12:28"},"nodeType":"YulFunctionCall","src":"19529:33:28"},"nodeType":"YulExpressionStatement","src":"19529:33:28"},{"nodeType":"YulVariableDeclaration","src":"19571:26:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19585:3:28"},{"name":"value1","nodeType":"YulIdentifier","src":"19590:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19581:3:28"},"nodeType":"YulFunctionCall","src":"19581:16:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19575:2:28","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19613:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"19617:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19606:6:28"},"nodeType":"YulFunctionCall","src":"19606:13:28"},"nodeType":"YulExpressionStatement","src":"19606:13:28"},{"nodeType":"YulAssignment","src":"19628:9:28","value":{"name":"_1","nodeType":"YulIdentifier","src":"19635:2:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19628:3:28"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19487:3:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19492:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19500:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19511:3:28","type":""}],"src":"19372:271:28"},{"body":{"nodeType":"YulBlock","src":"19714:200:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19731:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"19736:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19724:6:28"},"nodeType":"YulFunctionCall","src":"19724:19:28"},"nodeType":"YulExpressionStatement","src":"19724:19:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19769:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"19774:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19765:3:28"},"nodeType":"YulFunctionCall","src":"19765:14:28"},{"name":"start","nodeType":"YulIdentifier","src":"19781:5:28"},{"name":"length","nodeType":"YulIdentifier","src":"19788:6:28"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19752:12:28"},"nodeType":"YulFunctionCall","src":"19752:43:28"},"nodeType":"YulExpressionStatement","src":"19752:43:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19819:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"19824:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19815:3:28"},"nodeType":"YulFunctionCall","src":"19815:16:28"},{"kind":"number","nodeType":"YulLiteral","src":"19833:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19811:3:28"},"nodeType":"YulFunctionCall","src":"19811:27:28"},{"kind":"number","nodeType":"YulLiteral","src":"19840:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19804:6:28"},"nodeType":"YulFunctionCall","src":"19804:38:28"},"nodeType":"YulExpressionStatement","src":"19804:38:28"},{"nodeType":"YulAssignment","src":"19851:57:28","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19866:3:28"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19879:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"19887:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19875:3:28"},"nodeType":"YulFunctionCall","src":"19875:15:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19896:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19892:3:28"},"nodeType":"YulFunctionCall","src":"19892:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19871:3:28"},"nodeType":"YulFunctionCall","src":"19871:29:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19862:3:28"},"nodeType":"YulFunctionCall","src":"19862:39:28"},{"kind":"number","nodeType":"YulLiteral","src":"19903:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19858:3:28"},"nodeType":"YulFunctionCall","src":"19858:50:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19851:3:28"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"19683:5:28","type":""},{"name":"length","nodeType":"YulTypedName","src":"19690:6:28","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19698:3:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19706:3:28","type":""}],"src":"19648:266:28"},{"body":{"nodeType":"YulBlock","src":"20074:171:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20091:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20106:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"20114:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20102:3:28"},"nodeType":"YulFunctionCall","src":"20102:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20084:6:28"},"nodeType":"YulFunctionCall","src":"20084:38:28"},"nodeType":"YulExpressionStatement","src":"20084:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20142:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20153:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20138:3:28"},"nodeType":"YulFunctionCall","src":"20138:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"20158:2:28","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20131:6:28"},"nodeType":"YulFunctionCall","src":"20131:30:28"},"nodeType":"YulExpressionStatement","src":"20131:30:28"},{"nodeType":"YulAssignment","src":"20170:69:28","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20204:6:28"},{"name":"value2","nodeType":"YulIdentifier","src":"20212:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20224:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20235:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20220:3:28"},"nodeType":"YulFunctionCall","src":"20220:18:28"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"20178:25:28"},"nodeType":"YulFunctionCall","src":"20178:61:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20170:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_bytes_calldata_ptr__to_t_uint16_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20027:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20038:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20046:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20054:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20065:4:28","type":""}],"src":"19919:326:28"},{"body":{"nodeType":"YulBlock","src":"20424:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20441:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20452:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20434:6:28"},"nodeType":"YulFunctionCall","src":"20434:21:28"},"nodeType":"YulExpressionStatement","src":"20434:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20475:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20486:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20471:3:28"},"nodeType":"YulFunctionCall","src":"20471:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"20491:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20464:6:28"},"nodeType":"YulFunctionCall","src":"20464:29:28"},"nodeType":"YulExpressionStatement","src":"20464:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20513:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20524:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20509:3:28"},"nodeType":"YulFunctionCall","src":"20509:18:28"},{"hexValue":"5633","kind":"string","nodeType":"YulLiteral","src":"20529:4:28","type":"","value":"V3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20502:6:28"},"nodeType":"YulFunctionCall","src":"20502:32:28"},"nodeType":"YulExpressionStatement","src":"20502:32:28"},{"nodeType":"YulAssignment","src":"20543:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20555:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20566:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20551:3:28"},"nodeType":"YulFunctionCall","src":"20551:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20543:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4ade54ca82b345967b61d43a7b6e1c256d140cceb65202e7117104371c17959c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20401:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20415:4:28","type":""}],"src":"20250:325:28"},{"body":{"nodeType":"YulBlock","src":"20754:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20771:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20782:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20764:6:28"},"nodeType":"YulFunctionCall","src":"20764:21:28"},"nodeType":"YulExpressionStatement","src":"20764:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20805:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20816:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20801:3:28"},"nodeType":"YulFunctionCall","src":"20801:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"20821:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20794:6:28"},"nodeType":"YulFunctionCall","src":"20794:29:28"},"nodeType":"YulExpressionStatement","src":"20794:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20843:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20854:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20839:3:28"},"nodeType":"YulFunctionCall","src":"20839:18:28"},{"hexValue":"5635","kind":"string","nodeType":"YulLiteral","src":"20859:4:28","type":"","value":"V5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20832:6:28"},"nodeType":"YulFunctionCall","src":"20832:32:28"},"nodeType":"YulExpressionStatement","src":"20832:32:28"},{"nodeType":"YulAssignment","src":"20873:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20885:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"20896:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20881:3:28"},"nodeType":"YulFunctionCall","src":"20881:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20873:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_81685035bf6e9d5f45bbedb20e2e5ca3f52663efad8040454930d989b0bd1f49__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20731:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20745:4:28","type":""}],"src":"20580:325:28"},{"body":{"nodeType":"YulBlock","src":"21084:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21101:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"21112:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21094:6:28"},"nodeType":"YulFunctionCall","src":"21094:21:28"},"nodeType":"YulExpressionStatement","src":"21094:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21135:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"21146:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21131:3:28"},"nodeType":"YulFunctionCall","src":"21131:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"21151:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21124:6:28"},"nodeType":"YulFunctionCall","src":"21124:30:28"},"nodeType":"YulExpressionStatement","src":"21124:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21174:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"21185:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21170:3:28"},"nodeType":"YulFunctionCall","src":"21170:18:28"},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d757374206265","kind":"string","nodeType":"YulLiteral","src":"21190:34:28","type":"","value":"NonblockingLzApp: caller must be"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21163:6:28"},"nodeType":"YulFunctionCall","src":"21163:62:28"},"nodeType":"YulExpressionStatement","src":"21163:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21245:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"21256:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21241:3:28"},"nodeType":"YulFunctionCall","src":"21241:18:28"},{"hexValue":"204c7a417070","kind":"string","nodeType":"YulLiteral","src":"21261:8:28","type":"","value":" LzApp"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21234:6:28"},"nodeType":"YulFunctionCall","src":"21234:36:28"},"nodeType":"YulExpressionStatement","src":"21234:36:28"},{"nodeType":"YulAssignment","src":"21279:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21291:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"21302:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21287:3:28"},"nodeType":"YulFunctionCall","src":"21287:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21279:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21061:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21075:4:28","type":""}],"src":"20910:402:28"},{"body":{"nodeType":"YulBlock","src":"21381:358:28","statements":[{"nodeType":"YulVariableDeclaration","src":"21391:16:28","value":{"kind":"number","nodeType":"YulLiteral","src":"21406:1:28","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"21395:7:28","type":""}]},{"nodeType":"YulAssignment","src":"21416:16:28","value":{"name":"power_1","nodeType":"YulIdentifier","src":"21425:7:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21416:5:28"}]},{"nodeType":"YulAssignment","src":"21441:13:28","value":{"name":"_base","nodeType":"YulIdentifier","src":"21449:5:28"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"21441:4:28"}]},{"body":{"nodeType":"YulBlock","src":"21505:228:28","statements":[{"body":{"nodeType":"YulBlock","src":"21550:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21552:16:28"},"nodeType":"YulFunctionCall","src":"21552:18:28"},"nodeType":"YulExpressionStatement","src":"21552:18:28"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"21525:4:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21539:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21535:3:28"},"nodeType":"YulFunctionCall","src":"21535:6:28"},{"name":"base","nodeType":"YulIdentifier","src":"21543:4:28"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"21531:3:28"},"nodeType":"YulFunctionCall","src":"21531:17:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21522:2:28"},"nodeType":"YulFunctionCall","src":"21522:27:28"},"nodeType":"YulIf","src":"21519:53:28"},{"body":{"nodeType":"YulBlock","src":"21611:29:28","statements":[{"nodeType":"YulAssignment","src":"21613:25:28","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"21626:5:28"},{"name":"base","nodeType":"YulIdentifier","src":"21633:4:28"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21622:3:28"},"nodeType":"YulFunctionCall","src":"21622:16:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21613:5:28"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"21592:8:28"},{"name":"power_1","nodeType":"YulIdentifier","src":"21602:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21588:3:28"},"nodeType":"YulFunctionCall","src":"21588:22:28"},"nodeType":"YulIf","src":"21585:55:28"},{"nodeType":"YulAssignment","src":"21653:23:28","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"21665:4:28"},{"name":"base","nodeType":"YulIdentifier","src":"21671:4:28"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21661:3:28"},"nodeType":"YulFunctionCall","src":"21661:15:28"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"21653:4:28"}]},{"nodeType":"YulAssignment","src":"21689:34:28","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"21705:7:28"},{"name":"exponent","nodeType":"YulIdentifier","src":"21714:8:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21701:3:28"},"nodeType":"YulFunctionCall","src":"21701:22:28"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"21689:8:28"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"21474:8:28"},{"name":"power_1","nodeType":"YulIdentifier","src":"21484:7:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21471:2:28"},"nodeType":"YulFunctionCall","src":"21471:21:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"21493:3:28","statements":[]},"pre":{"nodeType":"YulBlock","src":"21467:3:28","statements":[]},"src":"21463:270:28"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"21345:5:28","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"21352:8:28","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"21365:5:28","type":""},{"name":"base","nodeType":"YulTypedName","src":"21372:4:28","type":""}],"src":"21317:422:28"},{"body":{"nodeType":"YulBlock","src":"21803:747:28","statements":[{"body":{"nodeType":"YulBlock","src":"21841:52:28","statements":[{"nodeType":"YulAssignment","src":"21855:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"21864:1:28","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21855:5:28"}]},{"nodeType":"YulLeave","src":"21878:5:28"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"21823:8:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21816:6:28"},"nodeType":"YulFunctionCall","src":"21816:16:28"},"nodeType":"YulIf","src":"21813:80:28"},{"body":{"nodeType":"YulBlock","src":"21926:52:28","statements":[{"nodeType":"YulAssignment","src":"21940:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"21949:1:28","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"21940:5:28"}]},{"nodeType":"YulLeave","src":"21963:5:28"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"21912:4:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21905:6:28"},"nodeType":"YulFunctionCall","src":"21905:12:28"},"nodeType":"YulIf","src":"21902:76:28"},{"cases":[{"body":{"nodeType":"YulBlock","src":"22014:52:28","statements":[{"nodeType":"YulAssignment","src":"22028:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"22037:1:28","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22028:5:28"}]},{"nodeType":"YulLeave","src":"22051:5:28"}]},"nodeType":"YulCase","src":"22007:59:28","value":{"kind":"number","nodeType":"YulLiteral","src":"22012:1:28","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"22082:123:28","statements":[{"body":{"nodeType":"YulBlock","src":"22117:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22119:16:28"},"nodeType":"YulFunctionCall","src":"22119:18:28"},"nodeType":"YulExpressionStatement","src":"22119:18:28"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22102:8:28"},{"kind":"number","nodeType":"YulLiteral","src":"22112:3:28","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22099:2:28"},"nodeType":"YulFunctionCall","src":"22099:17:28"},"nodeType":"YulIf","src":"22096:43:28"},{"nodeType":"YulAssignment","src":"22152:25:28","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22165:8:28"},{"kind":"number","nodeType":"YulLiteral","src":"22175:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22161:3:28"},"nodeType":"YulFunctionCall","src":"22161:16:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22152:5:28"}]},{"nodeType":"YulLeave","src":"22190:5:28"}]},"nodeType":"YulCase","src":"22075:130:28","value":{"kind":"number","nodeType":"YulLiteral","src":"22080:1:28","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"21994:4:28"},"nodeType":"YulSwitch","src":"21987:218:28"},{"body":{"nodeType":"YulBlock","src":"22303:70:28","statements":[{"nodeType":"YulAssignment","src":"22317:28:28","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22330:4:28"},{"name":"exponent","nodeType":"YulIdentifier","src":"22336:8:28"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"22326:3:28"},"nodeType":"YulFunctionCall","src":"22326:19:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22317:5:28"}]},{"nodeType":"YulLeave","src":"22358:5:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22227:4:28"},{"kind":"number","nodeType":"YulLiteral","src":"22233:2:28","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22224:2:28"},"nodeType":"YulFunctionCall","src":"22224:12:28"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22241:8:28"},{"kind":"number","nodeType":"YulLiteral","src":"22251:2:28","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22238:2:28"},"nodeType":"YulFunctionCall","src":"22238:16:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22220:3:28"},"nodeType":"YulFunctionCall","src":"22220:35:28"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22264:4:28"},{"kind":"number","nodeType":"YulLiteral","src":"22270:3:28","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22261:2:28"},"nodeType":"YulFunctionCall","src":"22261:13:28"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22279:8:28"},{"kind":"number","nodeType":"YulLiteral","src":"22289:2:28","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22276:2:28"},"nodeType":"YulFunctionCall","src":"22276:16:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22257:3:28"},"nodeType":"YulFunctionCall","src":"22257:36:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22217:2:28"},"nodeType":"YulFunctionCall","src":"22217:77:28"},"nodeType":"YulIf","src":"22214:159:28"},{"nodeType":"YulVariableDeclaration","src":"22382:57:28","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22424:4:28"},{"name":"exponent","nodeType":"YulIdentifier","src":"22430:8:28"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"22405:18:28"},"nodeType":"YulFunctionCall","src":"22405:34:28"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"22386:7:28","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"22395:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"22484:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22486:16:28"},"nodeType":"YulFunctionCall","src":"22486:18:28"},"nodeType":"YulExpressionStatement","src":"22486:18:28"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"22454:7:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22471:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22467:3:28"},"nodeType":"YulFunctionCall","src":"22467:6:28"},{"name":"base_1","nodeType":"YulIdentifier","src":"22475:6:28"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"22463:3:28"},"nodeType":"YulFunctionCall","src":"22463:19:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22451:2:28"},"nodeType":"YulFunctionCall","src":"22451:32:28"},"nodeType":"YulIf","src":"22448:58:28"},{"nodeType":"YulAssignment","src":"22515:29:28","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"22528:7:28"},{"name":"base_1","nodeType":"YulIdentifier","src":"22537:6:28"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22524:3:28"},"nodeType":"YulFunctionCall","src":"22524:20:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22515:5:28"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"21774:4:28","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"21780:8:28","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"21793:5:28","type":""}],"src":"21744:806:28"},{"body":{"nodeType":"YulBlock","src":"22623:72:28","statements":[{"nodeType":"YulAssignment","src":"22633:56:28","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"22663:4:28"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"22673:8:28"},{"kind":"number","nodeType":"YulLiteral","src":"22683:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22669:3:28"},"nodeType":"YulFunctionCall","src":"22669:19:28"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"22642:20:28"},"nodeType":"YulFunctionCall","src":"22642:47:28"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"22633:5:28"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"22594:4:28","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"22600:8:28","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"22613:5:28","type":""}],"src":"22555:140:28"},{"body":{"nodeType":"YulBlock","src":"22781:103:28","statements":[{"body":{"nodeType":"YulBlock","src":"22827:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22836:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22839:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22829:6:28"},"nodeType":"YulFunctionCall","src":"22829:12:28"},"nodeType":"YulExpressionStatement","src":"22829:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22802:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"22811:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22798:3:28"},"nodeType":"YulFunctionCall","src":"22798:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"22823:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22794:3:28"},"nodeType":"YulFunctionCall","src":"22794:32:28"},"nodeType":"YulIf","src":"22791:52:28"},{"nodeType":"YulAssignment","src":"22852:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22868:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22862:5:28"},"nodeType":"YulFunctionCall","src":"22862:16:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22852:6:28"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22747:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22758:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22770:6:28","type":""}],"src":"22700:184:28"},{"body":{"nodeType":"YulBlock","src":"23063:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23080:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23091:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23073:6:28"},"nodeType":"YulFunctionCall","src":"23073:21:28"},"nodeType":"YulExpressionStatement","src":"23073:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23114:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23125:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23110:3:28"},"nodeType":"YulFunctionCall","src":"23110:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"23130:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23103:6:28"},"nodeType":"YulFunctionCall","src":"23103:30:28"},"nodeType":"YulExpressionStatement","src":"23103:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23153:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23164:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23149:3:28"},"nodeType":"YulFunctionCall","src":"23149:18:28"},{"hexValue":"4c7a4170703a206e6f20747275737465642070617468207265636f7264","kind":"string","nodeType":"YulLiteral","src":"23169:31:28","type":"","value":"LzApp: no trusted path record"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23142:6:28"},"nodeType":"YulFunctionCall","src":"23142:59:28"},"nodeType":"YulExpressionStatement","src":"23142:59:28"},{"nodeType":"YulAssignment","src":"23210:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23222:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23233:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23218:3:28"},"nodeType":"YulFunctionCall","src":"23218:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23210:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23040:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23054:4:28","type":""}],"src":"22889:353:28"},{"body":{"nodeType":"YulBlock","src":"23421:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23438:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23449:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23431:6:28"},"nodeType":"YulFunctionCall","src":"23431:21:28"},"nodeType":"YulExpressionStatement","src":"23431:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23472:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23483:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23468:3:28"},"nodeType":"YulFunctionCall","src":"23468:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"23488:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23461:6:28"},"nodeType":"YulFunctionCall","src":"23461:29:28"},"nodeType":"YulExpressionStatement","src":"23461:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23510:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23521:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23506:3:28"},"nodeType":"YulFunctionCall","src":"23506:18:28"},{"hexValue":"5637","kind":"string","nodeType":"YulLiteral","src":"23526:4:28","type":"","value":"V7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23499:6:28"},"nodeType":"YulFunctionCall","src":"23499:32:28"},"nodeType":"YulExpressionStatement","src":"23499:32:28"},{"nodeType":"YulAssignment","src":"23540:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23552:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"23563:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23548:3:28"},"nodeType":"YulFunctionCall","src":"23548:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23540:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_342cf7819a7b9d6be88d78d5ce1c249df923b883ccee4359201419a6fc792681__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23398:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23412:4:28","type":""}],"src":"23247:325:28"},{"body":{"nodeType":"YulBlock","src":"23609:95:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23626:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23633:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"23638:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23629:3:28"},"nodeType":"YulFunctionCall","src":"23629:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23619:6:28"},"nodeType":"YulFunctionCall","src":"23619:31:28"},"nodeType":"YulExpressionStatement","src":"23619:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23666:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23669:4:28","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23659:6:28"},"nodeType":"YulFunctionCall","src":"23659:15:28"},"nodeType":"YulExpressionStatement","src":"23659:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23690:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23693:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23683:6:28"},"nodeType":"YulFunctionCall","src":"23683:15:28"},"nodeType":"YulExpressionStatement","src":"23683:15:28"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"23577:127:28"},{"body":{"nodeType":"YulBlock","src":"23762:186:28","statements":[{"body":{"nodeType":"YulBlock","src":"23804:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23825:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23832:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"23837:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23828:3:28"},"nodeType":"YulFunctionCall","src":"23828:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23818:6:28"},"nodeType":"YulFunctionCall","src":"23818:31:28"},"nodeType":"YulExpressionStatement","src":"23818:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23869:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23872:4:28","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23862:6:28"},"nodeType":"YulFunctionCall","src":"23862:15:28"},"nodeType":"YulExpressionStatement","src":"23862:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23897:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23900:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23890:6:28"},"nodeType":"YulFunctionCall","src":"23890:15:28"},"nodeType":"YulExpressionStatement","src":"23890:15:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23785:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"23792:1:28","type":"","value":"5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23782:2:28"},"nodeType":"YulFunctionCall","src":"23782:12:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23775:6:28"},"nodeType":"YulFunctionCall","src":"23775:20:28"},"nodeType":"YulIf","src":"23772:143:28"},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23931:3:28"},{"name":"value","nodeType":"YulIdentifier","src":"23936:5:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23924:6:28"},"nodeType":"YulFunctionCall","src":"23924:18:28"},"nodeType":"YulExpressionStatement","src":"23924:18:28"}]},"name":"abi_encode_enum_MessageType","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23746:5:28","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23753:3:28","type":""}],"src":"23709:239:28"},{"body":{"nodeType":"YulBlock","src":"24176:173:28","statements":[{"nodeType":"YulAssignment","src":"24186:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24198:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24209:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24194:3:28"},"nodeType":"YulFunctionCall","src":"24194:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24186:4:28"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24249:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"24257:9:28"}],"functionName":{"name":"abi_encode_enum_MessageType","nodeType":"YulIdentifier","src":"24221:27:28"},"nodeType":"YulFunctionCall","src":"24221:46:28"},"nodeType":"YulExpressionStatement","src":"24221:46:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24287:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24298:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24283:3:28"},"nodeType":"YulFunctionCall","src":"24283:18:28"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24313:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24307:5:28"},"nodeType":"YulFunctionCall","src":"24307:13:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24330:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"24335:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24326:3:28"},"nodeType":"YulFunctionCall","src":"24326:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"24339:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24322:3:28"},"nodeType":"YulFunctionCall","src":"24322:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24303:3:28"},"nodeType":"YulFunctionCall","src":"24303:39:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24276:6:28"},"nodeType":"YulFunctionCall","src":"24276:67:28"},"nodeType":"YulExpressionStatement","src":"24276:67:28"}]},"name":"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__to_t_uint8_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24137:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24148:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24156:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24167:4:28","type":""}],"src":"23953:396:28"},{"body":{"nodeType":"YulBlock","src":"24528:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24545:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24556:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24538:6:28"},"nodeType":"YulFunctionCall","src":"24538:21:28"},"nodeType":"YulExpressionStatement","src":"24538:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24579:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24590:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24575:3:28"},"nodeType":"YulFunctionCall","src":"24575:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"24595:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24568:6:28"},"nodeType":"YulFunctionCall","src":"24568:30:28"},"nodeType":"YulExpressionStatement","src":"24568:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24618:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24629:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24614:3:28"},"nodeType":"YulFunctionCall","src":"24614:18:28"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"24634:34:28","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24607:6:28"},"nodeType":"YulFunctionCall","src":"24607:62:28"},"nodeType":"YulExpressionStatement","src":"24607:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24689:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24700:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24685:3:28"},"nodeType":"YulFunctionCall","src":"24685:18:28"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"24705:7:28","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24678:6:28"},"nodeType":"YulFunctionCall","src":"24678:35:28"},"nodeType":"YulExpressionStatement","src":"24678:35:28"},{"nodeType":"YulAssignment","src":"24722:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24734:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"24745:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24730:3:28"},"nodeType":"YulFunctionCall","src":"24730:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24722:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24505:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24519:4:28","type":""}],"src":"24354:401:28"},{"body":{"nodeType":"YulBlock","src":"24935:177:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24958:3:28"},{"name":"value0","nodeType":"YulIdentifier","src":"24963:6:28"},{"name":"value1","nodeType":"YulIdentifier","src":"24971:6:28"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"24945:12:28"},"nodeType":"YulFunctionCall","src":"24945:33:28"},"nodeType":"YulExpressionStatement","src":"24945:33:28"},{"nodeType":"YulVariableDeclaration","src":"24987:26:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25001:3:28"},{"name":"value1","nodeType":"YulIdentifier","src":"25006:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24997:3:28"},"nodeType":"YulFunctionCall","src":"24997:16:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24991:2:28","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"25029:2:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25041:2:28","type":"","value":"96"},{"name":"value2","nodeType":"YulIdentifier","src":"25045:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25037:3:28"},"nodeType":"YulFunctionCall","src":"25037:15:28"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25066:2:28","type":"","value":"96"},{"kind":"number","nodeType":"YulLiteral","src":"25070:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25062:3:28"},"nodeType":"YulFunctionCall","src":"25062:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"25074:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25058:3:28"},"nodeType":"YulFunctionCall","src":"25058:18:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25054:3:28"},"nodeType":"YulFunctionCall","src":"25054:23:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25033:3:28"},"nodeType":"YulFunctionCall","src":"25033:45:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25022:6:28"},"nodeType":"YulFunctionCall","src":"25022:57:28"},"nodeType":"YulExpressionStatement","src":"25022:57:28"},{"nodeType":"YulAssignment","src":"25088:18:28","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"25099:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"25103:2:28","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25095:3:28"},"nodeType":"YulFunctionCall","src":"25095:11:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25088:3:28"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address__to_t_bytes_memory_ptr_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24895:3:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24900:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24908:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24916:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24927:3:28","type":""}],"src":"24760:352:28"},{"body":{"nodeType":"YulBlock","src":"25172:65:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25189:1:28","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"25192:3:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25182:6:28"},"nodeType":"YulFunctionCall","src":"25182:14:28"},"nodeType":"YulExpressionStatement","src":"25182:14:28"},{"nodeType":"YulAssignment","src":"25205:26:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25223:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25226:4:28","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"25213:9:28"},"nodeType":"YulFunctionCall","src":"25213:18:28"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25205:4:28"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"25155:3:28","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"25163:4:28","type":""}],"src":"25117:120:28"},{"body":{"nodeType":"YulBlock","src":"25322:464:28","statements":[{"body":{"nodeType":"YulBlock","src":"25355:425:28","statements":[{"nodeType":"YulVariableDeclaration","src":"25369:11:28","value":{"kind":"number","nodeType":"YulLiteral","src":"25379:1:28","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"25373:2:28","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"25400:2:28"},{"name":"array","nodeType":"YulIdentifier","src":"25404:5:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25393:6:28"},"nodeType":"YulFunctionCall","src":"25393:17:28"},"nodeType":"YulExpressionStatement","src":"25393:17:28"},{"nodeType":"YulVariableDeclaration","src":"25423:31:28","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"25445:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"25449:4:28","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"25435:9:28"},"nodeType":"YulFunctionCall","src":"25435:19:28"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"25427:4:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25467:57:28","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25490:4:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25500:1:28","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"25507:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"25519:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25503:3:28"},"nodeType":"YulFunctionCall","src":"25503:19:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25496:3:28"},"nodeType":"YulFunctionCall","src":"25496:27:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25486:3:28"},"nodeType":"YulFunctionCall","src":"25486:38:28"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"25471:11:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"25561:23:28","statements":[{"nodeType":"YulAssignment","src":"25563:19:28","value":{"name":"data","nodeType":"YulIdentifier","src":"25578:4:28"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"25563:11:28"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"25543:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"25555:4:28","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25540:2:28"},"nodeType":"YulFunctionCall","src":"25540:20:28"},"nodeType":"YulIf","src":"25537:47:28"},{"nodeType":"YulVariableDeclaration","src":"25597:41:28","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25611:4:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25621:1:28","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"25628:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"25633:2:28","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25624:3:28"},"nodeType":"YulFunctionCall","src":"25624:12:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25617:3:28"},"nodeType":"YulFunctionCall","src":"25617:20:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25607:3:28"},"nodeType":"YulFunctionCall","src":"25607:31:28"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"25601:2:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25651:24:28","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"25664:11:28"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"25655:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"25749:21:28","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25758:5:28"},{"name":"_1","nodeType":"YulIdentifier","src":"25765:2:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"25751:6:28"},"nodeType":"YulFunctionCall","src":"25751:17:28"},"nodeType":"YulExpressionStatement","src":"25751:17:28"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25699:5:28"},{"name":"_2","nodeType":"YulIdentifier","src":"25706:2:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25696:2:28"},"nodeType":"YulFunctionCall","src":"25696:13:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25710:26:28","statements":[{"nodeType":"YulAssignment","src":"25712:22:28","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25725:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"25732:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25721:3:28"},"nodeType":"YulFunctionCall","src":"25721:13:28"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"25712:5:28"}]}]},"pre":{"nodeType":"YulBlock","src":"25692:3:28","statements":[]},"src":"25688:82:28"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"25338:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"25343:2:28","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25335:2:28"},"nodeType":"YulFunctionCall","src":"25335:11:28"},"nodeType":"YulIf","src":"25332:448:28"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"25294:5:28","type":""},{"name":"len","nodeType":"YulTypedName","src":"25301:3:28","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"25306:10:28","type":""}],"src":"25242:544:28"},{"body":{"nodeType":"YulBlock","src":"25876:81:28","statements":[{"nodeType":"YulAssignment","src":"25886:65:28","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25901:4:28"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25919:1:28","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"25922:3:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25915:3:28"},"nodeType":"YulFunctionCall","src":"25915:11:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25932:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25928:3:28"},"nodeType":"YulFunctionCall","src":"25928:6:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25911:3:28"},"nodeType":"YulFunctionCall","src":"25911:24:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25907:3:28"},"nodeType":"YulFunctionCall","src":"25907:29:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25897:3:28"},"nodeType":"YulFunctionCall","src":"25897:40:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25943:1:28","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"25946:3:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25939:3:28"},"nodeType":"YulFunctionCall","src":"25939:11:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25894:2:28"},"nodeType":"YulFunctionCall","src":"25894:57:28"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"25886:4:28"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"25853:4:28","type":""},{"name":"len","nodeType":"YulTypedName","src":"25859:3:28","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"25867:4:28","type":""}],"src":"25791:166:28"},{"body":{"nodeType":"YulBlock","src":"26056:1254:28","statements":[{"nodeType":"YulVariableDeclaration","src":"26066:24:28","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26086:3:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26080:5:28"},"nodeType":"YulFunctionCall","src":"26080:10:28"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"26070:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"26133:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"26135:16:28"},"nodeType":"YulFunctionCall","src":"26135:18:28"},"nodeType":"YulExpressionStatement","src":"26135:18:28"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"26105:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26121:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"26125:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26117:3:28"},"nodeType":"YulFunctionCall","src":"26117:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"26129:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26113:3:28"},"nodeType":"YulFunctionCall","src":"26113:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26102:2:28"},"nodeType":"YulFunctionCall","src":"26102:30:28"},"nodeType":"YulIf","src":"26099:56:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26207:4:28"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26245:4:28"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26239:5:28"},"nodeType":"YulFunctionCall","src":"26239:11:28"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"26213:25:28"},"nodeType":"YulFunctionCall","src":"26213:38:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"26253:6:28"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"26164:42:28"},"nodeType":"YulFunctionCall","src":"26164:96:28"},"nodeType":"YulExpressionStatement","src":"26164:96:28"},{"nodeType":"YulVariableDeclaration","src":"26269:18:28","value":{"kind":"number","nodeType":"YulLiteral","src":"26286:1:28","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"26273:9:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26296:23:28","value":{"kind":"number","nodeType":"YulLiteral","src":"26315:4:28","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"26300:11:28","type":""}]},{"nodeType":"YulAssignment","src":"26328:24:28","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"26341:11:28"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"26328:9:28"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"26398:655:28","statements":[{"nodeType":"YulVariableDeclaration","src":"26412:35:28","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"26431:6:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26443:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26439:3:28"},"nodeType":"YulFunctionCall","src":"26439:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26427:3:28"},"nodeType":"YulFunctionCall","src":"26427:20:28"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"26416:7:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26460:48:28","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26503:4:28"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"26474:28:28"},"nodeType":"YulFunctionCall","src":"26474:34:28"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"26464:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26521:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"26530:1:28","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"26525:1:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"26608:172:28","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26633:6:28"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26651:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"26656:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26647:3:28"},"nodeType":"YulFunctionCall","src":"26647:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26641:5:28"},"nodeType":"YulFunctionCall","src":"26641:26:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"26626:6:28"},"nodeType":"YulFunctionCall","src":"26626:42:28"},"nodeType":"YulExpressionStatement","src":"26626:42:28"},{"nodeType":"YulAssignment","src":"26685:24:28","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26699:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"26707:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26695:3:28"},"nodeType":"YulFunctionCall","src":"26695:14:28"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26685:6:28"}]},{"nodeType":"YulAssignment","src":"26726:40:28","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"26743:9:28"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"26754:11:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26739:3:28"},"nodeType":"YulFunctionCall","src":"26739:27:28"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"26726:9:28"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26555:1:28"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"26558:7:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26552:2:28"},"nodeType":"YulFunctionCall","src":"26552:14:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"26567:28:28","statements":[{"nodeType":"YulAssignment","src":"26569:24:28","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26578:1:28"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"26581:11:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26574:3:28"},"nodeType":"YulFunctionCall","src":"26574:19:28"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"26569:1:28"}]}]},"pre":{"nodeType":"YulBlock","src":"26548:3:28","statements":[]},"src":"26544:236:28"},{"body":{"nodeType":"YulBlock","src":"26828:166:28","statements":[{"nodeType":"YulVariableDeclaration","src":"26846:43:28","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26873:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"26878:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26869:3:28"},"nodeType":"YulFunctionCall","src":"26869:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26863:5:28"},"nodeType":"YulFunctionCall","src":"26863:26:28"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"26850:9:28","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26913:6:28"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"26925:9:28"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26952:1:28","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"26955:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26948:3:28"},"nodeType":"YulFunctionCall","src":"26948:14:28"},{"kind":"number","nodeType":"YulLiteral","src":"26964:3:28","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26944:3:28"},"nodeType":"YulFunctionCall","src":"26944:24:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26974:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26970:3:28"},"nodeType":"YulFunctionCall","src":"26970:6:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"26940:3:28"},"nodeType":"YulFunctionCall","src":"26940:37:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26936:3:28"},"nodeType":"YulFunctionCall","src":"26936:42:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26921:3:28"},"nodeType":"YulFunctionCall","src":"26921:58:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"26906:6:28"},"nodeType":"YulFunctionCall","src":"26906:74:28"},"nodeType":"YulExpressionStatement","src":"26906:74:28"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"26799:7:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"26808:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26796:2:28"},"nodeType":"YulFunctionCall","src":"26796:19:28"},"nodeType":"YulIf","src":"26793:201:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27014:4:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27028:1:28","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"27031:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"27024:3:28"},"nodeType":"YulFunctionCall","src":"27024:14:28"},{"kind":"number","nodeType":"YulLiteral","src":"27040:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27020:3:28"},"nodeType":"YulFunctionCall","src":"27020:22:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27007:6:28"},"nodeType":"YulFunctionCall","src":"27007:36:28"},"nodeType":"YulExpressionStatement","src":"27007:36:28"}]},"nodeType":"YulCase","src":"26391:662:28","value":{"kind":"number","nodeType":"YulLiteral","src":"26396:1:28","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"27070:234:28","statements":[{"nodeType":"YulVariableDeclaration","src":"27084:14:28","value":{"kind":"number","nodeType":"YulLiteral","src":"27097:1:28","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"27088:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"27133:67:28","statements":[{"nodeType":"YulAssignment","src":"27151:35:28","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27170:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27175:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27166:3:28"},"nodeType":"YulFunctionCall","src":"27166:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27160:5:28"},"nodeType":"YulFunctionCall","src":"27160:26:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27151:5:28"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"27114:6:28"},"nodeType":"YulIf","src":"27111:89:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27220:4:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27279:5:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"27286:6:28"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"27226:52:28"},"nodeType":"YulFunctionCall","src":"27226:67:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27213:6:28"},"nodeType":"YulFunctionCall","src":"27213:81:28"},"nodeType":"YulExpressionStatement","src":"27213:81:28"}]},"nodeType":"YulCase","src":"27062:242:28","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"26371:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"26379:2:28","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26368:2:28"},"nodeType":"YulFunctionCall","src":"26368:14:28"},"nodeType":"YulSwitch","src":"26361:943:28"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"26041:4:28","type":""},{"name":"src","nodeType":"YulTypedName","src":"26047:3:28","type":""}],"src":"25962:1348:28"},{"body":{"nodeType":"YulBlock","src":"27489:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27506:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27517:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27499:6:28"},"nodeType":"YulFunctionCall","src":"27499:21:28"},"nodeType":"YulExpressionStatement","src":"27499:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27540:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27551:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27536:3:28"},"nodeType":"YulFunctionCall","src":"27536:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"27556:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27529:6:28"},"nodeType":"YulFunctionCall","src":"27529:29:28"},"nodeType":"YulExpressionStatement","src":"27529:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27578:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27589:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27574:3:28"},"nodeType":"YulFunctionCall","src":"27574:18:28"},{"hexValue":"5638","kind":"string","nodeType":"YulLiteral","src":"27594:4:28","type":"","value":"V8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27567:6:28"},"nodeType":"YulFunctionCall","src":"27567:32:28"},"nodeType":"YulExpressionStatement","src":"27567:32:28"},{"nodeType":"YulAssignment","src":"27608:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27620:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27631:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27616:3:28"},"nodeType":"YulFunctionCall","src":"27616:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27608:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_b46a90f4b21e2dde8c773cf0c4d328fc87a1de68dc62806dc5c03b501b10e8c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27466:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27480:4:28","type":""}],"src":"27315:325:28"},{"body":{"nodeType":"YulBlock","src":"27819:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27836:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27847:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27829:6:28"},"nodeType":"YulFunctionCall","src":"27829:21:28"},"nodeType":"YulExpressionStatement","src":"27829:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27870:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27881:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27866:3:28"},"nodeType":"YulFunctionCall","src":"27866:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"27886:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27859:6:28"},"nodeType":"YulFunctionCall","src":"27859:29:28"},"nodeType":"YulExpressionStatement","src":"27859:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27908:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27919:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27904:3:28"},"nodeType":"YulFunctionCall","src":"27904:18:28"},{"hexValue":"5639","kind":"string","nodeType":"YulLiteral","src":"27924:4:28","type":"","value":"V9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27897:6:28"},"nodeType":"YulFunctionCall","src":"27897:32:28"},"nodeType":"YulExpressionStatement","src":"27897:32:28"},{"nodeType":"YulAssignment","src":"27938:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27950:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"27961:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27946:3:28"},"nodeType":"YulFunctionCall","src":"27946:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27938:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c17c46a066c2510546b70bc409727a4e4af3fc7d2ba2247252fb8067cfbd3da4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27796:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27810:4:28","type":""}],"src":"27645:325:28"},{"body":{"nodeType":"YulBlock","src":"28112:150:28","statements":[{"nodeType":"YulVariableDeclaration","src":"28122:27:28","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28142:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28136:5:28"},"nodeType":"YulFunctionCall","src":"28136:13:28"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28126:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28197:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"28205:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28193:3:28"},"nodeType":"YulFunctionCall","src":"28193:17:28"},{"name":"pos","nodeType":"YulIdentifier","src":"28212:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"28217:6:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"28158:34:28"},"nodeType":"YulFunctionCall","src":"28158:66:28"},"nodeType":"YulExpressionStatement","src":"28158:66:28"},{"nodeType":"YulAssignment","src":"28233:23:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28244:3:28"},{"name":"length","nodeType":"YulIdentifier","src":"28249:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28240:3:28"},"nodeType":"YulFunctionCall","src":"28240:16:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28233:3:28"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28088:3:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28093:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28104:3:28","type":""}],"src":"27975:287:28"},{"body":{"nodeType":"YulBlock","src":"28361:273:28","statements":[{"nodeType":"YulVariableDeclaration","src":"28371:26:28","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"28391:5:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28385:5:28"},"nodeType":"YulFunctionCall","src":"28385:12:28"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28375:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28406:33:28","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"28426:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"28433:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28422:3:28"},"nodeType":"YulFunctionCall","src":"28422:16:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28416:5:28"},"nodeType":"YulFunctionCall","src":"28416:23:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"28410:2:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28448:33:28","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28470:2:28","type":"","value":"96"},{"kind":"number","nodeType":"YulLiteral","src":"28474:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28466:3:28"},"nodeType":"YulFunctionCall","src":"28466:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"28478:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28462:3:28"},"nodeType":"YulFunctionCall","src":"28462:18:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"28458:3:28"},"nodeType":"YulFunctionCall","src":"28458:23:28"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"28452:2:28","type":""}]},{"nodeType":"YulAssignment","src":"28490:20:28","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"28503:2:28"},{"name":"_2","nodeType":"YulIdentifier","src":"28507:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28499:3:28"},"nodeType":"YulFunctionCall","src":"28499:11:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28490:5:28"}]},{"body":{"nodeType":"YulBlock","src":"28545:83:28","statements":[{"nodeType":"YulAssignment","src":"28559:59:28","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"28576:2:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28588:1:28","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28595:2:28","type":"","value":"20"},{"name":"length","nodeType":"YulIdentifier","src":"28599:6:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28591:3:28"},"nodeType":"YulFunctionCall","src":"28591:15:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28584:3:28"},"nodeType":"YulFunctionCall","src":"28584:23:28"},{"name":"_2","nodeType":"YulIdentifier","src":"28609:2:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28580:3:28"},"nodeType":"YulFunctionCall","src":"28580:32:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28572:3:28"},"nodeType":"YulFunctionCall","src":"28572:41:28"},{"name":"_2","nodeType":"YulIdentifier","src":"28615:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28568:3:28"},"nodeType":"YulFunctionCall","src":"28568:50:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28559:5:28"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28525:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"28533:2:28","type":"","value":"20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28522:2:28"},"nodeType":"YulFunctionCall","src":"28522:14:28"},"nodeType":"YulIf","src":"28519:109:28"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"28341:5:28","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"28351:5:28","type":""}],"src":"28267:367:28"},{"body":{"nodeType":"YulBlock","src":"28768:145:28","statements":[{"nodeType":"YulAssignment","src":"28778:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28790:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"28801:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28786:3:28"},"nodeType":"YulFunctionCall","src":"28786:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28778:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28820:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"28831:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28813:6:28"},"nodeType":"YulFunctionCall","src":"28813:25:28"},"nodeType":"YulExpressionStatement","src":"28813:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28858:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"28869:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28854:3:28"},"nodeType":"YulFunctionCall","src":"28854:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28878:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28894:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"28899:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28890:3:28"},"nodeType":"YulFunctionCall","src":"28890:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"28903:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28886:3:28"},"nodeType":"YulFunctionCall","src":"28886:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28874:3:28"},"nodeType":"YulFunctionCall","src":"28874:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28847:6:28"},"nodeType":"YulFunctionCall","src":"28847:60:28"},"nodeType":"YulExpressionStatement","src":"28847:60:28"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28729:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28740:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28748:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28759:4:28","type":""}],"src":"28639:274:28"},{"body":{"nodeType":"YulBlock","src":"29127:289:28","statements":[{"nodeType":"YulVariableDeclaration","src":"29137:16:28","value":{"kind":"number","nodeType":"YulLiteral","src":"29147:6:28","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"29141:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29169:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29184:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"29192:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29180:3:28"},"nodeType":"YulFunctionCall","src":"29180:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29162:6:28"},"nodeType":"YulFunctionCall","src":"29162:34:28"},"nodeType":"YulExpressionStatement","src":"29162:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29216:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29227:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29212:3:28"},"nodeType":"YulFunctionCall","src":"29212:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29236:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"29244:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29232:3:28"},"nodeType":"YulFunctionCall","src":"29232:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29205:6:28"},"nodeType":"YulFunctionCall","src":"29205:43:28"},"nodeType":"YulExpressionStatement","src":"29205:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29268:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29279:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29264:3:28"},"nodeType":"YulFunctionCall","src":"29264:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"29284:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29257:6:28"},"nodeType":"YulFunctionCall","src":"29257:34:28"},"nodeType":"YulExpressionStatement","src":"29257:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29311:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29322:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29307:3:28"},"nodeType":"YulFunctionCall","src":"29307:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"29327:3:28","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29300:6:28"},"nodeType":"YulFunctionCall","src":"29300:31:28"},"nodeType":"YulExpressionStatement","src":"29300:31:28"},{"nodeType":"YulAssignment","src":"29340:70:28","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29374:6:28"},{"name":"value4","nodeType":"YulIdentifier","src":"29382:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29394:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29405:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29390:3:28"},"nodeType":"YulFunctionCall","src":"29390:19:28"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"29348:25:28"},"nodeType":"YulFunctionCall","src":"29348:62:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29340:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint256_t_bytes_calldata_ptr__to_t_uint16_t_uint16_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29064:9:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29075:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29083:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29091:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29099:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29107:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29118:4:28","type":""}],"src":"28918:498:28"},{"body":{"nodeType":"YulBlock","src":"29595:225:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29612:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29623:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29605:6:28"},"nodeType":"YulFunctionCall","src":"29605:21:28"},"nodeType":"YulExpressionStatement","src":"29605:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29646:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29657:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29642:3:28"},"nodeType":"YulFunctionCall","src":"29642:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"29662:2:28","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29635:6:28"},"nodeType":"YulFunctionCall","src":"29635:30:28"},"nodeType":"YulExpressionStatement","src":"29635:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29685:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29696:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29681:3:28"},"nodeType":"YulFunctionCall","src":"29681:18:28"},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d657373","kind":"string","nodeType":"YulLiteral","src":"29701:34:28","type":"","value":"NonblockingLzApp: no stored mess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29674:6:28"},"nodeType":"YulFunctionCall","src":"29674:62:28"},"nodeType":"YulExpressionStatement","src":"29674:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29756:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29767:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29752:3:28"},"nodeType":"YulFunctionCall","src":"29752:18:28"},{"hexValue":"616765","kind":"string","nodeType":"YulLiteral","src":"29772:5:28","type":"","value":"age"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29745:6:28"},"nodeType":"YulFunctionCall","src":"29745:33:28"},"nodeType":"YulExpressionStatement","src":"29745:33:28"},{"nodeType":"YulAssignment","src":"29787:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29799:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"29810:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29795:3:28"},"nodeType":"YulFunctionCall","src":"29795:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29787:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29572:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29586:4:28","type":""}],"src":"29421:399:28"},{"body":{"nodeType":"YulBlock","src":"29999:223:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30016:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30027:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30009:6:28"},"nodeType":"YulFunctionCall","src":"30009:21:28"},"nodeType":"YulExpressionStatement","src":"30009:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30050:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30061:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30046:3:28"},"nodeType":"YulFunctionCall","src":"30046:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"30066:2:28","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30039:6:28"},"nodeType":"YulFunctionCall","src":"30039:30:28"},"nodeType":"YulExpressionStatement","src":"30039:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30089:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30100:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30085:3:28"},"nodeType":"YulFunctionCall","src":"30085:18:28"},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f61","kind":"string","nodeType":"YulLiteral","src":"30105:34:28","type":"","value":"NonblockingLzApp: invalid payloa"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30078:6:28"},"nodeType":"YulFunctionCall","src":"30078:62:28"},"nodeType":"YulExpressionStatement","src":"30078:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30160:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30171:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30156:3:28"},"nodeType":"YulFunctionCall","src":"30156:18:28"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"30176:3:28","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30149:6:28"},"nodeType":"YulFunctionCall","src":"30149:31:28"},"nodeType":"YulExpressionStatement","src":"30149:31:28"},{"nodeType":"YulAssignment","src":"30189:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30201:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30212:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30197:3:28"},"nodeType":"YulFunctionCall","src":"30197:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30189:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29976:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29990:4:28","type":""}],"src":"29825:397:28"},{"body":{"nodeType":"YulBlock","src":"30436:284:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30453:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30468:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"30476:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30464:3:28"},"nodeType":"YulFunctionCall","src":"30464:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30446:6:28"},"nodeType":"YulFunctionCall","src":"30446:38:28"},"nodeType":"YulExpressionStatement","src":"30446:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30504:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30515:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30500:3:28"},"nodeType":"YulFunctionCall","src":"30500:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"30520:3:28","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30493:6:28"},"nodeType":"YulFunctionCall","src":"30493:31:28"},"nodeType":"YulExpressionStatement","src":"30493:31:28"},{"nodeType":"YulAssignment","src":"30533:70:28","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30567:6:28"},{"name":"value2","nodeType":"YulIdentifier","src":"30575:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30587:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30598:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30583:3:28"},"nodeType":"YulFunctionCall","src":"30583:19:28"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"30541:25:28"},"nodeType":"YulFunctionCall","src":"30541:62:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30533:4:28"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30623:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30634:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30619:3:28"},"nodeType":"YulFunctionCall","src":"30619:18:28"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30643:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30659:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"30663:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"30655:3:28"},"nodeType":"YulFunctionCall","src":"30655:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"30667:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30651:3:28"},"nodeType":"YulFunctionCall","src":"30651:18:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30639:3:28"},"nodeType":"YulFunctionCall","src":"30639:31:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30612:6:28"},"nodeType":"YulFunctionCall","src":"30612:59:28"},"nodeType":"YulExpressionStatement","src":"30612:59:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30691:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30702:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30687:3:28"},"nodeType":"YulFunctionCall","src":"30687:18:28"},{"name":"value4","nodeType":"YulIdentifier","src":"30707:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30680:6:28"},"nodeType":"YulFunctionCall","src":"30680:34:28"},"nodeType":"YulExpressionStatement","src":"30680:34:28"}]},"name":"abi_encode_tuple_t_uint16_t_bytes_calldata_ptr_t_uint64_t_bytes32__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30373:9:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"30384:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"30392:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"30400:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30408:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30416:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30427:4:28","type":""}],"src":"30227:493:28"},{"body":{"nodeType":"YulBlock","src":"30899:171:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30916:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30927:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30909:6:28"},"nodeType":"YulFunctionCall","src":"30909:21:28"},"nodeType":"YulExpressionStatement","src":"30909:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30950:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"30961:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30946:3:28"},"nodeType":"YulFunctionCall","src":"30946:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"30966:2:28","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30939:6:28"},"nodeType":"YulFunctionCall","src":"30939:30:28"},"nodeType":"YulExpressionStatement","src":"30939:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30989:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"31000:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30985:3:28"},"nodeType":"YulFunctionCall","src":"30985:18:28"},{"hexValue":"4c7a4170703a20696e76616c6964206d696e476173","kind":"string","nodeType":"YulLiteral","src":"31005:23:28","type":"","value":"LzApp: invalid minGas"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30978:6:28"},"nodeType":"YulFunctionCall","src":"30978:51:28"},"nodeType":"YulExpressionStatement","src":"30978:51:28"},{"nodeType":"YulAssignment","src":"31038:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31050:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"31061:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31046:3:28"},"nodeType":"YulFunctionCall","src":"31046:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31038:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30876:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30890:4:28","type":""}],"src":"30725:345:28"},{"body":{"nodeType":"YulBlock","src":"31228:205:28","statements":[{"nodeType":"YulAssignment","src":"31238:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31250:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"31261:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31246:3:28"},"nodeType":"YulFunctionCall","src":"31246:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31238:4:28"}]},{"nodeType":"YulVariableDeclaration","src":"31273:16:28","value":{"kind":"number","nodeType":"YulLiteral","src":"31283:6:28","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"31277:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31305:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31320:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"31328:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31316:3:28"},"nodeType":"YulFunctionCall","src":"31316:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31298:6:28"},"nodeType":"YulFunctionCall","src":"31298:34:28"},"nodeType":"YulExpressionStatement","src":"31298:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31352:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"31363:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31348:3:28"},"nodeType":"YulFunctionCall","src":"31348:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"31372:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"31380:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31368:3:28"},"nodeType":"YulFunctionCall","src":"31368:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31341:6:28"},"nodeType":"YulFunctionCall","src":"31341:43:28"},"nodeType":"YulExpressionStatement","src":"31341:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31404:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"31415:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31400:3:28"},"nodeType":"YulFunctionCall","src":"31400:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"31420:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31393:6:28"},"nodeType":"YulFunctionCall","src":"31393:34:28"},"nodeType":"YulExpressionStatement","src":"31393:34:28"}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint256__to_t_uint16_t_uint16_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31181:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"31192:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"31200:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31208:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31219:4:28","type":""}],"src":"31075:358:28"},{"body":{"nodeType":"YulBlock","src":"31539:1101:28","statements":[{"body":{"nodeType":"YulBlock","src":"31580:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"31582:16:28"},"nodeType":"YulFunctionCall","src":"31582:18:28"},"nodeType":"YulExpressionStatement","src":"31582:18:28"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"31555:3:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31568:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"31572:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31564:3:28"},"nodeType":"YulFunctionCall","src":"31564:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"31576:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31560:3:28"},"nodeType":"YulFunctionCall","src":"31560:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31552:2:28"},"nodeType":"YulFunctionCall","src":"31552:27:28"},"nodeType":"YulIf","src":"31549:53:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31654:4:28"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31692:4:28"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"31686:5:28"},"nodeType":"YulFunctionCall","src":"31686:11:28"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"31660:25:28"},"nodeType":"YulFunctionCall","src":"31660:38:28"},{"name":"len","nodeType":"YulIdentifier","src":"31700:3:28"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"31611:42:28"},"nodeType":"YulFunctionCall","src":"31611:93:28"},"nodeType":"YulExpressionStatement","src":"31611:93:28"},{"nodeType":"YulVariableDeclaration","src":"31713:18:28","value":{"kind":"number","nodeType":"YulLiteral","src":"31730:1:28","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"31717:9:28","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"31774:608:28","statements":[{"nodeType":"YulVariableDeclaration","src":"31788:32:28","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"31807:3:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31816:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31812:3:28"},"nodeType":"YulFunctionCall","src":"31812:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31803:3:28"},"nodeType":"YulFunctionCall","src":"31803:17:28"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"31792:7:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31833:48:28","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31876:4:28"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"31847:28:28"},"nodeType":"YulFunctionCall","src":"31847:34:28"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"31837:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31894:18:28","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"31903:9:28"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"31898:1:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"31982:172:28","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32007:6:28"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32032:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32037:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32028:3:28"},"nodeType":"YulFunctionCall","src":"32028:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"32015:12:28"},"nodeType":"YulFunctionCall","src":"32015:33:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32000:6:28"},"nodeType":"YulFunctionCall","src":"32000:49:28"},"nodeType":"YulExpressionStatement","src":"32000:49:28"},{"nodeType":"YulAssignment","src":"32066:24:28","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32080:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"32088:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32076:3:28"},"nodeType":"YulFunctionCall","src":"32076:14:28"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32066:6:28"}]},{"nodeType":"YulAssignment","src":"32107:33:28","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"32124:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"32135:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32120:3:28"},"nodeType":"YulFunctionCall","src":"32120:20:28"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"32107:9:28"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31936:1:28"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"31939:7:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31933:2:28"},"nodeType":"YulFunctionCall","src":"31933:14:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"31948:21:28","statements":[{"nodeType":"YulAssignment","src":"31950:17:28","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31959:1:28"},{"kind":"number","nodeType":"YulLiteral","src":"31962:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31955:3:28"},"nodeType":"YulFunctionCall","src":"31955:12:28"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"31950:1:28"}]}]},"pre":{"nodeType":"YulBlock","src":"31929:3:28","statements":[]},"src":"31925:229:28"},{"body":{"nodeType":"YulBlock","src":"32199:127:28","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32224:6:28"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32253:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32258:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32249:3:28"},"nodeType":"YulFunctionCall","src":"32249:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"32236:12:28"},"nodeType":"YulFunctionCall","src":"32236:33:28"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32287:1:28","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"32290:3:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"32283:3:28"},"nodeType":"YulFunctionCall","src":"32283:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"32296:3:28","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32279:3:28"},"nodeType":"YulFunctionCall","src":"32279:21:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32306:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32302:3:28"},"nodeType":"YulFunctionCall","src":"32302:6:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"32275:3:28"},"nodeType":"YulFunctionCall","src":"32275:34:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32271:3:28"},"nodeType":"YulFunctionCall","src":"32271:39:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32232:3:28"},"nodeType":"YulFunctionCall","src":"32232:79:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32217:6:28"},"nodeType":"YulFunctionCall","src":"32217:95:28"},"nodeType":"YulExpressionStatement","src":"32217:95:28"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"32173:7:28"},{"name":"len","nodeType":"YulIdentifier","src":"32182:3:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32170:2:28"},"nodeType":"YulFunctionCall","src":"32170:16:28"},"nodeType":"YulIf","src":"32167:159:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32346:4:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32360:1:28","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"32363:3:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"32356:3:28"},"nodeType":"YulFunctionCall","src":"32356:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"32369:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32352:3:28"},"nodeType":"YulFunctionCall","src":"32352:19:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32339:6:28"},"nodeType":"YulFunctionCall","src":"32339:33:28"},"nodeType":"YulExpressionStatement","src":"32339:33:28"}]},"nodeType":"YulCase","src":"31767:615:28","value":{"kind":"number","nodeType":"YulLiteral","src":"31772:1:28","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"32399:235:28","statements":[{"nodeType":"YulVariableDeclaration","src":"32413:14:28","value":{"kind":"number","nodeType":"YulLiteral","src":"32426:1:28","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"32417:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"32459:74:28","statements":[{"nodeType":"YulAssignment","src":"32477:42:28","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32503:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32508:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32499:3:28"},"nodeType":"YulFunctionCall","src":"32499:19:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"32486:12:28"},"nodeType":"YulFunctionCall","src":"32486:33:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32477:5:28"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"32443:3:28"},"nodeType":"YulIf","src":"32440:93:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32553:4:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32612:5:28"},{"name":"len","nodeType":"YulIdentifier","src":"32619:3:28"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"32559:52:28"},"nodeType":"YulFunctionCall","src":"32559:64:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32546:6:28"},"nodeType":"YulFunctionCall","src":"32546:78:28"},"nodeType":"YulExpressionStatement","src":"32546:78:28"}]},"nodeType":"YulCase","src":"32391:243:28","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"31750:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"31755:2:28","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31747:2:28"},"nodeType":"YulFunctionCall","src":"31747:11:28"},"nodeType":"YulSwitch","src":"31740:894:28"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"31519:4:28","type":""},{"name":"src","nodeType":"YulTypedName","src":"31525:3:28","type":""},{"name":"len","nodeType":"YulTypedName","src":"31530:3:28","type":""}],"src":"31438:1202:28"},{"body":{"nodeType":"YulBlock","src":"32819:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32836:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"32847:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32829:6:28"},"nodeType":"YulFunctionCall","src":"32829:21:28"},"nodeType":"YulExpressionStatement","src":"32829:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32870:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"32881:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32866:3:28"},"nodeType":"YulFunctionCall","src":"32866:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"32886:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32859:6:28"},"nodeType":"YulFunctionCall","src":"32859:29:28"},"nodeType":"YulExpressionStatement","src":"32859:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32908:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"32919:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32904:3:28"},"nodeType":"YulFunctionCall","src":"32904:18:28"},{"hexValue":"5634","kind":"string","nodeType":"YulLiteral","src":"32924:4:28","type":"","value":"V4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32897:6:28"},"nodeType":"YulFunctionCall","src":"32897:32:28"},"nodeType":"YulExpressionStatement","src":"32897:32:28"},{"nodeType":"YulAssignment","src":"32938:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32950:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"32961:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32946:3:28"},"nodeType":"YulFunctionCall","src":"32946:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32938:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_936a052e832d05db833c1fb152ee9d04cb963f54db694a4cc58e037932bdbf61__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32796:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32810:4:28","type":""}],"src":"32645:325:28"},{"body":{"nodeType":"YulBlock","src":"33007:95:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33024:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33031:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"33036:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"33027:3:28"},"nodeType":"YulFunctionCall","src":"33027:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33017:6:28"},"nodeType":"YulFunctionCall","src":"33017:31:28"},"nodeType":"YulExpressionStatement","src":"33017:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33064:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33067:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33057:6:28"},"nodeType":"YulFunctionCall","src":"33057:15:28"},"nodeType":"YulExpressionStatement","src":"33057:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33088:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33091:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33081:6:28"},"nodeType":"YulFunctionCall","src":"33081:15:28"},"nodeType":"YulExpressionStatement","src":"33081:15:28"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"32975:127:28"},{"body":{"nodeType":"YulBlock","src":"33154:88:28","statements":[{"body":{"nodeType":"YulBlock","src":"33185:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"33187:16:28"},"nodeType":"YulFunctionCall","src":"33187:18:28"},"nodeType":"YulExpressionStatement","src":"33187:18:28"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33170:5:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33181:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33177:3:28"},"nodeType":"YulFunctionCall","src":"33177:6:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33167:2:28"},"nodeType":"YulFunctionCall","src":"33167:17:28"},"nodeType":"YulIf","src":"33164:43:28"},{"nodeType":"YulAssignment","src":"33216:20:28","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33227:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"33234:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33223:3:28"},"nodeType":"YulFunctionCall","src":"33223:13:28"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33216:3:28"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33136:5:28","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33146:3:28","type":""}],"src":"33107:135:28"},{"body":{"nodeType":"YulBlock","src":"33464:206:28","statements":[{"nodeType":"YulAssignment","src":"33474:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33486:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33497:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33482:3:28"},"nodeType":"YulFunctionCall","src":"33482:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33474:4:28"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33537:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"33545:9:28"}],"functionName":{"name":"abi_encode_enum_MessageType","nodeType":"YulIdentifier","src":"33509:27:28"},"nodeType":"YulFunctionCall","src":"33509:46:28"},"nodeType":"YulExpressionStatement","src":"33509:46:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33575:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33586:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33571:3:28"},"nodeType":"YulFunctionCall","src":"33571:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33597:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33591:5:28"},"nodeType":"YulFunctionCall","src":"33591:13:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33564:6:28"},"nodeType":"YulFunctionCall","src":"33564:41:28"},"nodeType":"YulExpressionStatement","src":"33564:41:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33625:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33636:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33621:3:28"},"nodeType":"YulFunctionCall","src":"33621:18:28"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33651:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"33659:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33647:3:28"},"nodeType":"YulFunctionCall","src":"33647:15:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33641:5:28"},"nodeType":"YulFunctionCall","src":"33641:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33614:6:28"},"nodeType":"YulFunctionCall","src":"33614:50:28"},"nodeType":"YulExpressionStatement","src":"33614:50:28"}]},"name":"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__to_t_uint8_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33425:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33436:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33444:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33455:4:28","type":""}],"src":"33247:423:28"},{"body":{"nodeType":"YulBlock","src":"33849:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33866:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33877:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33859:6:28"},"nodeType":"YulFunctionCall","src":"33859:21:28"},"nodeType":"YulExpressionStatement","src":"33859:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33900:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33911:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33896:3:28"},"nodeType":"YulFunctionCall","src":"33896:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"33916:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33889:6:28"},"nodeType":"YulFunctionCall","src":"33889:30:28"},"nodeType":"YulExpressionStatement","src":"33889:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33939:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"33950:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33935:3:28"},"nodeType":"YulFunctionCall","src":"33935:18:28"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"33955:34:28","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33928:6:28"},"nodeType":"YulFunctionCall","src":"33928:62:28"},"nodeType":"YulExpressionStatement","src":"33928:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34010:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34021:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34006:3:28"},"nodeType":"YulFunctionCall","src":"34006:18:28"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"34026:8:28","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33999:6:28"},"nodeType":"YulFunctionCall","src":"33999:36:28"},"nodeType":"YulExpressionStatement","src":"33999:36:28"},{"nodeType":"YulAssignment","src":"34044:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34056:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34067:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34052:3:28"},"nodeType":"YulFunctionCall","src":"34052:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34044:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33826:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33840:4:28","type":""}],"src":"33675:402:28"},{"body":{"nodeType":"YulBlock","src":"34263:275:28","statements":[{"nodeType":"YulAssignment","src":"34273:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34285:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34296:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34281:3:28"},"nodeType":"YulFunctionCall","src":"34281:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34273:4:28"}]},{"nodeType":"YulVariableDeclaration","src":"34309:16:28","value":{"kind":"number","nodeType":"YulLiteral","src":"34319:6:28","type":"","value":"0xffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"34313:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34341:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34356:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"34364:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34352:3:28"},"nodeType":"YulFunctionCall","src":"34352:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34334:6:28"},"nodeType":"YulFunctionCall","src":"34334:34:28"},"nodeType":"YulExpressionStatement","src":"34334:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34388:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34399:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34384:3:28"},"nodeType":"YulFunctionCall","src":"34384:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"34408:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"34416:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34404:3:28"},"nodeType":"YulFunctionCall","src":"34404:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34377:6:28"},"nodeType":"YulFunctionCall","src":"34377:43:28"},"nodeType":"YulExpressionStatement","src":"34377:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34440:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34451:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34436:3:28"},"nodeType":"YulFunctionCall","src":"34436:18:28"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"34460:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34476:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"34481:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34472:3:28"},"nodeType":"YulFunctionCall","src":"34472:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"34485:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34468:3:28"},"nodeType":"YulFunctionCall","src":"34468:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34456:3:28"},"nodeType":"YulFunctionCall","src":"34456:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34429:6:28"},"nodeType":"YulFunctionCall","src":"34429:60:28"},"nodeType":"YulExpressionStatement","src":"34429:60:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34509:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"34520:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34505:3:28"},"nodeType":"YulFunctionCall","src":"34505:18:28"},{"name":"value3","nodeType":"YulIdentifier","src":"34525:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34498:6:28"},"nodeType":"YulFunctionCall","src":"34498:34:28"},"nodeType":"YulExpressionStatement","src":"34498:34:28"}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_address_t_uint256__to_t_uint16_t_uint16_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34208:9:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"34219:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"34227:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34235:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34243:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34254:4:28","type":""}],"src":"34082:456:28"},{"body":{"nodeType":"YulBlock","src":"34606:378:28","statements":[{"body":{"nodeType":"YulBlock","src":"34655:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34664:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34667:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34657:6:28"},"nodeType":"YulFunctionCall","src":"34657:12:28"},"nodeType":"YulExpressionStatement","src":"34657:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"34634:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"34642:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34630:3:28"},"nodeType":"YulFunctionCall","src":"34630:17:28"},{"name":"end","nodeType":"YulIdentifier","src":"34649:3:28"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"34626:3:28"},"nodeType":"YulFunctionCall","src":"34626:27:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34619:6:28"},"nodeType":"YulFunctionCall","src":"34619:35:28"},"nodeType":"YulIf","src":"34616:55:28"},{"nodeType":"YulVariableDeclaration","src":"34680:23:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"34696:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34690:5:28"},"nodeType":"YulFunctionCall","src":"34690:13:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"34684:2:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34712:63:28","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"34771:2:28"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"34743:27:28"},"nodeType":"YulFunctionCall","src":"34743:31:28"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"34727:15:28"},"nodeType":"YulFunctionCall","src":"34727:48:28"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"34716:7:28","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"34791:7:28"},{"name":"_1","nodeType":"YulIdentifier","src":"34800:2:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34784:6:28"},"nodeType":"YulFunctionCall","src":"34784:19:28"},"nodeType":"YulExpressionStatement","src":"34784:19:28"},{"body":{"nodeType":"YulBlock","src":"34851:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34860:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34863:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34853:6:28"},"nodeType":"YulFunctionCall","src":"34853:12:28"},"nodeType":"YulExpressionStatement","src":"34853:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"34826:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"34834:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34822:3:28"},"nodeType":"YulFunctionCall","src":"34822:15:28"},{"kind":"number","nodeType":"YulLiteral","src":"34839:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34818:3:28"},"nodeType":"YulFunctionCall","src":"34818:26:28"},{"name":"end","nodeType":"YulIdentifier","src":"34846:3:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34815:2:28"},"nodeType":"YulFunctionCall","src":"34815:35:28"},"nodeType":"YulIf","src":"34812:55:28"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"34915:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"34923:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34911:3:28"},"nodeType":"YulFunctionCall","src":"34911:17:28"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"34934:7:28"},{"kind":"number","nodeType":"YulLiteral","src":"34943:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34930:3:28"},"nodeType":"YulFunctionCall","src":"34930:18:28"},{"name":"_1","nodeType":"YulIdentifier","src":"34950:2:28"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"34876:34:28"},"nodeType":"YulFunctionCall","src":"34876:77:28"},"nodeType":"YulExpressionStatement","src":"34876:77:28"},{"nodeType":"YulAssignment","src":"34962:16:28","value":{"name":"array_1","nodeType":"YulIdentifier","src":"34971:7:28"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"34962:5:28"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"34580:6:28","type":""},{"name":"end","nodeType":"YulTypedName","src":"34588:3:28","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"34596:5:28","type":""}],"src":"34543:441:28"},{"body":{"nodeType":"YulBlock","src":"35079:245:28","statements":[{"body":{"nodeType":"YulBlock","src":"35125:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35134:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35137:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35127:6:28"},"nodeType":"YulFunctionCall","src":"35127:12:28"},"nodeType":"YulExpressionStatement","src":"35127:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"35100:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"35109:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35096:3:28"},"nodeType":"YulFunctionCall","src":"35096:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"35121:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"35092:3:28"},"nodeType":"YulFunctionCall","src":"35092:32:28"},"nodeType":"YulIf","src":"35089:52:28"},{"nodeType":"YulVariableDeclaration","src":"35150:30:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35170:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35164:5:28"},"nodeType":"YulFunctionCall","src":"35164:16:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"35154:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"35223:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35232:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35235:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35225:6:28"},"nodeType":"YulFunctionCall","src":"35225:12:28"},"nodeType":"YulExpressionStatement","src":"35225:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"35195:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35211:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"35215:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35207:3:28"},"nodeType":"YulFunctionCall","src":"35207:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"35219:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35203:3:28"},"nodeType":"YulFunctionCall","src":"35203:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35192:2:28"},"nodeType":"YulFunctionCall","src":"35192:30:28"},"nodeType":"YulIf","src":"35189:50:28"},{"nodeType":"YulAssignment","src":"35248:70:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35290:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"35301:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35286:3:28"},"nodeType":"YulFunctionCall","src":"35286:22:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"35310:7:28"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"35258:27:28"},"nodeType":"YulFunctionCall","src":"35258:60:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"35248:6:28"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35045:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"35056:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"35068:6:28","type":""}],"src":"34989:335:28"},{"body":{"nodeType":"YulBlock","src":"35546:340:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35563:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35578:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"35586:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35574:3:28"},"nodeType":"YulFunctionCall","src":"35574:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35556:6:28"},"nodeType":"YulFunctionCall","src":"35556:38:28"},"nodeType":"YulExpressionStatement","src":"35556:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35614:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"35625:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35610:3:28"},"nodeType":"YulFunctionCall","src":"35610:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"35630:3:28","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35603:6:28"},"nodeType":"YulFunctionCall","src":"35603:31:28"},"nodeType":"YulExpressionStatement","src":"35603:31:28"},{"nodeType":"YulVariableDeclaration","src":"35643:60:28","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35675:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35687:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"35698:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35683:3:28"},"nodeType":"YulFunctionCall","src":"35683:19:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"35657:17:28"},"nodeType":"YulFunctionCall","src":"35657:46:28"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"35647:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35723:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"35734:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35719:3:28"},"nodeType":"YulFunctionCall","src":"35719:18:28"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"35743:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35759:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"35763:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35755:3:28"},"nodeType":"YulFunctionCall","src":"35755:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"35767:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35751:3:28"},"nodeType":"YulFunctionCall","src":"35751:18:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35739:3:28"},"nodeType":"YulFunctionCall","src":"35739:31:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35712:6:28"},"nodeType":"YulFunctionCall","src":"35712:59:28"},"nodeType":"YulExpressionStatement","src":"35712:59:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35791:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"35802:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35787:3:28"},"nodeType":"YulFunctionCall","src":"35787:18:28"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"35811:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"35819:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35807:3:28"},"nodeType":"YulFunctionCall","src":"35807:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35780:6:28"},"nodeType":"YulFunctionCall","src":"35780:50:28"},"nodeType":"YulExpressionStatement","src":"35780:50:28"},{"nodeType":"YulAssignment","src":"35839:41:28","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"35865:6:28"},{"name":"tail_1","nodeType":"YulIdentifier","src":"35873:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"35847:17:28"},"nodeType":"YulFunctionCall","src":"35847:33:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35839:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35491:9:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"35502:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35510:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35518:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35526:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35537:4:28","type":""}],"src":"35329:557:28"},{"body":{"nodeType":"YulBlock","src":"35943:116:28","statements":[{"nodeType":"YulAssignment","src":"35953:20:28","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35968:1:28"},{"name":"y","nodeType":"YulIdentifier","src":"35971:1:28"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35964:3:28"},"nodeType":"YulFunctionCall","src":"35964:9:28"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"35953:7:28"}]},{"body":{"nodeType":"YulBlock","src":"36031:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"36033:16:28"},"nodeType":"YulFunctionCall","src":"36033:18:28"},"nodeType":"YulExpressionStatement","src":"36033:18:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"36002:1:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35995:6:28"},"nodeType":"YulFunctionCall","src":"35995:9:28"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"36009:1:28"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"36016:7:28"},{"name":"x","nodeType":"YulIdentifier","src":"36025:1:28"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"36012:3:28"},"nodeType":"YulFunctionCall","src":"36012:15:28"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"36006:2:28"},"nodeType":"YulFunctionCall","src":"36006:22:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"35992:2:28"},"nodeType":"YulFunctionCall","src":"35992:37:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35985:6:28"},"nodeType":"YulFunctionCall","src":"35985:45:28"},"nodeType":"YulIf","src":"35982:71:28"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"35922:1:28","type":""},{"name":"y","nodeType":"YulTypedName","src":"35925:1:28","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"35931:7:28","type":""}],"src":"35891:168:28"},{"body":{"nodeType":"YulBlock","src":"36110:171:28","statements":[{"body":{"nodeType":"YulBlock","src":"36141:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36162:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36169:3:28","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"36174:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"36165:3:28"},"nodeType":"YulFunctionCall","src":"36165:20:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36155:6:28"},"nodeType":"YulFunctionCall","src":"36155:31:28"},"nodeType":"YulExpressionStatement","src":"36155:31:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36206:1:28","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"36209:4:28","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36199:6:28"},"nodeType":"YulFunctionCall","src":"36199:15:28"},"nodeType":"YulExpressionStatement","src":"36199:15:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36234:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36237:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36227:6:28"},"nodeType":"YulFunctionCall","src":"36227:15:28"},"nodeType":"YulExpressionStatement","src":"36227:15:28"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"36130:1:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36123:6:28"},"nodeType":"YulFunctionCall","src":"36123:9:28"},"nodeType":"YulIf","src":"36120:132:28"},{"nodeType":"YulAssignment","src":"36261:14:28","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"36270:1:28"},{"name":"y","nodeType":"YulIdentifier","src":"36273:1:28"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"36266:3:28"},"nodeType":"YulFunctionCall","src":"36266:9:28"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"36261:1:28"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"36095:1:28","type":""},{"name":"y","nodeType":"YulTypedName","src":"36098:1:28","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"36104:1:28","type":""}],"src":"36064:217:28"},{"body":{"nodeType":"YulBlock","src":"36460:182:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36477:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36488:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36470:6:28"},"nodeType":"YulFunctionCall","src":"36470:21:28"},"nodeType":"YulExpressionStatement","src":"36470:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36511:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36522:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36507:3:28"},"nodeType":"YulFunctionCall","src":"36507:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"36527:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36500:6:28"},"nodeType":"YulFunctionCall","src":"36500:30:28"},"nodeType":"YulExpressionStatement","src":"36500:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36550:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36561:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36546:3:28"},"nodeType":"YulFunctionCall","src":"36546:18:28"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"36566:34:28","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36539:6:28"},"nodeType":"YulFunctionCall","src":"36539:62:28"},"nodeType":"YulExpressionStatement","src":"36539:62:28"},{"nodeType":"YulAssignment","src":"36610:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36622:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36633:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36618:3:28"},"nodeType":"YulFunctionCall","src":"36618:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36610:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36437:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36451:4:28","type":""}],"src":"36286:356:28"},{"body":{"nodeType":"YulBlock","src":"36821:226:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36838:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36849:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36831:6:28"},"nodeType":"YulFunctionCall","src":"36831:21:28"},"nodeType":"YulExpressionStatement","src":"36831:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36872:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36883:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36868:3:28"},"nodeType":"YulFunctionCall","src":"36868:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"36888:2:28","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36861:6:28"},"nodeType":"YulFunctionCall","src":"36861:30:28"},"nodeType":"YulExpressionStatement","src":"36861:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36911:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36922:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36907:3:28"},"nodeType":"YulFunctionCall","src":"36907:18:28"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"36927:34:28","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36900:6:28"},"nodeType":"YulFunctionCall","src":"36900:62:28"},"nodeType":"YulExpressionStatement","src":"36900:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36982:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"36993:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36978:3:28"},"nodeType":"YulFunctionCall","src":"36978:18:28"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"36998:6:28","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36971:6:28"},"nodeType":"YulFunctionCall","src":"36971:34:28"},"nodeType":"YulExpressionStatement","src":"36971:34:28"},{"nodeType":"YulAssignment","src":"37014:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37026:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37037:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37022:3:28"},"nodeType":"YulFunctionCall","src":"37022:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37014:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36798:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36812:4:28","type":""}],"src":"36647:400:28"},{"body":{"nodeType":"YulBlock","src":"37226:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37243:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37254:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37236:6:28"},"nodeType":"YulFunctionCall","src":"37236:21:28"},"nodeType":"YulExpressionStatement","src":"37236:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37277:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37288:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37273:3:28"},"nodeType":"YulFunctionCall","src":"37273:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"37293:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37266:6:28"},"nodeType":"YulFunctionCall","src":"37266:30:28"},"nodeType":"YulExpressionStatement","src":"37266:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37316:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37327:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37312:3:28"},"nodeType":"YulFunctionCall","src":"37312:18:28"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"37332:34:28","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37305:6:28"},"nodeType":"YulFunctionCall","src":"37305:62:28"},"nodeType":"YulExpressionStatement","src":"37305:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37387:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37398:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37383:3:28"},"nodeType":"YulFunctionCall","src":"37383:18:28"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"37403:4:28","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37376:6:28"},"nodeType":"YulFunctionCall","src":"37376:32:28"},"nodeType":"YulExpressionStatement","src":"37376:32:28"},{"nodeType":"YulAssignment","src":"37417:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37429:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37440:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37425:3:28"},"nodeType":"YulFunctionCall","src":"37425:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37417:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37203:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37217:4:28","type":""}],"src":"37052:398:28"},{"body":{"nodeType":"YulBlock","src":"37629:233:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37646:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37657:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37639:6:28"},"nodeType":"YulFunctionCall","src":"37639:21:28"},"nodeType":"YulExpressionStatement","src":"37639:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37680:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37691:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37676:3:28"},"nodeType":"YulFunctionCall","src":"37676:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"37696:2:28","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37669:6:28"},"nodeType":"YulFunctionCall","src":"37669:30:28"},"nodeType":"YulExpressionStatement","src":"37669:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37719:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37730:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37715:3:28"},"nodeType":"YulFunctionCall","src":"37715:18:28"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"37735:34:28","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37708:6:28"},"nodeType":"YulFunctionCall","src":"37708:62:28"},"nodeType":"YulExpressionStatement","src":"37708:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37790:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37801:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37786:3:28"},"nodeType":"YulFunctionCall","src":"37786:18:28"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"37806:13:28","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37779:6:28"},"nodeType":"YulFunctionCall","src":"37779:41:28"},"nodeType":"YulExpressionStatement","src":"37779:41:28"},{"nodeType":"YulAssignment","src":"37829:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37841:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"37852:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37837:3:28"},"nodeType":"YulFunctionCall","src":"37837:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37829:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37606:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37620:4:28","type":""}],"src":"37455:407:28"},{"body":{"nodeType":"YulBlock","src":"38041:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38058:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38069:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38051:6:28"},"nodeType":"YulFunctionCall","src":"38051:21:28"},"nodeType":"YulExpressionStatement","src":"38051:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38092:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38103:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38088:3:28"},"nodeType":"YulFunctionCall","src":"38088:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"38108:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38081:6:28"},"nodeType":"YulFunctionCall","src":"38081:30:28"},"nodeType":"YulExpressionStatement","src":"38081:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38131:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38142:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38127:3:28"},"nodeType":"YulFunctionCall","src":"38127:18:28"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"38147:31:28","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38120:6:28"},"nodeType":"YulFunctionCall","src":"38120:59:28"},"nodeType":"YulExpressionStatement","src":"38120:59:28"},{"nodeType":"YulAssignment","src":"38188:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38200:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38211:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38196:3:28"},"nodeType":"YulFunctionCall","src":"38196:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38188:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38018:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38032:4:28","type":""}],"src":"37867:353:28"},{"body":{"nodeType":"YulBlock","src":"38399:227:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38416:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38427:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38409:6:28"},"nodeType":"YulFunctionCall","src":"38409:21:28"},"nodeType":"YulExpressionStatement","src":"38409:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38450:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38461:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38446:3:28"},"nodeType":"YulFunctionCall","src":"38446:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"38466:2:28","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38439:6:28"},"nodeType":"YulFunctionCall","src":"38439:30:28"},"nodeType":"YulExpressionStatement","src":"38439:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38489:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38500:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38485:3:28"},"nodeType":"YulFunctionCall","src":"38485:18:28"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"38505:34:28","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38478:6:28"},"nodeType":"YulFunctionCall","src":"38478:62:28"},"nodeType":"YulExpressionStatement","src":"38478:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38560:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38571:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38556:3:28"},"nodeType":"YulFunctionCall","src":"38556:18:28"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"38576:7:28","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38549:6:28"},"nodeType":"YulFunctionCall","src":"38549:35:28"},"nodeType":"YulExpressionStatement","src":"38549:35:28"},{"nodeType":"YulAssignment","src":"38593:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38605:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38616:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38601:3:28"},"nodeType":"YulFunctionCall","src":"38601:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38593:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38376:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38390:4:28","type":""}],"src":"38225:401:28"},{"body":{"nodeType":"YulBlock","src":"38805:225:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38822:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38833:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38815:6:28"},"nodeType":"YulFunctionCall","src":"38815:21:28"},"nodeType":"YulExpressionStatement","src":"38815:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38856:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38867:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38852:3:28"},"nodeType":"YulFunctionCall","src":"38852:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"38872:2:28","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38845:6:28"},"nodeType":"YulFunctionCall","src":"38845:30:28"},"nodeType":"YulExpressionStatement","src":"38845:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38895:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38906:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38891:3:28"},"nodeType":"YulFunctionCall","src":"38891:18:28"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"38911:34:28","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38884:6:28"},"nodeType":"YulFunctionCall","src":"38884:62:28"},"nodeType":"YulExpressionStatement","src":"38884:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38966:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"38977:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38962:3:28"},"nodeType":"YulFunctionCall","src":"38962:18:28"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"38982:5:28","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38955:6:28"},"nodeType":"YulFunctionCall","src":"38955:33:28"},"nodeType":"YulExpressionStatement","src":"38955:33:28"},{"nodeType":"YulAssignment","src":"38997:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39009:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39020:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39005:3:28"},"nodeType":"YulFunctionCall","src":"39005:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38997:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38782:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38796:4:28","type":""}],"src":"38631:399:28"},{"body":{"nodeType":"YulBlock","src":"39209:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39226:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39237:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39219:6:28"},"nodeType":"YulFunctionCall","src":"39219:21:28"},"nodeType":"YulExpressionStatement","src":"39219:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39260:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39271:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39256:3:28"},"nodeType":"YulFunctionCall","src":"39256:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"39276:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39249:6:28"},"nodeType":"YulFunctionCall","src":"39249:30:28"},"nodeType":"YulExpressionStatement","src":"39249:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39299:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39310:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39295:3:28"},"nodeType":"YulFunctionCall","src":"39295:18:28"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"39315:34:28","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39288:6:28"},"nodeType":"YulFunctionCall","src":"39288:62:28"},"nodeType":"YulExpressionStatement","src":"39288:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39370:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39381:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39366:3:28"},"nodeType":"YulFunctionCall","src":"39366:18:28"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"39386:8:28","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39359:6:28"},"nodeType":"YulFunctionCall","src":"39359:36:28"},"nodeType":"YulExpressionStatement","src":"39359:36:28"},{"nodeType":"YulAssignment","src":"39404:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39416:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39427:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39412:3:28"},"nodeType":"YulFunctionCall","src":"39412:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39404:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39186:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39200:4:28","type":""}],"src":"39035:402:28"},{"body":{"nodeType":"YulBlock","src":"39616:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39633:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39644:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39626:6:28"},"nodeType":"YulFunctionCall","src":"39626:21:28"},"nodeType":"YulExpressionStatement","src":"39626:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39667:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39678:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39663:3:28"},"nodeType":"YulFunctionCall","src":"39663:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"39683:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39656:6:28"},"nodeType":"YulFunctionCall","src":"39656:29:28"},"nodeType":"YulExpressionStatement","src":"39656:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39705:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39716:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39701:3:28"},"nodeType":"YulFunctionCall","src":"39701:18:28"},{"hexValue":"563135","kind":"string","nodeType":"YulLiteral","src":"39721:5:28","type":"","value":"V15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39694:6:28"},"nodeType":"YulFunctionCall","src":"39694:33:28"},"nodeType":"YulExpressionStatement","src":"39694:33:28"},{"nodeType":"YulAssignment","src":"39736:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39748:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39759:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39744:3:28"},"nodeType":"YulFunctionCall","src":"39744:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39736:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ffb1ab747312adb96abfb46262e30aa3e12a4ca4184395f7cc2e72f7b051731__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39593:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39607:4:28","type":""}],"src":"39442:326:28"},{"body":{"nodeType":"YulBlock","src":"39947:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39964:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"39975:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39957:6:28"},"nodeType":"YulFunctionCall","src":"39957:21:28"},"nodeType":"YulExpressionStatement","src":"39957:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39998:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40009:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39994:3:28"},"nodeType":"YulFunctionCall","src":"39994:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"40014:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39987:6:28"},"nodeType":"YulFunctionCall","src":"39987:29:28"},"nodeType":"YulExpressionStatement","src":"39987:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40036:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40047:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40032:3:28"},"nodeType":"YulFunctionCall","src":"40032:18:28"},{"hexValue":"563131","kind":"string","nodeType":"YulLiteral","src":"40052:5:28","type":"","value":"V11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40025:6:28"},"nodeType":"YulFunctionCall","src":"40025:33:28"},"nodeType":"YulExpressionStatement","src":"40025:33:28"},{"nodeType":"YulAssignment","src":"40067:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40079:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40090:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40075:3:28"},"nodeType":"YulFunctionCall","src":"40075:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40067:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_c5b7eade2f846c2d73550725c633f620b448355b3eadae1ce74efe009b42706a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39924:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39938:4:28","type":""}],"src":"39773:326:28"},{"body":{"nodeType":"YulBlock","src":"40278:164:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40295:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40306:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40288:6:28"},"nodeType":"YulFunctionCall","src":"40288:21:28"},"nodeType":"YulExpressionStatement","src":"40288:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40329:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40340:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40325:3:28"},"nodeType":"YulFunctionCall","src":"40325:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"40345:2:28","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40318:6:28"},"nodeType":"YulFunctionCall","src":"40318:30:28"},"nodeType":"YulExpressionStatement","src":"40318:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40368:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40379:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40364:3:28"},"nodeType":"YulFunctionCall","src":"40364:18:28"},{"hexValue":"736c6963655f6f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"40384:16:28","type":"","value":"slice_overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40357:6:28"},"nodeType":"YulFunctionCall","src":"40357:44:28"},"nodeType":"YulExpressionStatement","src":"40357:44:28"},{"nodeType":"YulAssignment","src":"40410:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40422:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40433:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40418:3:28"},"nodeType":"YulFunctionCall","src":"40418:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40410:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40255:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40269:4:28","type":""}],"src":"40104:338:28"},{"body":{"nodeType":"YulBlock","src":"40621:167:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40638:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40649:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40631:6:28"},"nodeType":"YulFunctionCall","src":"40631:21:28"},"nodeType":"YulExpressionStatement","src":"40631:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40672:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40683:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40668:3:28"},"nodeType":"YulFunctionCall","src":"40668:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"40688:2:28","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40661:6:28"},"nodeType":"YulFunctionCall","src":"40661:30:28"},"nodeType":"YulExpressionStatement","src":"40661:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40711:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40722:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40707:3:28"},"nodeType":"YulFunctionCall","src":"40707:18:28"},{"hexValue":"736c6963655f6f75744f66426f756e6473","kind":"string","nodeType":"YulLiteral","src":"40727:19:28","type":"","value":"slice_outOfBounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40700:6:28"},"nodeType":"YulFunctionCall","src":"40700:47:28"},"nodeType":"YulExpressionStatement","src":"40700:47:28"},{"nodeType":"YulAssignment","src":"40756:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40768:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40779:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40764:3:28"},"nodeType":"YulFunctionCall","src":"40764:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40756:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40598:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40612:4:28","type":""}],"src":"40447:341:28"},{"body":{"nodeType":"YulBlock","src":"40967:151:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40984:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"40995:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40977:6:28"},"nodeType":"YulFunctionCall","src":"40977:21:28"},"nodeType":"YulExpressionStatement","src":"40977:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41018:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41029:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41014:3:28"},"nodeType":"YulFunctionCall","src":"41014:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"41034:1:28","type":"","value":"2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41007:6:28"},"nodeType":"YulFunctionCall","src":"41007:29:28"},"nodeType":"YulExpressionStatement","src":"41007:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41056:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41067:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41052:3:28"},"nodeType":"YulFunctionCall","src":"41052:18:28"},{"hexValue":"5632","kind":"string","nodeType":"YulLiteral","src":"41072:4:28","type":"","value":"V2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41045:6:28"},"nodeType":"YulFunctionCall","src":"41045:32:28"},"nodeType":"YulExpressionStatement","src":"41045:32:28"},{"nodeType":"YulAssignment","src":"41086:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41098:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41109:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41094:3:28"},"nodeType":"YulFunctionCall","src":"41094:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41086:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40944:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40958:4:28","type":""}],"src":"40793:325:28"},{"body":{"nodeType":"YulBlock","src":"41270:178:28","statements":[{"nodeType":"YulVariableDeclaration","src":"41280:33:28","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41302:2:28","type":"","value":"96"},{"kind":"number","nodeType":"YulLiteral","src":"41306:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"41298:3:28"},"nodeType":"YulFunctionCall","src":"41298:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"41310:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41294:3:28"},"nodeType":"YulFunctionCall","src":"41294:18:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"41290:3:28"},"nodeType":"YulFunctionCall","src":"41290:23:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"41284:2:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41329:3:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41342:2:28","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"41346:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"41338:3:28"},"nodeType":"YulFunctionCall","src":"41338:15:28"},{"name":"_1","nodeType":"YulIdentifier","src":"41355:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41334:3:28"},"nodeType":"YulFunctionCall","src":"41334:24:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41322:6:28"},"nodeType":"YulFunctionCall","src":"41322:37:28"},"nodeType":"YulExpressionStatement","src":"41322:37:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41379:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"41384:2:28","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41375:3:28"},"nodeType":"YulFunctionCall","src":"41375:12:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41397:2:28","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"41401:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"41393:3:28"},"nodeType":"YulFunctionCall","src":"41393:15:28"},{"name":"_1","nodeType":"YulIdentifier","src":"41410:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41389:3:28"},"nodeType":"YulFunctionCall","src":"41389:24:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41368:6:28"},"nodeType":"YulFunctionCall","src":"41368:46:28"},"nodeType":"YulExpressionStatement","src":"41368:46:28"},{"nodeType":"YulAssignment","src":"41423:19:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41434:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"41439:2:28","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41430:3:28"},"nodeType":"YulFunctionCall","src":"41430:12:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41423:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"41238:3:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41243:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41251:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41262:3:28","type":""}],"src":"41123:325:28"},{"body":{"nodeType":"YulBlock","src":"41694:401:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41711:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41726:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"41734:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41722:3:28"},"nodeType":"YulFunctionCall","src":"41722:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41704:6:28"},"nodeType":"YulFunctionCall","src":"41704:38:28"},"nodeType":"YulExpressionStatement","src":"41704:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41762:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41773:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41758:3:28"},"nodeType":"YulFunctionCall","src":"41758:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"41782:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41798:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"41803:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"41794:3:28"},"nodeType":"YulFunctionCall","src":"41794:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"41807:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41790:3:28"},"nodeType":"YulFunctionCall","src":"41790:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41778:3:28"},"nodeType":"YulFunctionCall","src":"41778:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41751:6:28"},"nodeType":"YulFunctionCall","src":"41751:60:28"},"nodeType":"YulExpressionStatement","src":"41751:60:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41831:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41842:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41827:3:28"},"nodeType":"YulFunctionCall","src":"41827:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"41847:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41820:6:28"},"nodeType":"YulFunctionCall","src":"41820:31:28"},"nodeType":"YulExpressionStatement","src":"41820:31:28"},{"nodeType":"YulVariableDeclaration","src":"41860:60:28","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"41892:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41904:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41915:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41900:3:28"},"nodeType":"YulFunctionCall","src":"41900:19:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"41874:17:28"},"nodeType":"YulFunctionCall","src":"41874:46:28"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"41864:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41940:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"41951:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41936:3:28"},"nodeType":"YulFunctionCall","src":"41936:18:28"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"41970:6:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41963:6:28"},"nodeType":"YulFunctionCall","src":"41963:14:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41956:6:28"},"nodeType":"YulFunctionCall","src":"41956:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41929:6:28"},"nodeType":"YulFunctionCall","src":"41929:50:28"},"nodeType":"YulExpressionStatement","src":"41929:50:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41999:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"42010:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41995:3:28"},"nodeType":"YulFunctionCall","src":"41995:19:28"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"42020:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"42028:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42016:3:28"},"nodeType":"YulFunctionCall","src":"42016:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41988:6:28"},"nodeType":"YulFunctionCall","src":"41988:51:28"},"nodeType":"YulExpressionStatement","src":"41988:51:28"},{"nodeType":"YulAssignment","src":"42048:41:28","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"42074:6:28"},{"name":"tail_1","nodeType":"YulIdentifier","src":"42082:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"42056:17:28"},"nodeType":"YulFunctionCall","src":"42056:33:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42048:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41631:9:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"41642:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"41650:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"41658:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41666:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41674:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41685:4:28","type":""}],"src":"41453:642:28"},{"body":{"nodeType":"YulBlock","src":"42198:147:28","statements":[{"body":{"nodeType":"YulBlock","src":"42244:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42253:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42256:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"42246:6:28"},"nodeType":"YulFunctionCall","src":"42246:12:28"},"nodeType":"YulExpressionStatement","src":"42246:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"42219:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"42228:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42215:3:28"},"nodeType":"YulFunctionCall","src":"42215:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"42240:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"42211:3:28"},"nodeType":"YulFunctionCall","src":"42211:32:28"},"nodeType":"YulIf","src":"42208:52:28"},{"nodeType":"YulAssignment","src":"42269:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42285:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"42279:5:28"},"nodeType":"YulFunctionCall","src":"42279:16:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"42269:6:28"}]},{"nodeType":"YulAssignment","src":"42304:35:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42324:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"42335:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42320:3:28"},"nodeType":"YulFunctionCall","src":"42320:18:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"42314:5:28"},"nodeType":"YulFunctionCall","src":"42314:25:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"42304:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42156:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"42167:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"42179:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42187:6:28","type":""}],"src":"42100:245:28"},{"body":{"nodeType":"YulBlock","src":"42479:119:28","statements":[{"nodeType":"YulAssignment","src":"42489:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42501:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"42512:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42497:3:28"},"nodeType":"YulFunctionCall","src":"42497:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42489:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42531:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"42542:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42524:6:28"},"nodeType":"YulFunctionCall","src":"42524:25:28"},"nodeType":"YulExpressionStatement","src":"42524:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42569:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"42580:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42565:3:28"},"nodeType":"YulFunctionCall","src":"42565:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"42585:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42558:6:28"},"nodeType":"YulFunctionCall","src":"42558:34:28"},"nodeType":"YulExpressionStatement","src":"42558:34:28"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42440:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42451:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42459:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42470:4:28","type":""}],"src":"42350:248:28"},{"body":{"nodeType":"YulBlock","src":"42912:531:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42929:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"42944:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"42952:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"42940:3:28"},"nodeType":"YulFunctionCall","src":"42940:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42922:6:28"},"nodeType":"YulFunctionCall","src":"42922:38:28"},"nodeType":"YulExpressionStatement","src":"42922:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42980:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"42991:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42976:3:28"},"nodeType":"YulFunctionCall","src":"42976:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"42996:3:28","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42969:6:28"},"nodeType":"YulFunctionCall","src":"42969:31:28"},"nodeType":"YulExpressionStatement","src":"42969:31:28"},{"nodeType":"YulVariableDeclaration","src":"43009:60:28","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"43041:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43053:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"43064:3:28","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43049:3:28"},"nodeType":"YulFunctionCall","src":"43049:19:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"43023:17:28"},"nodeType":"YulFunctionCall","src":"43023:46:28"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"43013:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43089:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"43100:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43085:3:28"},"nodeType":"YulFunctionCall","src":"43085:18:28"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"43109:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"43117:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43105:3:28"},"nodeType":"YulFunctionCall","src":"43105:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43078:6:28"},"nodeType":"YulFunctionCall","src":"43078:50:28"},"nodeType":"YulExpressionStatement","src":"43078:50:28"},{"nodeType":"YulVariableDeclaration","src":"43137:47:28","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"43169:6:28"},{"name":"tail_1","nodeType":"YulIdentifier","src":"43177:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"43151:17:28"},"nodeType":"YulFunctionCall","src":"43151:33:28"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"43141:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"43193:29:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43211:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"43216:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"43207:3:28"},"nodeType":"YulFunctionCall","src":"43207:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"43220:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43203:3:28"},"nodeType":"YulFunctionCall","src":"43203:19:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"43197:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43242:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"43253:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43238:3:28"},"nodeType":"YulFunctionCall","src":"43238:18:28"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"43262:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"43270:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"43258:3:28"},"nodeType":"YulFunctionCall","src":"43258:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43231:6:28"},"nodeType":"YulFunctionCall","src":"43231:43:28"},"nodeType":"YulExpressionStatement","src":"43231:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43294:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"43305:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43290:3:28"},"nodeType":"YulFunctionCall","src":"43290:19:28"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"43315:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"43323:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"43311:3:28"},"nodeType":"YulFunctionCall","src":"43311:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43283:6:28"},"nodeType":"YulFunctionCall","src":"43283:44:28"},"nodeType":"YulExpressionStatement","src":"43283:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43347:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"43358:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43343:3:28"},"nodeType":"YulFunctionCall","src":"43343:19:28"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"43368:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"43376:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43364:3:28"},"nodeType":"YulFunctionCall","src":"43364:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43336:6:28"},"nodeType":"YulFunctionCall","src":"43336:51:28"},"nodeType":"YulExpressionStatement","src":"43336:51:28"},{"nodeType":"YulAssignment","src":"43396:41:28","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"43422:6:28"},{"name":"tail_2","nodeType":"YulIdentifier","src":"43430:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"43404:17:28"},"nodeType":"YulFunctionCall","src":"43404:33:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43396:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42841:9:28","type":""},{"name":"value5","nodeType":"YulTypedName","src":"42852:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"42860:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"42868:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"42876:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42884:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42892:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42903:4:28","type":""}],"src":"42603:840:28"},{"body":{"nodeType":"YulBlock","src":"43545:179:28","statements":[{"body":{"nodeType":"YulBlock","src":"43591:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43600:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43603:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43593:6:28"},"nodeType":"YulFunctionCall","src":"43593:12:28"},"nodeType":"YulExpressionStatement","src":"43593:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"43566:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"43575:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43562:3:28"},"nodeType":"YulFunctionCall","src":"43562:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"43587:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"43558:3:28"},"nodeType":"YulFunctionCall","src":"43558:32:28"},"nodeType":"YulIf","src":"43555:52:28"},{"nodeType":"YulVariableDeclaration","src":"43616:29:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43635:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"43629:5:28"},"nodeType":"YulFunctionCall","src":"43629:16:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"43620:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"43678:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"43687:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"43690:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"43680:6:28"},"nodeType":"YulFunctionCall","src":"43680:12:28"},"nodeType":"YulExpressionStatement","src":"43680:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"43667:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"43674:1:28","type":"","value":"5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"43664:2:28"},"nodeType":"YulFunctionCall","src":"43664:12:28"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"43657:6:28"},"nodeType":"YulFunctionCall","src":"43657:20:28"},"nodeType":"YulIf","src":"43654:40:28"},{"nodeType":"YulAssignment","src":"43703:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"43713:5:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"43703:6:28"}]}]},"name":"abi_decode_tuple_t_enum$_MessageType_$8073_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43511:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"43522:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"43534:6:28","type":""}],"src":"43448:276:28"},{"body":{"nodeType":"YulBlock","src":"43789:78:28","statements":[{"nodeType":"YulAssignment","src":"43799:22:28","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"43814:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"43808:5:28"},"nodeType":"YulFunctionCall","src":"43808:13:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"43799:5:28"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"43855:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"43830:24:28"},"nodeType":"YulFunctionCall","src":"43830:31:28"},"nodeType":"YulExpressionStatement","src":"43830:31:28"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"43768:6:28","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"43779:5:28","type":""}],"src":"43729:138:28"},{"body":{"nodeType":"YulBlock","src":"44002:1164:28","statements":[{"body":{"nodeType":"YulBlock","src":"44048:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44057:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44060:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44050:6:28"},"nodeType":"YulFunctionCall","src":"44050:12:28"},"nodeType":"YulExpressionStatement","src":"44050:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"44023:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"44032:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44019:3:28"},"nodeType":"YulFunctionCall","src":"44019:23:28"},{"kind":"number","nodeType":"YulLiteral","src":"44044:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"44015:3:28"},"nodeType":"YulFunctionCall","src":"44015:32:28"},"nodeType":"YulIf","src":"44012:52:28"},{"nodeType":"YulAssignment","src":"44073:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44089:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44083:5:28"},"nodeType":"YulFunctionCall","src":"44083:16:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"44073:6:28"}]},{"nodeType":"YulVariableDeclaration","src":"44108:39:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44132:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"44143:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44128:3:28"},"nodeType":"YulFunctionCall","src":"44128:18:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44122:5:28"},"nodeType":"YulFunctionCall","src":"44122:25:28"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"44112:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"44156:28:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44174:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"44178:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"44170:3:28"},"nodeType":"YulFunctionCall","src":"44170:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"44182:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44166:3:28"},"nodeType":"YulFunctionCall","src":"44166:18:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"44160:2:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"44211:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44220:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44223:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44213:6:28"},"nodeType":"YulFunctionCall","src":"44213:12:28"},"nodeType":"YulExpressionStatement","src":"44213:12:28"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"44199:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"44207:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"44196:2:28"},"nodeType":"YulFunctionCall","src":"44196:14:28"},"nodeType":"YulIf","src":"44193:34:28"},{"nodeType":"YulVariableDeclaration","src":"44236:32:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44250:9:28"},{"name":"offset","nodeType":"YulIdentifier","src":"44261:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44246:3:28"},"nodeType":"YulFunctionCall","src":"44246:22:28"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"44240:2:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"44310:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44319:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"44322:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"44312:6:28"},"nodeType":"YulFunctionCall","src":"44312:12:28"},"nodeType":"YulExpressionStatement","src":"44312:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"44288:7:28"},{"name":"_2","nodeType":"YulIdentifier","src":"44297:2:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44284:3:28"},"nodeType":"YulFunctionCall","src":"44284:16:28"},{"kind":"number","nodeType":"YulLiteral","src":"44302:6:28","type":"","value":"0x0160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"44280:3:28"},"nodeType":"YulFunctionCall","src":"44280:29:28"},"nodeType":"YulIf","src":"44277:49:28"},{"nodeType":"YulVariableDeclaration","src":"44335:35:28","value":{"arguments":[],"functionName":{"name":"allocate_memory_6770","nodeType":"YulIdentifier","src":"44348:20:28"},"nodeType":"YulFunctionCall","src":"44348:22:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"44339:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44386:5:28"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44423:2:28"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"44393:29:28"},"nodeType":"YulFunctionCall","src":"44393:33:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44379:6:28"},"nodeType":"YulFunctionCall","src":"44379:48:28"},"nodeType":"YulExpressionStatement","src":"44379:48:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44447:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44454:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44443:3:28"},"nodeType":"YulFunctionCall","src":"44443:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44469:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44473:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44465:3:28"},"nodeType":"YulFunctionCall","src":"44465:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44459:5:28"},"nodeType":"YulFunctionCall","src":"44459:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44436:6:28"},"nodeType":"YulFunctionCall","src":"44436:42:28"},"nodeType":"YulExpressionStatement","src":"44436:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44498:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44505:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44494:3:28"},"nodeType":"YulFunctionCall","src":"44494:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44520:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44524:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44516:3:28"},"nodeType":"YulFunctionCall","src":"44516:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44510:5:28"},"nodeType":"YulFunctionCall","src":"44510:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44487:6:28"},"nodeType":"YulFunctionCall","src":"44487:42:28"},"nodeType":"YulExpressionStatement","src":"44487:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44549:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44556:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44545:3:28"},"nodeType":"YulFunctionCall","src":"44545:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44571:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44575:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44567:3:28"},"nodeType":"YulFunctionCall","src":"44567:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44561:5:28"},"nodeType":"YulFunctionCall","src":"44561:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44538:6:28"},"nodeType":"YulFunctionCall","src":"44538:42:28"},"nodeType":"YulExpressionStatement","src":"44538:42:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44600:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44607:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44596:3:28"},"nodeType":"YulFunctionCall","src":"44596:15:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44623:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44627:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44619:3:28"},"nodeType":"YulFunctionCall","src":"44619:12:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44613:5:28"},"nodeType":"YulFunctionCall","src":"44613:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44589:6:28"},"nodeType":"YulFunctionCall","src":"44589:44:28"},"nodeType":"YulExpressionStatement","src":"44589:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44653:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44660:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44649:3:28"},"nodeType":"YulFunctionCall","src":"44649:15:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44676:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44680:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44672:3:28"},"nodeType":"YulFunctionCall","src":"44672:12:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44666:5:28"},"nodeType":"YulFunctionCall","src":"44666:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44642:6:28"},"nodeType":"YulFunctionCall","src":"44642:44:28"},"nodeType":"YulExpressionStatement","src":"44642:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44706:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44713:3:28","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44702:3:28"},"nodeType":"YulFunctionCall","src":"44702:15:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44729:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44733:3:28","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44725:3:28"},"nodeType":"YulFunctionCall","src":"44725:12:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44719:5:28"},"nodeType":"YulFunctionCall","src":"44719:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44695:6:28"},"nodeType":"YulFunctionCall","src":"44695:44:28"},"nodeType":"YulExpressionStatement","src":"44695:44:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44759:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"44766:3:28","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44755:3:28"},"nodeType":"YulFunctionCall","src":"44755:15:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44782:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"44786:3:28","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44778:3:28"},"nodeType":"YulFunctionCall","src":"44778:12:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44772:5:28"},"nodeType":"YulFunctionCall","src":"44772:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44748:6:28"},"nodeType":"YulFunctionCall","src":"44748:44:28"},"nodeType":"YulExpressionStatement","src":"44748:44:28"},{"nodeType":"YulVariableDeclaration","src":"44801:13:28","value":{"kind":"number","nodeType":"YulLiteral","src":"44811:3:28","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"44805:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44834:5:28"},{"name":"_3","nodeType":"YulIdentifier","src":"44841:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44830:3:28"},"nodeType":"YulFunctionCall","src":"44830:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44856:2:28"},{"name":"_3","nodeType":"YulIdentifier","src":"44860:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44852:3:28"},"nodeType":"YulFunctionCall","src":"44852:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44846:5:28"},"nodeType":"YulFunctionCall","src":"44846:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44823:6:28"},"nodeType":"YulFunctionCall","src":"44823:42:28"},"nodeType":"YulExpressionStatement","src":"44823:42:28"},{"nodeType":"YulVariableDeclaration","src":"44874:13:28","value":{"kind":"number","nodeType":"YulLiteral","src":"44884:3:28","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"44878:2:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44907:5:28"},{"name":"_4","nodeType":"YulIdentifier","src":"44914:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44903:3:28"},"nodeType":"YulFunctionCall","src":"44903:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44929:2:28"},{"name":"_4","nodeType":"YulIdentifier","src":"44933:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44925:3:28"},"nodeType":"YulFunctionCall","src":"44925:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44919:5:28"},"nodeType":"YulFunctionCall","src":"44919:18:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44896:6:28"},"nodeType":"YulFunctionCall","src":"44896:42:28"},"nodeType":"YulExpressionStatement","src":"44896:42:28"},{"nodeType":"YulVariableDeclaration","src":"44947:13:28","value":{"kind":"number","nodeType":"YulLiteral","src":"44957:3:28","type":"","value":"320"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"44951:2:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"44969:34:28","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"44995:2:28"},{"name":"_5","nodeType":"YulIdentifier","src":"44999:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44991:3:28"},"nodeType":"YulFunctionCall","src":"44991:11:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"44985:5:28"},"nodeType":"YulFunctionCall","src":"44985:18:28"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"44973:8:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"45032:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45041:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"45044:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"45034:6:28"},"nodeType":"YulFunctionCall","src":"45034:12:28"},"nodeType":"YulExpressionStatement","src":"45034:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"45018:8:28"},{"name":"_1","nodeType":"YulIdentifier","src":"45028:2:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"45015:2:28"},"nodeType":"YulFunctionCall","src":"45015:16:28"},"nodeType":"YulIf","src":"45012:36:28"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45068:5:28"},{"name":"_5","nodeType":"YulIdentifier","src":"45075:2:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45064:3:28"},"nodeType":"YulFunctionCall","src":"45064:14:28"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"45112:2:28"},{"name":"offset_1","nodeType":"YulIdentifier","src":"45116:8:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45108:3:28"},"nodeType":"YulFunctionCall","src":"45108:17:28"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"45127:7:28"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"45080:27:28"},"nodeType":"YulFunctionCall","src":"45080:55:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45057:6:28"},"nodeType":"YulFunctionCall","src":"45057:79:28"},"nodeType":"YulExpressionStatement","src":"45057:79:28"},{"nodeType":"YulAssignment","src":"45145:15:28","value":{"name":"value","nodeType":"YulIdentifier","src":"45155:5:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"45145:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_struct$_StrategyReport_$8110_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43960:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"43971:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"43983:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"43991:6:28","type":""}],"src":"43872:1294:28"},{"body":{"nodeType":"YulBlock","src":"45307:706:28","statements":[{"nodeType":"YulVariableDeclaration","src":"45317:33:28","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"45331:7:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"45340:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45327:3:28"},"nodeType":"YulFunctionCall","src":"45327:23:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"45321:2:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"45375:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45384:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"45387:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"45377:6:28"},"nodeType":"YulFunctionCall","src":"45377:12:28"},"nodeType":"YulExpressionStatement","src":"45377:12:28"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"45366:2:28"},{"kind":"number","nodeType":"YulLiteral","src":"45370:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"45362:3:28"},"nodeType":"YulFunctionCall","src":"45362:12:28"},"nodeType":"YulIf","src":"45359:32:28"},{"nodeType":"YulAssignment","src":"45400:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45416:9:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45410:5:28"},"nodeType":"YulFunctionCall","src":"45410:16:28"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"45400:6:28"}]},{"body":{"nodeType":"YulBlock","src":"45466:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45475:1:28","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"45478:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"45468:6:28"},"nodeType":"YulFunctionCall","src":"45468:12:28"},"nodeType":"YulExpressionStatement","src":"45468:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"45446:2:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45454:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"45450:3:28"},"nodeType":"YulFunctionCall","src":"45450:7:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45442:3:28"},"nodeType":"YulFunctionCall","src":"45442:16:28"},{"kind":"number","nodeType":"YulLiteral","src":"45460:4:28","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"45438:3:28"},"nodeType":"YulFunctionCall","src":"45438:27:28"},"nodeType":"YulIf","src":"45435:47:28"},{"nodeType":"YulVariableDeclaration","src":"45491:23:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45511:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45505:5:28"},"nodeType":"YulFunctionCall","src":"45505:9:28"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"45495:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"45523:35:28","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45545:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"45553:4:28","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45541:3:28"},"nodeType":"YulFunctionCall","src":"45541:17:28"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"45527:10:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"45633:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"45635:16:28"},"nodeType":"YulFunctionCall","src":"45635:18:28"},"nodeType":"YulExpressionStatement","src":"45635:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"45576:10:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45596:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"45600:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"45592:3:28"},"nodeType":"YulFunctionCall","src":"45592:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"45604:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45588:3:28"},"nodeType":"YulFunctionCall","src":"45588:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"45573:2:28"},"nodeType":"YulFunctionCall","src":"45573:34:28"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"45612:10:28"},{"name":"memPtr","nodeType":"YulIdentifier","src":"45624:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"45609:2:28"},"nodeType":"YulFunctionCall","src":"45609:22:28"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"45570:2:28"},"nodeType":"YulFunctionCall","src":"45570:62:28"},"nodeType":"YulIf","src":"45567:88:28"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45671:2:28","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"45675:10:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45664:6:28"},"nodeType":"YulFunctionCall","src":"45664:22:28"},"nodeType":"YulExpressionStatement","src":"45664:22:28"},{"nodeType":"YulVariableDeclaration","src":"45695:38:28","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45718:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"45729:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45714:3:28"},"nodeType":"YulFunctionCall","src":"45714:18:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45708:5:28"},"nodeType":"YulFunctionCall","src":"45708:25:28"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"45699:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45767:5:28"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"45742:24:28"},"nodeType":"YulFunctionCall","src":"45742:31:28"},"nodeType":"YulExpressionStatement","src":"45742:31:28"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45789:6:28"},{"name":"value","nodeType":"YulIdentifier","src":"45797:5:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45782:6:28"},"nodeType":"YulFunctionCall","src":"45782:21:28"},"nodeType":"YulExpressionStatement","src":"45782:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45823:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"45831:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45819:3:28"},"nodeType":"YulFunctionCall","src":"45819:15:28"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45846:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"45857:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45842:3:28"},"nodeType":"YulFunctionCall","src":"45842:18:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45836:5:28"},"nodeType":"YulFunctionCall","src":"45836:25:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45812:6:28"},"nodeType":"YulFunctionCall","src":"45812:50:28"},"nodeType":"YulExpressionStatement","src":"45812:50:28"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45882:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"45890:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45878:3:28"},"nodeType":"YulFunctionCall","src":"45878:15:28"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45905:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"45916:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45901:3:28"},"nodeType":"YulFunctionCall","src":"45901:18:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45895:5:28"},"nodeType":"YulFunctionCall","src":"45895:25:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45871:6:28"},"nodeType":"YulFunctionCall","src":"45871:50:28"},"nodeType":"YulExpressionStatement","src":"45871:50:28"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45941:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"45949:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45937:3:28"},"nodeType":"YulFunctionCall","src":"45937:15:28"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45964:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"45975:4:28","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45960:3:28"},"nodeType":"YulFunctionCall","src":"45960:20:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45954:5:28"},"nodeType":"YulFunctionCall","src":"45954:27:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45930:6:28"},"nodeType":"YulFunctionCall","src":"45930:52:28"},"nodeType":"YulExpressionStatement","src":"45930:52:28"},{"nodeType":"YulAssignment","src":"45991:16:28","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"46001:6:28"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"45991:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_struct$_WithdrawSomeResponse_$8087_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45265:9:28","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"45276:7:28","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"45288:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"45296:6:28","type":""}],"src":"45171:842:28"},{"body":{"nodeType":"YulBlock","src":"46192:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46209:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46220:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46202:6:28"},"nodeType":"YulFunctionCall","src":"46202:21:28"},"nodeType":"YulExpressionStatement","src":"46202:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46243:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46254:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46239:3:28"},"nodeType":"YulFunctionCall","src":"46239:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"46259:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46232:6:28"},"nodeType":"YulFunctionCall","src":"46232:29:28"},"nodeType":"YulExpressionStatement","src":"46232:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46281:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46292:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46277:3:28"},"nodeType":"YulFunctionCall","src":"46277:18:28"},{"hexValue":"563134","kind":"string","nodeType":"YulLiteral","src":"46297:5:28","type":"","value":"V14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46270:6:28"},"nodeType":"YulFunctionCall","src":"46270:33:28"},"nodeType":"YulExpressionStatement","src":"46270:33:28"},{"nodeType":"YulAssignment","src":"46312:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46324:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46335:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46320:3:28"},"nodeType":"YulFunctionCall","src":"46320:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46312:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_fff5bff707f8f14059842ca392bf43cb6be6f8f9059b23a37eaab9bbdc0ad70f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46169:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46183:4:28","type":""}],"src":"46018:326:28"},{"body":{"nodeType":"YulBlock","src":"46612:456:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46629:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"46644:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"46652:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"46640:3:28"},"nodeType":"YulFunctionCall","src":"46640:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46622:6:28"},"nodeType":"YulFunctionCall","src":"46622:38:28"},"nodeType":"YulExpressionStatement","src":"46622:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46680:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46691:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46676:3:28"},"nodeType":"YulFunctionCall","src":"46676:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"46696:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46669:6:28"},"nodeType":"YulFunctionCall","src":"46669:31:28"},"nodeType":"YulExpressionStatement","src":"46669:31:28"},{"nodeType":"YulVariableDeclaration","src":"46709:60:28","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"46741:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46753:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46764:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46749:3:28"},"nodeType":"YulFunctionCall","src":"46749:19:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"46723:17:28"},"nodeType":"YulFunctionCall","src":"46723:46:28"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"46713:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46789:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46800:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46785:3:28"},"nodeType":"YulFunctionCall","src":"46785:18:28"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"46809:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"46825:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"46829:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"46821:3:28"},"nodeType":"YulFunctionCall","src":"46821:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"46833:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46817:3:28"},"nodeType":"YulFunctionCall","src":"46817:18:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"46805:3:28"},"nodeType":"YulFunctionCall","src":"46805:31:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46778:6:28"},"nodeType":"YulFunctionCall","src":"46778:59:28"},"nodeType":"YulExpressionStatement","src":"46778:59:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46857:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46868:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46853:3:28"},"nodeType":"YulFunctionCall","src":"46853:18:28"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"46877:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"46885:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46873:3:28"},"nodeType":"YulFunctionCall","src":"46873:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46846:6:28"},"nodeType":"YulFunctionCall","src":"46846:50:28"},"nodeType":"YulExpressionStatement","src":"46846:50:28"},{"nodeType":"YulVariableDeclaration","src":"46905:47:28","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"46937:6:28"},{"name":"tail_1","nodeType":"YulIdentifier","src":"46945:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"46919:17:28"},"nodeType":"YulFunctionCall","src":"46919:33:28"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"46909:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46972:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"46983:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46968:3:28"},"nodeType":"YulFunctionCall","src":"46968:19:28"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"46993:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"47001:9:28"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46989:3:28"},"nodeType":"YulFunctionCall","src":"46989:22:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46961:6:28"},"nodeType":"YulFunctionCall","src":"46961:51:28"},"nodeType":"YulExpressionStatement","src":"46961:51:28"},{"nodeType":"YulAssignment","src":"47021:41:28","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"47047:6:28"},{"name":"tail_2","nodeType":"YulIdentifier","src":"47055:6:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"47029:17:28"},"nodeType":"YulFunctionCall","src":"47029:33:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47021:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46549:9:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"46560:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"46568:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"46576:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"46584:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"46592:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46603:4:28","type":""}],"src":"46349:719:28"},{"body":{"nodeType":"YulBlock","src":"47169:1254:28","statements":[{"nodeType":"YulVariableDeclaration","src":"47179:24:28","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"47199:3:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"47193:5:28"},"nodeType":"YulFunctionCall","src":"47193:10:28"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"47183:6:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"47246:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"47248:16:28"},"nodeType":"YulFunctionCall","src":"47248:18:28"},"nodeType":"YulExpressionStatement","src":"47248:18:28"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"47218:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"47234:2:28","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"47238:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"47230:3:28"},"nodeType":"YulFunctionCall","src":"47230:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"47242:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47226:3:28"},"nodeType":"YulFunctionCall","src":"47226:18:28"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"47215:2:28"},"nodeType":"YulFunctionCall","src":"47215:30:28"},"nodeType":"YulIf","src":"47212:56:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"47320:4:28"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"47358:4:28"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"47352:5:28"},"nodeType":"YulFunctionCall","src":"47352:11:28"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"47326:25:28"},"nodeType":"YulFunctionCall","src":"47326:38:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"47366:6:28"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"47277:42:28"},"nodeType":"YulFunctionCall","src":"47277:96:28"},"nodeType":"YulExpressionStatement","src":"47277:96:28"},{"nodeType":"YulVariableDeclaration","src":"47382:18:28","value":{"kind":"number","nodeType":"YulLiteral","src":"47399:1:28","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"47386:9:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"47409:23:28","value":{"kind":"number","nodeType":"YulLiteral","src":"47428:4:28","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"47413:11:28","type":""}]},{"nodeType":"YulAssignment","src":"47441:24:28","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"47454:11:28"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"47441:9:28"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"47511:655:28","statements":[{"nodeType":"YulVariableDeclaration","src":"47525:35:28","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"47544:6:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"47556:2:28","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"47552:3:28"},"nodeType":"YulFunctionCall","src":"47552:7:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"47540:3:28"},"nodeType":"YulFunctionCall","src":"47540:20:28"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"47529:7:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"47573:48:28","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"47616:4:28"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"47587:28:28"},"nodeType":"YulFunctionCall","src":"47587:34:28"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"47577:6:28","type":""}]},{"nodeType":"YulVariableDeclaration","src":"47634:10:28","value":{"kind":"number","nodeType":"YulLiteral","src":"47643:1:28","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"47638:1:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"47721:172:28","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"47746:6:28"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"47764:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"47769:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47760:3:28"},"nodeType":"YulFunctionCall","src":"47760:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"47754:5:28"},"nodeType":"YulFunctionCall","src":"47754:26:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"47739:6:28"},"nodeType":"YulFunctionCall","src":"47739:42:28"},"nodeType":"YulExpressionStatement","src":"47739:42:28"},{"nodeType":"YulAssignment","src":"47798:24:28","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"47812:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"47820:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47808:3:28"},"nodeType":"YulFunctionCall","src":"47808:14:28"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"47798:6:28"}]},{"nodeType":"YulAssignment","src":"47839:40:28","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"47856:9:28"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"47867:11:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47852:3:28"},"nodeType":"YulFunctionCall","src":"47852:27:28"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"47839:9:28"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"47668:1:28"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"47671:7:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"47665:2:28"},"nodeType":"YulFunctionCall","src":"47665:14:28"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"47680:28:28","statements":[{"nodeType":"YulAssignment","src":"47682:24:28","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"47691:1:28"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"47694:11:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47687:3:28"},"nodeType":"YulFunctionCall","src":"47687:19:28"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"47682:1:28"}]}]},"pre":{"nodeType":"YulBlock","src":"47661:3:28","statements":[]},"src":"47657:236:28"},{"body":{"nodeType":"YulBlock","src":"47941:166:28","statements":[{"nodeType":"YulVariableDeclaration","src":"47959:43:28","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"47986:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"47991:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47982:3:28"},"nodeType":"YulFunctionCall","src":"47982:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"47976:5:28"},"nodeType":"YulFunctionCall","src":"47976:26:28"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"47963:9:28","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"48026:6:28"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"48038:9:28"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48065:1:28","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"48068:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"48061:3:28"},"nodeType":"YulFunctionCall","src":"48061:14:28"},{"kind":"number","nodeType":"YulLiteral","src":"48077:3:28","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"48057:3:28"},"nodeType":"YulFunctionCall","src":"48057:24:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48087:1:28","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"48083:3:28"},"nodeType":"YulFunctionCall","src":"48083:6:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"48053:3:28"},"nodeType":"YulFunctionCall","src":"48053:37:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"48049:3:28"},"nodeType":"YulFunctionCall","src":"48049:42:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"48034:3:28"},"nodeType":"YulFunctionCall","src":"48034:58:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"48019:6:28"},"nodeType":"YulFunctionCall","src":"48019:74:28"},"nodeType":"YulExpressionStatement","src":"48019:74:28"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"47912:7:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"47921:6:28"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"47909:2:28"},"nodeType":"YulFunctionCall","src":"47909:19:28"},"nodeType":"YulIf","src":"47906:201:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"48127:4:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48141:1:28","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"48144:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"48137:3:28"},"nodeType":"YulFunctionCall","src":"48137:14:28"},{"kind":"number","nodeType":"YulLiteral","src":"48153:1:28","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48133:3:28"},"nodeType":"YulFunctionCall","src":"48133:22:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"48120:6:28"},"nodeType":"YulFunctionCall","src":"48120:36:28"},"nodeType":"YulExpressionStatement","src":"48120:36:28"}]},"nodeType":"YulCase","src":"47504:662:28","value":{"kind":"number","nodeType":"YulLiteral","src":"47509:1:28","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"48183:234:28","statements":[{"nodeType":"YulVariableDeclaration","src":"48197:14:28","value":{"kind":"number","nodeType":"YulLiteral","src":"48210:1:28","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"48201:5:28","type":""}]},{"body":{"nodeType":"YulBlock","src":"48246:67:28","statements":[{"nodeType":"YulAssignment","src":"48264:35:28","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"48283:3:28"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"48288:9:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48279:3:28"},"nodeType":"YulFunctionCall","src":"48279:19:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"48273:5:28"},"nodeType":"YulFunctionCall","src":"48273:26:28"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"48264:5:28"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"48227:6:28"},"nodeType":"YulIf","src":"48224:89:28"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"48333:4:28"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48392:5:28"},{"name":"newLen","nodeType":"YulIdentifier","src":"48399:6:28"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"48339:52:28"},"nodeType":"YulFunctionCall","src":"48339:67:28"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"48326:6:28"},"nodeType":"YulFunctionCall","src":"48326:81:28"},"nodeType":"YulExpressionStatement","src":"48326:81:28"}]},"nodeType":"YulCase","src":"48175:242:28","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"47484:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"47492:2:28","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"47481:2:28"},"nodeType":"YulFunctionCall","src":"47481:14:28"},"nodeType":"YulSwitch","src":"47474:943:28"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"47154:4:28","type":""},{"name":"src","nodeType":"YulTypedName","src":"47160:3:28","type":""}],"src":"47073:1350:28"},{"body":{"nodeType":"YulBlock","src":"48602:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48619:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"48630:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48612:6:28"},"nodeType":"YulFunctionCall","src":"48612:21:28"},"nodeType":"YulExpressionStatement","src":"48612:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48653:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"48664:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48649:3:28"},"nodeType":"YulFunctionCall","src":"48649:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"48669:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48642:6:28"},"nodeType":"YulFunctionCall","src":"48642:29:28"},"nodeType":"YulExpressionStatement","src":"48642:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48691:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"48702:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48687:3:28"},"nodeType":"YulFunctionCall","src":"48687:18:28"},{"hexValue":"563133","kind":"string","nodeType":"YulLiteral","src":"48707:5:28","type":"","value":"V13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48680:6:28"},"nodeType":"YulFunctionCall","src":"48680:33:28"},"nodeType":"YulExpressionStatement","src":"48680:33:28"},{"nodeType":"YulAssignment","src":"48722:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48734:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"48745:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48730:3:28"},"nodeType":"YulFunctionCall","src":"48730:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48722:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_0496c2ac3cc54dcad1f20b85ceee7cff65b214f05b3c4cc3a656a3b2f58b3032__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48579:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48593:4:28","type":""}],"src":"48428:326:28"},{"body":{"nodeType":"YulBlock","src":"48916:218:28","statements":[{"nodeType":"YulAssignment","src":"48926:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48938:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"48949:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48934:3:28"},"nodeType":"YulFunctionCall","src":"48934:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48926:4:28"}]},{"nodeType":"YulVariableDeclaration","src":"48961:29:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"48979:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"48984:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"48975:3:28"},"nodeType":"YulFunctionCall","src":"48975:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"48988:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48971:3:28"},"nodeType":"YulFunctionCall","src":"48971:19:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"48965:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49006:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49021:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"49029:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"49017:3:28"},"nodeType":"YulFunctionCall","src":"49017:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48999:6:28"},"nodeType":"YulFunctionCall","src":"48999:34:28"},"nodeType":"YulExpressionStatement","src":"48999:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49053:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"49064:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49049:3:28"},"nodeType":"YulFunctionCall","src":"49049:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"49073:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"49081:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"49069:3:28"},"nodeType":"YulFunctionCall","src":"49069:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49042:6:28"},"nodeType":"YulFunctionCall","src":"49042:43:28"},"nodeType":"YulExpressionStatement","src":"49042:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49105:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"49116:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49101:3:28"},"nodeType":"YulFunctionCall","src":"49101:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"49121:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49094:6:28"},"nodeType":"YulFunctionCall","src":"49094:34:28"},"nodeType":"YulExpressionStatement","src":"49094:34:28"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48869:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"48880:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"48888:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"48896:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48907:4:28","type":""}],"src":"48759:375:28"},{"body":{"nodeType":"YulBlock","src":"49284:131:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49301:3:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"49314:3:28","type":"","value":"240"},{"name":"value0","nodeType":"YulIdentifier","src":"49319:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"49310:3:28"},"nodeType":"YulFunctionCall","src":"49310:16:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"49332:3:28","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"49337:5:28","type":"","value":"65535"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"49328:3:28"},"nodeType":"YulFunctionCall","src":"49328:15:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"49306:3:28"},"nodeType":"YulFunctionCall","src":"49306:38:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49294:6:28"},"nodeType":"YulFunctionCall","src":"49294:51:28"},"nodeType":"YulExpressionStatement","src":"49294:51:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49365:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"49370:1:28","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49361:3:28"},"nodeType":"YulFunctionCall","src":"49361:11:28"},{"name":"value1","nodeType":"YulIdentifier","src":"49374:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49354:6:28"},"nodeType":"YulFunctionCall","src":"49354:27:28"},"nodeType":"YulExpressionStatement","src":"49354:27:28"},{"nodeType":"YulAssignment","src":"49390:19:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49401:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"49406:2:28","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49397:3:28"},"nodeType":"YulFunctionCall","src":"49397:12:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49390:3:28"}]}]},"name":"abi_encode_tuple_packed_t_uint16_t_uint256__to_t_uint16_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49252:3:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"49257:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49265:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49276:3:28","type":""}],"src":"49139:276:28"},{"body":{"nodeType":"YulBlock","src":"49641:147:28","statements":[{"nodeType":"YulAssignment","src":"49651:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49663:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"49674:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49659:3:28"},"nodeType":"YulFunctionCall","src":"49659:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49651:4:28"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49714:6:28"},{"name":"headStart","nodeType":"YulIdentifier","src":"49722:9:28"}],"functionName":{"name":"abi_encode_enum_MessageType","nodeType":"YulIdentifier","src":"49686:27:28"},"nodeType":"YulFunctionCall","src":"49686:46:28"},"nodeType":"YulExpressionStatement","src":"49686:46:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49752:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"49763:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49748:3:28"},"nodeType":"YulFunctionCall","src":"49748:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"49774:6:28"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"49768:5:28"},"nodeType":"YulFunctionCall","src":"49768:13:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49741:6:28"},"nodeType":"YulFunctionCall","src":"49741:41:28"},"nodeType":"YulExpressionStatement","src":"49741:41:28"}]},"name":"abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_AdjustPositionRequest_$8113_memory_ptr__to_t_uint8_t_struct$_AdjustPositionRequest_$8113_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49602:9:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"49613:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49621:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49632:4:28","type":""}],"src":"49420:368:28"},{"body":{"nodeType":"YulBlock","src":"50173:554:28","statements":[{"nodeType":"YulAssignment","src":"50183:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50195:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50206:3:28","type":"","value":"352"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50191:3:28"},"nodeType":"YulFunctionCall","src":"50191:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50183:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50226:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"50241:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"50249:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"50237:3:28"},"nodeType":"YulFunctionCall","src":"50237:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50219:6:28"},"nodeType":"YulFunctionCall","src":"50219:38:28"},"nodeType":"YulExpressionStatement","src":"50219:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50277:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50288:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50273:3:28"},"nodeType":"YulFunctionCall","src":"50273:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"50297:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"50313:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"50318:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"50309:3:28"},"nodeType":"YulFunctionCall","src":"50309:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"50322:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50305:3:28"},"nodeType":"YulFunctionCall","src":"50305:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"50293:3:28"},"nodeType":"YulFunctionCall","src":"50293:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50266:6:28"},"nodeType":"YulFunctionCall","src":"50266:60:28"},"nodeType":"YulExpressionStatement","src":"50266:60:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50346:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50357:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50342:3:28"},"nodeType":"YulFunctionCall","src":"50342:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"50362:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50335:6:28"},"nodeType":"YulFunctionCall","src":"50335:34:28"},"nodeType":"YulExpressionStatement","src":"50335:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50389:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50400:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50385:3:28"},"nodeType":"YulFunctionCall","src":"50385:18:28"},{"name":"value3","nodeType":"YulIdentifier","src":"50405:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50378:6:28"},"nodeType":"YulFunctionCall","src":"50378:34:28"},"nodeType":"YulExpressionStatement","src":"50378:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50432:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50443:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50428:3:28"},"nodeType":"YulFunctionCall","src":"50428:19:28"},{"name":"value4","nodeType":"YulIdentifier","src":"50449:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50421:6:28"},"nodeType":"YulFunctionCall","src":"50421:35:28"},"nodeType":"YulExpressionStatement","src":"50421:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50476:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50487:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50472:3:28"},"nodeType":"YulFunctionCall","src":"50472:19:28"},{"name":"value5","nodeType":"YulIdentifier","src":"50493:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50465:6:28"},"nodeType":"YulFunctionCall","src":"50465:35:28"},"nodeType":"YulExpressionStatement","src":"50465:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50520:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50531:3:28","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50516:3:28"},"nodeType":"YulFunctionCall","src":"50516:19:28"},{"name":"value6","nodeType":"YulIdentifier","src":"50537:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50509:6:28"},"nodeType":"YulFunctionCall","src":"50509:35:28"},"nodeType":"YulExpressionStatement","src":"50509:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50564:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50575:3:28","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50560:3:28"},"nodeType":"YulFunctionCall","src":"50560:19:28"},{"name":"value7","nodeType":"YulIdentifier","src":"50581:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50553:6:28"},"nodeType":"YulFunctionCall","src":"50553:35:28"},"nodeType":"YulExpressionStatement","src":"50553:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50608:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50619:3:28","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50604:3:28"},"nodeType":"YulFunctionCall","src":"50604:19:28"},{"name":"value8","nodeType":"YulIdentifier","src":"50625:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50597:6:28"},"nodeType":"YulFunctionCall","src":"50597:35:28"},"nodeType":"YulExpressionStatement","src":"50597:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50652:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50663:3:28","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50648:3:28"},"nodeType":"YulFunctionCall","src":"50648:19:28"},{"name":"value9","nodeType":"YulIdentifier","src":"50669:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50641:6:28"},"nodeType":"YulFunctionCall","src":"50641:35:28"},"nodeType":"YulExpressionStatement","src":"50641:35:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50696:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50707:3:28","type":"","value":"320"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50692:3:28"},"nodeType":"YulFunctionCall","src":"50692:19:28"},{"name":"value10","nodeType":"YulIdentifier","src":"50713:7:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50685:6:28"},"nodeType":"YulFunctionCall","src":"50685:36:28"},"nodeType":"YulExpressionStatement","src":"50685:36:28"}]},"name":"abi_encode_tuple_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50061:9:28","type":""},{"name":"value10","nodeType":"YulTypedName","src":"50072:7:28","type":""},{"name":"value9","nodeType":"YulTypedName","src":"50081:6:28","type":""},{"name":"value8","nodeType":"YulTypedName","src":"50089:6:28","type":""},{"name":"value7","nodeType":"YulTypedName","src":"50097:6:28","type":""},{"name":"value6","nodeType":"YulTypedName","src":"50105:6:28","type":""},{"name":"value5","nodeType":"YulTypedName","src":"50113:6:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"50121:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"50129:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"50137:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"50145:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"50153:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50164:4:28","type":""}],"src":"49793:934:28"},{"body":{"nodeType":"YulBlock","src":"50889:162:28","statements":[{"nodeType":"YulAssignment","src":"50899:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50911:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50922:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50907:3:28"},"nodeType":"YulFunctionCall","src":"50907:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50899:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50941:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"50952:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50934:6:28"},"nodeType":"YulFunctionCall","src":"50934:25:28"},"nodeType":"YulExpressionStatement","src":"50934:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50979:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"50990:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50975:3:28"},"nodeType":"YulFunctionCall","src":"50975:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"50995:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50968:6:28"},"nodeType":"YulFunctionCall","src":"50968:34:28"},"nodeType":"YulExpressionStatement","src":"50968:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51022:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51033:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51018:3:28"},"nodeType":"YulFunctionCall","src":"51018:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"51038:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51011:6:28"},"nodeType":"YulFunctionCall","src":"51011:34:28"},"nodeType":"YulExpressionStatement","src":"51011:34:28"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50842:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"50853:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"50861:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"50869:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50880:4:28","type":""}],"src":"50732:319:28"},{"body":{"nodeType":"YulBlock","src":"51230:223:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51247:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51258:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51240:6:28"},"nodeType":"YulFunctionCall","src":"51240:21:28"},"nodeType":"YulExpressionStatement","src":"51240:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51281:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51292:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51277:3:28"},"nodeType":"YulFunctionCall","src":"51277:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"51297:2:28","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51270:6:28"},"nodeType":"YulFunctionCall","src":"51270:30:28"},"nodeType":"YulExpressionStatement","src":"51270:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51320:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51331:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51316:3:28"},"nodeType":"YulFunctionCall","src":"51316:18:28"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"51336:34:28","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51309:6:28"},"nodeType":"YulFunctionCall","src":"51309:62:28"},"nodeType":"YulExpressionStatement","src":"51309:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51391:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51402:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51387:3:28"},"nodeType":"YulFunctionCall","src":"51387:18:28"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"51407:3:28","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51380:6:28"},"nodeType":"YulFunctionCall","src":"51380:31:28"},"nodeType":"YulExpressionStatement","src":"51380:31:28"},{"nodeType":"YulAssignment","src":"51420:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51432:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51443:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51428:3:28"},"nodeType":"YulFunctionCall","src":"51428:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51420:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51207:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51221:4:28","type":""}],"src":"51056:397:28"},{"body":{"nodeType":"YulBlock","src":"51632:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51649:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51660:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51642:6:28"},"nodeType":"YulFunctionCall","src":"51642:21:28"},"nodeType":"YulExpressionStatement","src":"51642:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51683:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51694:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51679:3:28"},"nodeType":"YulFunctionCall","src":"51679:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"51699:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51672:6:28"},"nodeType":"YulFunctionCall","src":"51672:30:28"},"nodeType":"YulExpressionStatement","src":"51672:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51722:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51733:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51718:3:28"},"nodeType":"YulFunctionCall","src":"51718:18:28"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"51738:34:28","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51711:6:28"},"nodeType":"YulFunctionCall","src":"51711:62:28"},"nodeType":"YulExpressionStatement","src":"51711:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51793:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51804:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51789:3:28"},"nodeType":"YulFunctionCall","src":"51789:18:28"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"51809:4:28","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51782:6:28"},"nodeType":"YulFunctionCall","src":"51782:32:28"},"nodeType":"YulExpressionStatement","src":"51782:32:28"},{"nodeType":"YulAssignment","src":"51823:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51835:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"51846:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51831:3:28"},"nodeType":"YulFunctionCall","src":"51831:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51823:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51609:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51623:4:28","type":""}],"src":"51458:398:28"},{"body":{"nodeType":"YulBlock","src":"52035:181:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52052:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52063:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52045:6:28"},"nodeType":"YulFunctionCall","src":"52045:21:28"},"nodeType":"YulExpressionStatement","src":"52045:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52086:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52097:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52082:3:28"},"nodeType":"YulFunctionCall","src":"52082:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"52102:2:28","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52075:6:28"},"nodeType":"YulFunctionCall","src":"52075:30:28"},"nodeType":"YulExpressionStatement","src":"52075:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52125:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52136:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52121:3:28"},"nodeType":"YulFunctionCall","src":"52121:18:28"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"52141:33:28","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52114:6:28"},"nodeType":"YulFunctionCall","src":"52114:61:28"},"nodeType":"YulExpressionStatement","src":"52114:61:28"},{"nodeType":"YulAssignment","src":"52184:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52196:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52207:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52192:3:28"},"nodeType":"YulFunctionCall","src":"52192:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52184:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52012:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"52026:4:28","type":""}],"src":"51861:355:28"},{"body":{"nodeType":"YulBlock","src":"52395:232:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52412:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52423:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52405:6:28"},"nodeType":"YulFunctionCall","src":"52405:21:28"},"nodeType":"YulExpressionStatement","src":"52405:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52446:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52457:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52442:3:28"},"nodeType":"YulFunctionCall","src":"52442:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"52462:2:28","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52435:6:28"},"nodeType":"YulFunctionCall","src":"52435:30:28"},"nodeType":"YulExpressionStatement","src":"52435:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52485:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52496:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52481:3:28"},"nodeType":"YulFunctionCall","src":"52481:18:28"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"52501:34:28","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52474:6:28"},"nodeType":"YulFunctionCall","src":"52474:62:28"},"nodeType":"YulExpressionStatement","src":"52474:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52556:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52567:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52552:3:28"},"nodeType":"YulFunctionCall","src":"52552:18:28"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"52572:12:28","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52545:6:28"},"nodeType":"YulFunctionCall","src":"52545:40:28"},"nodeType":"YulExpressionStatement","src":"52545:40:28"},{"nodeType":"YulAssignment","src":"52594:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52606:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52617:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52602:3:28"},"nodeType":"YulFunctionCall","src":"52602:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52594:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52372:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"52386:4:28","type":""}],"src":"52221:406:28"},{"body":{"nodeType":"YulBlock","src":"52806:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52823:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52834:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52816:6:28"},"nodeType":"YulFunctionCall","src":"52816:21:28"},"nodeType":"YulExpressionStatement","src":"52816:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52857:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52868:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52853:3:28"},"nodeType":"YulFunctionCall","src":"52853:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"52873:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52846:6:28"},"nodeType":"YulFunctionCall","src":"52846:29:28"},"nodeType":"YulExpressionStatement","src":"52846:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52895:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52906:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52891:3:28"},"nodeType":"YulFunctionCall","src":"52891:18:28"},{"hexValue":"563136","kind":"string","nodeType":"YulLiteral","src":"52911:5:28","type":"","value":"V16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52884:6:28"},"nodeType":"YulFunctionCall","src":"52884:33:28"},"nodeType":"YulExpressionStatement","src":"52884:33:28"},{"nodeType":"YulAssignment","src":"52926:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"52938:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"52949:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52934:3:28"},"nodeType":"YulFunctionCall","src":"52934:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"52926:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_6955e6baaa624f389e0b20575e612dbaf853ad543050e752bced30fcb8433ae2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52783:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"52797:4:28","type":""}],"src":"52632:326:28"},{"body":{"nodeType":"YulBlock","src":"53136:208:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53153:3:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53166:2:28","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"53170:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"53162:3:28"},"nodeType":"YulFunctionCall","src":"53162:15:28"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53191:2:28","type":"","value":"96"},{"kind":"number","nodeType":"YulLiteral","src":"53195:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"53187:3:28"},"nodeType":"YulFunctionCall","src":"53187:10:28"},{"kind":"number","nodeType":"YulLiteral","src":"53199:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"53183:3:28"},"nodeType":"YulFunctionCall","src":"53183:18:28"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"53179:3:28"},"nodeType":"YulFunctionCall","src":"53179:23:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"53158:3:28"},"nodeType":"YulFunctionCall","src":"53158:45:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53146:6:28"},"nodeType":"YulFunctionCall","src":"53146:58:28"},"nodeType":"YulExpressionStatement","src":"53146:58:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53224:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"53229:2:28","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53220:3:28"},"nodeType":"YulFunctionCall","src":"53220:12:28"},{"name":"value1","nodeType":"YulIdentifier","src":"53234:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53213:6:28"},"nodeType":"YulFunctionCall","src":"53213:28:28"},"nodeType":"YulExpressionStatement","src":"53213:28:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53261:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"53266:2:28","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53257:3:28"},"nodeType":"YulFunctionCall","src":"53257:12:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53279:3:28","type":"","value":"240"},{"name":"value2","nodeType":"YulIdentifier","src":"53284:6:28"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"53275:3:28"},"nodeType":"YulFunctionCall","src":"53275:16:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53297:3:28","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"53302:5:28","type":"","value":"65535"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"53293:3:28"},"nodeType":"YulFunctionCall","src":"53293:15:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"53271:3:28"},"nodeType":"YulFunctionCall","src":"53271:38:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53250:6:28"},"nodeType":"YulFunctionCall","src":"53250:60:28"},"nodeType":"YulExpressionStatement","src":"53250:60:28"},{"nodeType":"YulAssignment","src":"53319:19:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53330:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"53335:2:28","type":"","value":"54"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53326:3:28"},"nodeType":"YulFunctionCall","src":"53326:12:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"53319:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"53096:3:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"53101:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"53109:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"53117:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53128:3:28","type":""}],"src":"52963:381:28"},{"body":{"nodeType":"YulBlock","src":"53569:161:28","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53586:3:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"53595:2:28","type":"","value":"33"},{"kind":"number","nodeType":"YulLiteral","src":"53599:58:28","type":"","value":"0x0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d051999"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"53591:3:28"},"nodeType":"YulFunctionCall","src":"53591:67:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53579:6:28"},"nodeType":"YulFunctionCall","src":"53579:80:28"},"nodeType":"YulExpressionStatement","src":"53579:80:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53679:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"53684:2:28","type":"","value":"28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53675:3:28"},"nodeType":"YulFunctionCall","src":"53675:12:28"},{"name":"value0","nodeType":"YulIdentifier","src":"53689:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53668:6:28"},"nodeType":"YulFunctionCall","src":"53668:28:28"},"nodeType":"YulExpressionStatement","src":"53668:28:28"},{"nodeType":"YulAssignment","src":"53705:19:28","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53716:3:28"},{"kind":"number","nodeType":"YulLiteral","src":"53721:2:28","type":"","value":"60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53712:3:28"},"nodeType":"YulFunctionCall","src":"53712:12:28"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"53705:3:28"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"53545:3:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"53550:6:28","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53561:3:28","type":""}],"src":"53349:381:28"},{"body":{"nodeType":"YulBlock","src":"53909:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53926:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"53937:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53919:6:28"},"nodeType":"YulFunctionCall","src":"53919:21:28"},"nodeType":"YulExpressionStatement","src":"53919:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53960:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"53971:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53956:3:28"},"nodeType":"YulFunctionCall","src":"53956:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"53976:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53949:6:28"},"nodeType":"YulFunctionCall","src":"53949:29:28"},"nodeType":"YulExpressionStatement","src":"53949:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53998:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54009:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53994:3:28"},"nodeType":"YulFunctionCall","src":"53994:18:28"},{"hexValue":"563137","kind":"string","nodeType":"YulLiteral","src":"54014:5:28","type":"","value":"V17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53987:6:28"},"nodeType":"YulFunctionCall","src":"53987:33:28"},"nodeType":"YulExpressionStatement","src":"53987:33:28"},{"nodeType":"YulAssignment","src":"54029:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54041:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54052:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54037:3:28"},"nodeType":"YulFunctionCall","src":"54037:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54029:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d0fadbfd5581340d6125d75eec5c0f822af985ca29c469907ce2ae22a0db3fc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"53886:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"53900:4:28","type":""}],"src":"53735:326:28"},{"body":{"nodeType":"YulBlock","src":"54240:152:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54257:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54268:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54250:6:28"},"nodeType":"YulFunctionCall","src":"54250:21:28"},"nodeType":"YulExpressionStatement","src":"54250:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54291:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54302:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54287:3:28"},"nodeType":"YulFunctionCall","src":"54287:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"54307:1:28","type":"","value":"3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54280:6:28"},"nodeType":"YulFunctionCall","src":"54280:29:28"},"nodeType":"YulExpressionStatement","src":"54280:29:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54329:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54340:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54325:3:28"},"nodeType":"YulFunctionCall","src":"54325:18:28"},{"hexValue":"563132","kind":"string","nodeType":"YulLiteral","src":"54345:5:28","type":"","value":"V12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54318:6:28"},"nodeType":"YulFunctionCall","src":"54318:33:28"},"nodeType":"YulExpressionStatement","src":"54318:33:28"},{"nodeType":"YulAssignment","src":"54360:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54372:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54383:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54368:3:28"},"nodeType":"YulFunctionCall","src":"54368:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54360:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_71efe16cba88fb6e6f90a0e977fb675ba6f9580f574329558474b34d137c4252__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"54217:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"54231:4:28","type":""}],"src":"54066:326:28"},{"body":{"nodeType":"YulBlock","src":"54570:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54587:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"54602:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"54610:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"54598:3:28"},"nodeType":"YulFunctionCall","src":"54598:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54580:6:28"},"nodeType":"YulFunctionCall","src":"54580:38:28"},"nodeType":"YulExpressionStatement","src":"54580:38:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54638:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54649:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54634:3:28"},"nodeType":"YulFunctionCall","src":"54634:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"54658:6:28"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"54674:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"54679:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"54670:3:28"},"nodeType":"YulFunctionCall","src":"54670:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"54683:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"54666:3:28"},"nodeType":"YulFunctionCall","src":"54666:19:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"54654:3:28"},"nodeType":"YulFunctionCall","src":"54654:32:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54627:6:28"},"nodeType":"YulFunctionCall","src":"54627:60:28"},"nodeType":"YulExpressionStatement","src":"54627:60:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54707:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54718:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54703:3:28"},"nodeType":"YulFunctionCall","src":"54703:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"54723:2:28","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54696:6:28"},"nodeType":"YulFunctionCall","src":"54696:30:28"},"nodeType":"YulExpressionStatement","src":"54696:30:28"},{"nodeType":"YulAssignment","src":"54735:53:28","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"54761:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54773:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"54784:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54769:3:28"},"nodeType":"YulFunctionCall","src":"54769:18:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"54743:17:28"},"nodeType":"YulFunctionCall","src":"54743:45:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54735:4:28"}]}]},"name":"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"54523:9:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"54534:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"54542:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"54550:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"54561:4:28","type":""}],"src":"54397:397:28"},{"body":{"nodeType":"YulBlock","src":"55028:343:28","statements":[{"nodeType":"YulVariableDeclaration","src":"55038:29:28","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"55056:3:28","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"55061:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"55052:3:28"},"nodeType":"YulFunctionCall","src":"55052:11:28"},{"kind":"number","nodeType":"YulLiteral","src":"55065:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"55048:3:28"},"nodeType":"YulFunctionCall","src":"55048:19:28"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"55042:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55083:9:28"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"55098:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"55106:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"55094:3:28"},"nodeType":"YulFunctionCall","src":"55094:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55076:6:28"},"nodeType":"YulFunctionCall","src":"55076:34:28"},"nodeType":"YulExpressionStatement","src":"55076:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55130:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55141:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55126:3:28"},"nodeType":"YulFunctionCall","src":"55126:18:28"},{"name":"value1","nodeType":"YulIdentifier","src":"55146:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55119:6:28"},"nodeType":"YulFunctionCall","src":"55119:34:28"},"nodeType":"YulExpressionStatement","src":"55119:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55173:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55184:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55169:3:28"},"nodeType":"YulFunctionCall","src":"55169:18:28"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"55193:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"55201:6:28","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"55189:3:28"},"nodeType":"YulFunctionCall","src":"55189:19:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55162:6:28"},"nodeType":"YulFunctionCall","src":"55162:47:28"},"nodeType":"YulExpressionStatement","src":"55162:47:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55229:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55240:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55225:3:28"},"nodeType":"YulFunctionCall","src":"55225:18:28"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"55249:6:28"},{"name":"_1","nodeType":"YulIdentifier","src":"55257:2:28"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"55245:3:28"},"nodeType":"YulFunctionCall","src":"55245:15:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55218:6:28"},"nodeType":"YulFunctionCall","src":"55218:43:28"},"nodeType":"YulExpressionStatement","src":"55218:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55281:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55292:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55277:3:28"},"nodeType":"YulFunctionCall","src":"55277:19:28"},{"kind":"number","nodeType":"YulLiteral","src":"55298:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55270:6:28"},"nodeType":"YulFunctionCall","src":"55270:32:28"},"nodeType":"YulExpressionStatement","src":"55270:32:28"},{"nodeType":"YulAssignment","src":"55311:54:28","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"55337:6:28"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55349:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55360:3:28","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55345:3:28"},"nodeType":"YulFunctionCall","src":"55345:19:28"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"55319:17:28"},"nodeType":"YulFunctionCall","src":"55319:46:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"55311:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"54965:9:28","type":""},{"name":"value4","nodeType":"YulTypedName","src":"54976:6:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"54984:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"54992:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"55000:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"55008:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"55019:4:28","type":""}],"src":"54799:572:28"},{"body":{"nodeType":"YulBlock","src":"55550:228:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55567:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55578:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55560:6:28"},"nodeType":"YulFunctionCall","src":"55560:21:28"},"nodeType":"YulExpressionStatement","src":"55560:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55601:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55612:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55597:3:28"},"nodeType":"YulFunctionCall","src":"55597:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"55617:2:28","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55590:6:28"},"nodeType":"YulFunctionCall","src":"55590:30:28"},"nodeType":"YulExpressionStatement","src":"55590:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55640:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55651:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55636:3:28"},"nodeType":"YulFunctionCall","src":"55636:18:28"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"55656:34:28","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55629:6:28"},"nodeType":"YulFunctionCall","src":"55629:62:28"},"nodeType":"YulExpressionStatement","src":"55629:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55711:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55722:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55707:3:28"},"nodeType":"YulFunctionCall","src":"55707:18:28"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"55727:8:28","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55700:6:28"},"nodeType":"YulFunctionCall","src":"55700:36:28"},"nodeType":"YulExpressionStatement","src":"55700:36:28"},{"nodeType":"YulAssignment","src":"55745:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55757:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55768:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55753:3:28"},"nodeType":"YulFunctionCall","src":"55753:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"55745:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"55527:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"55541:4:28","type":""}],"src":"55376:402:28"},{"body":{"nodeType":"YulBlock","src":"55957:174:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55974:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"55985:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55967:6:28"},"nodeType":"YulFunctionCall","src":"55967:21:28"},"nodeType":"YulExpressionStatement","src":"55967:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56008:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56019:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56004:3:28"},"nodeType":"YulFunctionCall","src":"56004:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"56024:2:28","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55997:6:28"},"nodeType":"YulFunctionCall","src":"55997:30:28"},"nodeType":"YulExpressionStatement","src":"55997:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56047:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56058:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56043:3:28"},"nodeType":"YulFunctionCall","src":"56043:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"56063:26:28","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56036:6:28"},"nodeType":"YulFunctionCall","src":"56036:54:28"},"nodeType":"YulExpressionStatement","src":"56036:54:28"},{"nodeType":"YulAssignment","src":"56099:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56111:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56122:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56107:3:28"},"nodeType":"YulFunctionCall","src":"56107:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"56099:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"55934:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"55948:4:28","type":""}],"src":"55783:348:28"},{"body":{"nodeType":"YulBlock","src":"56310:181:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56327:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56338:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56320:6:28"},"nodeType":"YulFunctionCall","src":"56320:21:28"},"nodeType":"YulExpressionStatement","src":"56320:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56361:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56372:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56357:3:28"},"nodeType":"YulFunctionCall","src":"56357:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"56377:2:28","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56350:6:28"},"nodeType":"YulFunctionCall","src":"56350:30:28"},"nodeType":"YulExpressionStatement","src":"56350:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56400:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56411:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56396:3:28"},"nodeType":"YulFunctionCall","src":"56396:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"56416:33:28","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56389:6:28"},"nodeType":"YulFunctionCall","src":"56389:61:28"},"nodeType":"YulExpressionStatement","src":"56389:61:28"},{"nodeType":"YulAssignment","src":"56459:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56471:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56482:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56467:3:28"},"nodeType":"YulFunctionCall","src":"56467:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"56459:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"56287:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"56301:4:28","type":""}],"src":"56136:355:28"},{"body":{"nodeType":"YulBlock","src":"56670:224:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56687:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56698:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56680:6:28"},"nodeType":"YulFunctionCall","src":"56680:21:28"},"nodeType":"YulExpressionStatement","src":"56680:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56721:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56732:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56717:3:28"},"nodeType":"YulFunctionCall","src":"56717:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"56737:2:28","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56710:6:28"},"nodeType":"YulFunctionCall","src":"56710:30:28"},"nodeType":"YulExpressionStatement","src":"56710:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56760:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56771:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56756:3:28"},"nodeType":"YulFunctionCall","src":"56756:18:28"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"56776:34:28","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56749:6:28"},"nodeType":"YulFunctionCall","src":"56749:62:28"},"nodeType":"YulExpressionStatement","src":"56749:62:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56831:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56842:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56827:3:28"},"nodeType":"YulFunctionCall","src":"56827:18:28"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"56847:4:28","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56820:6:28"},"nodeType":"YulFunctionCall","src":"56820:32:28"},"nodeType":"YulExpressionStatement","src":"56820:32:28"},{"nodeType":"YulAssignment","src":"56861:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56873:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"56884:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56869:3:28"},"nodeType":"YulFunctionCall","src":"56869:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"56861:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"56647:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"56661:4:28","type":""}],"src":"56496:398:28"},{"body":{"nodeType":"YulBlock","src":"57073:179:28","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57090:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57101:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57083:6:28"},"nodeType":"YulFunctionCall","src":"57083:21:28"},"nodeType":"YulExpressionStatement","src":"57083:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57124:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57135:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57120:3:28"},"nodeType":"YulFunctionCall","src":"57120:18:28"},{"kind":"number","nodeType":"YulLiteral","src":"57140:2:28","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57113:6:28"},"nodeType":"YulFunctionCall","src":"57113:30:28"},"nodeType":"YulExpressionStatement","src":"57113:30:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57163:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57174:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57159:3:28"},"nodeType":"YulFunctionCall","src":"57159:18:28"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"57179:31:28","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57152:6:28"},"nodeType":"YulFunctionCall","src":"57152:59:28"},"nodeType":"YulExpressionStatement","src":"57152:59:28"},{"nodeType":"YulAssignment","src":"57220:26:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57232:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57243:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57228:3:28"},"nodeType":"YulFunctionCall","src":"57228:18:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"57220:4:28"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"57050:9:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"57064:4:28","type":""}],"src":"56899:353:28"},{"body":{"nodeType":"YulBlock","src":"57438:217:28","statements":[{"nodeType":"YulAssignment","src":"57448:27:28","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57460:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57471:3:28","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57456:3:28"},"nodeType":"YulFunctionCall","src":"57456:19:28"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"57448:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57491:9:28"},{"name":"value0","nodeType":"YulIdentifier","src":"57502:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57484:6:28"},"nodeType":"YulFunctionCall","src":"57484:25:28"},"nodeType":"YulExpressionStatement","src":"57484:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57529:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57540:2:28","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57525:3:28"},"nodeType":"YulFunctionCall","src":"57525:18:28"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"57549:6:28"},{"kind":"number","nodeType":"YulLiteral","src":"57557:4:28","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"57545:3:28"},"nodeType":"YulFunctionCall","src":"57545:17:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57518:6:28"},"nodeType":"YulFunctionCall","src":"57518:45:28"},"nodeType":"YulExpressionStatement","src":"57518:45:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57583:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57594:2:28","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57579:3:28"},"nodeType":"YulFunctionCall","src":"57579:18:28"},{"name":"value2","nodeType":"YulIdentifier","src":"57599:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57572:6:28"},"nodeType":"YulFunctionCall","src":"57572:34:28"},"nodeType":"YulExpressionStatement","src":"57572:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"57626:9:28"},{"kind":"number","nodeType":"YulLiteral","src":"57637:2:28","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57622:3:28"},"nodeType":"YulFunctionCall","src":"57622:18:28"},{"name":"value3","nodeType":"YulIdentifier","src":"57642:6:28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57615:6:28"},"nodeType":"YulFunctionCall","src":"57615:34:28"},"nodeType":"YulExpressionStatement","src":"57615:34:28"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"57383:9:28","type":""},{"name":"value3","nodeType":"YulTypedName","src":"57394:6:28","type":""},{"name":"value2","nodeType":"YulTypedName","src":"57402:6:28","type":""},{"name":"value1","nodeType":"YulTypedName","src":"57410:6:28","type":""},{"name":"value0","nodeType":"YulTypedName","src":"57418:6:28","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"57429:4:28","type":""}],"src":"57257:398:28"}]},"contents":"{\n    { }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(64, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint16t_bytes_calldata_ptrt_uint64t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := abi_decode_uint64(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint16t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint16(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint16t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint16t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_contract$_IERC20_$2920t_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_address(value_3)\n        value3 := value_3\n        let value_4 := calldataload(add(headStart, 128))\n        validator_revert_address(value_4)\n        value4 := value_4\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_contract$_ISgBridge_$8065__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint16t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), and(value7, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint16t_addresst_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_1 := calldataload(add(headStart, 128))\n        validator_revert_address(value_1)\n        value4 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_6770() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint64(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value2 := abi_decode_uint64(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint16t_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        value1 := abi_decode_uint16(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint16t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        validator_revert_address(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 128))\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value5 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_ILayerZeroEndpointUpgradeable_$144__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint16t_uint16t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        value1 := abi_decode_uint16(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint16t_uint16t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        value1 := abi_decode_uint16(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint16t_uint16t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_uint16(headStart)\n        value1 := abi_decode_uint16(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$2920__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9cd8c9dc536286380c07cdfe5f9893dc9aaf35c1c68f6f6166f94a63d6ba2b48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V10\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_stringliteral_4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a2283__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V1\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_c1f3458591aa5dbadd866836ff54b5edb079a2e1de0432c95a85f45437b12bfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V6\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_uint16_t_bytes_calldata_ptr__to_t_uint16_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes_calldata(value1, value2, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_stringliteral_4ade54ca82b345967b61d43a7b6e1c256d140cceb65202e7117104371c17959c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V3\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_81685035bf6e9d5f45bbedb20e2e5ca3f52663efad8040454930d989b0bd1f49__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V5\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"NonblockingLzApp: caller must be\")\n        mstore(add(headStart, 96), \" LzApp\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"LzApp: no trusted path record\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_342cf7819a7b9d6be88d78d5ce1c249df923b883ccee4359201419a6fc792681__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V7\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_enum_MessageType(value, pos)\n    {\n        if iszero(lt(value, 5))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(pos, value)\n    }\n    function abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__to_t_uint8_t_struct$_MigrateStrategyRequest_$8116_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        abi_encode_enum_MessageType(value0, headStart)\n        mstore(add(headStart, 32), and(mload(value1), sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr_t_address__to_t_bytes_memory_ptr_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, and(shl(96, value2), not(sub(shl(96, 1), 1))))\n        end := add(_1, 20)\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b46a90f4b21e2dde8c773cf0c4d328fc87a1de68dc62806dc5c03b501b10e8c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V8\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c17c46a066c2510546b70bc409727a4e4af3fc7d2ba2247252fb8067cfbd3da4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V9\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20(array) -> value\n    {\n        let length := mload(array)\n        let _1 := mload(add(array, 0x20))\n        let _2 := not(sub(shl(96, 1), 1))\n        value := and(_1, _2)\n        if lt(length, 20)\n        {\n            value := and(and(_1, shl(shl(3, sub(20, length)), _2)), _2)\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint256_t_bytes_calldata_ptr__to_t_uint16_t_uint16_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes_calldata(value3, value4, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"NonblockingLzApp: no stored mess\")\n        mstore(add(headStart, 96), \"age\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"NonblockingLzApp: invalid payloa\")\n        mstore(add(headStart, 96), \"d\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint16_t_bytes_calldata_ptr_t_uint64_t_bytes32__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), 128)\n        tail := abi_encode_bytes_calldata(value1, value2, add(headStart, 128))\n        mstore(add(headStart, 64), and(value3, sub(shl(64, 1), 1)))\n        mstore(add(headStart, 96), value4)\n    }\n    function abi_encode_tuple_t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"LzApp: invalid minGas\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint256__to_t_uint16_t_uint16_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len)\n    {\n        if gt(len, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_936a052e832d05db833c1fb152ee9d04cb963f54db694a4cc58e037932bdbf61__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V4\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__to_t_uint8_t_struct$_WithdrawSomeRequest_$8078_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        abi_encode_enum_MessageType(value0, headStart)\n        mstore(add(headStart, 32), mload(value1))\n        mstore(add(headStart, 64), mload(add(value1, 32)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_address_t_uint256__to_t_uint16_t_uint16_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_string(value1, add(headStart, 128))\n        mstore(add(headStart, 64), and(value2, sub(shl(64, 1), 1)))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        tail := abi_encode_string(value3, tail_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ffb1ab747312adb96abfb46262e30aa3e12a4ca4184395f7cc2e72f7b051731__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V15\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c5b7eade2f846c2d73550725c633f620b448355b3eadae1ce74efe009b42706a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V11\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"slice_overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"slice_outOfBounds\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_23d235efaf569b2b407d10f447247743508d1762a8e3a3aed85ccc0570dde35f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"V2\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let _1 := not(sub(shl(96, 1), 1))\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), and(shl(96, value1), _1))\n        end := add(pos, 40)\n    }\n    function abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_string(value2, add(headStart, 160))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        tail := abi_encode_string(value4, tail_1)\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_bytes_memory_ptr_t_address_payable_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), 192)\n        let tail_1 := abi_encode_string(value1, add(headStart, 192))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n        mstore(add(headStart, 160), sub(tail_2, headStart))\n        tail := abi_encode_string(value5, tail_2)\n    }\n    function abi_decode_tuple_t_enum$_MessageType_$8073_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(lt(value, 5)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_uint256t_struct$_StrategyReport_$8110_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        let offset := mload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0160) { revert(0, 0) }\n        let value := allocate_memory_6770()\n        mstore(value, abi_decode_address_fromMemory(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), mload(add(_2, 64)))\n        mstore(add(value, 96), mload(add(_2, 96)))\n        mstore(add(value, 128), mload(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), mload(add(_2, 192)))\n        mstore(add(value, 224), mload(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), mload(add(_2, _3)))\n        let _4 := 288\n        mstore(add(value, _4), mload(add(_2, _4)))\n        let _5 := 320\n        let offset_1 := mload(add(_2, _5))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _5), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_struct$_WithdrawSomeResponse_$8087_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 160) { revert(0, 0) }\n        value0 := mload(headStart)\n        if slt(add(_1, not(31)), 0x80) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x80)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let value := mload(add(headStart, 32))\n        validator_revert_address(value)\n        mstore(memPtr, value)\n        mstore(add(memPtr, 32), mload(add(headStart, 64)))\n        mstore(add(memPtr, 64), mload(add(headStart, 96)))\n        mstore(add(memPtr, 96), mload(add(headStart, 0x80)))\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_fff5bff707f8f14059842ca392bf43cb6be6f8f9059b23a37eaab9bbdc0ad70f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V14\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_bytes_memory_ptr_t_uint64_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_string(value1, add(headStart, 160))\n        mstore(add(headStart, 64), and(value2, sub(shl(64, 1), 1)))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0496c2ac3cc54dcad1f20b85ceee7cff65b214f05b3c4cc3a656a3b2f58b3032__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V13\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_uint16_t_uint256__to_t_uint16_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(240, value0), shl(240, 65535)))\n        mstore(add(pos, 2), value1)\n        end := add(pos, 34)\n    }\n    function abi_encode_tuple_t_enum$_MessageType_$8073_t_struct$_AdjustPositionRequest_$8113_memory_ptr__to_t_uint8_t_struct$_AdjustPositionRequest_$8113_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        abi_encode_enum_MessageType(value0, headStart)\n        mstore(add(headStart, 32), mload(value1))\n    }\n    function abi_encode_tuple_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint16_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), value8)\n        mstore(add(headStart, 288), value9)\n        mstore(add(headStart, 320), value10)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6955e6baaa624f389e0b20575e612dbaf853ad543050e752bced30fcb8433ae2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V16\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(sub(shl(96, 1), 1))))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), and(shl(240, value2), shl(240, 65535)))\n        end := add(pos, 54)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, shl(33, 0x0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d051999))\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_t_stringliteral_1d0fadbfd5581340d6125d75eec5c0f822af985ca29c469907ce2ae22a0db3fc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V17\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71efe16cba88fb6e6f90a0e977fb675ba6f9580f574329558474b34d137c4252__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"V12\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr__to_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106102e65760003560e01c80637533d788116101825780637533d7881461081d5780638cfd8f5c1461083d5780638da5cb5b14610875578063950c8a741461088a57806395d89b41146108aa57806399530b06146108bf5780639aa7df94146108d45780639f38369a146108e9578063a032a71214610909578063a457c2d714610929578063a6c3d16514610949578063a9059cbb14610969578063ab033ea914610989578063ab73ce46146109a9578063ab8236f3146109c0578063b353aaa7146109e0578063baf3292d14610a00578063c446183414610a20578063cbed8b9c14610a36578063cfbcc64414610a56578063d1deba1f14610a76578063dd62ed3e14610a89578063dde4f08e14610aa9578063df2a5b3b14610ac9578063e63697c814610ae9578063e7fda06114610b09578063eb8d72b714610b29578063ef34253c14610b49578063f2fde38b14610b5e578063f5ecbdbc14610b7e578063fc0c546a14610b9e578063fc7b9c1814610bbe57600080fd5b80621d3567146102f257806301dc2eb11461031457806301e1d114146103475780630517cb761461035c57806306fdde031461038a57806307e0db17146103ac578063095ea7b3146103cc5780630a97c254146103fc5780630df374831461041c57806310ddb1371461043c5780631459457a1461045c57806314c644021461047c57806318160ddd1461049c57806323b872dd146104b15780632d606843146104d15780632df9eab9146104e6578063313ce567146104fc5780633403c2fc1461052357806337fded911461053e578063395093511461055e5780633d8b38f61461057e5780633f1f4fa41461059e5780634067cb9e146105cb57806342d65a8d1461068257806352106a49146106a25780635aa6e675146106c25780635b8c41e6146106e25780635fe1a0271461073157806366ad5c8a146107925780636e553f65146107b257806370a08231146107d2578063715018a61461080857600080fd5b366102ed57005b600080fd5b3480156102fe57600080fd5b5061031261030d366004614d40565b610bd4565b005b34801561032057600080fd5b5061033461032f366004614de8565b610c97565b6040519081526020015b60405180910390f35b34801561035357600080fd5b50610334610cac565b34801561036857600080fd5b506101085461037d906001600160a01b031681565b60405161033e9190614e1f565b34801561039657600080fd5b5061039f610cc8565b60405161033e9190614e83565b3480156103b857600080fd5b506103126103c7366004614e96565b610d5a565b3480156103d857600080fd5b506103ec6103e7366004614eb1565b610dc7565b604051901515815260200161033e565b34801561040857600080fd5b50610312610417366004614edd565b610ddf565b34801561042857600080fd5b50610312610437366004614f1c565b610eff565b34801561044857600080fd5b50610312610457366004614e96565b610f1e565b34801561046857600080fd5b50610312610477366004614f38565b610f5a565b34801561048857600080fd5b50610312610497366004614fb7565b611182565b3480156104a857600080fd5b50603554610334565b3480156104bd57600080fd5b506103ec6104cc366004614fd4565b6111e3565b3480156104dd57600080fd5b50610312611207565b3480156104f257600080fd5b5061033460fe5481565b34801561050857600080fd5b50610511611283565b60405160ff909116815260200161033e565b34801561052f57600080fd5b50610100546103ec9060ff1681565b34801561054a57600080fd5b5060fd5461037d906001600160a01b031681565b34801561056a57600080fd5b506103ec610579366004614eb1565b6112f1565b34801561058a57600080fd5b506103ec610599366004614ff4565b611313565b3480156105aa57600080fd5b506103346105b9366004614e96565b609a6020526000908152604090205481565b3480156105d757600080fd5b5061063e6105e6366004614de8565b610101602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b031688565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c08301526001600160a01b031660e08201526101000161033e565b34801561068e57600080fd5b5061031261069d366004614ff4565b6113df565b3480156106ae57600080fd5b506103126106bd366004615046565b611452565b3480156106ce57600080fd5b5060fb5461037d906001600160a01b031681565b3480156106ee57600080fd5b506103346106fd366004615181565b60c9602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561073d57600080fd5b5061077561074c3660046151de565b6101066020526000908152604090206001810154600282015460039092015460ff909116919083565b60408051931515845260208401929092529082015260600161033e565b34801561079e57600080fd5b506103126107ad366004614d40565b611689565b3480156107be57600080fd5b506103346107cd3660046151f7565b61175d565b3480156107de57600080fd5b506103346107ed36600461521c565b6001600160a01b031660009081526033602052604090205490565b34801561081457600080fd5b50610312611769565b34801561082957600080fd5b5061039f610838366004614e96565b61177d565b34801561084957600080fd5b50610334610858366004615239565b609960209081526000928352604080842090915290825290205481565b34801561088157600080fd5b5061037d611817565b34801561089657600080fd5b50609b5461037d906001600160a01b031681565b3480156108b657600080fd5b5061039f611826565b3480156108cb57600080fd5b50610334611835565b3480156108e057600080fd5b50610334611852565b3480156108f557600080fd5b5061039f610904366004614e96565b6118c4565b34801561091557600080fd5b5061031261092436600461526c565b6119da565b34801561093557600080fd5b506103ec610944366004614eb1565b611d56565b34801561095557600080fd5b50610312610964366004614ff4565b611dd1565b34801561097557600080fd5b506103ec610984366004614eb1565b611e5a565b34801561099557600080fd5b506103126109a436600461521c565b611e68565b3480156109b557600080fd5b506103346101025481565b3480156109cc57600080fd5b506103126109db3660046152b5565b611ed7565b3480156109ec57600080fd5b5060975461037d906001600160a01b031681565b348015610a0c57600080fd5b50610312610a1b36600461521c565b612025565b348015610a2c57600080fd5b5061033461271081565b348015610a4257600080fd5b50610312610a5136600461534f565b612083565b348015610a6257600080fd5b50610312610a71366004614de8565b6120fc565b610312610a84366004614d40565b612157565b348015610a9557600080fd5b50610334610aa43660046153bd565b61236d565b348015610ab557600080fd5b50610312610ac436600461526c565b612398565b348015610ad557600080fd5b50610312610ae43660046153db565b612428565b348015610af557600080fd5b50610312610b04366004615417565b6124da565b348015610b1557600080fd5b50610334610b24366004614de8565b6124ea565b348015610b3557600080fd5b50610312610b44366004614ff4565b6124f6565b348015610b5557600080fd5b50610312612550565b348015610b6a57600080fd5b50610312610b7936600461521c565b612826565b348015610b8a57600080fd5b5061039f610b9936600461543e565b61289c565b348015610baa57600080fd5b5060fc5461037d906001600160a01b031681565b348015610bca57600080fd5b5061033460ff5481565b6097546001600160a01b03163314610c195760405162461bcd60e51b815260206004820152600360248201526205631360ec1b60448201526064015b60405180910390fd5b610c8f8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061293192505050565b505050505050565b6000610ca383836129aa565b90505b92915050565b6000610cb6611852565b60ff54610cc391906154a1565b905090565b606060368054610cd7906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d03906154b4565b8015610d505780601f10610d2557610100808354040283529160200191610d50565b820191906000526020600020905b815481529060010190602001808311610d3357829003601f168201915b5050505050905090565b610d62612a72565b6097546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b5050505050565b600033610dd5818585612ad1565b5060019392505050565b60fb546001600160a01b0316331480610e105750610dfb611817565b6001600160a01b0316336001600160a01b0316145b610e2c5760405162461bcd60e51b8152600401610c10906154ee565b61ffff83166000908152610101602090815260408083206001600160a01b038616845290915281206001015460fe805491929091610e6b90849061550a565b909155505061ffff83166000908152610101602090815260408083206001600160a01b0386168452909152902060010181905560fe5461271090610eb09083906154a1565b1115610ee35760405162461bcd60e51b81526020600482015260026024820152612b1b60f11b6044820152606401610c10565b8060fe6000828254610ef591906154a1565b9091555050505050565b610f07612a72565b61ffff9091166000908152609a6020526040902055565b610f26612a72565b6097546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401610d92565b600054610100900460ff1615808015610f7a5750600054600160ff909116105b80610f9b5750610f8930612bf5565b158015610f9b575060005460ff166001145b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c10565b6000805460ff191660011790558015611021576000805461ff0019166101001790555b61102a85612c04565b611032612c3c565b61107e6040518060400160405280600f81526020016e13db5b9a58da185a5b8815985d5b1d608a1b8152506040518060400160405280600381526020016227a6ab60e91b815250612c6b565b60fb80546001600160a01b038089166001600160a01b03199283161790925560fc8054878416908316811790915560fd805487851690841617905561010880549386169390921692909217905560405163095ea7b360e01b815263095ea7b3906110f09086906000199060040161551d565b6020604051808303816000875af115801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190615536565b508015610c8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050505050565b60fb546001600160a01b03163314806111b3575061119e611817565b6001600160a01b0316336001600160a01b0316145b6111cf5760405162461bcd60e51b8152600401610c10906154ee565b610100805460ff1916911515919091179055565b6000336111f1858285612c9c565b6111fc858585612d16565b506001949350505050565b60fb546001600160a01b03163314806112385750611223611817565b6001600160a01b0316336001600160a01b0316145b6112545760405162461bcd60e51b8152600401610c10906154ee565b60405133904780156108fc02916000818181858888f19350505050158015611280573d6000803e3d6000fd5b50565b60fc546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190615553565b600033610dd5818585611304838361236d565b61130e91906154a1565b612ad1565b61ffff831660009081526098602052604081208054829190611334906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611360906154b4565b80156113ad5780601f10611382576101008083540402835291602001916113ad565b820191906000526020600020905b81548152906001019060200180831161139057829003601f168201915b5050505050905083836040516113c4929190615576565b60405180910390208180519060200120149150509392505050565b6113e7612a72565b6097546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d9061141b908690869086906004016155af565b600060405180830381600087803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b50505050505050565b60fb546001600160a01b0316331480611483575061146e611817565b6001600160a01b0316336001600160a01b0316145b61149f5760405162461bcd60e51b8152600401610c10906154ee565b61ffff85166000908152610101602090815260408083206001600160a01b038816845290915290205485908590156114e95760405162461bcd60e51b8152600401610c10906155cd565b6127108560fe546114fa91906154a1565b111561152d5760405162461bcd60e51b8152602060048201526002602482015261563560f01b6044820152606401610c10565b60405180610100016040528042815260200186815260200160008152602001600081526020016000815260200160008152602001858152602001846001600160a01b031681525061010160008961ffff1661ffff1681526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506116578661010360008a61ffff1661ffff168152602001908152602001600020612eaf90919063ffffffff16565b5061166861010461ffff8916612ec4565b508460fe600082825461167b91906154a1565b909155505050505050505050565b3330146116e75760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610c10565b610c8f8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612ed092505050565b6000610ca38383612f6e565b611771612a72565b61177b6000612fd2565b565b60986020526000908152604090208054611796906154b4565b80601f01602080910402602001604051908101604052809291908181526020018280546117c2906154b4565b801561180f5780601f106117e45761010080835404028352916020019161180f565b820191906000526020600020905b8154815290600101906020018083116117f257829003601f168201915b505050505081565b6065546001600160a01b031690565b606060378054610cd7906154b4565b6000610cc3611842611283565b61184d90600a6156cd565b613024565b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611883903090600401614e1f565b602060405180830381865afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc391906156dc565b61ffff81166000908152609860205260408120805460609291906118e7906154b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611913906154b4565b80156119605780601f1061193557610100808354040283529160200191611960565b820191906000526020600020905b81548152906001019060200180831161194357829003601f168201915b5050505050905080516000036119b85760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610c10565b6119d36000601483516119cb919061550a565b839190613059565b9392505050565b60fb546001600160a01b0316331480611a0b57506119f6611817565b6001600160a01b0316336001600160a01b0316145b611a275760405162461bcd60e51b8152600401610c10906154ee565b61ffff83166000908152610101602090815260408083206001600160a01b03851684529091529020548390829015611a715760405162461bcd60e51b8152600401610c10906155cd565b6001600160a01b038316611aac5760405162461bcd60e51b8152602060048201526002602482015261563760f01b6044820152606401610c10565b600061010160008761ffff1661ffff1681526020019081526020016000206000866001600160a01b03166001600160a01b0316815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518061010001604052808260a001518152602001826020015181526020018260400151815260200160008152602001600081526020018260a0015181526020018260c0015181526020018260e001516001600160a01b031681525061010160008861ffff1661ffff1681526020019081526020016000206000866001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600061010160008861ffff1661ffff1681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060010181905550600061010160008861ffff1661ffff1681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060020181905550610c8f868660046040518060200160405280896001600160a01b0316815250604051602001611d4292919061572d565b604051602081830303815290604052613166565b60003381611d64828661236d565b905083811015611dc45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c10565b6111fc8286868403612ad1565b611dd9612a72565b818130604051602001611dee93929190615752565b60408051601f1981840301815291815261ffff8516600090815260986020522090611e1990826157ce565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611e4d939291906155af565b60405180910390a1505050565b600033610dd5818585612d16565b60fb546001600160a01b0316331480611e995750611e84611817565b6001600160a01b0316336001600160a01b0316145b611eb55760405162461bcd60e51b8152600401610c10906154ee565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b60fc546001600160a01b03848116911614611f195760405162461bcd60e51b81526020600482015260026024820152610ac760f31b6044820152606401610c10565b610108546001600160a01b0316331480611f3d575060fd546001600160a01b031633145b80611f605750611f4b611817565b6001600160a01b0316336001600160a01b0316145b611f915760405162461bcd60e51b8152602060048201526002602482015261563960f01b6044820152606401610c10565b6000611f9f86826014613059565b604051602001611faf9190615887565b604051602081830303815290604052611fc7906158a3565b60601c9050611fd7878385613310565b604080518481526001600160a01b0383811660208301528616917f92073a89a07a000083eb8b2575fc15e7bb936efe55d00727d6942a796d7211a7910160405180910390a250505050505050565b61202d612a72565b609b80546001600160a01b0319166001600160a01b0383161790556040517f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90612078908390614e1f565b60405180910390a150565b61208b612a72565b6097546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c906120c390889088908890889088906004016158da565b600060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b505050505050505050565b60fb546001600160a01b031633148061212d5750612118611817565b6001600160a01b0316336001600160a01b0316145b6121495760405162461bcd60e51b8152600401610c10906154ee565b61215382826133a7565b5050565b61ffff8616600090815260c96020526040808220905161217a9088908890615576565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806121fa5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610c10565b80838360405161220b929190615576565b60405180910390201461226a5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610c10565b61ffff8716600090815260c96020526040808220905161228d9089908990615576565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612325918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612ed092505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161235c959493929190615908565b60405180910390a150505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60fb546001600160a01b03163314806123c957506123b4611817565b6001600160a01b0316336001600160a01b0316145b6123e55760405162461bcd60e51b8152600401610c10906154ee565b61ffff929092166000908152610101602090815260408083206001600160a01b039485168452909152902060070180546001600160a01b03191691909216179055565b612430612a72565b600081116124785760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610c10565b61ffff83811660008181526099602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611e4d565b6124e583838361341c565b505050565b6000610ca38383613547565b6124fe612a72565b61ffff8316600090815260986020526040902061251c828483615943565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611e4d939291906155af565b60fb546001600160a01b0316331480612581575061256c611817565b6001600160a01b0316336001600160a01b0316145b61259d5760405162461bcd60e51b8152600401610c10906154ee565b610102546000908152610106602052604090206001015460ff16156125d45760405162461bcd60e51b8152600401610c10906159fc565b6000805b6101025460009081526101066020526040902054811015612655576101025460009081526101066020526040812080548390811061261857612618615a18565b906000526020600020906006020190506126358160020154613024565b61263f90846154a1565b925050808061264d90615a2e565b9150506125d8565b5061265e611852565b811161266c576112806135ff565b6000612676611852565b612680908361550a565b90506000805b612691610104613915565b8110801561269f5750600083115b156127f05760006126b26101048361391f565b61ffff81166000908152610103602052604081209192505b6126d382613915565b811080156126e15750600086115b156127da5760006126f2838361391f565b61ffff85166000908152610101602090815260408083206001600160a01b0385168452909152812060028101549293509190036127305750506127c8565b600061274089836002015461392b565b6101025460009081526101066020908152604080832061ffff8b16845260050182528083206001600160a01b038816845290915290208190559050612785818a61550a565b98506127b786846000604051806040016040528086815260200161010254815250604051602001611d42929190615a47565b876127c181615a2e565b9850505050505b806127d281615a2e565b9150506126ca565b50505080806127e890615a2e565b915050612686565b506101028054600090815261010660205260408082206002019390935590548152206001908101805460ff191690911790555050565b61282e612a72565b6001600160a01b0381166128935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c10565b61128081612fd2565b609754604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156128fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129269190810190615ab2565b90505b949350505050565b6000806129945a60966366ad5c8a60e01b898989896040516024016129599493929190615ae6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190613941565b9150915081610c8f57610c8f86868686856139cd565b6101005460009060ff16156129c157506000610ca6565b60006127106129ce610cac565b61ffff86166000908152610101602090815260408083206001600160a01b0389168452909152902060010154612a049190615b24565b612a0e9190615b3b565b61ffff85166000908152610101602090815260408083206001600160a01b0388168452909152902060020154909150808211612a4f57600092505050610ca6565b612a69612a5a611852565b612a64838561550a565b61392b565b95945050505050565b33612a7b611817565b6001600160a01b03161461177b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c10565b6001600160a01b038316612b335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c10565b6001600160a01b038216612b945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c10565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03163b151590565b600054610100900460ff16612c2b5760405162461bcd60e51b8152600401610c1090615b5d565b612c33613a6a565b61128081613a9a565b600054610100900460ff16612c635760405162461bcd60e51b8152600401610c1090615b5d565b61177b613a6a565b600054610100900460ff16612c925760405162461bcd60e51b8152600401610c1090615b5d565b6121538282613ae3565b6000612ca8848461236d565b90506000198114612d105781811015612d035760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c10565b612d108484848403612ad1565b50505050565b6001600160a01b038316612d7a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c10565b6001600160a01b038216612ddc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c10565b6001600160a01b03831660009081526033602052604090205481811015612e545760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c10565b6001600160a01b038085166000818152603360205260408082208686039055928616808252908390208054860190559151600080516020615f1f83398151915290612ea29086815260200190565b60405180910390a3612d10565b6000610ca3836001600160a01b038416613b23565b6000610ca38383613b23565b6000612ede84826014613059565b604051602001612eee9190615887565b604051602081830303815290604052612f06906158a3565b61ffff861660009081526101016020908152604080832060609490941c80845293909152902054909150612f625760405162461bcd60e51b815260206004820152600360248201526256313560e81b6044820152606401610c10565b610dc085836000613310565b6101005460009060ff1615612fab5760405162461bcd60e51b815260206004820152600360248201526256313160e81b6044820152606401610c10565b6000612fb78385613b72565b60fc54909150610ca3906001600160a01b0316333087613bee565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061302f60355490565b60000361303a575090565b603554613045610cac565b61304f9084615b24565b610ca69190615b3b565b60608161306781601f6154a1565b10156130a65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610c10565b6130b082846154a1565b845110156130f45760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610c10565b606082158015613113576040519150600082526020820160405261315d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561314c578051835260209283019201613134565b5050858452601f01601f1916604052505b50949350505050565b61ffff83166000908152610101602090815260408083206001600160a01b0386168452909152902054839083906131af5760405162461bcd60e51b8152600401610c1090615ba8565b6040516001600160601b0319606086811b8216602084015230901b16603482015260009060480160408051601f198184030181529190526097549091506000906001600160a01b03166340a7bb1088308885613209613c59565b6040518663ffffffff1660e01b8152600401613229959493929190615bc4565b6040805180830381865afa158015613245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132699190615c18565b509050804710156132955760405162fae2d560e21b815260048101829052476024820152604401610c10565b6097546001600160a01b031663c58031008289858930806132b4613c59565b6040518863ffffffff1660e01b81526004016132d596959493929190615c3c565b6000604051808303818588803b1580156132ee57600080fd5b505af1158015613302573d6000803e3d6000fd5b505050505050505050505050565b6000828060200190518101906133269190615ca3565b9050600281600481111561333c5761333c6156f5565b0361336b576000838060200190518101906133579190615ccf565b915050613365858285613c89565b50612d10565b600181600481111561337f5761337f6156f5565b03612d105760008380602001905181019061339a9190615dba565b915050610dc08582614063565b61ffff82166000908152610101602090815260408083206001600160a01b038516845290915281206001015460fe8054919290916133e690849061550a565b909155505061ffff9091166000908152610101602090815260408083206001600160a01b03909416835292905290812060010155565b610102546000908152610106602052604090206001015460ff16156134535760405162461bcd60e51b8152600401610c10906159fc565b61345e333085612d16565b61010660006101025481526020019081526020016000206000016040518060c00160405280336001600160a01b03168152602001846001600160a01b031681526020018581526020018381526020016134b686613024565b81526000602091820181905283546001808201865594825290829020835160069092020180546001600160a01b03199081166001600160a01b039384161782559284015194810180549093169490911693909317905560408101516002830155606081015160038301556080810151600483015560a001516005909101805460ff1916911515919091179055505050565b600080612710613555610cac565b61ffff86166000908152610101602090815260408083206001600160a01b038916845290915290206001015461358b9190615b24565b6135959190615b3b565b61ffff85166000908152610101602090815260408083206001600160a01b0388168452909152902060020154610100549192509060ff16156135da579150610ca69050565b8181116135ec57600092505050610ca6565b6135f6828261550a565b92505050610ca6565b6101025460009081526101066020526040902054806136465760405162461bcd60e51b8152602060048201526003602482015262158c4d60ea1b6044820152606401610c10565b6000816001600160401b0381111561366057613660615095565b604051908082528060200260200182016040528015613689578160200160208202803683370190505b50905060005b8281101561370957610102546000908152610106602052604081208054839081106136bc576136bc615a18565b906000526020600020906006020190506136d98160020154613024565b8383815181106136eb576136eb615a18565b6020908102919091010152508061370181615a2e565b91505061368f565b5060005b828110156138a2576101025460009081526101066020526040812080548390811061373a5761373a615a18565b90600052602060002090600602019050600061377184848151811061376157613761615a18565b6020026020010151612a64611852565b90508160040154811015613850576000818360040154613791919061550a565b905060008360040154826127106137a89190615b24565b6137b29190615b3b565b9050836003015481111561384d5760058401805460ff191690558354600285015460405163a9059cbb60e01b8152309263a9059cbb92613800926001600160a01b039092169160040161551d565b6020604051808303816000875af115801561381f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138439190615536565b5050505050613890565b50505b60058201805460ff1916600190811790915582015460fc5461387f916001600160a01b0391821691168361422e565b61388d30836002015461424d565b50505b8061389a81615a2e565b91505061370d565b506101025460408051918252602082018490527fc682eb885c208b8aaaa811c05902e24a4f14b388960311623a8f31404f655129910160405180910390a16101028054600090815261010660205260408120600101805460ff191690558154919061390c83615a2e565b91905055505050565b6000610ca6825490565b6000610ca3838361436f565b600081831061393a5781610ca3565b5090919050565b6000606060008060008661ffff166001600160401b0381111561396657613966615095565b6040519080825280601f01601f191660200182016040528015613990576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156139b2578692505b828152826000602083013e9093509150505b94509492505050565b818051906020012060c960008761ffff1661ffff168152602001908152602001600020856040516139fe9190615887565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90613a5b9087908790879087908790615e45565b60405180910390a15050505050565b600054610100900460ff16613a915760405162461bcd60e51b8152600401610c1090615b5d565b61177b33612fd2565b600054610100900460ff16613ac15760405162461bcd60e51b8152600401610c1090615b5d565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16613b0a5760405162461bcd60e51b8152600401610c1090615b5d565b6036613b1683826157ce565b5060376124e582826157ce565b6000818152600183016020526040812054613b6a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca6565b506000610ca6565b600080613b7e60355490565b600003613b8c575081613bae565b613b94610cac565b603554613ba19085615b24565b613bab9190615b3b565b90505b60008111613be45760405162461bcd60e51b815260206004820152600360248201526256313360e81b6044820152606401610c10565b610ca38482614399565b6040516001600160a01b0380851660248301528316604482015260648101829052612d109085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614448565b60408051600160f01b6020820152620f424060228083019190915282518083039091018152604290910190915290565b613c93838361451d565b606082015115613cb057613cb083836000015184606001516146fc565b60408083015161ffff85166000908152610101602090815283822086516001600160a01b031683529052918220600301805491929091613cf19084906154a1565b90915550508151600090613d06908590613547565b90506000613d1882856080015161392b565b90508015613d885761ffff851660009081526101016020908152604080832087516001600160a01b0316845290915281206002018054839290613d5c90849061550a565b925050819055508060ff6000828254613d75919061550a565b90915550613d859050818361550a565b91505b60e084015115613df55760e084015161ffff861660009081526101016020908152604080832088516001600160a01b0316845290915281206002018054909190613dd39084906154a1565b909155505060e084015160ff8054600090613def9084906154a1565b90915550505b60208085015161ffff8716600081815261010180855260408083208a516001600160a01b039081168552818852828520600501969096559383529085528851909316815292529020600101541580613e5057506101005460ff165b15613e5e5783610100015191505b60a084015115613eb157613eac8460a001518686600001516003604051806020016040528088815250604051602001613e98929190615e97565b6040516020818303038152906040526147f1565b613edc565b613edc8585600001516003604051806020016040528087815250604051602001611d42929190615e97565b600061010160008761ffff1661ffff168152602001908152602001600020600086600001516001600160a01b03166001600160a01b0316815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090507f08bc8eff67f79e18165507d64024f5ca5e90a2593c7a45cb5caf7f9d843e404c8686600001518760400151886060015189608001518660600151876080015188604001518d60e001518a602001518e6040516111729b9a9998979695949392919061ffff9b909b168b526001600160a01b039990991660208b015260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b805161ffff83166000908152610101602090815260408083206001600160a01b03851684529091529020548391906140ad5760405162461bcd60e51b8152600401610c1090615ba8565b6040830151156140ca576140ca84846000015185604001516146fc565b60208084015161ffff861660009081526101018352604080822087516001600160a01b0316835290935291822060020180549192909161410b90849061550a565b9091555050602083015160ff805460009061412790849061550a565b9091555050606083015160009081526101066020526040812060030180549161414f83615a2e565b909155505060608301805160009081526101066020818152604080842061ffff8a168552600401825280842088516001600160a01b031685528252808420805460ff19166001179055845184529190528082206003015492518252902060020154036141bd576141bd6135ff565b82600001516001600160a01b03168461ffff167f046368a4ca42efbdd968b9025440eb5590bdcda7da09f4fef8ac4ef2f44a5ed0856020015186604001518760600151604051614220939291909283526020830191909152604082015260600190565b60405180910390a350505050565b6124e58363a9059cbb60e01b8484604051602401613c2292919061551d565b6001600160a01b0382166142ad5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c10565b6001600160a01b038216600090815260336020526040902054818110156143215760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c10565b6001600160a01b0383166000818152603360209081526040808320868603905560358054879003905551858152919291600080516020615f1f833981519152910160405180910390a3505050565b600082600001828154811061438657614386615a18565b9060005260206000200154905092915050565b6001600160a01b0382166143ef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c10565b806035600082825461440191906154a1565b90915550506001600160a01b038216600081815260336020908152604080832080548601905551848152600080516020615f1f833981519152910160405180910390a35050565b600061449d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148e19092919063ffffffff16565b90508051600014806144be5750808060200190518101906144be9190615536565b6124e55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c10565b61ffff821660009081526101076020908152604080832084516001600160a01b031684528252808320610120850151845290915290205460ff161561458a5760405162461bcd60e51b81526020600482015260036024820152622b189b60e91b6044820152606401610c10565b805161012082015160405160609290921b6001600160601b0319166020830152603482015260f083901b6001600160f01b031916605482015260009060560160405160208183030381529060405280519060200120905060008160405160200161461f91907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f19818403018152918152815160209283012061ffff87166000908152610101845282812087516001600160a01b039081168352945291909120600701546101408601519193509091169061467a9083906148f0565b6001600160a01b0316146146b65760405162461bcd60e51b815260206004820152600360248201526256313760e81b6044820152606401610c10565b505061ffff90911660009081526101076020908152604080832084516001600160a01b03168452825280832061012090940151835292905220805460ff19166001179055565b61ffff83166000908152610101602090815260408083206001600160a01b038616845290915290206002015481111561475d5760405162461bcd60e51b81526020600482015260036024820152622b189960e91b6044820152606401610c10565b61ffff83166000908152610101602090815260408083206001600160a01b0386168452909152812060040180548392906147989084906154a1565b909155505061ffff83166000908152610101602090815260408083206001600160a01b0386168452909152812060020180548392906147d890849061550a565b925050819055508060ff6000828254610ef5919061550a565b60fd54604051630dc6346160e01b81526000916001600160a01b031690630dc634619061482690879087908790600401615eb3565b602060405180830381865afa158015614843573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061486791906156dc565b60fd5460fc54604051633920455b60e11b81529293506001600160a01b03918216926372408ab69285926148a8929116908a908a908a908a90600401615ee1565b6000604051808303818588803b1580156148c157600080fd5b505af11580156148d5573d6000803e3d6000fd5b50505050505050505050565b60606129298484600085614914565b60008060006148ff85856149ef565b9150915061490c81614a34565b509392505050565b6060824710156149755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c10565b600080866001600160a01b031685876040516149919190615887565b60006040518083038185875af1925050503d80600081146149ce576040519150601f19603f3d011682016040523d82523d6000602084013e6149d3565b606091505b50915091506149e487838387614b79565b979650505050505050565b6000808251604103614a255760208301516040840151606085015160001a614a1987828585614bf0565b94509450505050614a2d565b506000905060025b9250929050565b6000816004811115614a4857614a486156f5565b03614a505750565b6001816004811115614a6457614a646156f5565b03614aac5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c10565b6002816004811115614ac057614ac06156f5565b03614b0d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c10565b6003816004811115614b2157614b216156f5565b036112805760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c10565b60608315614be6578251600003614bdf57614b9385612bf5565b614bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c10565b5081612929565b6129298383614ca7565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115614c1d57506000905060036139c4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614c71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614c9a576000600192509250506139c4565b9660009650945050505050565b815115614cb75781518083602001fd5b8060405162461bcd60e51b8152600401610c109190614e83565b803561ffff81168114614ce357600080fd5b919050565b60008083601f840112614cfa57600080fd5b5081356001600160401b03811115614d1157600080fd5b602083019150836020828501011115614a2d57600080fd5b80356001600160401b0381168114614ce357600080fd5b60008060008060008060808789031215614d5957600080fd5b614d6287614cd1565b955060208701356001600160401b0380821115614d7e57600080fd5b614d8a8a838b01614ce8565b9097509550859150614d9e60408a01614d29565b94506060890135915080821115614db457600080fd5b50614dc189828a01614ce8565b979a9699509497509295939492505050565b6001600160a01b038116811461128057600080fd5b60008060408385031215614dfb57600080fd5b614e0483614cd1565b91506020830135614e1481614dd3565b809150509250929050565b6001600160a01b0391909116815260200190565b60005b83811015614e4e578181015183820152602001614e36565b50506000910152565b60008151808452614e6f816020860160208601614e33565b601f01601f19169290920160200192915050565b602081526000610ca36020830184614e57565b600060208284031215614ea857600080fd5b610ca382614cd1565b60008060408385031215614ec457600080fd5b8235614ecf81614dd3565b946020939093013593505050565b600080600060608486031215614ef257600080fd5b614efb84614cd1565b92506020840135614f0b81614dd3565b929592945050506040919091013590565b60008060408385031215614f2f57600080fd5b614ecf83614cd1565b600080600080600060a08688031215614f5057600080fd5b8535614f5b81614dd3565b94506020860135614f6b81614dd3565b93506040860135614f7b81614dd3565b92506060860135614f8b81614dd3565b91506080860135614f9b81614dd3565b809150509295509295909350565b801515811461128057600080fd5b600060208284031215614fc957600080fd5b8135610ca381614fa9565b600080600060608486031215614fe957600080fd5b8335614efb81614dd3565b60008060006040848603121561500957600080fd5b61501284614cd1565b925060208401356001600160401b0381111561502d57600080fd5b61503986828701614ce8565b9497909650939450505050565b600080600080600060a0868803121561505e57600080fd5b61506786614cd1565b9450602086013561507781614dd3565b935060408601359250606086013591506080860135614f9b81614dd3565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b03811182821017156150ce576150ce615095565b60405290565b604051601f8201601f191681016001600160401b03811182821017156150fc576150fc615095565b604052919050565b60006001600160401b0382111561511d5761511d615095565b50601f01601f191660200190565b600082601f83011261513c57600080fd5b813561514f61514a82615104565b6150d4565b81815284602083860101111561516457600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561519657600080fd5b61519f84614cd1565b925060208401356001600160401b038111156151ba57600080fd5b6151c68682870161512b565b9250506151d560408501614d29565b90509250925092565b6000602082840312156151f057600080fd5b5035919050565b6000806040838503121561520a57600080fd5b823591506020830135614e1481614dd3565b60006020828403121561522e57600080fd5b8135610ca381614dd3565b6000806040838503121561524c57600080fd5b61525583614cd1565b915061526360208401614cd1565b90509250929050565b60008060006060848603121561528157600080fd5b61528a84614cd1565b9250602084013561529a81614dd3565b915060408401356152aa81614dd3565b809150509250925092565b60008060008060008060c087890312156152ce57600080fd5b6152d787614cd1565b955060208701356001600160401b03808211156152f357600080fd5b6152ff8a838b0161512b565b9650604089013595506060890135915061531882614dd3565b9093506080880135925060a0880135908082111561533557600080fd5b5061534289828a0161512b565b9150509295509295509295565b60008060008060006080868803121561536757600080fd5b61537086614cd1565b945061537e60208701614cd1565b93506040860135925060608601356001600160401b038111156153a057600080fd5b6153ac88828901614ce8565b969995985093965092949392505050565b600080604083850312156153d057600080fd5b8235614e0481614dd3565b6000806000606084860312156153f057600080fd5b6153f984614cd1565b925061540760208501614cd1565b9150604084013590509250925092565b60008060006060848603121561542c57600080fd5b833592506020840135614f0b81614dd3565b6000806000806080858703121561545457600080fd5b61545d85614cd1565b935061546b60208601614cd1565b9250604085013561547b81614dd3565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ca657610ca661548b565b600181811c908216806154c857607f821691505b6020821081036154e857634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260029082015261563160f01b604082015260600190565b81810381811115610ca657610ca661548b565b6001600160a01b03929092168252602082015260400190565b60006020828403121561554857600080fd5b8151610ca381614fa9565b60006020828403121561556557600080fd5b815160ff81168114610ca357600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612926604083018486615586565b602080825260029082015261563360f01b604082015260600190565b600181815b8085111561562457816000190482111561560a5761560a61548b565b8085161561561757918102915b93841c93908002906155ee565b509250929050565b60008261563b57506001610ca6565b8161564857506000610ca6565b816001811461565e576002811461566857615684565b6001915050610ca6565b60ff8411156156795761567961548b565b50506001821b610ca6565b5060208310610133831016604e8410600b84101617156156a7575081810a610ca6565b6156b183836155e9565b80600019048211156156c5576156c561548b565b029392505050565b6000610ca360ff84168361562c565b6000602082840312156156ee57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6005811061572957634e487b7160e01b600052602160045260246000fd5b9052565b6040810161573b828561570b565b91516001600160a01b031660209190910152919050565b8284823760609190911b6001600160601b0319169101908152601401919050565b601f8211156124e557600081815260208120601f850160051c8101602086101561579a5750805b601f850160051c820191505b81811015610c8f578281556001016157a6565b600019600383901b1c191660019190911b1790565b81516001600160401b038111156157e7576157e7615095565b6157fb816157f584546154b4565b84615773565b602080601f83116001811461582a57600084156158185750858301515b61582285826157b9565b865550610c8f565b600085815260208120601f198616915b828110156158595788860151825594840194600190910190840161583a565b50858210156158775787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251615899818460208701614e33565b9190910192915050565b805160208201516001600160601b031980821692919060148310156158d25780818460140360031b1b83161693505b505050919050565b600061ffff8088168352808716602084015250846040830152608060608301526149e4608083018486615586565b61ffff86168152608060208201526000615926608083018688615586565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561595a5761595a615095565b61596e8361596883546154b4565b83615773565b6000601f84116001811461599c576000851561598a5750838201355b61599486826157b9565b845550610dc0565b600083815260209020601f19861690835b828110156159cd57868501358255602094850194600190920191016159ad565b50868210156159ea5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602080825260029082015261158d60f21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201615a4057615a4061548b565b5060010190565b60608101615a55828561570b565b82516020830152602083015160408301529392505050565b600082601f830112615a7e57600080fd5b8151615a8c61514a82615104565b818152846020838601011115615aa157600080fd5b612929826020830160208701614e33565b600060208284031215615ac457600080fd5b81516001600160401b03811115615ada57600080fd5b61292984828501615a6d565b61ffff85168152608060208201526000615b036080830186614e57565b6001600160401b038516604084015282810360608401526149e48185614e57565b8082028115828204841417610ca657610ca661548b565b600082615b5857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600290820152612b1960f11b604082015260600190565b61ffff861681526001600160a01b038516602082015260a060408201819052600090615bf290830186614e57565b84151560608401528281036080840152615c0c8185614e57565b98975050505050505050565b60008060408385031215615c2b57600080fd5b505080516020909101519092909150565b61ffff8716815260c060208201526000615c5960c0830188614e57565b8281036040840152615c6b8188614e57565b6001600160a01b0387811660608601528616608085015283810360a08501529050615c968185614e57565b9998505050505050505050565b600060208284031215615cb557600080fd5b815160058110610ca357600080fd5b8051614ce381614dd3565b60008060408385031215615ce257600080fd5b825160208401519092506001600160401b0380821115615d0157600080fd5b908401906101608287031215615d1657600080fd5b615d1e6150ab565b615d2783615cc4565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015183811115615d9b57600080fd5b615da789828701615a6d565b8284015250508093505050509250929050565b60008082840360a0811215615dce57600080fd5b835192506080601f1982011215615de457600080fd5b50604051608081016001600160401b0381118282101715615e0757615e07615095565b6040526020840151615e1881614dd3565b80825250604084015160208201526060840151604082015260808401516060820152809150509250929050565b61ffff8616815260a060208201526000615e6260a0830187614e57565b6001600160401b03861660408401528281036060840152615e838186614e57565b90508281036080840152615c0c8185614e57565b60408101615ea5828561570b565b825160208301529392505050565b61ffff841681526001600160a01b038316602082015260606040820181905260009061292690830184614e57565b6001600160a01b0386811682526020820186905261ffff851660408301528316606082015260a0608082018190526000906149e490830184614e5756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207077938609b62d02291f92527a2cf12899418eb44bd7930873af89a95b3d205c64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7533D788 GT PUSH2 0x182 JUMPI DUP1 PUSH4 0x7533D788 EQ PUSH2 0x81D JUMPI DUP1 PUSH4 0x8CFD8F5C EQ PUSH2 0x83D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x875 JUMPI DUP1 PUSH4 0x950C8A74 EQ PUSH2 0x88A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x8AA JUMPI DUP1 PUSH4 0x99530B06 EQ PUSH2 0x8BF JUMPI DUP1 PUSH4 0x9AA7DF94 EQ PUSH2 0x8D4 JUMPI DUP1 PUSH4 0x9F38369A EQ PUSH2 0x8E9 JUMPI DUP1 PUSH4 0xA032A712 EQ PUSH2 0x909 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x929 JUMPI DUP1 PUSH4 0xA6C3D165 EQ PUSH2 0x949 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x969 JUMPI DUP1 PUSH4 0xAB033EA9 EQ PUSH2 0x989 JUMPI DUP1 PUSH4 0xAB73CE46 EQ PUSH2 0x9A9 JUMPI DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x9C0 JUMPI DUP1 PUSH4 0xB353AAA7 EQ PUSH2 0x9E0 JUMPI DUP1 PUSH4 0xBAF3292D EQ PUSH2 0xA00 JUMPI DUP1 PUSH4 0xC4461834 EQ PUSH2 0xA20 JUMPI DUP1 PUSH4 0xCBED8B9C EQ PUSH2 0xA36 JUMPI DUP1 PUSH4 0xCFBCC644 EQ PUSH2 0xA56 JUMPI DUP1 PUSH4 0xD1DEBA1F EQ PUSH2 0xA76 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xA89 JUMPI DUP1 PUSH4 0xDDE4F08E EQ PUSH2 0xAA9 JUMPI DUP1 PUSH4 0xDF2A5B3B EQ PUSH2 0xAC9 JUMPI DUP1 PUSH4 0xE63697C8 EQ PUSH2 0xAE9 JUMPI DUP1 PUSH4 0xE7FDA061 EQ PUSH2 0xB09 JUMPI DUP1 PUSH4 0xEB8D72B7 EQ PUSH2 0xB29 JUMPI DUP1 PUSH4 0xEF34253C EQ PUSH2 0xB49 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0xF5ECBDBC EQ PUSH2 0xB7E JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xB9E JUMPI DUP1 PUSH4 0xFC7B9C18 EQ PUSH2 0xBBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x1D3567 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x1DC2EB1 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x517CB76 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x7E0DB17 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0xA97C254 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0xDF37483 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x10DDB137 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x1459457A EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x14C64402 EQ PUSH2 0x47C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0x2D606843 EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x2DF9EAB9 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x4FC JUMPI DUP1 PUSH4 0x3403C2FC EQ PUSH2 0x523 JUMPI DUP1 PUSH4 0x37FDED91 EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x3D8B38F6 EQ PUSH2 0x57E JUMPI DUP1 PUSH4 0x3F1F4FA4 EQ PUSH2 0x59E JUMPI DUP1 PUSH4 0x4067CB9E EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0x42D65A8D EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0x52106A49 EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0x5AA6E675 EQ PUSH2 0x6C2 JUMPI DUP1 PUSH4 0x5B8C41E6 EQ PUSH2 0x6E2 JUMPI DUP1 PUSH4 0x5FE1A027 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0x66AD5C8A EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x7B2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x2ED JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0xBD4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xCAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x108 SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x4E1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0xD5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0xDC7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x417 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EDD JUMP JUMPDEST PUSH2 0xDDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F1C JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F38 JUMP JUMPDEST PUSH2 0xF5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FB7 JUMP JUMPDEST PUSH2 0x1182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x334 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4FD4 JUMP JUMPDEST PUSH2 0x11E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x1207 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x511 PUSH2 0x1283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 SLOAD PUSH2 0x3EC SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFD SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x579 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x12F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x599 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x1313 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x5B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63E PUSH2 0x5E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 SWAP1 SWAP8 ADD SLOAD SWAP6 SWAP7 SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x69D CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x13DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x5046 JUMP JUMPDEST PUSH2 0x1452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0x5181 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP5 MLOAD DUP1 DUP7 ADD DUP5 ADD DUP1 MLOAD SWAP3 DUP2 MSTORE SWAP1 DUP5 ADD SWAP6 DUP5 ADD SWAP6 SWAP1 SWAP6 KECCAK256 SWAP5 MSTORE SWAP3 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x775 PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x51DE JUMP JUMPDEST PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x33E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x7AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0x1689 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x7CD CALLDATASIZE PUSH1 0x4 PUSH2 0x51F7 JUMP JUMPDEST PUSH2 0x175D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x1769 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x829 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x838 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0x177D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x858 CALLDATASIZE PUSH1 0x4 PUSH2 0x5239 JUMP JUMPDEST PUSH1 0x99 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37D PUSH2 0x1817 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9B SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x1826 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1835 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1852 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0x904 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E96 JUMP JUMPDEST PUSH2 0x18C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x924 CALLDATASIZE PUSH1 0x4 PUSH2 0x526C JUMP JUMPDEST PUSH2 0x19DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x944 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x1D56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x964 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x1DD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EC PUSH2 0x984 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB1 JUMP JUMPDEST PUSH2 0x1E5A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x9A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1E68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x102 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x9DB CALLDATASIZE PUSH1 0x4 PUSH2 0x52B5 JUMP JUMPDEST PUSH2 0x1ED7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA1B CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x2025 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA51 CALLDATASIZE PUSH1 0x4 PUSH2 0x534F JUMP JUMPDEST PUSH2 0x2083 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xA71 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x20FC JUMP JUMPDEST PUSH2 0x312 PUSH2 0xA84 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D40 JUMP JUMPDEST PUSH2 0x2157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xAA4 CALLDATASIZE PUSH1 0x4 PUSH2 0x53BD JUMP JUMPDEST PUSH2 0x236D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xAC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x526C JUMP JUMPDEST PUSH2 0x2398 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xAE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x53DB JUMP JUMPDEST PUSH2 0x2428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB04 CALLDATASIZE PUSH1 0x4 PUSH2 0x5417 JUMP JUMPDEST PUSH2 0x24DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xB24 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE8 JUMP JUMPDEST PUSH2 0x24EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB44 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FF4 JUMP JUMPDEST PUSH2 0x24F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0x2550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x312 PUSH2 0xB79 CALLDATASIZE PUSH1 0x4 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x2826 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39F PUSH2 0xB99 CALLDATASIZE PUSH1 0x4 PUSH2 0x543E JUMP JUMPDEST PUSH2 0x289C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFC SLOAD PUSH2 0x37D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH1 0xFF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x56313 PUSH1 0xEC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC8F DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE DUP10 SWAP4 POP SWAP2 POP DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2931 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x29AA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB6 PUSH2 0x1852 JUMP JUMPDEST PUSH1 0xFF SLOAD PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0xCD7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD03 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD50 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD25 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD50 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD33 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD62 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7E0DB17 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E0DB17 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x2AD1 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xE10 JUMPI POP PUSH2 0xDFB PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0xE6B SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE PUSH1 0xFE SLOAD PUSH2 0x2710 SWAP1 PUSH2 0xEB0 SWAP1 DUP4 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST GT ISZERO PUSH2 0xEE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x2B1B PUSH1 0xF1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEF5 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF07 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0xF26 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x10DDB137 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x10DDB137 SWAP1 PUSH1 0x24 ADD PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xF7A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xF9B JUMPI POP PUSH2 0xF89 ADDRESS PUSH2 0x2BF5 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xF9B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1021 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x102A DUP6 PUSH2 0x2C04 JUMP JUMPDEST PUSH2 0x1032 PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x107E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x13DB5B9A58DA185A5B8815985D5B1D PUSH1 0x8A SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x27A6AB PUSH1 0xE9 SHL DUP2 MSTORE POP PUSH2 0x2C6B JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xFC DUP1 SLOAD DUP8 DUP5 AND SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xFD DUP1 SLOAD DUP8 DUP6 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH2 0x108 DUP1 SLOAD SWAP4 DUP7 AND SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x95EA7B3 SWAP1 PUSH2 0x10F0 SWAP1 DUP7 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x551D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x110F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1133 SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x11B3 JUMPI POP PUSH2 0x119E PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x11CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x100 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x11F1 DUP6 DUP3 DUP6 PUSH2 0x2C9C JUMP JUMPDEST PUSH2 0x11FC DUP6 DUP6 DUP6 PUSH2 0x2D16 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1238 JUMPI POP PUSH2 0x1223 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1280 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x313CE567 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x5553 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x1304 DUP4 DUP4 PUSH2 0x236D JUMP JUMPDEST PUSH2 0x130E SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH2 0x1334 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1360 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1382 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1390 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x13C4 SWAP3 SWAP2 SWAP1 PUSH2 0x5576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13E7 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x42D65A8D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x42D65A8D SWAP1 PUSH2 0x141B SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x55AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1449 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1483 JUMPI POP PUSH2 0x146E PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x149F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 SWAP1 DUP6 SWAP1 ISZERO PUSH2 0x14E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x55CD JUMP JUMPDEST PUSH2 0x2710 DUP6 PUSH1 0xFE SLOAD PUSH2 0x14FA SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST GT ISZERO PUSH2 0x152D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5635 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x101 PUSH1 0x0 DUP10 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x1657 DUP7 PUSH2 0x103 PUSH1 0x0 DUP11 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x2EAF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0x1668 PUSH2 0x104 PUSH2 0xFFFF DUP10 AND PUSH2 0x2EC4 JUMP JUMPDEST POP DUP5 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x16E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A2063616C6C6572206D757374206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x204C7A41707 PUSH1 0xD4 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xC8F DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE DUP10 SWAP4 POP SWAP2 POP DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2ED0 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x2F6E JUMP JUMPDEST PUSH2 0x1771 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0x177B PUSH1 0x0 PUSH2 0x2FD2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x1796 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17C2 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x180F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17E4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x180F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17F2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0xCD7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC3 PUSH2 0x1842 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x184D SWAP1 PUSH1 0xA PUSH2 0x56CD JUMP JUMPDEST PUSH2 0x3024 JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1883 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x4E1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC3 SWAP2 SWAP1 PUSH2 0x56DC JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x18E7 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1913 SWAP1 PUSH2 0x54B4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1960 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1935 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1960 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1943 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x19B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C7A4170703A206E6F20747275737465642070617468207265636F7264000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x19D3 PUSH1 0x0 PUSH1 0x14 DUP4 MLOAD PUSH2 0x19CB SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST DUP4 SWAP2 SWAP1 PUSH2 0x3059 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1A0B JUMPI POP PUSH2 0x19F6 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1A27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP1 DUP3 SWAP1 ISZERO PUSH2 0x1A71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x55CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1AAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5637 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP9 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xC8F DUP7 DUP7 PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x572D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x3166 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1D64 DUP3 DUP7 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1DC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x11FC DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0x1DD9 PUSH2 0x2A72 JUMP JUMPDEST DUP2 DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1DEE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5752 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH2 0x1E19 SWAP1 DUP3 PUSH2 0x57CE JUMP JUMPDEST POP PUSH32 0x8C0400CFE2D1199B1A725C78960BCC2A344D869B80590D0F2BD005DB15A572CE DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x55AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xDD5 DUP2 DUP6 DUP6 PUSH2 0x2D16 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1E99 JUMPI POP PUSH2 0x1E84 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1EB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x1F19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xAC7 PUSH1 0xF3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x108 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1F3D JUMPI POP PUSH1 0xFD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST DUP1 PUSH2 0x1F60 JUMPI POP PUSH2 0x1F4B PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1F91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5639 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F9F DUP7 DUP3 PUSH1 0x14 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1FAF SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1FC7 SWAP1 PUSH2 0x58A3 JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 POP PUSH2 0x1FD7 DUP8 DUP4 DUP6 PUSH2 0x3310 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP7 AND SWAP2 PUSH32 0x92073A89A07A000083EB8B2575FC15E7BB936EFE55D00727D6942A796D7211A7 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x202D PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x9B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5DB758E995A17EC1AD84BDEF7E8C3293A0BD6179BCCE400DFF5D4C3D87DB726B SWAP1 PUSH2 0x2078 SWAP1 DUP4 SWAP1 PUSH2 0x4E1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x208B PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x32FB62E7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xCBED8B9C SWAP1 PUSH2 0x20C3 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x58DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x212D JUMPI POP PUSH2 0x2118 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x2149 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x2153 DUP3 DUP3 PUSH2 0x33A7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH2 0x217A SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x5576 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH2 0x21FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A206E6F2073746F726564206D657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x616765 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x220B SWAP3 SWAP2 SWAP1 PUSH2 0x5576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ PUSH2 0x226A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E626C6F636B696E674C7A4170703A20696E76616C6964207061796C6F61 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH2 0x228D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x5576 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP5 MSTORE DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x1F DUP9 ADD DUP3 SWAP1 DIV DUP3 MUL DUP4 ADD DUP3 ADD SWAP1 MSTORE DUP7 DUP3 MSTORE PUSH2 0x2325 SWAP2 DUP10 SWAP2 DUP10 SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP11 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP9 DUP2 MSTORE DUP11 SWAP4 POP SWAP2 POP DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2ED0 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xC264D91F3ADC5588250E1551F547752CA0CFA8F6B530D243B9F9F4CAB10EA8E5 DUP8 DUP8 DUP8 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0x235C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x23C9 JUMPI POP PUSH2 0x23B4 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x23E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0xFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2430 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2478 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4C7A4170703A20696E76616C6964206D696E476173 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x9D5C7C0B934DA8FEFA9C7760C98383778A12DFBFC0C3B3106518F43FB9508AC0 SWAP1 PUSH1 0x60 ADD PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x24E5 DUP4 DUP4 DUP4 PUSH2 0x341C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x3547 JUMP JUMPDEST PUSH2 0x24FE PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x251C DUP3 DUP5 DUP4 PUSH2 0x5943 JUMP JUMPDEST POP PUSH32 0xFA41487AD5D6728F0B19276FA1EDDC16558578F5109FC39D2DC33C3230470DAB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x55AF JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2581 JUMPI POP PUSH2 0x256C PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x259D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x59FC JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2655 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x2618 JUMPI PUSH2 0x2618 PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH2 0x2635 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x263F SWAP1 DUP5 PUSH2 0x54A1 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x264D SWAP1 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25D8 JUMP JUMPDEST POP PUSH2 0x265E PUSH2 0x1852 JUMP JUMPDEST DUP2 GT PUSH2 0x266C JUMPI PUSH2 0x1280 PUSH2 0x35FF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2676 PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x2680 SWAP1 DUP4 PUSH2 0x550A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x2691 PUSH2 0x104 PUSH2 0x3915 JUMP JUMPDEST DUP2 LT DUP1 ISZERO PUSH2 0x269F JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x27F0 JUMPI PUSH1 0x0 PUSH2 0x26B2 PUSH2 0x104 DUP4 PUSH2 0x391F JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST PUSH2 0x26D3 DUP3 PUSH2 0x3915 JUMP JUMPDEST DUP2 LT DUP1 ISZERO PUSH2 0x26E1 JUMPI POP PUSH1 0x0 DUP7 GT JUMPDEST ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 PUSH2 0x26F2 DUP4 DUP4 PUSH2 0x391F JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD SWAP3 SWAP4 POP SWAP2 SWAP1 SUB PUSH2 0x2730 JUMPI POP POP PUSH2 0x27C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2740 DUP10 DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x392B JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP12 AND DUP5 MSTORE PUSH1 0x5 ADD DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0x2785 DUP2 DUP11 PUSH2 0x550A JUMP JUMPDEST SWAP9 POP PUSH2 0x27B7 DUP7 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x102 SLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x5A47 JUMP JUMPDEST DUP8 PUSH2 0x27C1 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP9 POP POP POP POP POP JUMPDEST DUP1 PUSH2 0x27D2 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26CA JUMP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0x27E8 SWAP1 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2686 JUMP JUMPDEST POP PUSH2 0x102 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MSTORE KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x282E PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x1280 DUP2 PUSH2 0x2FD2 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3D7B2F6F PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0xFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5ECBDBC SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2926 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5AB2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2994 GAS PUSH1 0x96 PUSH4 0x66AD5C8A PUSH1 0xE0 SHL DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2959 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE ADDRESS SWAP3 SWAP2 SWAP1 PUSH2 0x3941 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xC8F JUMPI PUSH2 0xC8F DUP7 DUP7 DUP7 DUP7 DUP6 PUSH2 0x39CD JUMP JUMPDEST PUSH2 0x100 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x29C1 JUMPI POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0x29CE PUSH2 0xCAC JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x2A04 SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP DUP1 DUP3 GT PUSH2 0x2A4F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x2A69 PUSH2 0x2A5A PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x2A64 DUP4 DUP6 PUSH2 0x550A JUMP JUMPDEST PUSH2 0x392B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x2A7B PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x177B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2B33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2B94 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x2C33 PUSH2 0x3A6A JUMP JUMPDEST PUSH2 0x1280 DUP2 PUSH2 0x3A9A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x177B PUSH2 0x3A6A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C92 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x2153 DUP3 DUP3 PUSH2 0x3AE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA8 DUP5 DUP5 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2D10 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x2D10 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x2AD1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2DDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x2E54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x2EA2 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3B23 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x3B23 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EDE DUP5 DUP3 PUSH1 0x14 PUSH2 0x3059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EEE SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2F06 SWAP1 PUSH2 0x58A3 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 SWAP5 SWAP1 SWAP5 SHR DUP1 DUP5 MSTORE SWAP4 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x2F62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563135 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xDC0 DUP6 DUP4 PUSH1 0x0 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0x100 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x2FAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563131 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB7 DUP4 DUP6 PUSH2 0x3B72 JUMP JUMPDEST PUSH1 0xFC SLOAD SWAP1 SWAP2 POP PUSH2 0xCA3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP8 PUSH2 0x3BEE JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x302F PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x303A JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x3045 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x304F SWAP1 DUP5 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0xCA6 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x3067 DUP2 PUSH1 0x1F PUSH2 0x54A1 JUMP JUMPDEST LT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0x30B0 DUP3 DUP5 PUSH2 0x54A1 JUMP JUMPDEST DUP5 MLOAD LT ISZERO PUSH2 0x30F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x3113 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x315D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x314C JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x3134 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP1 DUP4 SWAP1 PUSH2 0x31AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP7 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE ADDRESS SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x97 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40A7BB10 DUP9 ADDRESS DUP9 DUP6 PUSH2 0x3209 PUSH2 0x3C59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3229 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5BC4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3245 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3269 SWAP2 SWAP1 PUSH2 0x5C18 JUMP JUMPDEST POP SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x3295 JUMPI PUSH1 0x40 MLOAD PUSH3 0xFAE2D5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SELFBALANCE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5803100 DUP3 DUP10 DUP6 DUP10 ADDRESS DUP1 PUSH2 0x32B4 PUSH2 0x3C59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32D5 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3326 SWAP2 SWAP1 PUSH2 0x5CA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x333C JUMPI PUSH2 0x333C PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x336B JUMPI PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3357 SWAP2 SWAP1 PUSH2 0x5CCF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3365 DUP6 DUP3 DUP6 PUSH2 0x3C89 JUMP JUMPDEST POP PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x337F JUMPI PUSH2 0x337F PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x2D10 JUMPI PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x339A SWAP2 SWAP1 PUSH2 0x5DBA JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDC0 DUP6 DUP3 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x33E6 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 PUSH1 0x1 ADD SSTORE JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3453 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x59FC JUMP JUMPDEST PUSH2 0x345E CALLER ADDRESS DUP6 PUSH2 0x2D16 JUMP JUMPDEST PUSH2 0x106 PUSH1 0x0 PUSH2 0x102 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x34B6 DUP7 PUSH2 0x3024 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP4 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP7 SSTORE SWAP5 DUP3 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x6 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR DUP3 SSTORE SWAP3 DUP5 ADD MLOAD SWAP5 DUP2 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2710 PUSH2 0x3555 PUSH2 0xCAC JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x358B SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x3595 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x35DA JUMPI SWAP2 POP PUSH2 0xCA6 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0x35EC JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x35F6 DUP3 DUP3 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x3646 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x158C4D PUSH1 0xEA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3660 JUMPI PUSH2 0x3660 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3689 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3709 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x36BC JUMPI PUSH2 0x36BC PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH2 0x36D9 DUP2 PUSH1 0x2 ADD SLOAD PUSH2 0x3024 JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x36EB JUMPI PUSH2 0x36EB PUSH2 0x5A18 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP DUP1 PUSH2 0x3701 DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x368F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38A2 JUMPI PUSH2 0x102 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x373A JUMPI PUSH2 0x373A PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD SWAP1 POP PUSH1 0x0 PUSH2 0x3771 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3761 JUMPI PUSH2 0x3761 PUSH2 0x5A18 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A64 PUSH2 0x1852 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x3850 JUMPI PUSH1 0x0 DUP2 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x3791 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD DUP3 PUSH2 0x2710 PUSH2 0x37A8 SWAP2 SWAP1 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x37B2 SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x3 ADD SLOAD DUP2 GT ISZERO PUSH2 0x384D JUMPI PUSH1 0x5 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP4 SLOAD PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0x3800 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x4 ADD PUSH2 0x551D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x381F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3843 SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST POP POP POP POP POP PUSH2 0x3890 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 ADD SLOAD PUSH1 0xFC SLOAD PUSH2 0x387F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 0x422E JUMP JUMPDEST PUSH2 0x388D ADDRESS DUP4 PUSH1 0x2 ADD SLOAD PUSH2 0x424D JUMP JUMPDEST POP POP JUMPDEST DUP1 PUSH2 0x389A DUP2 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x370D JUMP JUMPDEST POP PUSH2 0x102 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0xC682EB885C208B8AAAA811C05902E24A4F14B388960311623A8F31404F655129 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x102 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP2 SLOAD SWAP2 SWAP1 PUSH2 0x390C DUP4 PUSH2 0x5A2E JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 DUP4 DUP4 PUSH2 0x436F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x393A JUMPI DUP2 PUSH2 0xCA3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 PUSH2 0xFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3966 JUMPI PUSH2 0x3966 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3990 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP8 MLOAD PUSH1 0x20 DUP10 ADD PUSH1 0x0 DUP14 DUP14 CALL SWAP2 POP RETURNDATASIZE SWAP3 POP DUP7 DUP4 GT ISZERO PUSH2 0x39B2 JUMPI DUP7 SWAP3 POP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC9 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x40 MLOAD PUSH2 0x39FE SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB PUSH1 0x20 SWAP1 DUP2 ADD DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 MSTORE KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0xE183F33DE2837795525B4792CA4CD60535BD77C53B7E7030060BFCF5734D6B0C SWAP1 PUSH2 0x3A5B SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5E45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH2 0x177B CALLER PUSH2 0x2FD2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3AC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3B0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5B5D JUMP JUMPDEST PUSH1 0x36 PUSH2 0x3B16 DUP4 DUP3 PUSH2 0x57CE JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0x24E5 DUP3 DUP3 PUSH2 0x57CE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x3B6A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xCA6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3B7E PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x3B8C JUMPI POP DUP2 PUSH2 0x3BAE JUMP JUMPDEST PUSH2 0x3B94 PUSH2 0xCAC JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x3BA1 SWAP1 DUP6 PUSH2 0x5B24 JUMP JUMPDEST PUSH2 0x3BAB SWAP2 SWAP1 PUSH2 0x5B3B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x3BE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563133 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xCA3 DUP5 DUP3 PUSH2 0x4399 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2D10 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x4448 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xF4240 PUSH1 0x22 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x42 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3C93 DUP4 DUP4 PUSH2 0x451D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD ISZERO PUSH2 0x3CB0 JUMPI PUSH2 0x3CB0 DUP4 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x46FC JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP1 MSTORE SWAP2 DUP3 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x3CF1 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3D06 SWAP1 DUP6 SWAP1 PUSH2 0x3547 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D18 DUP3 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x392B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3D88 JUMPI PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x3D5C SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3D75 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3D85 SWAP1 POP DUP2 DUP4 PUSH2 0x550A JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD ISZERO PUSH2 0x3DF5 JUMPI PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3DD3 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0xFF DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x3DEF SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH2 0xFFFF DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x101 DUP1 DUP6 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE DUP2 DUP9 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x5 ADD SWAP7 SWAP1 SWAP7 SSTORE SWAP4 DUP4 MSTORE SWAP1 DUP6 MSTORE DUP9 MLOAD SWAP1 SWAP4 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO DUP1 PUSH2 0x3E50 JUMPI POP PUSH2 0x100 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x3E5E JUMPI DUP4 PUSH2 0x100 ADD MLOAD SWAP2 POP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD ISZERO PUSH2 0x3EB1 JUMPI PUSH2 0x3EAC DUP5 PUSH1 0xA0 ADD MLOAD DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E98 SWAP3 SWAP2 SWAP1 PUSH2 0x5E97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x47F1 JUMP JUMPDEST PUSH2 0x3EDC JUMP JUMPDEST PUSH2 0x3EDC DUP6 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D42 SWAP3 SWAP2 SWAP1 PUSH2 0x5E97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP8 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH32 0x8BC8EFF67F79E18165507D64024F5CA5E90A2593C7A45CB5CAF7F9D843E404C DUP7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD DUP15 PUSH1 0x40 MLOAD PUSH2 0x1172 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFFFF SWAP12 SWAP1 SWAP12 AND DUP12 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 SWAP1 SWAP10 AND PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP10 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP9 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 SWAP2 SWAP1 PUSH2 0x40AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP1 PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD ISZERO PUSH2 0x40CA JUMPI PUSH2 0x40CA DUP5 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x46FC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 DUP3 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x410B SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0xFF DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4127 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP2 PUSH2 0x414F DUP4 PUSH2 0x5A2E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x106 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH2 0xFFFF DUP11 AND DUP6 MSTORE PUSH1 0x4 ADD DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 MLOAD DUP5 MSTORE SWAP2 SWAP1 MSTORE DUP1 DUP3 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP3 MLOAD DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SUB PUSH2 0x41BD JUMPI PUSH2 0x41BD PUSH2 0x35FF JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0xFFFF AND PUSH32 0x46368A4CA42EFBDD968B9025440EB5590BDCDA7DA09F4FEF8AC4EF2F44A5ED0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x4220 SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x24E5 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3C22 SWAP3 SWAP2 SWAP1 PUSH2 0x551D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x42AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4386 JUMPI PUSH2 0x4386 PUSH2 0x5A18 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x43EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4401 SWAP2 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5F1F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x44BE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x44BE SWAP2 SWAP1 PUSH2 0x5536 JUMP JUMPDEST PUSH2 0x24E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x107 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0x120 DUP6 ADD MLOAD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x458A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x2B189B PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0xF0 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x54 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x56 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x461F SWAP2 SWAP1 PUSH28 0xCA2BA3432B932BAB69029B4B3B732B21026B2B9B9B0B3B29D051999 PUSH1 0x21 SHL DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 DUP5 MSTORE DUP3 DUP2 KECCAK256 DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE SWAP5 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x140 DUP7 ADD MLOAD SWAP2 SWAP4 POP SWAP1 SWAP2 AND SWAP1 PUSH2 0x467A SWAP1 DUP4 SWAP1 PUSH2 0x48F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x46B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x563137 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST POP POP PUSH2 0xFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x107 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0x120 SWAP1 SWAP5 ADD MLOAD DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP2 GT ISZERO PUSH2 0x475D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x2B1899 PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x4 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x4798 SWAP1 DUP5 SWAP1 PUSH2 0x54A1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x101 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x47D8 SWAP1 DUP5 SWAP1 PUSH2 0x550A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEF5 SWAP2 SWAP1 PUSH2 0x550A JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH4 0xDC63461 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDC63461 SWAP1 PUSH2 0x4826 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5EB3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4843 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4867 SWAP2 SWAP1 PUSH2 0x56DC JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0xFC SLOAD PUSH1 0x40 MLOAD PUSH4 0x3920455B PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x72408AB6 SWAP3 DUP6 SWAP3 PUSH2 0x48A8 SWAP3 SWAP2 AND SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5EE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2929 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x4914 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x48FF DUP6 DUP6 PUSH2 0x49EF JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x490C DUP2 PUSH2 0x4A34 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4975 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4991 SWAP2 SWAP1 PUSH2 0x5887 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x49CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x49D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x49E4 DUP8 DUP4 DUP4 DUP8 PUSH2 0x4B79 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x4A25 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x4A19 DUP8 DUP3 DUP6 DUP6 PUSH2 0x4BF0 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x4A2D JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4A48 JUMPI PUSH2 0x4A48 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4A50 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4A64 JUMPI PUSH2 0x4A64 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4AAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4AC0 JUMPI PUSH2 0x4AC0 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x4B0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4B21 JUMPI PUSH2 0x4B21 PUSH2 0x56F5 JUMP JUMPDEST SUB PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4BE6 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x4BDF JUMPI PUSH2 0x4B93 DUP6 PUSH2 0x2BF5 JUMP JUMPDEST PUSH2 0x4BDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xC10 JUMP JUMPDEST POP DUP2 PUSH2 0x2929 JUMP JUMPDEST PUSH2 0x2929 DUP4 DUP4 PUSH2 0x4CA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF60 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 GT ISZERO PUSH2 0x4C1D JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x39C4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4C9A JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x39C4 JUMP JUMPDEST SWAP7 PUSH1 0x0 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x4CB7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC10 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4D11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D62 DUP8 PUSH2 0x4CD1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4D7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D8A DUP11 DUP4 DUP12 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP DUP6 SWAP2 POP PUSH2 0x4D9E PUSH1 0x40 DUP11 ADD PUSH2 0x4D29 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4DB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC1 DUP10 DUP3 DUP11 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4DFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E04 DUP4 PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4E14 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E4E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E36 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E6F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4E33 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCA3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCA3 DUP3 PUSH2 0x4CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4ECF DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EFB DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4F0B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4ECF DUP4 PUSH2 0x4CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4F50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4F5B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4F6B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4F7B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4F8B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F9B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4EFB DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5012 DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x502D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5039 DUP7 DUP3 DUP8 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x505E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5067 DUP7 PUSH2 0x4CD1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x5077 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4F9B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x50CE JUMPI PUSH2 0x50CE PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x50FC JUMPI PUSH2 0x50FC PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x511D JUMPI PUSH2 0x511D PUSH2 0x5095 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x513C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x514F PUSH2 0x514A DUP3 PUSH2 0x5104 JUMP JUMPDEST PUSH2 0x50D4 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x519F DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51C6 DUP7 DUP3 DUP8 ADD PUSH2 0x512B JUMP JUMPDEST SWAP3 POP POP PUSH2 0x51D5 PUSH1 0x40 DUP6 ADD PUSH2 0x4D29 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x520A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4E14 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x524C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5255 DUP4 PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH2 0x5263 PUSH1 0x20 DUP5 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x528A DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x529A DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x52AA DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x52CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x52D7 DUP8 PUSH2 0x4CD1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x52F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x52FF DUP11 DUP4 DUP12 ADD PUSH2 0x512B JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x5318 DUP3 PUSH2 0x4DD3 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x5335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5342 DUP10 DUP3 DUP11 ADD PUSH2 0x512B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5370 DUP7 PUSH2 0x4CD1 JUMP JUMPDEST SWAP5 POP PUSH2 0x537E PUSH1 0x20 DUP8 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x53A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x53AC DUP9 DUP3 DUP10 ADD PUSH2 0x4CE8 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x53D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4E04 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x53F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x53F9 DUP5 PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH2 0x5407 PUSH1 0x20 DUP6 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x542C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4F0B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x545D DUP6 PUSH2 0x4CD1 JUMP JUMPDEST SWAP4 POP PUSH2 0x546B PUSH1 0x20 DUP7 ADD PUSH2 0x4CD1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x547B DUP2 PUSH2 0x4DD3 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x54C8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x54E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x5631 PUSH1 0xF0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xCA3 DUP2 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2926 PUSH1 0x40 DUP4 ADD DUP5 DUP7 PUSH2 0x5586 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x5633 PUSH1 0xF0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x5624 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x560A JUMPI PUSH2 0x560A PUSH2 0x548B JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x5617 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x55EE JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x563B JUMPI POP PUSH1 0x1 PUSH2 0xCA6 JUMP JUMPDEST DUP2 PUSH2 0x5648 JUMPI POP PUSH1 0x0 PUSH2 0xCA6 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x565E JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5668 JUMPI PUSH2 0x5684 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xCA6 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x5679 JUMPI PUSH2 0x5679 PUSH2 0x548B JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xCA6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x56A7 JUMPI POP DUP2 DUP2 EXP PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0x56B1 DUP4 DUP4 PUSH2 0x55E9 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x56C5 JUMPI PUSH2 0x56C5 PUSH2 0x548B JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA3 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x562C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x5729 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x573B DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x24E5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x579A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x57A6 JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND PUSH1 0x1 SWAP2 SWAP1 SWAP2 SHL OR SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x57E7 JUMPI PUSH2 0x57E7 PUSH2 0x5095 JUMP JUMPDEST PUSH2 0x57FB DUP2 PUSH2 0x57F5 DUP5 SLOAD PUSH2 0x54B4 JUMP JUMPDEST DUP5 PUSH2 0x5773 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x582A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x5818 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH2 0x5822 DUP6 DUP3 PUSH2 0x57B9 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5859 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x583A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x5877 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5899 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4E33 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x58D2 JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x49E4 PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x5586 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5926 PUSH1 0x80 DUP4 ADD DUP7 DUP9 PUSH2 0x5586 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x595A JUMPI PUSH2 0x595A PUSH2 0x5095 JUMP JUMPDEST PUSH2 0x596E DUP4 PUSH2 0x5968 DUP4 SLOAD PUSH2 0x54B4 JUMP JUMPDEST DUP4 PUSH2 0x5773 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x599C JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x598A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH2 0x5994 DUP7 DUP3 PUSH2 0x57B9 JUMP JUMPDEST DUP5 SSTORE POP PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x59CD JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x59AD JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x59EA JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x158D PUSH1 0xF2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5A40 JUMPI PUSH2 0x5A40 PUSH2 0x548B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5A55 DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x5A8C PUSH2 0x514A DUP3 PUSH2 0x5104 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5AA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2929 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4E33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2929 DUP5 DUP3 DUP6 ADD PUSH2 0x5A6D JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5B03 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x49E4 DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B58 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x2B19 PUSH1 0xF1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5BF2 SWAP1 DUP4 ADD DUP7 PUSH2 0x4E57 JUMP JUMPDEST DUP5 ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C0C DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND DUP2 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5C59 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x4E57 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5C6B DUP2 DUP9 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x60 DUP7 ADD MSTORE DUP7 AND PUSH1 0x80 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0xA0 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x5C96 DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x4CE3 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5D01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x5D16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D1E PUSH2 0x50AB JUMP JUMPDEST PUSH2 0x5D27 DUP4 PUSH2 0x5CC4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x5D9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5DA7 DUP10 DUP3 DUP8 ADD PUSH2 0x5A6D JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x80 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x5DE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5E07 JUMPI PUSH2 0x5E07 PUSH2 0x5095 JUMP JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x5E18 DUP2 PUSH2 0x4DD3 JUMP JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5E62 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x5E83 DUP2 DUP7 PUSH2 0x4E57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C0C DUP2 DUP6 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5EA5 DUP3 DUP6 PUSH2 0x570B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2926 SWAP1 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE PUSH2 0xFFFF DUP6 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x49E4 SWAP1 DUP4 ADD DUP5 PUSH2 0x4E57 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x77938609B62D02291F92527A2CF1289941 DUP15 0xB4 0x4B 0xD7 SWAP4 ADDMOD PUSH20 0xAF89A95B3D205C64736F6C634300081300330000 ","sourceMap":"1031:20831:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10284:308;;;;;;;;;;-1:-1:-1;10284:308:23;;;;;:::i;:::-;;:::i;:::-;;5386:176;;;;;;;;;;-1:-1:-1;5386:176:23;;;;;:::i;:::-;;:::i;:::-;;;2179:25:28;;;2167:2;2152:18;5386:176:23;;;;;;;;3823:109;;;;;;;;;;;;;:::i;2485:23::-;;;;;;;;;;-1:-1:-1;2485:23:23;;;;-1:-1:-1;;;;;2485:23:23;;;;;;;;;;:::i;2495:98:9:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4867:121:3:-;;;;;;;;;;-1:-1:-1;4867:121:3;;;;;:::i;:::-;;:::i;4781:197:9:-;;;;;;;;;;-1:-1:-1;4781:197:9;;;;;:::i;:::-;;:::i;:::-;;;3853:14:28;;3846:22;3828:41;;3816:2;3801:18;4781:197:9;3688:187:28;8144:393:23;;;;;;;;;;-1:-1:-1;8144:393:23;;;;;:::i;:::-;;:::i;6741:140:3:-;;;;;;;;;;-1:-1:-1;6741:140:3;;;;;:::i;:::-;;:::i;4994:127::-;;;;;;;;;;-1:-1:-1;4994:127:3;;;;;:::i;:::-;;:::i;1354:513:23:-;;;;;;;;;;-1:-1:-1;1354:513:23;;;;;:::i;:::-;;:::i;3327:148::-;;;;;;;;;;-1:-1:-1;3327:148:23;;;;;:::i;:::-;;:::i;3592:106:9:-;;;;;;;;;;-1:-1:-1;3679:12:9;;3592:106;;5540:256;;;;;;;;;;-1:-1:-1;5540:256:9;;;;;:::i;:::-;;:::i;3197:124:23:-;;;;;;;;;;;;;:::i;1979:29::-;;;;;;;;;;;;;;;;3059:132;;;;;;;;;;;;;:::i;:::-;;;6364:4:28;6352:17;;;6334:36;;6322:2;6307:18;3059:132:23;6192:184:28;2044:29:23;;;;;;;;;;-1:-1:-1;2044:29:23;;;;;;;;1948:25;;;;;;;;;;-1:-1:-1;1948:25:23;;;;-1:-1:-1;;;;;1948:25:23;;;6191:234:9;;;;;;;;;;-1:-1:-1;6191:234:9;;;;;:::i;:::-;;:::i;6976:247:3:-;;;;;;;;;;-1:-1:-1;6976:247:3;;;;;:::i;:::-;;:::i;927:53::-;;;;;;;;;;-1:-1:-1;927:53:3;;;;;:::i;:::-;;;;;;;;;;;;;;2079:71:23;;;;;;;;;;-1:-1:-1;2079:71:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2079:71:23;;;;;;;7436:25:28;;;7492:2;7477:18;;7470:34;;;;7520:18;;;7513:34;;;;7578:2;7563:18;;7556:34;;;;7621:3;7606:19;;7599:35;7665:3;7650:19;;7643:35;7709:3;7694:19;;7687:35;-1:-1:-1;;;;;7759:32:28;7753:3;7738:19;;7731:61;7423:3;7408:19;2079:71:23;7093:705:28;5127:176:3;;;;;;;;;;-1:-1:-1;5127:176:3;;;;;:::i;:::-;;:::i;4418:780:23:-;;;;;;;;;;-1:-1:-1;4418:780:23;;;;;:::i;:::-;;:::i;1873:34::-;;;;;;;;;;-1:-1:-1;1873:34:23;;;;-1:-1:-1;;;;;1873:34:23;;;911:85:4;;;;;;;;;;-1:-1:-1;911:85:4;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2325:55:23;;;;;;;;;;-1:-1:-1;2325:55:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10793:14:28;;10786:22;10768:41;;10840:2;10825:18;;10818:34;;;;10868:18;;;10861:34;10756:2;10741:18;2325:55:23;10572:329:28;2114:342:4;;;;;;;;;;-1:-1:-1;2114:342:4;;;;;:::i;:::-;;:::i;4049:165:23:-;;;;;;;;;;-1:-1:-1;4049:165:23;;;;;:::i;:::-;;:::i;3756:125:9:-;;;;;;;;;;-1:-1:-1;3756:125:9;;;;;:::i;:::-;-1:-1:-1;;;;;3856:18:9;3830:7;3856:18;;;:9;:18;;;;;;;3756:125;2064:101:7;;;;;;;;;;;;;:::i;799:51:3:-;;;;;;;;;;-1:-1:-1;799:51:3;;;;;:::i;:::-;;:::i;856:65::-;;;;;;;;;;-1:-1:-1;856:65:3;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1441:85:7;;;;;;;;;;;;;:::i;986:23:3:-;;;;;;;;;;-1:-1:-1;986:23:3;;;;-1:-1:-1;;;;;986:23:3;;;2706:102:9;;;;;;;;;;;;;:::i;7845:119:23:-;;;;;;;;;;;;;:::i;3938:105::-;;;;;;;;;;;;;:::i;5931:326:3:-;;;;;;;;;;-1:-1:-1;5931:326:3;;;;;:::i;:::-;;:::i;8543:1060:23:-;;;;;;;;;;-1:-1:-1;8543:1060:23;;;;;:::i;:::-;;:::i;6912:427:9:-;;;;;;;;;;-1:-1:-1;6912:427:9;;;;;:::i;:::-;;:::i;5647:278:3:-;;;;;;;;;;-1:-1:-1;5647:278:3;;;;;:::i;:::-;;:::i;4077:189:9:-;;;;;;;;;;-1:-1:-1;4077:189:9;;;;;:::i;:::-;;:::i;3481:115:23:-;;;;;;;;;;-1:-1:-1;3481:115:23;;;;;:::i;:::-;;:::i;2156:28::-;;;;;;;;;;;;;;;;9609:669;;;;;;;;;;-1:-1:-1;9609:669:23;;;;;:::i;:::-;;:::i;746:47:3:-;;;;;;;;;;-1:-1:-1;746:47:3;;;;-1:-1:-1;;;;;746:47:3;;;6263:133;;;;;;;;;;-1:-1:-1;6263:133:3;;;;;:::i;:::-;;:::i;684:55::-;;;;;;;;;;;;734:5;684:55;;4659:202;;;;;;;;;;-1:-1:-1;4659:202:3;;;;;:::i;:::-;;:::i;7970:168:23:-;;;;;;;;;;-1:-1:-1;7970:168:23;;;;;:::i;:::-;;:::i;2637:757:4:-;;;;;;:::i;:::-;;:::i;4324:149:9:-;;;;;;;;;;-1:-1:-1;4324:149:9;;;;;:::i;:::-;;:::i;3603:213:23:-;;;;;;;;;;-1:-1:-1;3603:213:23;;;;;:::i;:::-;;:::i;6402:280:3:-;;;;;;;;;;-1:-1:-1;6402:280:3;;;;;:::i;:::-;;:::i;4220:192:23:-;;;;;;;;;;-1:-1:-1;4220:192:23;;;;;:::i;:::-;;:::i;5204:176::-;;;;;;;;;;-1:-1:-1;5204:176:23;;;;;:::i;:::-;;:::i;5446:195:3:-;;;;;;;;;;-1:-1:-1;5446:195:3;;;;;:::i;:::-;;:::i;5568:2271:23:-;;;;;;;;;;;;;:::i;2314:198:7:-;;;;;;;;;;-1:-1:-1;2314:198:7;;;;;:::i;:::-;;:::i;4391:209:3:-;;;;;;;;;;-1:-1:-1;4391:209:3;;;;;:::i;:::-;;:::i;1913:28:23:-;;;;;;;;;;-1:-1:-1;1913:28:23;;;;-1:-1:-1;;;;;1913:28:23;;;2014:24;;;;;;;;;;;;;;;;10284:308;10493:10;;-1:-1:-1;;;;;10493:10:23;10471;:33;10463:49;;;;-1:-1:-1;;;10463:49:23;;16189:2:28;10463:49:23;;;16171:21:28;16228:1;16208:18;;;16201:29;-1:-1:-1;;;16246:18:28;;;16239:33;16289:18;;10463:49:23;;;;;;;;;10523:62;10542:11;10555;;10523:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10523:62:23;;;;;;;;;;;;;;;;;;;;;;10568:6;;-1:-1:-1;10523:62:23;-1:-1:-1;10576:8:23;;;;;;10523:62;;10576:8;;;;10523:62;;;;;;;;;-1:-1:-1;10523:18:23;;-1:-1:-1;;;10523:62:23:i;:::-;10284:308;;;;;;:::o;5386:176::-;5492:7;5518:37;5535:8;5545:9;5518:16;:37::i;:::-;5511:44;;5386:176;;;;;:::o;3823:109::-;3876:7;3914:11;:9;:11::i;:::-;3902:9;;:23;;;;:::i;:::-;3895:30;;3823:109;:::o;2495:98:9:-;2549:13;2581:5;2574:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:98;:::o;4867:121:3:-;1334:13:7;:11;:13::i;:::-;4946:10:3::1;::::0;:35:::1;::::0;-1:-1:-1;;;4946:35:3;;17139:6:28;17127:19;;4946:35:3::1;::::0;::::1;17109:38:28::0;-1:-1:-1;;;;;4946:10:3;;::::1;::::0;:25:::1;::::0;17082:18:28;;4946:35:3::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4867:121:::0;:::o;4781:197:9:-;4864:4;929:10:13;4918:32:9;929:10:13;4934:7:9;4943:6;4918:8;:32::i;:::-;-1:-1:-1;4967:4:9;;4781:197;-1:-1:-1;;;4781:197:9:o;8144:393:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;8324:20:::1;::::0;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;-1:-1:-1;;;;;8324:31:23;::::1;::::0;;;;;;;:41:::1;;::::0;8306:14:::1;:59:::0;;8324:41;;8306:14;;:59:::1;::::0;8324:41;;8306:59:::1;:::i;:::-;::::0;;;-1:-1:-1;;8375:20:23::1;::::0;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;-1:-1:-1;;;;;8375:31:23;::::1;::::0;;;;;;;:41:::1;;:54:::0;;;8448:14:::1;::::0;8479:6:::1;::::0;8448:27:::1;::::0;8419:10;;8448:27:::1;:::i;:::-;:37;;8440:52;;;::::0;-1:-1:-1;;;8440:52:23;;17823:2:28;8440:52:23::1;::::0;::::1;17805:21:28::0;17862:1;17842:18;;;17835:29;-1:-1:-1;;;17880:18:28;;;17873:32;17922:18;;8440:52:23::1;17621:325:28::0;8440:52:23::1;8520:10;8502:14;;:28;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;8144:393:23:o;6741:140:3:-;1334:13:7;:11;:13::i;:::-;6831:35:3::1;::::0;;::::1;;::::0;;;:22:::1;:35;::::0;;;;:43;6741:140::o;4994:127::-;1334:13:7;:11;:13::i;:::-;5076:10:3::1;::::0;:38:::1;::::0;-1:-1:-1;;;5076:38:3;;17139:6:28;17127:19;;5076:38:3::1;::::0;::::1;17109::28::0;-1:-1:-1;;;;;5076:10:3;;::::1;::::0;:28:::1;::::0;17082:18:28;;5076:38:3::1;16965:188:28::0;1354:513:23;3279:19:8;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:8;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;-1:-1:-1;3436:12:8;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:8;;18153:2:28;3325:201:8;;;18135:21:28;18192:2;18172:18;;;18165:30;18231:34;18211:18;;;18204:62;-1:-1:-1;;;18282:18:28;;;18275:44;18336:19;;3325:201:8;17951:410:28;3325:201:8;3536:12;:16;;-1:-1:-1;;3536:16:8;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:8;;;;;3562:65;1555:47:23::1;1590:11;1555:34;:47::i;:::-;1612:16;:14;:16::i;:::-;1638:38;;;;;;;;;;;;;;-1:-1:-1::0;;;1638:38:23::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1638:38:23::1;;::::0;:12:::1;:38::i;:::-;1687:10;:24:::0;;-1:-1:-1;;;;;1687:24:23;;::::1;-1:-1:-1::0;;;;;;1687:24:23;;::::1;;::::0;;;1721:5:::1;:14:::0;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;;1745:8:::1;:31:::0;;;;::::1;::::0;;::::1;;::::0;;1786:8:::1;:20:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;1817:43:::1;::::0;-1:-1:-1;;;1817:43:23;;:13:::1;::::0;:43:::1;::::0;1766:9;;-1:-1:-1;;;1817:43:23::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3651:14:8::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:8;;;3721:14;;-1:-1:-1;6334:36:28;;3721:14:8;;6322:2:28;6307:18;3721:14:8;;;;;;;;3269:483;1354:513:23;;;;;:::o;3327:148::-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;3430:17:::1;:38:::0;;-1:-1:-1;;3430:38:23::1;::::0;::::1;;::::0;;;::::1;::::0;;3327:148::o;5540:256:9:-;5637:4;929:10:13;5693:38:9;5709:4;929:10:13;5724:6:9;5693:15;:38::i;:::-;5741:27;5751:4;5757:2;5761:6;5741:9;:27::i;:::-;-1:-1:-1;5785:4:9;;5540:256;-1:-1:-1;;;;5540:256:9:o;3197:124:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;3263:51:::1;::::0;3271:10:::1;::::0;3292:21:::1;3263:51:::0;::::1;;;::::0;::::1;::::0;;;3292:21;3271:10;3263:51;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;3197:124::o:0;3059:132::-;3166:5;;3141:43;;;-1:-1:-1;;;3141:43:23;;;;3117:5;;-1:-1:-1;;;;;3166:5:23;;3141:41;;:43;;;;;;;;;;;;;;3166:5;3141:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6191:234:9:-;6279:4;929:10:13;6333:64:9;929:10:13;6349:7:9;6386:10;6358:25;929:10:13;6349:7:9;6358:9;:25::i;:::-;:38;;;;:::i;:::-;6333:8;:64::i;6976:247:3:-;7117:32;;;7072:4;7117:32;;;:19;:32;;;;;7088:61;;7072:4;;7117:32;7088:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7204:11;;7194:22;;;;;;;:::i;:::-;;;;;;;;7176:13;7166:24;;;;;;:50;7159:57;;;6976:247;;;;;:::o;5127:176::-;1334:13:7;:11;:13::i;:::-;5241:10:3::1;::::0;:55:::1;::::0;-1:-1:-1;;;5241:55:3;;-1:-1:-1;;;;;5241:10:3;;::::1;::::0;:29:::1;::::0;:55:::1;::::0;5271:11;;5284;;;;5241:55:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5127:176:::0;;;:::o;4418:780:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;2861:20:::1;::::0;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;-1:-1:-1;;;;;2861:31:23;::::1;::::0;;;;;;;:42;4630:8;;4640:9;;2861:47;2853:62:::1;;;;-1:-1:-1::0;;;2853:62:23::1;;;;;;;:::i;:::-;4699:6:::2;4685:10;4668:14;;:27;;;;:::i;:::-;:37;;4660:52;;;::::0;-1:-1:-1;;;4660:52:23;;20782:2:28;4660:52:23::2;::::0;::::2;20764:21:28::0;20821:1;20801:18;;;20794:29;-1:-1:-1;;;20839:18:28;;;20832:32;20881:18;;4660:52:23::2;20580:325:28::0;4660:52:23::2;4757:289;;;;;;;;4798:15;4757:289;;;;4838:10;4757:289;;;;4873:1;4757:289;;;;4899:1;4757:289;;;;4925:1;4757:289;;;;4952:1;4757:289;;;;4983:15;4757:289;;;;5024:11;-1:-1:-1::0;;;;;4757:289:23::2;;;::::0;4723:10:::2;:20;4734:8;4723:20;;;;;;;;;;;;;;;:31;4744:9;-1:-1:-1::0;;;;;4723:31:23::2;-1:-1:-1::0;;;;;4723:31:23::2;;;;;;;;;;;;:323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;4723:323:23::2;;;;;-1:-1:-1::0;;;;;4723:323:23::2;;;;;;;;;5057:45;5092:9;5057:20;:30;5078:8;5057:30;;;;;;;;;;;;;;;:34;;:45;;;;:::i;:::-;-1:-1:-1::0;5112:41:23::2;:18;5135:17;::::0;::::2;5112:22;:41::i;:::-;;5181:10;5163:14;;:28;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;;;4418:780:23:o;2114:342:4:-;929:10:13;2326:4:4;2302:29;2294:80;;;;-1:-1:-1;;;2294:80:4;;21112:2:28;2294:80:4;;;21094:21:28;21151:2;21131:18;;;21124:30;21190:34;21170:18;;;21163:62;-1:-1:-1;;;21241:18:28;;;21234:36;21287:19;;2294:80:4;20910:402:28;2294:80:4;2384:65;2406:11;2419;;2384:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2384:65:4;;;;;;;;;;;;;;;;;;;;;;2432:6;;-1:-1:-1;2384:65:4;-1:-1:-1;2440:8:4;;;;;;2384:65;;2440:8;;;;2384:65;;;;;;;;;-1:-1:-1;2384:21:4;;-1:-1:-1;;;2384:65:4:i;4049:165:23:-;4152:7;4178:29;4187:7;4196:10;4178:8;:29::i;2064:101:7:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;799:51:3:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1441:85:7:-;1513:6;;-1:-1:-1;;;;;1513:6:7;;1441:85::o;2706:102:9:-;2762:13;2794:7;2787:14;;;;;:::i;7845:119:23:-;7902:7;7928:29;7946:10;:8;:10::i;:::-;7940:16;;:2;:16;:::i;:::-;7928:11;:29::i;3938:105::-;4006:5;;:30;;-1:-1:-1;;;4006:30:23;;3980:7;;-1:-1:-1;;;;;4006:5:23;;:15;;:30;;4030:4;;4006:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5931:326:3:-;6054:35;;;6034:17;6054:35;;;:19;:35;;;;;6034:55;;6010:12;;6034:17;6054:35;6034:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6107:4;:11;6122:1;6107:16;6099:58;;;;-1:-1:-1;;;6099:58:3;;23091:2:28;6099:58:3;;;23073:21:28;23130:2;23110:18;;;23103:30;23169:31;23149:18;;;23142:59;23218:18;;6099:58:3;22889:353:28;6099:58:3;6174:31;6185:1;6202:2;6188:4;:11;:16;;;;:::i;:::-;6174:4;;:31;:10;:31::i;:::-;6167:38;5931:326;-1:-1:-1;;;5931:326:3:o;8543:1060:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;2861:20:::1;::::0;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;-1:-1:-1;;;;;2861:31:23;::::1;::::0;;;;;;;:42;8693:8;;8703:12;;2861:47;2853:62:::1;;;;-1:-1:-1::0;;;2853:62:23::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;8734:26:23;::::2;8726:41;;;::::0;-1:-1:-1;;;8726:41:23;;23449:2:28;8726:41:23::2;::::0;::::2;23431:21:28::0;23488:1;23468:18;;;23461:29;-1:-1:-1;;;23506:18:28;;;23499:32;23548:18;;8726:41:23::2;23247:325:28::0;8726:41:23::2;8778:28;8809:10;:20;8820:8;8809:20;;;;;;;;;;;;;;;:34;8830:12;-1:-1:-1::0;;;;;8809:34:23::2;-1:-1:-1::0;;;;;8809:34:23::2;;;;;;;;;;;;8778:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8778:65:23::2;-1:-1:-1::0;;;;;8778:65:23::2;-1:-1:-1::0;;;;;8778:65:23::2;;;::::0;::::2;;;8890:340;;;;;;;;8931:6;:17;;;8890:340;;;;8973:6;:16;;;8890:340;;;;9014:6;:16;;;8890:340;;;;9055:1;8890:340;;;;9081:1;8890:340;;;;9108:6;:17;;;8890:340;;;;9155:6;:21;;;8890:340;;;;9202:6;:17;;;-1:-1:-1::0;;;;;8890:340:23::2;;;::::0;8853:10:::2;:20;8864:8;8853:20;;;;;;;;;;;;;;;:34;8874:12;-1:-1:-1::0;;;;;8853:34:23::2;-1:-1:-1::0;;;;;8853:34:23::2;;;;;;;;;;;;:377;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;8853:377:23::2;;;;;-1:-1:-1::0;;;;;8853:377:23::2;;;;;;;;;9287:1;9240:10;:20;9251:8;9240:20;;;;;;;;;;;;;;;:34;9261:12;-1:-1:-1::0;;;;;9240:34:23::2;-1:-1:-1::0;;;;;9240:34:23::2;;;;;;;;;;;;:44;;:48;;;;9345:1;9298:10;:20;9309:8;9298:20;;;;;;;;;;;;;;;:34;9319:12;-1:-1:-1::0;;;;;9298:34:23::2;-1:-1:-1::0;;;;;9298:34:23::2;;;;;;;;;;;;:44;;:48;;;;9357:239;9393:8;9415:12;9469:34;9521:51;;;;;;;;9558:12;-1:-1:-1::0;;;;;9521:51:23::2;;;::::0;9441:145:::2;;;;;;;;;:::i;:::-;;;;;;;;;;;;;9357:22;:239::i;6912:427:9:-:0;7005:4;929:10:13;7005:4:9;7086:25;929:10:13;7103:7:9;7086:9;:25::i;:::-;7059:52;;7149:15;7129:16;:35;;7121:85;;;;-1:-1:-1;;;7121:85:9;;24556:2:28;7121:85:9;;;24538:21:28;24595:2;24575:18;;;24568:30;24634:34;24614:18;;;24607:62;-1:-1:-1;;;24685:18:28;;;24678:35;24730:19;;7121:85:9;24354:401:28;7121:85:9;7240:60;7249:5;7256:7;7284:15;7265:16;:34;7240:8;:60::i;5647:278:3:-;1334:13:7;:11;:13::i;:::-;5818:14:3::1;;5842:4;5801:47;;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;5801:47:3;;::::1;::::0;;;;;;5763:35:::1;::::0;::::1;;::::0;;;:19:::1;5801:47;5763:35:::0;;;:85:::1;::::0;:35;:85:::1;:::i;:::-;;5863:55;5887:14;5903;;5863:55;;;;;;;;:::i;:::-;;;;;;;;5647:278:::0;;;:::o;4077:189:9:-;4156:4;929:10:13;4210:28:9;929:10:13;4227:2:9;4231:6;4210:9;:28::i;3481:115:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;3562:10:::1;:27:::0;;-1:-1:-1;;;;;;3562:27:23::1;-1:-1:-1::0;;;;;3562:27:23;;;::::1;::::0;;;::::1;::::0;;3481:115::o;9609:669::-;9846:5;;-1:-1:-1;;;;;9828:24:23;;;9846:5;;9828:24;9820:39;;;;-1:-1:-1;;;9820:39:23;;27517:2:28;9820:39:23;;;27499:21:28;27556:1;27536:18;;;27529:29;-1:-1:-1;;;27574:18:28;;;27567:32;27616:18;;9820:39:23;27315:325:28;9820:39:23;9912:8;;-1:-1:-1;;;;;9912:8:23;9890:10;:31;;:82;;-1:-1:-1;9963:8:23;;-1:-1:-1;;;;;9963:8:23;9941:10;:31;9890:82;:123;;;;10006:7;:5;:7::i;:::-;-1:-1:-1;;;;;9992:21:23;:10;-1:-1:-1;;;;;9992:21:23;;9890:123;9869:172;;;;-1:-1:-1;;;9869:172:23;;27847:2:28;9869:172:23;;;27829:21:28;27886:1;27866:18;;;27859:29;-1:-1:-1;;;27904:18:28;;;27897:32;27946:18;;9869:172:23;27645:325:28;9869:172:23;10052:18;10119:24;:11;10052:18;10140:2;10119:17;:24::i;:::-;10102:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;10094:51;;;:::i;:::-;10073:82;;10052:103;;10166:48;10181:11;10194:8;10204:9;10166:14;:48::i;:::-;10230:41;;;28813:25:28;;;-1:-1:-1;;;;;28874:32:28;;;28869:2;28854:18;;28847:60;10230:41:23;;;;;28786:18:28;10230:41:23;;;;;;;9810:468;9609:669;;;;;;:::o;6263:133:3:-;1334:13:7;:11;:13::i;:::-;6332:8:3::1;:20:::0;;-1:-1:-1;;;;;;6332:20:3::1;-1:-1:-1::0;;;;;6332:20:3;::::1;;::::0;;6367:22:::1;::::0;::::1;::::0;::::1;::::0;6332:20;;6367:22:::1;:::i;:::-;;;;;;;;6263:133:::0;:::o;4659:202::-;1334:13:7;:11;:13::i;:::-;4792:10:3::1;::::0;:62:::1;::::0;-1:-1:-1;;;4792:62:3;;-1:-1:-1;;;;;4792:10:3;;::::1;::::0;:20:::1;::::0;:62:::1;::::0;4813:8;;4823;;4833:11;;4846:7;;;;4792:62:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4659:202:::0;;;;;:::o;7970:168:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;8095:36:::1;8111:8;8121:9;8095:15;:36::i;:::-;7970:168:::0;;:::o;2637:757:4:-;2846:27;;;2824:19;2846:27;;;:14;:27;;;;;;:40;;;;2874:11;;;;2846:40;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2846:48:4;;;;;;;;;;;;-1:-1:-1;2846:48:4;2904:73;;;;-1:-1:-1;;;2904:73:4;;29623:2:28;2904:73:4;;;29605:21:28;29662:2;29642:18;;;29635:30;29701:34;29681:18;;;29674:62;-1:-1:-1;;;29752:18:28;;;29745:33;29795:19;;2904:73:4;29421:399:28;2904:73:4;3018:11;3005:8;;2995:19;;;;;;;:::i;:::-;;;;;;;;:34;2987:80;;;;-1:-1:-1;;;2987:80:4;;30027:2:28;2987:80:4;;;30009:21:28;30066:2;30046:18;;;30039:30;30105:34;30085:18;;;30078:62;-1:-1:-1;;;30156:18:28;;;30149:31;30197:19;;2987:80:4;29825:397:28;2987:80:4;3113:27;;;3172:1;3113:27;;;:14;:27;;;;;;:40;;;;3141:11;;;;3113:40;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3113:48:4;;;;;;;;;;;;:61;;;;3241:65;;;;;;;;;;;;;;;;;;;3263:11;;3276;;3241:65;;;;;;3276:11;3241:65;;3276:11;3241:65;;;;;;;;;-1:-1:-1;;3241:65:4;;;;;;;;;;;;;;;;;;;;;;3289:6;;-1:-1:-1;3241:65:4;-1:-1:-1;3297:8:4;;;;;;3241:65;;3297:8;;;;3241:65;;;;;;;;;-1:-1:-1;3241:21:4;;-1:-1:-1;;;3241:65:4:i;:::-;3321:66;3341:11;3354;;3367:6;3375:11;3321:66;;;;;;;;;;:::i;:::-;;;;;;;;2770:624;2637:757;;;;;;:::o;4324:149:9:-;-1:-1:-1;;;;;4439:18:9;;;4413:7;4439:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4324:149::o;3603:213:23:-;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;3750:20:::1;::::0;;;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;-1:-1:-1;;;;;3750:31:23;;::::1;::::0;;;;;;;:42:::1;;:59:::0;;-1:-1:-1;;;;;;3750:59:23::1;::::0;;;::::1;;::::0;;3603:213::o;6402:280:3:-;1334:13:7;:11;:13::i;:::-;6525:1:3::1;6515:7;:11;6507:45;;;::::0;-1:-1:-1;;;6507:45:3;;30927:2:28;6507:45:3::1;::::0;::::1;30909:21:28::0;30966:2;30946:18;;;30939:30;-1:-1:-1;;;30985:18:28;;;30978:51;31046:18;;6507:45:3::1;30725:345:28::0;6507:45:3::1;6562:28;::::0;;::::1;;::::0;;;:15:::1;:28;::::0;;;;;;;:41;;::::1;::::0;;;;;;;;;;:51;;;6628:47;;31298:34:28;;;31348:18;;31341:43;;;;31400:18;;;31393:34;;;6628:47:3::1;::::0;31261:2:28;31246:18;6628:47:3::1;31075:358:28::0;4220:192:23;4354:51;4372:10;4384;4396:8;4354:17;:51::i;:::-;4220:192;;;:::o;5204:176::-;5310:7;5336:37;5353:8;5363:9;5336:16;:37::i;5446:195:3:-;1334:13:7;:11;:13::i;:::-;5543:32:3::1;::::0;::::1;;::::0;;;:19:::1;:32;::::0;;;;:40:::1;5578:5:::0;;5543:32;:40:::1;:::i;:::-;;5598:36;5615:11;5628:5;;5598:36;;;;;;;;:::i;5568:2271:23:-:0;2573:10;;-1:-1:-1;;;;;2573:10:23;2559;:24;;:49;;;2601:7;:5;:7::i;:::-;-1:-1:-1;;;;;2587:21:23;:10;-1:-1:-1;;;;;2587:21:23;;2559:49;2551:64;;;;-1:-1:-1;;;2551:64:23;;;;;;;:::i;:::-;3003:13:::1;::::0;2988:29:::1;::::0;;;:14:::1;:29;::::0;;;;:40:::1;;::::0;::::1;;2987:41;2979:56;;;;-1:-1:-1::0;;;2979:56:23::1;;;;;;;:::i;:::-;5660:21:::2;5713:9:::0;5695:297:::2;5759:13;::::0;5744:29:::2;::::0;;;:14:::2;:29;::::0;;;;:45;5740:49;::::2;5695:297;;;5880:13;::::0;5831:31:::2;5865:29:::0;;;:14:::2;:29;::::0;;;;:58;;5921:1;;5865:58;::::2;;;;;:::i;:::-;;;;;;;;;;;5831:92;;5954:27;5966:7;:14;;;5954:11;:27::i;:::-;5937:44;::::0;;::::2;:::i;:::-;;;5817:175;5803:3;;;;;:::i;:::-;;;;5695:297;;;;6023:11;:9;:11::i;:::-;6006:13;:28;6002:102;;6050:23;:21;:23::i;6002:102::-;6114:20;6153:11;:9;:11::i;:::-;6137:27;::::0;:13;:27:::2;:::i;:::-;6114:50;;6174:25;6232:9:::0;6214:1486:::2;6263:27;:18;:25;:27::i;:::-;6259:1;:31;:51;;;;;6309:1;6294:12;:16;6259:51;6214:1486;;;6352:14;6376:24;:18;6398:1:::0;6376:21:::2;:24::i;:::-;6486:29;::::0;::::2;6415:68;6486:29:::0;;;:20:::2;:29;::::0;;;;6352:49;;-1:-1:-1;6530:1160:23::2;6587:28;:19;:26;:28::i;:::-;6583:1;:32;:52;;;;;6634:1;6619:12;:16;6583:52;6530:1160;;;6689:16;6708:25;:19:::0;6731:1;6708:22:::2;:25::i;:::-;6783:19;::::0;::::2;6751:29;6783:19:::0;;;:10:::2;:19;::::0;;;;;;;-1:-1:-1;;;;;6783:29:23;::::2;::::0;;;;;;;6835:16:::2;::::0;::::2;::::0;6689:44;;-1:-1:-1;6783:29:23;6835:21;;6831:76:::2;;6880:8;;;;6831:76;6925:23;6951:98;6981:12;7015:6;:16;;;6951:8;:98::i;:::-;7082:13;::::0;7067:29:::2;::::0;;;:14:::2;:29;::::0;;;;;;;:54:::2;::::0;::::2;::::0;;:45:::2;;:54:::0;;;;;-1:-1:-1;;;;;7067:102:23;::::2;::::0;;;;;;;:120;;;6925:124;-1:-1:-1;7205:31:23::2;6925:124:::0;7205:31;::::2;:::i;:::-;;;7255:383;7299:7;7328:8;7394:31;7451:147;;;;;;;;7556:15;7451:147;;;;7505:13;;7451:147;;::::0;7358:262:::2;;;;;;;;;:::i;7255:383::-;7656:19:::0;::::2;::::0;::::2;:::i;:::-;;;;6671:1019;;;6530:1160;6653:3:::0;::::2;::::0;::::2;:::i;:::-;;;;6530:1160;;;;6338:1362;;6324:3;;;;;:::i;:::-;;;;6214:1486;;;-1:-1:-1::0;7725:13:23::2;::::0;;7710:29:::2;::::0;;;:14:::2;:29;::::0;;;;;:45:::2;;:65:::0;;;;7800:13;;7785:29;;;7828:4:::2;7785:40:::0;;::::2;:47:::0;;-1:-1:-1;;7785:47:23::2;::::0;;::::2;::::0;;-1:-1:-1;;5568:2271:23:o;2314:198:7:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:7;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:7;;33877:2:28;2394:73:7::1;::::0;::::1;33859:21:28::0;33916:2;33896:18;;;33889:30;33955:34;33935:18;;;33928:62;-1:-1:-1;;;34006:18:28;;;33999:36;34052:19;;2394:73:7::1;33675:402:28::0;2394:73:7::1;2477:28;2496:8;2477:18;:28::i;4391:209:3:-:0;4525:10;;:68;;-1:-1:-1;;;4525:68:3;;34319:6:28;34352:15;;;4525:68:3;;;34334:34:28;34404:15;;34384:18;;;34377:43;4574:4:3;34436:18:28;;;34429:60;34505:18;;;34498:34;;;4494:12:3;;-1:-1:-1;;;;;4525:10:3;;:20;;34281:19:28;;4525:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4525:68:3;;;;;;;;;;;;:::i;:::-;4518:75;;4391:209;;;;;;;:::o;1274:508:4:-;1423:12;1437:19;1460:153;1494:9;1505:3;1533:34;;;1569:11;1582;1595:6;1603:8;1510:102;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1510:102:4;;;;;;;;;;;;;;-1:-1:-1;;;;;1510:102:4;-1:-1:-1;;;;;;1510:102:4;;;;;;;;;;1468:4;;1460:153;;:33;:153::i;:::-;1422:191;;;;1671:7;1666:110;;1694:71;1714:11;1727;1740:6;1748:8;1758:6;1694:19;:71::i;16792:551:23:-;16922:17;;16899:7;;16922:17;;16918:56;;;-1:-1:-1;16962:1:23;16955:8;;16918:56;16984:25;17086:6;17069:13;:11;:13::i;:::-;17013:20;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;17013:31:23;;;;;;;;;:41;;;:69;;;;:::i;:::-;17012:80;;;;:::i;:::-;17130:20;;;17102:25;17130:20;;;:10;:20;;;;;;;;-1:-1:-1;;;;;17130:31:23;;;;;;;;;:41;;;16984:108;;-1:-1:-1;17186:38:23;;;17182:77;;17247:1;17240:8;;;;;;17182:77;17276:60;17285:11;:9;:11::i;:::-;17298:37;17318:17;17298;:37;:::i;:::-;17276:8;:60::i;:::-;17269:67;16792:551;-1:-1:-1;;;;;16792:551:23:o;1599:130:7:-;929:10:13;1662:7:7;:5;:7::i;:::-;-1:-1:-1;;;;;1662:23:7;;1654:68;;;;-1:-1:-1;;;1654:68:7;;36488:2:28;1654:68:7;;;36470:21:28;;;36507:18;;;36500:30;36566:34;36546:18;;;36539:62;36618:18;;1654:68:7;36286:356:28;10794:340:9;-1:-1:-1;;;;;10895:19:9;;10887:68;;;;-1:-1:-1;;;10887:68:9;;36849:2:28;10887:68:9;;;36831:21:28;36888:2;36868:18;;;36861:30;36927:34;36907:18;;;36900:62;-1:-1:-1;;;36978:18:28;;;36971:34;37022:19;;10887:68:9;36647:400:28;10887:68:9;-1:-1:-1;;;;;10973:21:9;;10965:68;;;;-1:-1:-1;;;10965:68:9;;37254:2:28;10965:68:9;;;37236:21:28;37293:2;37273:18;;;37266:30;37332:34;37312:18;;;37305:62;-1:-1:-1;;;37383:18:28;;;37376:32;37425:19;;10965:68:9;37052:398:28;10965:68:9;-1:-1:-1;;;;;11044:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11095:32;;2179:25:28;;;11095:32:9;;2152:18:28;11095:32:9;;;;;;;10794:340;;;:::o;1423:320:12:-;-1:-1:-1;;;;;1713:19:12;;:23;;;1423:320::o;612:186:4:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;711:26:4::1;:24;:26::i;:::-;747:44;781:9;747:33;:44::i;1003:95:7:-:0;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;1065:26:7::1;:24;:26::i;2118:147:9:-:0;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;2220:38:9::1;2243:5;2250:7;2220:22;:38::i;11415:411::-:0;11515:24;11542:25;11552:5;11559:7;11542:9;:25::i;:::-;11515:52;;-1:-1:-1;;11581:16:9;:37;11577:243;;11662:6;11642:16;:26;;11634:68;;;;-1:-1:-1;;;11634:68:9;;38069:2:28;11634:68:9;;;38051:21:28;38108:2;38088:18;;;38081:30;38147:31;38127:18;;;38120:59;38196:18;;11634:68:9;37867:353:28;11634:68:9;11744:51;11753:5;11760:7;11788:6;11769:16;:25;11744:8;:51::i;:::-;11505:321;11415:411;;;:::o;7793:788::-;-1:-1:-1;;;;;7889:18:9;;7881:68;;;;-1:-1:-1;;;7881:68:9;;38427:2:28;7881:68:9;;;38409:21:28;38466:2;38446:18;;;38439:30;38505:34;38485:18;;;38478:62;-1:-1:-1;;;38556:18:28;;;38549:35;38601:19;;7881:68:9;38225:401:28;7881:68:9;-1:-1:-1;;;;;7967:16:9;;7959:64;;;;-1:-1:-1;;;7959:64:9;;38833:2:28;7959:64:9;;;38815:21:28;38872:2;38852:18;;;38845:30;38911:34;38891:18;;;38884:62;-1:-1:-1;;;38962:18:28;;;38955:33;39005:19;;7959:64:9;38631:399:28;7959:64:9;-1:-1:-1;;;;;8105:15:9;;8083:19;8105:15;;;:9;:15;;;;;;8138:21;;;;8130:72;;;;-1:-1:-1;;;8130:72:9;;39237:2:28;8130:72:9;;;39219:21:28;39276:2;39256:18;;;39249:30;39315:34;39295:18;;;39288:62;-1:-1:-1;;;39366:18:28;;;39359:36;39412:19;;8130:72:9;39035:402:28;8130:72:9;-1:-1:-1;;;;;8236:15:9;;;;;;;:9;:15;;;;;;8254:20;;;8236:38;;8451:13;;;;;;;;;;:23;;;;;;8500:26;;-1:-1:-1;;;;;;;;;;;8500:26:9;;;8268:6;2179:25:28;;2167:2;2152:18;;2033:177;8500:26:9;;;;;;;;8537:37;4220:192:23;8305:150:22;8375:4;8398:50;8403:3;-1:-1:-1;;;;;8423:23:22;;8398:4;:50::i;10793:129::-;10860:4;10883:32;10888:3;10908:5;10883:4;:32::i;20263:411:23:-;20437:18;20504:24;:11;20437:18;20525:2;20504:17;:24::i;:::-;20487:42;;;;;;;;:::i;:::-;;;;;;;;;;;;;20479:51;;;:::i;:::-;20558:23;;;20607:1;20558:23;;;:10;:23;;;;;;;;20458:82;;;;;20558:35;;;;;;;;;:46;20458:82;;-1:-1:-1;20550:66:23;;;;-1:-1:-1;;;20550:66:23;;39644:2:28;20550:66:23;;;39626:21:28;39683:1;39663:18;;;39656:29;-1:-1:-1;;;39701:18:28;;;39694:33;39744:18;;20550:66:23;39442:326:28;20550:66:23;20627:40;20642:11;20655:8;20665:1;20627:14;:40::i;10598:315::-;10721:17;;10693:7;;10721:17;;10720:18;10712:34;;;;-1:-1:-1;;;10712:34:23;;39975:2:28;10712:34:23;;;39957:21:28;40014:1;39994:18;;;39987:29;-1:-1:-1;;;40032:18:28;;;40025:33;40075:18;;10712:34:23;39773:326:28;10712:34:23;10756:14;10773:42;10795:10;10807:7;10773:21;:42::i;:::-;10825:5;;10756:59;;-1:-1:-1;10825:58:23;;-1:-1:-1;;;;;10825:5:23;10848:10;10868:4;10875:7;10825:22;:58::i;2666:187:7:-;2758:6;;;-1:-1:-1;;;;;2774:17:7;;;-1:-1:-1;;;;;;2774:17:7;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;14885:207:23:-;14946:7;14969:13;3679:12:9;;;3592:106;14969:13:23;14986:1;14969:18;14965:63;;-1:-1:-1;15010:7:23;14885:207::o;14965:63::-;3679:12:9;;15055:13:23;:11;:13::i;:::-;15045:23;;:7;:23;:::i;:::-;15044:41;;;;:::i;8865:2712:5:-;8999:12;9051:7;9035:12;9051:7;9045:2;9035:12;:::i;:::-;:23;;9027:50;;;;-1:-1:-1;;;9027:50:5;;40306:2:28;9027:50:5;;;40288:21:28;40345:2;40325:18;;;40318:30;-1:-1:-1;;;40364:18:28;;;40357:44;40418:18;;9027:50:5;40104:338:28;9027:50:5;9112:16;9121:7;9112:6;:16;:::i;:::-;9095:6;:13;:33;;9087:63;;;;-1:-1:-1;;;9087:63:5;;40649:2:28;9087:63:5;;;40631:21:28;40688:2;40668:18;;;40661:30;-1:-1:-1;;;40707:18:28;;;40700:47;40764:18;;9087:63:5;40447:341:28;9087:63:5;9161:22;9224:15;;9252:1895;;;;11288:4;11282:11;11269:24;;11466:1;11455:9;11448:20;11514:4;11503:9;11499:20;11493:4;11486:34;9217:2317;;9252:1895;9426:4;9420:11;9407:24;;10053:2;10044:7;10040:16;10419:9;10412:17;10406:4;10402:28;10390:9;10379;10375:25;10371:60;10467:7;10463:2;10459:16;10711:6;10697:9;10690:17;10684:4;10680:28;10668:9;10660:6;10656:22;10652:57;10648:70;10493:417;10744:3;10740:2;10737:11;10493:417;;;10882:9;;10871:21;;10785:4;10777:13;;;;10817;10493:417;;;-1:-1:-1;;10928:26:5;;;11128:2;11111:11;-1:-1:-1;;11107:25:5;11101:4;11094:39;-1:-1:-1;9217:2317:5;-1:-1:-1;11561:9:5;8865:2712;-1:-1:-1;;;;8865:2712:5:o;15491:847:23:-;2711:20;;;2756:1;2711:20;;;:10;:20;;;;;;;;-1:-1:-1;;;;;2711:31:23;;;;;;;;;:42;15630:8;;15640:9;;2703:61;;;;-1:-1:-1;;;2703:61:23;;;;;;;:::i;:::-;15701:76:::1;::::0;-1:-1:-1;;;;;;41302:2:28;41338:15;;;41334:24;;15701:76:23::1;::::0;::::1;41322:37:28::0;15762:4:23::1;41393:15:28::0;;41389:24;41375:12;;;41368:46;15662:36:23::1;::::0;41430:12:28;;15701:76:23::1;::::0;;-1:-1:-1;;15701:76:23;;::::1;::::0;;;;;;15812:10:::1;::::0;15701:76;;-1:-1:-1;15789:17:23::1;::::0;-1:-1:-1;;;;;15812:10:23::1;:23;15849:8:::0;15879:4:::1;15898:8:::0;15789:17;15939:19:::1;:17;:19::i;:::-;15812:156;;;;;;;;;;;;;;;;;;;:::i;:::-;;::::0;::::1;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15788:180;;;16007:9;15983:21;:33;15979:122;;;16039:51;::::0;-1:-1:-1;;;16039:51:23;;::::1;::::0;::::1;42524:25:28::0;;;16068:21:23::1;42565:18:28::0;;;42558:34;42497:18;;16039:51:23::1;42350:248:28::0;15979:122:23::1;16111:10;::::0;-1:-1:-1;;;;;16111:10:23::1;:15;16134:9:::0;16158:8;16180:23;16217:8;16255:4:::1;::::0;16302:19:::1;:17;:19::i;:::-;16111:220;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;15651:687;;15491:847:::0;;;;;:::o;10919:772::-;11057:23;11094:8;11083:35;;;;;;;;;;;;:::i;:::-;11057:61;-1:-1:-1;11147:26:23;11132:11;:41;;;;;;;;:::i;:::-;;11128:557;;11192:29;11253:8;11225:93;;;;;;;;;;;;:::i;:::-;11189:129;;;11332:57;11354:8;11364:7;11373:15;11332:21;:57::i;:::-;11175:225;11128:557;;;11425:32;11410:11;:47;;;;;;;;:::i;:::-;;11406:279;;11476:35;11543:8;11515:99;;;;;;;;;;;;:::i;:::-;11473:141;;;11628:46;11656:8;11666:7;11628:27;:46::i;16585:201::-;16683:20;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;16683:31:23;;;;;;;;;:41;;;16665:14;:59;;16683:41;;16665:14;;:59;;16683:41;;16665:59;:::i;:::-;;;;-1:-1:-1;;16734:20:23;;;;16778:1;16734:20;;;:10;:20;;;;;;;;-1:-1:-1;;;;;16734:31:23;;;;;;;;;;;:41;;:45;16585:201::o;14351:528::-;3003:13;;2988:29;;;;:14;:29;;;;;:40;;;;;2987:41;2979:56;;;;-1:-1:-1;;;2979:56:23;;;;;;;:::i;:::-;14501:45:::1;14511:10;14531:4;14538:7;14501:9;:45::i;:::-;14556:14;:29;14571:13;;14556:29;;;;;;;;;;;:38;;14613:249;;;;;;;;14655:10;-1:-1:-1::0;;;;;14613:249:23::1;;;;;14689:10;-1:-1:-1::0;;;;;14613:249:23::1;;;;;14725:7;14613:249;;;;14759:8;14613:249;;;;14795:20;14807:7;14795:11;:20::i;:::-;14613:249:::0;;14842:5:::1;14613:249;::::0;;::::1;::::0;;;14556:316;;14613:249;14556:316;;::::1;::::0;;;;;;;;;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;;;;;;14556:316:23;;::::1;-1:-1:-1::0;;;;;14556:316:23;;::::1;;::::0;;;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;14556:316:23::1;::::0;::::1;;::::0;;;::::1;::::0;;-1:-1:-1;;;14351:528:23:o;17349:560::-;17456:7;17475:25;17577:6;17560:13;:11;:13::i;:::-;17504:20;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;17504:31:23;;;;;;;;;:41;;;:69;;;;:::i;:::-;17503:80;;;;:::i;:::-;17621:20;;;17593:25;17621:20;;;:10;:20;;;;;;;;-1:-1:-1;;;;;17621:31:23;;;;;;;;;:41;;;17677:17;;17475:108;;-1:-1:-1;17621:41:23;17677:17;;17673:230;;;17717:17;-1:-1:-1;17710:24:23;;-1:-1:-1;17710:24:23;17673:230;17776:17;17755;:38;17751:152;;17816:1;17809:8;;;;;;17751:152;17855:37;17875:17;17855;:37;:::i;:::-;17848:44;;;;;;17915:1448;18007:13;;17967:22;17992:29;;;:14;:29;;;;;:45;18055:18;18047:34;;;;-1:-1:-1;;;18047:34:23;;46220:2:28;18047:34:23;;;46202:21:28;46259:1;46239:18;;;46232:29;-1:-1:-1;;;46277:18:28;;;46270:33;46320:18;;18047:34:23;46018:326:28;18047:34:23;18092:28;18137:14;-1:-1:-1;;;;;18123:29:23;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18123:29:23;;18092:60;;18168:9;18163:220;18187:14;18183:1;:18;18163:220;;;18271:13;;18222:31;18256:29;;;:14;:29;;;;;:58;;18312:1;;18256:58;;;;;;:::i;:::-;;;;;;;;;;;18222:92;;18345:27;18357:7;:14;;;18345:11;:27::i;:::-;18328:11;18340:1;18328:14;;;;;;;;:::i;:::-;;;;;;;;;;:44;-1:-1:-1;18203:3:23;;;;:::i;:::-;;;;18163:220;;;;18398:9;18393:811;18417:14;18413:1;:18;18393:811;;;18501:13;;18452:31;18486:29;;;:14;:29;;;;;:58;;18542:1;;18486:58;;;;;;:::i;:::-;;;;;;;;;;;18452:92;;18558:23;18584:37;18593:11;18605:1;18593:14;;;;;;;;:::i;:::-;;;;;;;18609:11;:9;:11::i;18584:37::-;18558:63;;18658:7;:16;;;18640:15;:34;18636:408;;;18694:12;18728:15;18709:7;:16;;;:34;;;;:::i;:::-;18694:49;;18761:18;18800:7;:16;;;18783:4;18790:6;18783:13;;;;:::i;:::-;18782:34;;;;:::i;:::-;18761:55;;18852:7;:15;;;18839:10;:28;18835:195;;;18891:15;;;:23;;-1:-1:-1;;18891:23:23;;;18950:14;;18966;;;;18936:45;;-1:-1:-1;;;18936:45:23;;:4;;:13;;:45;;-1:-1:-1;;;;;18950:14:23;;;;18936:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;19003:8;;;;;;18835:195;18676:368;;18636:408;19058:15;;;:22;;-1:-1:-1;;19058:22:23;19076:4;19058:22;;;;;;19113:12;;;19094:5;;:49;;-1:-1:-1;;;;;19094:5:23;;;;19113:12;19127:15;19094:18;:49::i;:::-;19157:36;19171:4;19178:7;:14;;;19157:5;:36::i;:::-;18438:766;;18393:811;18433:3;;;;:::i;:::-;;;;18393:811;;;-1:-1:-1;19242:13:23;;19219:53;;;42524:25:28;;;42580:2;42565:18;;42558:34;;;19219:53:23;;42497:18:28;19219:53:23;;;;;;;19298:13;;;19326:5;19283:29;;;:14;:29;;;;;:40;;:48;;-1:-1:-1;;19283:48:23;;;19341:15;;;19298:13;19341:15;;;:::i;:::-;;;;;;17957:1406;;17915:1448::o;11531:112:22:-;11591:7;11617:19;11625:3;4545:18;;4463:107;11985:135;12056:7;12090:22;12094:3;12106:5;12090:3;:22::i;588:104:20:-;646:7;676:1;672;:5;:13;;684:1;672:13;;;-1:-1:-1;680:1:20;;588:104;-1:-1:-1;588:104:20:o;1118:1240:6:-;1275:4;1281:12;1341:15;1366:13;1389:24;1426:8;1416:19;;-1:-1:-1;;;;;1416:19:6;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1416:19:6;;1389:46;;1904:1;1879;1846:9;1840:16;1812:4;1801:9;1797:20;1767:1;1733:7;1708:4;1690:239;1678:251;;1992:16;1981:27;;2036:8;2027:7;2024:21;2021:76;;;2075:8;2064:19;;2021:76;2178:7;2165:11;2158:28;2294:7;2291:1;2284:4;2271:11;2267:22;2252:50;2329:8;;-1:-1:-1;2339:11:6;-1:-1:-1;;1118:1240:6;;;;;;;;:::o;1788:320:4:-;2011:8;2001:19;;;;;;1950:14;:27;1965:11;1950:27;;;;;;;;;;;;;;;1978:11;1950:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1950:48:4;;;;;;;;;:70;;;;2035:66;;;;2049:11;;2062;;1991:6;;2083:8;;2093:7;;2035:66;:::i;:::-;;;;;;;;1788:320;;;;;:::o;1104:111:7:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;1176:32:7::1;929:10:13::0;1176:18:7::1;:32::i;1458:158:3:-:0;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;1556:10:3::1;:53:::0;;-1:-1:-1;;;;;;1556:53:3::1;-1:-1:-1::0;;;;;1556:53:3;;;::::1;::::0;;;::::1;::::0;;1458:158::o;2271:159:9:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;;;;;;:::i;:::-;2383:5:9::1;:13;2391:5:::0;2383;:13:::1;:::i;:::-;-1:-1:-1::0;2406:7:9::1;:17;2416:7:::0;2406;:17:::1;:::i;2214:404:22:-:0;2277:4;4351:19;;;:12;;;:19;;;;;;2293:319;;-1:-1:-1;2335:23:22;;;;;;;;:11;:23;;;;;;;;;;;;;2515:18;;2493:19;;;:12;;;:19;;;;;;:40;;;;2547:11;;2293:319;-1:-1:-1;2596:5:22;2589:12;;15098:387:23;15199:7;;15250:13;3679:12:9;;;3592:106;15250:13:23;15267:1;15250:18;15246:146;;-1:-1:-1;15293:7:23;15246:146;;;15368:13;:11;:13::i;:::-;3679:12:9;;15341:23:23;;:7;:23;:::i;:::-;15340:41;;;;:::i;:::-;15331:50;;15246:146;15418:1;15409:6;:10;15401:26;;;;-1:-1:-1;;;15401:26:23;;48630:2:28;15401:26:23;;;48612:21:28;48669:1;48649:18;;;48642:29;-1:-1:-1;;;48687:18:28;;;48680:33;48730:18;;15401:26:23;48428:326:28;15401:26:23;15437:18;15443:3;15448:6;15437:5;:18::i;1355:203:16:-;1482:68;;-1:-1:-1;;;;;49017:15:28;;;1482:68:16;;;48999:34:28;49069:15;;49049:18;;;49042:43;49101:18;;;49094:34;;;1455:96:16;;1475:5;;-1:-1:-1;;;1505:27:16;48934:18:28;;1482:68:16;;;;-1:-1:-1;;1482:68:16;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:68:16;-1:-1:-1;;;;;;1482:68:16;;;;;;;;;;1455:19;:96::i;16344:235:23:-;16519:53;;;-1:-1:-1;;;16519:53:23;;;49294:51:28;16493:9:23;49361:11:28;;;;49354:27;;;;16519:53:23;;;;;;;;;;49397:12:28;;;;16519:53:23;;;;16344:235::o;11697:2300::-;11851:36;11868:8;11878;11851:16;:36::i;:::-;11902:13;;;;:17;11898:103;;11935:55;11947:8;11957;:17;;;11976:8;:13;;;11935:11;:55::i;:::-;12064:15;;;;;12011:20;;;;;;;:10;:20;;;;;;;12032:17;;-1:-1:-1;;;;;12011:39:23;;;;;;;;:49;;:68;;12064:15;;12011:49;;:68;;12064:15;;12011:68;:::i;:::-;;;;-1:-1:-1;;12131:17:23;;12089:12;;12104:45;;12121:8;;12104:16;:45::i;:::-;12089:60;;12159:19;12181:36;12190:4;12196:8;:20;;;12181:8;:36::i;:::-;12159:58;-1:-1:-1;12232:15:23;;12228:181;;12263:20;;;;;;;:10;:20;;;;;;;;12284:17;;-1:-1:-1;;;;;12263:39:23;;;;;;;;:49;;:64;;12316:11;;12263:20;:64;;12316:11;;12263:64;:::i;:::-;;;;;;;;12354:11;12341:9;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;12379:19:23;;-1:-1:-1;12387:11:23;12379:19;;:::i;:::-;;;12228:181;12423:24;;;;:28;12419:204;;12520:41;;;;12467:20;;;;;;;:10;:20;;;;;;;;12488:17;;-1:-1:-1;;;;;12467:39:23;;;;;;;;:49;;:94;;:49;;:20;:94;;12520:41;;12467:94;:::i;:::-;;;;-1:-1:-1;;12588:24:23;;;;12575:9;:37;;:9;;:37;;12588:24;;12575:37;:::i;:::-;;;;-1:-1:-1;;12419:204:23;12686:18;;;;;12633:20;;;;;;;:10;:20;;;;;;;12654:17;;-1:-1:-1;;;;;12633:39:23;;;;;;;;;;;:50;;:71;;;;12732:20;;;;;;12753:17;;12732:39;;;;;;;;;:49;;;:54;;:87;;-1:-1:-1;12802:17:23;;;;12732:87;12715:167;;;12851:8;:20;;;12844:27;;12715:167;12896:23;;;;:27;12892:647;;12939:292;12964:8;:23;;;13005:8;13031;:17;;;13098:33;13153:46;;;;;;;;13193:4;13153:46;;;13066:151;;;;;;;;;:::i;:::-;;;;;;;;;;;;;12939:7;:292::i;:::-;12892:647;;;13262:266;13302:8;13328;:17;;;13395:33;13450:46;;;;;;;;13490:4;13450:46;;;13363:151;;;;;;;;;:::i;13262:266::-;13549:28;13580:10;:20;13591:8;13580:20;;;;;;;;;;;;;;;:39;13601:8;:17;;;-1:-1:-1;;;;;13580:39:23;-1:-1:-1;;;;;13580:39:23;;;;;;;;;;;;13549:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13549:70:23;-1:-1:-1;;;;;13549:70:23;-1:-1:-1;;;;;13549:70:23;;;;;;;13634:356;13664:8;13686;:17;;;13717:8;:15;;;13746:8;:13;;;13773:8;:20;;;13807:6;:16;;;13837:6;:16;;;13867:6;:16;;;13897:8;:24;;;13935:6;:16;;;13965:15;13634:356;;;;;;;;;;;;;;;50249:6:28;50237:19;;;;50219:38;;-1:-1:-1;;;;;50293:32:28;;;;50288:2;50273:18;;50266:60;50357:2;50342:18;;50335:34;;;;50400:2;50385:18;;50378:34;;;;50443:3;50428:19;;50421:35;;;;50313:3;50472:19;;50465:35;;;;50531:3;50516:19;;50509:35;50575:3;50560:19;;50553:35;50619:3;50604:19;;50597:35;50663:3;50648:19;;50641:35;50707:3;50692:19;;50685:36;50206:3;50191:19;;49793:934;19369:888:23;19511:15;;2711:20;;;19511:15;2711:20;;;:10;:20;;;;;;;;-1:-1:-1;;;;;2711:31:23;;;;;;;;;:42;19501:8;;19511:15;2703:61;;;;-1:-1:-1;;;2703:61:23;;;;;;;:::i;:::-;19542:13:::1;::::0;::::1;::::0;:17;19538:101:::1;;19575:53;19587:8;19597;:15;;;19614:8;:13;;;19575:11;:53::i;:::-;19699:15;::::0;;::::1;::::0;19648:20:::1;::::0;::::1;;::::0;;;:10:::1;:20:::0;;;;;;19669:15;;-1:-1:-1;;;;;19648:37:23::1;::::0;;;;;;;;:47:::1;;:66:::0;;19699:15;;19648:47;;:66:::1;::::0;19699:15;;19648:66:::1;:::i;:::-;::::0;;;-1:-1:-1;;19737:15:23::1;::::0;::::1;::::0;19724:9:::1;:28:::0;;:9:::1;::::0;:28:::1;::::0;19737:15;;19724:28:::1;:::i;:::-;::::0;;;-1:-1:-1;;19778:11:23::1;::::0;::::1;::::0;19763:27:::1;::::0;;;:14:::1;:27;::::0;;;;:41:::1;;:43:::0;;;::::1;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;19831:11:23::1;::::0;::::1;::::0;;19816:27:::1;::::0;;;:14:::1;:27;::::0;;;;;;;:46:::1;::::0;::::1;::::0;;:36:::1;;:46:::0;;;;;19863:15;;-1:-1:-1;;;;;19816:63:23::1;::::0;;;;;;;:70;;-1:-1:-1;;19816:70:23::1;19882:4;19816:70;::::0;;19987:11;;19972:27;;;;;;;;:41:::1;;::::0;19928:11;;19913:27;;;;:43:::1;;::::0;:100;19896:176:::1;;20038:23;:21;:23::i;:::-;20144:8;:15;;;-1:-1:-1::0;;;;;20087:163:23::1;20122:8;20087:163;;;20173:8;:15;;;20202:8;:13;;;20229:8;:11;;;20087:163;;;;;;;50934:25:28::0;;;50990:2;50975:18;;50968:34;;;;51033:2;51018:18;;51011:34;50922:2;50907:18;;50732:319;20087:163:23::1;;;;;;;;19369:888:::0;;;;:::o;941:175:16:-;1023:86;1043:5;1073:23;;;1098:2;1102:5;1050:58;;;;;;;;;:::i;9712:659:9:-;-1:-1:-1;;;;;9795:21:9;;9787:67;;;;-1:-1:-1;;;9787:67:9;;51258:2:28;9787:67:9;;;51240:21:28;51297:2;51277:18;;;51270:30;51336:34;51316:18;;;51309:62;-1:-1:-1;;;51387:18:28;;;51380:31;51428:19;;9787:67:9;51056:397:28;9787:67:9;-1:-1:-1;;;;;9950:18:9;;9925:22;9950:18;;;:9;:18;;;;;;9986:24;;;;9978:71;;;;-1:-1:-1;;;9978:71:9;;51660:2:28;9978:71:9;;;51642:21:28;51699:2;51679:18;;;51672:30;51738:34;51718:18;;;51711:62;-1:-1:-1;;;51789:18:28;;;51782:32;51831:19;;9978:71:9;51458:398:28;9978:71:9;-1:-1:-1;;;;;10083:18:9;;;;;;:9;:18;;;;;;;;10104:23;;;10083:44;;10220:12;:22;;;;;;;10268:37;2179:25:28;;;10083:18:9;;;-1:-1:-1;;;;;;;;;;;10268:37:9;2152:18:28;10268:37:9;;;;;;;4220:192:23;;;:::o;4912:118:22:-;4979:7;5005:3;:11;;5017:5;5005:18;;;;;;;;:::i;:::-;;;;;;;;;4998:25;;4912:118;;;;:::o;8857:535:9:-;-1:-1:-1;;;;;8940:21:9;;8932:65;;;;-1:-1:-1;;;8932:65:9;;52063:2:28;8932:65:9;;;52045:21:28;52102:2;52082:18;;;52075:30;52141:33;52121:18;;;52114:61;52192:18;;8932:65:9;51861:355:28;8932:65:9;9084:6;9068:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9236:18:9;;;;;;:9;:18;;;;;;;;:28;;;;;;9289:37;2179:25:28;;;-1:-1:-1;;;;;;;;;;;9289:37:9;2152:18:28;9289:37:9;;;;;;;7970:168:23;;:::o;5196:642:16:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;-1:-1:-1;;;;;5641:27:16;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;-1:-1:-1;;;5720:111:16;;52423:2:28;5720:111:16;;;52405:21:28;52462:2;52442:18;;;52435:30;52501:34;52481:18;;;52474:62;-1:-1:-1;;;52552:18:28;;;52545:40;52602:19;;5720:111:16;52221:406:28;21072:753:23;21208:21;;;;;;;:11;:21;;;;;;;;21230:16;;-1:-1:-1;;;;;21208:39:23;;;;;;;;21248:13;;;;21208:54;;;;;;;;;;:63;21187:113;;;;-1:-1:-1;;;21187:113:23;;52834:2:28;21187:113:23;;;52816:21:28;52873:1;52853:18;;;52846:29;-1:-1:-1;;;52891:18:28;;;52884:33;52934:18;;21187:113:23;52632:326:28;21187:113:23;21372:16;;21390:13;;;;21355:59;;53191:2:28;53162:15;;;;-1:-1:-1;;;;;;53158:45:28;21355:59:23;;;53146:58:28;53220:12;;;53213:28;53297:3;53275:16;;;-1:-1:-1;;;;;;53271:38:28;53257:12;;;53250:60;-1:-1:-1;;53326:12:28;;21355:59:23;;;;;;;;;;;;21332:92;;;;;;21310:114;;21434:28;21541:11;21488:65;;;;;;;-1:-1:-1;;;53579:80:28;;53684:2;53675:12;;53668:28;;;;53721:2;53712:12;;53349:381;21488:65:23;;;;-1:-1:-1;;21488:65:23;;;;;;;;;21465:98;;21488:65;21465:98;;;;21668:20;;;;;;;:10;:20;;;;;21689:16;;-1:-1:-1;;;;;21668:38:23;;;;;;;;;;;:49;;;21630:17;;;;21465:98;;-1:-1:-1;21668:49:23;;;;21594:54;;21465:98;;21594:13;:54::i;:::-;-1:-1:-1;;;;;21594:123:23;;21573:173;;;;-1:-1:-1;;;21573:173:23;;53937:2:28;21573:173:23;;;53919:21:28;53976:1;53956:18;;;53949:29;-1:-1:-1;;;53994:18:28;;;53987:33;54037:18;;21573:173:23;53735:326:28;21573:173:23;-1:-1:-1;;21757:21:23;;;;;;;;:11;:21;;;;;;;;21779:16;;-1:-1:-1;;;;;21757:39:23;;;;;;;;21797:13;;;;;21757:54;;;;;;:61;;-1:-1:-1;;21757:61:23;21814:4;21757:61;;;21072:753::o;14003:342::-;14132:20;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;14132:31:23;;;;;;;;;:41;;;:50;-1:-1:-1;14132:50:23;14124:66;;;;-1:-1:-1;;;14124:66:23;;54268:2:28;14124:66:23;;;54250:21:28;54307:1;54287:18;;;54280:29;-1:-1:-1;;;54325:18:28;;;54318:33;54368:18;;14124:66:23;54066:326:28;14124:66:23;14200:20;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;14200:31:23;;;;;;;;;:41;;:50;;14245:5;;14200:20;:50;;14245:5;;14200:50;:::i;:::-;;;;-1:-1:-1;;14260:20:23;;;;;;;:10;:20;;;;;;;;-1:-1:-1;;;;;14260:31:23;;;;;;;;;:41;;:50;;14305:5;;14260:20;:50;;14305:5;;14260:50;:::i;:::-;;;;;;;;14333:5;14320:9;;:18;;;;;;;:::i;20680:386::-;20844:8;;:52;;-1:-1:-1;;;20844:52:23;;20830:11;;-1:-1:-1;;;;;20844:8:23;;:21;;:52;;20866:12;;20880:5;;20887:8;;20844:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20906:8;;20955:5;;20906:153;;-1:-1:-1;;;20906:153:23;;20830:66;;-1:-1:-1;;;;;;20906:8:23;;;;:15;;20830:66;;20906:153;;20955:5;;;20975:7;;20996:12;;21022:5;;21041:8;;20906:153;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20820:246;20680:386;;;;:::o;4108:223:17:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;3661:227:19:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:19;3661:227;-1:-1:-1;;;3661:227:19:o;5165:446:17:-;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:17;;55578:2:28;5354:81:17;;;55560:21:28;55617:2;55597:18;;;55590:30;55656:34;55636:18;;;55629:62;-1:-1:-1;;;55707:18:28;;;55700:36;55753:19;;5354:81:17;55376:402:28;5354:81:17;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:17;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:17:o;2145:730:19:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:19;;-1:-1:-1;2822:35:19;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;-1:-1:-1;;;788:34:19;;55985:2:28;788:34:19;;;55967:21:28;56024:2;56004:18;;;55997:30;-1:-1:-1;;;56043:18:28;;;56036:54;56107:18;;788:34:19;55783:348:28;730:345:19;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;-1:-1:-1;;;903:41:19;;56338:2:28;903:41:19;;;56320:21:28;56377:2;56357:18;;;56350:30;56416:33;56396:18;;;56389:61;56467:18;;903:41:19;56136:355:28;839:236:19;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;-1:-1:-1;;;1020:44:19;;56698:2:28;1020:44:19;;;56680:21:28;56737:2;56717:18;;;56710:30;56776:34;56756:18;;;56749:62;-1:-1:-1;;;56827:18:28;;;56820:32;56869:19;;1020:44:19;56496:398:28;7671:628:17;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;8121:18;8132:6;8121:10;:18::i;:::-;8113:60;;;;-1:-1:-1;;;8113:60:17;;57101:2:28;8113:60:17;;;57083:21:28;57140:2;57120:18;;;57113:30;57179:31;57159:18;;;57152:59;57228:18;;8113:60:17;56899:353:28;8113:60:17;-1:-1:-1;8208:10:17;8201:17;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;5009:1456:19:-;5097:7;;-1:-1:-1;;;;;6008:79:19;;6004:161;;;-1:-1:-1;6119:1:19;;-1:-1:-1;6123:30:19;6103:51;;6004:161;6276:24;;;6259:14;6276:24;;;;;;;;;57484:25:28;;;57557:4;57545:17;;57525:18;;;57518:45;;;;57579:18;;;57572:34;;;57622:18;;;57615:34;;;6276:24:19;;57456:19:28;;6276:24:19;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6276:24:19;;-1:-1:-1;;6276:24:19;;;-1:-1:-1;;;;;;;6314:20:19;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;6437:20;;-1:-1:-1;5009:1456:19;-1:-1:-1;;;;;5009:1456:19:o;8821:540:17:-;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:17;;;;;;;;:::i;14:159:28:-;81:20;;141:6;130:18;;120:29;;110:57;;163:1;160;153:12;110:57;14:159;;;:::o;178:347::-;229:8;239:6;293:3;286:4;278:6;274:17;270:27;260:55;;311:1;308;301:12;260:55;-1:-1:-1;334:20:28;;-1:-1:-1;;;;;366:30:28;;363:50;;;409:1;406;399:12;363:50;446:4;438:6;434:17;422:29;;498:3;491:4;482:6;474;470:19;466:30;463:39;460:59;;;515:1;512;505:12;530:171;597:20;;-1:-1:-1;;;;;646:30:28;;636:41;;626:69;;691:1;688;681:12;706:862;812:6;820;828;836;844;852;905:3;893:9;884:7;880:23;876:33;873:53;;;922:1;919;912:12;873:53;945:28;963:9;945:28;:::i;:::-;935:38;-1:-1:-1;1024:2:28;1009:18;;996:32;-1:-1:-1;;;;;1077:14:28;;;1074:34;;;1104:1;1101;1094:12;1074:34;1143:58;1193:7;1184:6;1173:9;1169:22;1143:58;:::i;:::-;1220:8;;-1:-1:-1;1117:84:28;-1:-1:-1;1117:84:28;;-1:-1:-1;1274:37:28;1307:2;1292:18;;1274:37;:::i;:::-;1264:47;;1364:2;1353:9;1349:18;1336:32;1320:48;;1393:2;1383:8;1380:16;1377:36;;;1409:1;1406;1399:12;1377:36;;1448:60;1500:7;1489:8;1478:9;1474:24;1448:60;:::i;:::-;706:862;;;;-1:-1:-1;706:862:28;;-1:-1:-1;706:862:28;;1527:8;;706:862;-1:-1:-1;;;706:862:28:o;1573:131::-;-1:-1:-1;;;;;1648:31:28;;1638:42;;1628:70;;1694:1;1691;1684:12;1709:319;1776:6;1784;1837:2;1825:9;1816:7;1812:23;1808:32;1805:52;;;1853:1;1850;1843:12;1805:52;1876:28;1894:9;1876:28;:::i;:::-;1866:38;;1954:2;1943:9;1939:18;1926:32;1967:31;1992:5;1967:31;:::i;:::-;2017:5;2007:15;;;1709:319;;;;;:::o;2215:203::-;-1:-1:-1;;;;;2379:32:28;;;;2361:51;;2349:2;2334:18;;2215:203::o;2423:250::-;2508:1;2518:113;2532:6;2529:1;2526:13;2518:113;;;2608:11;;;2602:18;2589:11;;;2582:39;2554:2;2547:10;2518:113;;;-1:-1:-1;;2665:1:28;2647:16;;2640:27;2423:250::o;2678:271::-;2720:3;2758:5;2752:12;2785:6;2780:3;2773:19;2801:76;2870:6;2863:4;2858:3;2854:14;2847:4;2840:5;2836:16;2801:76;:::i;:::-;2931:2;2910:15;-1:-1:-1;;2906:29:28;2897:39;;;;2938:4;2893:50;;2678:271;-1:-1:-1;;2678:271:28:o;2954:220::-;3103:2;3092:9;3085:21;3066:4;3123:45;3164:2;3153:9;3149:18;3141:6;3123:45;:::i;3179:184::-;3237:6;3290:2;3278:9;3269:7;3265:23;3261:32;3258:52;;;3306:1;3303;3296:12;3258:52;3329:28;3347:9;3329:28;:::i;3368:315::-;3436:6;3444;3497:2;3485:9;3476:7;3472:23;3468:32;3465:52;;;3513:1;3510;3503:12;3465:52;3552:9;3539:23;3571:31;3596:5;3571:31;:::i;:::-;3621:5;3673:2;3658:18;;;;3645:32;;-1:-1:-1;;;3368:315:28:o;3880:387::-;3956:6;3964;3972;4025:2;4013:9;4004:7;4000:23;3996:32;3993:52;;;4041:1;4038;4031:12;3993:52;4064:28;4082:9;4064:28;:::i;:::-;4054:38;;4142:2;4131:9;4127:18;4114:32;4155:31;4180:5;4155:31;:::i;:::-;3880:387;;4205:5;;-1:-1:-1;;;4257:2:28;4242:18;;;;4229:32;;3880:387::o;4272:252::-;4339:6;4347;4400:2;4388:9;4379:7;4375:23;4371:32;4368:52;;;4416:1;4413;4406:12;4368:52;4439:28;4457:9;4439:28;:::i;4529:828::-;4639:6;4647;4655;4663;4671;4724:3;4712:9;4703:7;4699:23;4695:33;4692:53;;;4741:1;4738;4731:12;4692:53;4780:9;4767:23;4799:31;4824:5;4799:31;:::i;:::-;4849:5;-1:-1:-1;4906:2:28;4891:18;;4878:32;4919:33;4878:32;4919:33;:::i;:::-;4971:7;-1:-1:-1;5030:2:28;5015:18;;5002:32;5043:33;5002:32;5043:33;:::i;:::-;5095:7;-1:-1:-1;5154:2:28;5139:18;;5126:32;5167:33;5126:32;5167:33;:::i;:::-;5219:7;-1:-1:-1;5278:3:28;5263:19;;5250:33;5292;5250;5292;:::i;:::-;5344:7;5334:17;;;4529:828;;;;;;;;:::o;5362:118::-;5448:5;5441:13;5434:21;5427:5;5424:32;5414:60;;5470:1;5467;5460:12;5485:241;5541:6;5594:2;5582:9;5573:7;5569:23;5565:32;5562:52;;;5610:1;5607;5600:12;5562:52;5649:9;5636:23;5668:28;5690:5;5668:28;:::i;5731:456::-;5808:6;5816;5824;5877:2;5865:9;5856:7;5852:23;5848:32;5845:52;;;5893:1;5890;5883:12;5845:52;5932:9;5919:23;5951:31;5976:5;5951:31;:::i;6607:481::-;6685:6;6693;6701;6754:2;6742:9;6733:7;6729:23;6725:32;6722:52;;;6770:1;6767;6760:12;6722:52;6793:28;6811:9;6793:28;:::i;:::-;6783:38;-1:-1:-1;6872:2:28;6857:18;;6844:32;-1:-1:-1;;;;;6888:30:28;;6885:50;;;6931:1;6928;6921:12;6885:50;6970:58;7020:7;7011:6;7000:9;6996:22;6970:58;:::i;:::-;6607:481;;7047:8;;-1:-1:-1;6944:84:28;;-1:-1:-1;;;;6607:481:28:o;7803:598::-;7897:6;7905;7913;7921;7929;7982:3;7970:9;7961:7;7957:23;7953:33;7950:53;;;7999:1;7996;7989:12;7950:53;8022:28;8040:9;8022:28;:::i;:::-;8012:38;;8100:2;8089:9;8085:18;8072:32;8113:31;8138:5;8113:31;:::i;:::-;8163:5;-1:-1:-1;8215:2:28;8200:18;;8187:32;;-1:-1:-1;8266:2:28;8251:18;;8238:32;;-1:-1:-1;8322:3:28;8307:19;;8294:33;8336;8294;8336;:::i;8406:127::-;8467:10;8462:3;8458:20;8455:1;8448:31;8498:4;8495:1;8488:15;8522:4;8519:1;8512:15;8538:255;8610:2;8604:9;8652:6;8640:19;;-1:-1:-1;;;;;8674:34:28;;8710:22;;;8671:62;8668:88;;;8736:18;;:::i;:::-;8772:2;8765:22;8538:255;:::o;8798:275::-;8869:2;8863:9;8934:2;8915:13;;-1:-1:-1;;8911:27:28;8899:40;;-1:-1:-1;;;;;8954:34:28;;8990:22;;;8951:62;8948:88;;;9016:18;;:::i;:::-;9052:2;9045:22;8798:275;;-1:-1:-1;8798:275:28:o;9078:186::-;9126:4;-1:-1:-1;;;;;9148:30:28;;9145:56;;;9181:18;;:::i;:::-;-1:-1:-1;9247:2:28;9226:15;-1:-1:-1;;9222:29:28;9253:4;9218:40;;9078:186::o;9269:462::-;9311:5;9364:3;9357:4;9349:6;9345:17;9341:27;9331:55;;9382:1;9379;9372:12;9331:55;9418:6;9405:20;9449:48;9465:31;9493:2;9465:31;:::i;:::-;9449:48;:::i;:::-;9522:2;9513:7;9506:19;9568:3;9561:4;9556:2;9548:6;9544:15;9540:26;9537:35;9534:55;;;9585:1;9582;9575:12;9534:55;9650:2;9643:4;9635:6;9631:17;9624:4;9615:7;9611:18;9598:55;9698:1;9673:16;;;9691:4;9669:27;9662:38;;;;9677:7;9269:462;-1:-1:-1;;;9269:462:28:o;9736:464::-;9820:6;9828;9836;9889:2;9877:9;9868:7;9864:23;9860:32;9857:52;;;9905:1;9902;9895:12;9857:52;9928:28;9946:9;9928:28;:::i;:::-;9918:38;-1:-1:-1;10007:2:28;9992:18;;9979:32;-1:-1:-1;;;;;10023:30:28;;10020:50;;;10066:1;10063;10056:12;10020:50;10089:49;10130:7;10121:6;10110:9;10106:22;10089:49;:::i;:::-;10079:59;;;10157:37;10190:2;10179:9;10175:18;10157:37;:::i;:::-;10147:47;;9736:464;;;;;:::o;10387:180::-;10446:6;10499:2;10487:9;10478:7;10474:23;10470:32;10467:52;;;10515:1;10512;10505:12;10467:52;-1:-1:-1;10538:23:28;;10387:180;-1:-1:-1;10387:180:28:o;10906:315::-;10974:6;10982;11035:2;11023:9;11014:7;11010:23;11006:32;11003:52;;;11051:1;11048;11041:12;11003:52;11087:9;11074:23;11064:33;;11147:2;11136:9;11132:18;11119:32;11160:31;11185:5;11160:31;:::i;11226:247::-;11285:6;11338:2;11326:9;11317:7;11313:23;11309:32;11306:52;;;11354:1;11351;11344:12;11306:52;11393:9;11380:23;11412:31;11437:5;11412:31;:::i;11701:256::-;11767:6;11775;11828:2;11816:9;11807:7;11803:23;11799:32;11796:52;;;11844:1;11841;11834:12;11796:52;11867:28;11885:9;11867:28;:::i;:::-;11857:38;;11914:37;11947:2;11936:9;11932:18;11914:37;:::i;:::-;11904:47;;11701:256;;;;;:::o;11962:460::-;12038:6;12046;12054;12107:2;12095:9;12086:7;12082:23;12078:32;12075:52;;;12123:1;12120;12113:12;12075:52;12146:28;12164:9;12146:28;:::i;:::-;12136:38;;12224:2;12213:9;12209:18;12196:32;12237:31;12262:5;12237:31;:::i;:::-;12287:5;-1:-1:-1;12344:2:28;12329:18;;12316:32;12357:33;12316:32;12357:33;:::i;:::-;12409:7;12399:17;;;11962:460;;;;;:::o;12427:885::-;12548:6;12556;12564;12572;12580;12588;12641:3;12629:9;12620:7;12616:23;12612:33;12609:53;;;12658:1;12655;12648:12;12609:53;12681:28;12699:9;12681:28;:::i;:::-;12671:38;-1:-1:-1;12760:2:28;12745:18;;12732:32;-1:-1:-1;;;;;12813:14:28;;;12810:34;;;12840:1;12837;12830:12;12810:34;12863:49;12904:7;12895:6;12884:9;12880:22;12863:49;:::i;:::-;12853:59;;12959:2;12948:9;12944:18;12931:32;12921:42;;13013:2;13002:9;12998:18;12985:32;12972:45;;13026:31;13051:5;13026:31;:::i;:::-;13076:5;;-1:-1:-1;13128:3:28;13113:19;;13100:33;;-1:-1:-1;13186:3:28;13171:19;;13158:33;;13203:16;;;13200:36;;;13232:1;13229;13222:12;13200:36;;13255:51;13298:7;13287:8;13276:9;13272:24;13255:51;:::i;:::-;13245:61;;;12427:885;;;;;;;;:::o;13562:622::-;13657:6;13665;13673;13681;13689;13742:3;13730:9;13721:7;13717:23;13713:33;13710:53;;;13759:1;13756;13749:12;13710:53;13782:28;13800:9;13782:28;:::i;:::-;13772:38;;13829:37;13862:2;13851:9;13847:18;13829:37;:::i;:::-;13819:47;-1:-1:-1;13913:2:28;13898:18;;13885:32;;-1:-1:-1;13968:2:28;13953:18;;13940:32;-1:-1:-1;;;;;13984:30:28;;13981:50;;;14027:1;14024;14017:12;13981:50;14066:58;14116:7;14107:6;14096:9;14092:22;14066:58;:::i;:::-;13562:622;;;;-1:-1:-1;13562:622:28;;-1:-1:-1;14143:8:28;;14040:84;13562:622;-1:-1:-1;;;13562:622:28:o;14189:388::-;14257:6;14265;14318:2;14306:9;14297:7;14293:23;14289:32;14286:52;;;14334:1;14331;14324:12;14286:52;14373:9;14360:23;14392:31;14417:5;14392:31;:::i;14582:324::-;14657:6;14665;14673;14726:2;14714:9;14705:7;14701:23;14697:32;14694:52;;;14742:1;14739;14732:12;14694:52;14765:28;14783:9;14765:28;:::i;:::-;14755:38;;14812:37;14845:2;14834:9;14830:18;14812:37;:::i;:::-;14802:47;;14896:2;14885:9;14881:18;14868:32;14858:42;;14582:324;;;;;:::o;14911:383::-;14988:6;14996;15004;15057:2;15045:9;15036:7;15032:23;15028:32;15025:52;;;15073:1;15070;15063:12;15025:52;15109:9;15096:23;15086:33;;15169:2;15158:9;15154:18;15141:32;15182:31;15207:5;15182:31;:::i;15299:460::-;15383:6;15391;15399;15407;15460:3;15448:9;15439:7;15435:23;15431:33;15428:53;;;15477:1;15474;15467:12;15428:53;15500:28;15518:9;15500:28;:::i;:::-;15490:38;;15547:37;15580:2;15569:9;15565:18;15547:37;:::i;:::-;15537:47;;15634:2;15623:9;15619:18;15606:32;15647:31;15672:5;15647:31;:::i;:::-;15299:460;;;;-1:-1:-1;15697:5:28;;15749:2;15734:18;15721:32;;-1:-1:-1;;15299:460:28:o;16318:127::-;16379:10;16374:3;16370:20;16367:1;16360:31;16410:4;16407:1;16400:15;16434:4;16431:1;16424:15;16450:125;16515:9;;;16536:10;;;16533:36;;;16549:18;;:::i;16580:380::-;16659:1;16655:12;;;;16702;;;16723:61;;16777:4;16769:6;16765:17;16755:27;;16723:61;16830:2;16822:6;16819:14;16799:18;16796:38;16793:161;;16876:10;16871:3;16867:20;16864:1;16857:31;16911:4;16908:1;16901:15;16939:4;16936:1;16929:15;16793:161;;16580:380;;;:::o;17158:325::-;17360:2;17342:21;;;17399:1;17379:18;;;17372:29;-1:-1:-1;;;17432:2:28;17417:18;;17410:32;17474:2;17459:18;;17158:325::o;17488:128::-;17555:9;;;17576:11;;;17573:37;;;17590:18;;:::i;18366:274::-;-1:-1:-1;;;;;18558:32:28;;;;18540:51;;18622:2;18607:18;;18600:34;18528:2;18513:18;;18366:274::o;18645:245::-;18712:6;18765:2;18753:9;18744:7;18740:23;18736:32;18733:52;;;18781:1;18778;18771:12;18733:52;18813:9;18807:16;18832:28;18854:5;18832:28;:::i;19094:273::-;19162:6;19215:2;19203:9;19194:7;19190:23;19186:32;19183:52;;;19231:1;19228;19221:12;19183:52;19263:9;19257:16;19313:4;19306:5;19302:16;19295:5;19292:27;19282:55;;19333:1;19330;19323:12;19372:271;19555:6;19547;19542:3;19529:33;19511:3;19581:16;;19606:13;;;19581:16;19372:271;-1:-1:-1;19372:271:28:o;19648:266::-;19736:6;19731:3;19724:19;19788:6;19781:5;19774:4;19769:3;19765:14;19752:43;-1:-1:-1;19840:1:28;19815:16;;;19833:4;19811:27;;;19804:38;;;;19896:2;19875:15;;;-1:-1:-1;;19871:29:28;19862:39;;;19858:50;;19648:266::o;19919:326::-;20114:6;20106;20102:19;20091:9;20084:38;20158:2;20153;20142:9;20138:18;20131:30;20065:4;20178:61;20235:2;20224:9;20220:18;20212:6;20204;20178:61;:::i;20250:325::-;20452:2;20434:21;;;20491:1;20471:18;;;20464:29;-1:-1:-1;;;20524:2:28;20509:18;;20502:32;20566:2;20551:18;;20250:325::o;21317:422::-;21406:1;21449:5;21406:1;21463:270;21484:7;21474:8;21471:21;21463:270;;;21543:4;21539:1;21535:6;21531:17;21525:4;21522:27;21519:53;;;21552:18;;:::i;:::-;21602:7;21592:8;21588:22;21585:55;;;21622:16;;;;21585:55;21701:22;;;;21661:15;;;;21463:270;;;21467:3;21317:422;;;;;:::o;21744:806::-;21793:5;21823:8;21813:80;;-1:-1:-1;21864:1:28;21878:5;;21813:80;21912:4;21902:76;;-1:-1:-1;21949:1:28;21963:5;;21902:76;21994:4;22012:1;22007:59;;;;22080:1;22075:130;;;;21987:218;;22007:59;22037:1;22028:10;;22051:5;;;22075:130;22112:3;22102:8;22099:17;22096:43;;;22119:18;;:::i;:::-;-1:-1:-1;;22175:1:28;22161:16;;22190:5;;21987:218;;22289:2;22279:8;22276:16;22270:3;22264:4;22261:13;22257:36;22251:2;22241:8;22238:16;22233:2;22227:4;22224:12;22220:35;22217:77;22214:159;;;-1:-1:-1;22326:19:28;;;22358:5;;22214:159;22405:34;22430:8;22424:4;22405:34;:::i;:::-;22475:6;22471:1;22467:6;22463:19;22454:7;22451:32;22448:58;;;22486:18;;:::i;:::-;22524:20;;21744:806;-1:-1:-1;;;21744:806:28:o;22555:140::-;22613:5;22642:47;22683:4;22673:8;22669:19;22663:4;22642:47;:::i;22700:184::-;22770:6;22823:2;22811:9;22802:7;22798:23;22794:32;22791:52;;;22839:1;22836;22829:12;22791:52;-1:-1:-1;22862:16:28;;22700:184;-1:-1:-1;22700:184:28:o;23577:127::-;23638:10;23633:3;23629:20;23626:1;23619:31;23669:4;23666:1;23659:15;23693:4;23690:1;23683:15;23709:239;23792:1;23785:5;23782:12;23772:143;;23837:10;23832:3;23828:20;23825:1;23818:31;23872:4;23869:1;23862:15;23900:4;23897:1;23890:15;23772:143;23924:18;;23709:239::o;23953:396::-;24209:2;24194:18;;24221:46;24198:9;24249:6;24221:46;:::i;:::-;24307:13;;-1:-1:-1;;;;;24303:39:28;24298:2;24283:18;;;;24276:67;23953:396;;-1:-1:-1;23953:396:28:o;24760:352::-;24971:6;24963;24958:3;24945:33;25066:2;25037:15;;;;-1:-1:-1;;;;;;25033:45:28;24997:16;;25022:57;;;25103:2;25095:11;;24760:352;-1:-1:-1;24760:352:28:o;25242:544::-;25343:2;25338:3;25335:11;25332:448;;;25379:1;25404:5;25400:2;25393:17;25449:4;25445:2;25435:19;25519:2;25507:10;25503:19;25500:1;25496:27;25490:4;25486:38;25555:4;25543:10;25540:20;25537:47;;;-1:-1:-1;25578:4:28;25537:47;25633:2;25628:3;25624:12;25621:1;25617:20;25611:4;25607:31;25597:41;;25688:82;25706:2;25699:5;25696:13;25688:82;;;25751:17;;;25732:1;25721:13;25688:82;;25791:166;-1:-1:-1;;25919:1:28;25915:11;;;25911:24;25907:29;25897:40;25943:1;25939:11;;;;25894:57;;25791:166::o;25962:1348::-;26080:10;;-1:-1:-1;;;;;26102:30:28;;26099:56;;;26135:18;;:::i;:::-;26164:96;26253:6;26213:38;26245:4;26239:11;26213:38;:::i;:::-;26207:4;26164:96;:::i;:::-;26315:4;;26379:2;26368:14;;26396:1;26391:662;;;;27097:1;27114:6;27111:89;;;-1:-1:-1;27166:19:28;;;27160:26;27111:89;27226:67;27286:6;27279:5;27226:67;:::i;:::-;27220:4;27213:81;;26361:943;;26391:662;25189:1;25182:14;;;25226:4;25213:18;;-1:-1:-1;;26427:20:28;;;26544:236;26558:7;26555:1;26552:14;26544:236;;;26647:19;;;26641:26;26626:42;;26739:27;;;;26707:1;26695:14;;;;26574:19;;26544:236;;;26548:3;26808:6;26799:7;26796:19;26793:201;;;26869:19;;;26863:26;-1:-1:-1;;26952:1:28;26948:14;;;26964:3;26944:24;26940:37;26936:42;26921:58;26906:74;;26793:201;-1:-1:-1;;;;;27040:1:28;27024:14;;;27020:22;27007:36;;-1:-1:-1;25962:1348:28:o;27975:287::-;28104:3;28142:6;28136:13;28158:66;28217:6;28212:3;28205:4;28197:6;28193:17;28158:66;:::i;:::-;28240:16;;;;;27975:287;-1:-1:-1;;27975:287:28:o;28267:367::-;28385:12;;28433:4;28422:16;;28416:23;-1:-1:-1;;;;;;28499:11:28;;;;28385:12;28416:23;28533:2;28522:14;;28519:109;;;28615:2;28609;28599:6;28595:2;28591:15;28588:1;28584:23;28580:32;28576:2;28572:41;28568:50;28559:59;;28519:109;;;;28267:367;;;:::o;28918:498::-;29118:4;29147:6;29192:2;29184:6;29180:15;29169:9;29162:34;29244:2;29236:6;29232:15;29227:2;29216:9;29212:18;29205:43;;29284:6;29279:2;29268:9;29264:18;29257:34;29327:3;29322:2;29311:9;29307:18;29300:31;29348:62;29405:3;29394:9;29390:19;29382:6;29374;29348:62;:::i;30227:493::-;30476:6;30468;30464:19;30453:9;30446:38;30520:3;30515:2;30504:9;30500:18;30493:31;30427:4;30541:62;30598:3;30587:9;30583:19;30575:6;30567;30541:62;:::i;:::-;-1:-1:-1;;;;;30639:31:28;;;;30659:2;30619:18;;30612:59;-1:-1:-1;30702:2:28;30687:18;30680:34;30533:70;30227:493;-1:-1:-1;;;30227:493:28:o;31438:1202::-;-1:-1:-1;;;;;31552:27:28;;31549:53;;;31582:18;;:::i;:::-;31611:93;31700:3;31660:38;31692:4;31686:11;31660:38;:::i;:::-;31654:4;31611:93;:::i;:::-;31730:1;31755:2;31750:3;31747:11;31772:1;31767:615;;;;32426:1;32443:3;32440:93;;;-1:-1:-1;32499:19:28;;;32486:33;32440:93;32559:64;32619:3;32612:5;32559:64;:::i;:::-;32553:4;32546:78;;31740:894;;31767:615;25189:1;25182:14;;;25226:4;25213:18;;-1:-1:-1;;31803:17:28;;;31903:9;31925:229;31939:7;31936:1;31933:14;31925:229;;;32028:19;;;32015:33;32000:49;;32135:4;32120:20;;;;32088:1;32076:14;;;;31955:12;31925:229;;;31929:3;32182;32173:7;32170:16;32167:159;;;32306:1;32302:6;32296:3;32290;32287:1;32283:11;32279:21;32275:34;32271:39;32258:9;32253:3;32249:19;32236:33;32232:79;32224:6;32217:95;32167:159;;;32369:1;32363:3;32360:1;32356:11;32352:19;32346:4;32339:33;31740:894;;31438:1202;;;:::o;32645:325::-;32847:2;32829:21;;;32886:1;32866:18;;;32859:29;-1:-1:-1;;;32919:2:28;32904:18;;32897:32;32961:2;32946:18;;32645:325::o;32975:127::-;33036:10;33031:3;33027:20;33024:1;33017:31;33067:4;33064:1;33057:15;33091:4;33088:1;33081:15;33107:135;33146:3;33167:17;;;33164:43;;33187:18;;:::i;:::-;-1:-1:-1;33234:1:28;33223:13;;33107:135::o;33247:423::-;33497:2;33482:18;;33509:46;33486:9;33537:6;33509:46;:::i;:::-;33597:6;33591:13;33586:2;33575:9;33571:18;33564:41;33659:2;33651:6;33647:15;33641:22;33636:2;33625:9;33621:18;33614:50;33247:423;;;;;:::o;34543:441::-;34596:5;34649:3;34642:4;34634:6;34630:17;34626:27;34616:55;;34667:1;34664;34657:12;34616:55;34696:6;34690:13;34727:48;34743:31;34771:2;34743:31;:::i;34727:48::-;34800:2;34791:7;34784:19;34846:3;34839:4;34834:2;34826:6;34822:15;34818:26;34815:35;34812:55;;;34863:1;34860;34853:12;34812:55;34876:77;34950:2;34943:4;34934:7;34930:18;34923:4;34915:6;34911:17;34876:77;:::i;34989:335::-;35068:6;35121:2;35109:9;35100:7;35096:23;35092:32;35089:52;;;35137:1;35134;35127:12;35089:52;35164:16;;-1:-1:-1;;;;;35192:30:28;;35189:50;;;35235:1;35232;35225:12;35189:50;35258:60;35310:7;35301:6;35290:9;35286:22;35258:60;:::i;35329:557::-;35586:6;35578;35574:19;35563:9;35556:38;35630:3;35625:2;35614:9;35610:18;35603:31;35537:4;35657:46;35698:3;35687:9;35683:19;35675:6;35657:46;:::i;:::-;-1:-1:-1;;;;;35739:31:28;;35759:2;35719:18;;35712:59;35807:22;;;35802:2;35787:18;;35780:50;35847:33;35811:6;35865;35847:33;:::i;35891:168::-;35964:9;;;35995;;36012:15;;;36006:22;;35992:37;35982:71;;36033:18;;:::i;36064:217::-;36104:1;36130;36120:132;;36174:10;36169:3;36165:20;36162:1;36155:31;36209:4;36206:1;36199:15;36237:4;36234:1;36227:15;36120:132;-1:-1:-1;36266:9:28;;36064:217::o;37455:407::-;37657:2;37639:21;;;37696:2;37676:18;;;37669:30;37735:34;37730:2;37715:18;;37708:62;-1:-1:-1;;;37801:2:28;37786:18;;37779:41;37852:3;37837:19;;37455:407::o;40793:325::-;40995:2;40977:21;;;41034:1;41014:18;;;41007:29;-1:-1:-1;;;41067:2:28;41052:18;;41045:32;41109:2;41094:18;;40793:325::o;41453:642::-;41734:6;41722:19;;41704:38;;-1:-1:-1;;;;;41778:32:28;;41773:2;41758:18;;41751:60;41798:3;41842:2;41827:18;;41820:31;;;-1:-1:-1;;41874:46:28;;41900:19;;41892:6;41874:46;:::i;:::-;41970:6;41963:14;41956:22;41951:2;41940:9;41936:18;41929:50;42028:9;42020:6;42016:22;42010:3;41999:9;41995:19;41988:51;42056:33;42082:6;42074;42056:33;:::i;:::-;42048:41;41453:642;-1:-1:-1;;;;;;;;41453:642:28:o;42100:245::-;42179:6;42187;42240:2;42228:9;42219:7;42215:23;42211:32;42208:52;;;42256:1;42253;42246:12;42208:52;-1:-1:-1;;42279:16:28;;42335:2;42320:18;;;42314:25;42279:16;;42314:25;;-1:-1:-1;42100:245:28:o;42603:840::-;42952:6;42944;42940:19;42929:9;42922:38;42996:3;42991:2;42980:9;42976:18;42969:31;42903:4;43023:46;43064:3;43053:9;43049:19;43041:6;43023:46;:::i;:::-;43117:9;43109:6;43105:22;43100:2;43089:9;43085:18;43078:50;43151:33;43177:6;43169;43151:33;:::i;:::-;-1:-1:-1;;;;;43258:15:28;;;43253:2;43238:18;;43231:43;43311:15;;43305:3;43290:19;;43283:44;43364:22;;;43211:3;43343:19;;43336:51;43137:47;-1:-1:-1;43404:33:28;43137:47;43422:6;43404:33;:::i;:::-;43396:41;42603:840;-1:-1:-1;;;;;;;;;42603:840:28:o;43448:276::-;43534:6;43587:2;43575:9;43566:7;43562:23;43558:32;43555:52;;;43603:1;43600;43593:12;43555:52;43635:9;43629:16;43674:1;43667:5;43664:12;43654:40;;43690:1;43687;43680:12;43729:138;43808:13;;43830:31;43808:13;43830:31;:::i;43872:1294::-;43983:6;43991;44044:2;44032:9;44023:7;44019:23;44015:32;44012:52;;;44060:1;44057;44050:12;44012:52;44083:16;;44143:2;44128:18;;44122:25;44083:16;;-1:-1:-1;;;;;;44196:14:28;;;44193:34;;;44223:1;44220;44213:12;44193:34;44246:22;;;;44302:6;44284:16;;;44280:29;44277:49;;;44322:1;44319;44312:12;44277:49;44348:22;;:::i;:::-;44393:33;44423:2;44393:33;:::i;:::-;44386:5;44379:48;44473:2;44469;44465:11;44459:18;44454:2;44447:5;44443:14;44436:42;44524:2;44520;44516:11;44510:18;44505:2;44498:5;44494:14;44487:42;44575:2;44571;44567:11;44561:18;44556:2;44549:5;44545:14;44538:42;44627:3;44623:2;44619:12;44613:19;44607:3;44600:5;44596:15;44589:44;44680:3;44676:2;44672:12;44666:19;44660:3;44653:5;44649:15;44642:44;44733:3;44729:2;44725:12;44719:19;44713:3;44706:5;44702:15;44695:44;44786:3;44782:2;44778:12;44772:19;44766:3;44759:5;44755:15;44748:44;44811:3;44860:2;44856;44852:11;44846:18;44841:2;44834:5;44830:14;44823:42;;44884:3;44933:2;44929;44925:11;44919:18;44914:2;44907:5;44903:14;44896:42;;44957:3;44999:2;44995;44991:11;44985:18;45028:2;45018:8;45015:16;45012:36;;;45044:1;45041;45034:12;45012:36;45080:55;45127:7;45116:8;45112:2;45108:17;45080:55;:::i;:::-;45075:2;45068:5;45064:14;45057:79;;;45155:5;45145:15;;;;;43872:1294;;;;;:::o;45171:842::-;45288:6;45296;45340:9;45331:7;45327:23;45370:3;45366:2;45362:12;45359:32;;;45387:1;45384;45377:12;45359:32;45410:16;;;-1:-1:-1;45460:4:28;-1:-1:-1;;45442:16:28;;45438:27;45435:47;;;45478:1;45475;45468:12;45435:47;-1:-1:-1;45511:2:28;45505:9;45553:4;45541:17;;-1:-1:-1;;;;;45573:34:28;;45609:22;;;45570:62;45567:88;;;45635:18;;:::i;:::-;45671:2;45664:22;45729:2;45714:18;;45708:25;45742:31;45708:25;45742:31;:::i;:::-;45797:5;45789:6;45782:21;;45857:2;45846:9;45842:18;45836:25;45831:2;45823:6;45819:15;45812:50;45916:2;45905:9;45901:18;45895:25;45890:2;45882:6;45878:15;45871:50;45975:4;45964:9;45960:20;45954:27;45949:2;45941:6;45937:15;45930:52;46001:6;45991:16;;;45171:842;;;;;:::o;46349:719::-;46652:6;46644;46640:19;46629:9;46622:38;46696:3;46691:2;46680:9;46676:18;46669:31;46603:4;46723:46;46764:3;46753:9;46749:19;46741:6;46723:46;:::i;:::-;-1:-1:-1;;;;;46805:31:28;;46825:2;46785:18;;46778:59;46873:22;;;46868:2;46853:18;;46846:50;46919:33;46877:6;46937;46919:33;:::i;:::-;46905:47;;47001:9;46993:6;46989:22;46983:3;46972:9;46968:19;46961:51;47029:33;47055:6;47047;47029:33;:::i;49420:368::-;49674:2;49659:18;;49686:46;49663:9;49714:6;49686:46;:::i;:::-;49774:6;49768:13;49763:2;49752:9;49748:18;49741:41;49420:368;;;;;:::o;54397:397::-;54610:6;54598:19;;54580:38;;-1:-1:-1;;;;;54654:32:28;;54649:2;54634:18;;54627:60;54723:2;54718;54703:18;;54696:30;;;-1:-1:-1;;54743:45:28;;54769:18;;54761:6;54743:45;:::i;54799:572::-;-1:-1:-1;;;;;55094:15:28;;;55076:34;;55141:2;55126:18;;55119:34;;;55201:6;55189:19;;55184:2;55169:18;;55162:47;55245:15;;55240:2;55225:18;;55218:43;55056:3;55292;55277:19;;55270:32;;;55019:4;;55319:46;;55345:19;;55337:6;55319:46;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"4887200","executionCost":"5775","totalCost":"4892975"},"external":{"DEFAULT_PAYLOAD_SIZE_LIMIT()":"558","addStrategy(uint16,address,uint256,uint256,address)":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"24728","balanceOf(address)":"3185","creditAvailable(uint16,address)":"infinite","debtOutstanding(uint16,address)":"infinite","decimals()":"infinite","decreaseAllowance(address,uint256)":"27142","deposit(uint256,address)":"infinite","emergencyShutdown()":"2685","failedMessages(uint16,bytes,uint64)":"infinite","forceResumeReceive(uint16,bytes)":"infinite","getConfig(uint16,uint16,address,uint256)":"infinite","getTrustedRemoteAddress(uint16)":"infinite","governance()":"2912","handleWithdrawals()":"infinite","increaseAllowance(address,uint256)":"27396","initialize(address,address,address,address,address)":"infinite","isTrustedRemote(uint16,bytes)":"infinite","lzEndpoint()":"2691","lzReceive(uint16,bytes,uint64,bytes)":"infinite","migrateStrategy(uint16,address,address)":"infinite","minDstGasLookup(uint16,uint16)":"infinite","name()":"infinite","nonblockingLzReceive(uint16,bytes,uint64,bytes)":"infinite","owner()":"2414","payloadSizeLimitLookup(uint16)":"2963","precrime()":"2427","pricePerShare()":"infinite","renounceOwnership()":"infinite","retryMessage(uint16,bytes,uint64,bytes)":"infinite","revokeFunds()":"infinite","revokeStrategy(uint16,address)":"36954","setConfig(uint16,uint16,uint256,bytes)":"infinite","setEmergencyShutdown(bool)":"29118","setGovernance(address)":"29181","setMinDstGas(uint16,uint16,uint256)":"infinite","setPayloadSizeLimit(uint16,uint256)":"24878","setPrecrime(address)":"28234","setReceiveVersion(uint16)":"infinite","setSendVersion(uint16)":"infinite","setStrategist(uint16,address,address)":"infinite","setTrustedRemote(uint16,bytes)":"infinite","setTrustedRemoteAddress(uint16,bytes)":"infinite","sgBridge()":"2758","sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"infinite","sgRouter()":"2428","strategies(uint16,address)":"18141","symbol()":"infinite","token()":"3021","totalAssets()":"infinite","totalDebt()":"2966","totalDebtRatio()":"2615","totalIdle()":"infinite","totalSupply()":"2546","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","trustedRemoteLookup(uint16)":"infinite","updateStrategyDebtRatio(uint16,address,uint256)":"infinite","withdraw(uint256,address,uint256)":"infinite","withdrawEpoch()":"2570","withdrawEpochs(uint256)":"7329"},"internal":{"_bridge(uint256,uint16,address,bytes memory)":"infinite","_creditAvailable(uint16,address)":"infinite","_debtOutstanding(uint16,address)":"infinite","_deposit(uint256,address)":"infinite","_fulfillWithdrawEpoch()":"infinite","_getAdapterParams()":"infinite","_handlePayload(uint16,bytes memory,uint256)":"infinite","_handleStrategyReport(uint16,struct IStrategyMessages.StrategyReport memory,uint256)":"infinite","_handleWithdrawSomeResponse(uint16,struct IStrategyMessages.WithdrawSomeResponse memory)":"infinite","_initiateWithdraw(uint256,address,uint256)":"infinite","_issueSharesForAmount(address,uint256)":"infinite","_nonblockingLzReceive(uint16,bytes memory,uint64,bytes memory)":"infinite","_reportLoss(uint16,address,uint256)":"infinite","_revokeStrategy(uint16,address)":"31778","_sendMessageToStrategy(uint16,address,bytes memory)":"infinite","_shareValue(uint256)":"infinite","_verifySignature(uint16,struct IStrategyMessages.StrategyReport memory)":"infinite"}},"methodIdentifiers":{"DEFAULT_PAYLOAD_SIZE_LIMIT()":"c4461834","addStrategy(uint16,address,uint256,uint256,address)":"52106a49","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","creditAvailable(uint16,address)":"01dc2eb1","debtOutstanding(uint16,address)":"e7fda061","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","deposit(uint256,address)":"6e553f65","emergencyShutdown()":"3403c2fc","failedMessages(uint16,bytes,uint64)":"5b8c41e6","forceResumeReceive(uint16,bytes)":"42d65a8d","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getTrustedRemoteAddress(uint16)":"9f38369a","governance()":"5aa6e675","handleWithdrawals()":"ef34253c","increaseAllowance(address,uint256)":"39509351","initialize(address,address,address,address,address)":"1459457a","isTrustedRemote(uint16,bytes)":"3d8b38f6","lzEndpoint()":"b353aaa7","lzReceive(uint16,bytes,uint64,bytes)":"001d3567","migrateStrategy(uint16,address,address)":"a032a712","minDstGasLookup(uint16,uint16)":"8cfd8f5c","name()":"06fdde03","nonblockingLzReceive(uint16,bytes,uint64,bytes)":"66ad5c8a","owner()":"8da5cb5b","payloadSizeLimitLookup(uint16)":"3f1f4fa4","precrime()":"950c8a74","pricePerShare()":"99530b06","renounceOwnership()":"715018a6","retryMessage(uint16,bytes,uint64,bytes)":"d1deba1f","revokeFunds()":"2d606843","revokeStrategy(uint16,address)":"cfbcc644","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setEmergencyShutdown(bool)":"14c64402","setGovernance(address)":"ab033ea9","setMinDstGas(uint16,uint16,uint256)":"df2a5b3b","setPayloadSizeLimit(uint16,uint256)":"0df37483","setPrecrime(address)":"baf3292d","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17","setStrategist(uint16,address,address)":"dde4f08e","setTrustedRemote(uint16,bytes)":"eb8d72b7","setTrustedRemoteAddress(uint16,bytes)":"a6c3d165","sgBridge()":"37fded91","sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"ab8236f3","sgRouter()":"0517cb76","strategies(uint16,address)":"4067cb9e","symbol()":"95d89b41","token()":"fc0c546a","totalAssets()":"01e1d114","totalDebt()":"fc7b9c18","totalDebtRatio()":"2df9eab9","totalIdle()":"9aa7df94","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","trustedRemoteLookup(uint16)":"7533d788","updateStrategyDebtRatio(uint16,address,uint256)":"0a97c254","withdraw(uint256,address,uint256)":"e63697c8","withdrawEpoch()":"ab73ce46","withdrawEpochs(uint256)":"5fe1a027"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestCount\",\"type\":\"uint256\"}],\"name\":\"FulfilledWithdrawEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SgReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StrategyWithdrawnSome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"creditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"debtOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sgBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sgRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oldStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyShutdown\",\"type\":\"bool\"}],\"name\":\"setEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStrategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgBridge\",\"outputs\":[{\"internalType\":\"contract ISgBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"updateStrategyDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawEpochs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approveExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveActual\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x748e7abf8908f264c6fff8ea7730b1766ab5a262be7962404f7d263066b41487\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x6ce5593a1247719f7209cad8068573c249674b41b859c6379ace1baaea0ed2a3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiverUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpointUpgradeable.sol\\\";\\nimport \\\"../../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[45] private __gap;\\n}\\n\",\"keccak256\":\"0xdb4821e980d9ae21ed437cdcedbdac901253f2411f518704eaa1de9af250f4b0\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./LzAppUpgradeable.sol\\\";\\nimport \\\"../../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\\n    using ExcessivelySafeCall for address;\\n\\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[49] private __gap;\\n}\\n\",\"keccak256\":\"0x128f7c8d0d1d04c147cea7a2a6c2244387bef408f2a6f0a9c2a01cf54a66eea3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BytesLib, NonblockingLzAppUpgradeable} from \\\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {ISgBridge} from \\\"./interfaces/ISgBridge.sol\\\";\\nimport {IStargateReceiver} from \\\"./integrations/stargate/IStargate.sol\\\";\\nimport {IStrategyMessages} from \\\"./interfaces/IStrategyMessages.sol\\\";\\nimport {StrategyParams, WithdrawRequest, WithdrawEpoch, IVault} from \\\"./interfaces/IVault.sol\\\";\\n\\ncontract Vault is\\n    Initializable,\\n    ERC20Upgradeable,\\n    NonblockingLzAppUpgradeable,\\n    IVault,\\n    IStrategyMessages,\\n    IStargateReceiver\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using BytesLib for bytes;\\n\\n    function initialize(\\n        address _governance,\\n        address _lzEndpoint,\\n        IERC20 _token,\\n        address _sgBridge,\\n        address _sgRouter\\n    ) external override initializer {\\n        __NonblockingLzAppUpgradeable_init(_lzEndpoint);\\n        __Ownable_init();\\n        __ERC20_init(\\\"Omnichain Vault\\\", \\\"OMV\\\");\\n\\n        governance = _governance;\\n        token = _token;\\n        sgBridge = ISgBridge(_sgBridge);\\n        sgRouter = _sgRouter;\\n\\n        token.approve(_sgBridge, type(uint256).max);\\n    }\\n\\n    address public override governance;\\n    IERC20 public override token;\\n\\n    ISgBridge public sgBridge;\\n    uint256 public totalDebtRatio;\\n    uint256 public totalDebt;\\n    bool public emergencyShutdown;\\n    mapping(uint16 => mapping(address => StrategyParams)) public strategies;\\n    uint256 public withdrawEpoch;\\n\\n    mapping(uint16 => EnumerableSet.AddressSet) internal _strategiesByChainId;\\n    EnumerableSet.UintSet internal _supportedChainIds;\\n    mapping(uint256 => WithdrawEpoch) public withdrawEpochs;\\n    mapping(uint16 => mapping(address => mapping(uint256 => bool)))\\n        internal _usedNonces;\\n\\n    address public sgRouter;\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == governance || msg.sender == owner(), \\\"V1\\\");\\n        _;\\n    }\\n\\n    modifier isAction(uint16 _chainId, address _strategy) {\\n        require(strategies[_chainId][_strategy].activation > 0, \\\"V2\\\");\\n        _;\\n    }\\n\\n    modifier nonAction(uint16 _chainId, address _strategy) {\\n        require(strategies[_chainId][_strategy].activation == 0, \\\"V3\\\");\\n        _;\\n    }\\n\\n    modifier WithdrawInProgress() {\\n        require(!withdrawEpochs[withdrawEpoch].inProgress, \\\"V4\\\");\\n        _;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return ERC20Upgradeable(address(token)).decimals();\\n    }\\n\\n    function revokeFunds() external override onlyAuthorized {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function setEmergencyShutdown(\\n        bool _emergencyShutdown\\n    ) external onlyAuthorized {\\n        emergencyShutdown = _emergencyShutdown;\\n    }\\n\\n    function setGovernance(address _newGovernance) external onlyAuthorized {\\n        governance = _newGovernance;\\n    }\\n\\n\\n    function setStrategist(\\n        uint16 _chainId,\\n        address _strategy,\\n        address _newStrategist\\n    ) external onlyAuthorized {\\n        strategies[_chainId][_strategy].strategist = _newStrategist;\\n    }\\n\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return totalDebt + totalIdle();\\n    }\\n\\n    function totalIdle() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _recipient\\n    ) external override returns (uint256) {\\n        return _deposit(_amount, _recipient);\\n    }\\n\\n    function withdraw(\\n        uint256 _maxShares,\\n        address _recipient,\\n        uint256 _maxLoss\\n    ) external override {\\n        _initiateWithdraw(_maxShares, _recipient, _maxLoss);\\n    }\\n\\n    function addStrategy(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio,\\n        uint256 _performanceFee,\\n        address _strategist\\n    ) external override onlyAuthorized nonAction(_chainId, _strategy){\\n        require(totalDebtRatio + _debtRatio <= 10_000, \\\"V5\\\");\\n\\n        strategies[_chainId][_strategy] = StrategyParams({\\n            activation: block.timestamp,\\n            debtRatio: _debtRatio,\\n            totalDebt: 0,\\n            totalGain: 0,\\n            totalLoss: 0,\\n            lastReport: 0,\\n            performanceFee: _performanceFee,\\n            strategist: _strategist\\n        });\\n\\n        _strategiesByChainId[_chainId].add(_strategy);\\n        _supportedChainIds.add(uint256(_chainId));\\n        totalDebtRatio += _debtRatio;\\n    }\\n\\n    function debtOutstanding(\\n        uint16 _chainId,\\n        address _strategy\\n    ) external view returns (uint256) {\\n        return _debtOutstanding(_chainId, _strategy);\\n    }\\n\\n    function creditAvailable(\\n        uint16 _chainId,\\n        address _strategy\\n    ) external view returns (uint256) {\\n        return _creditAvailable(_chainId, _strategy);\\n    }\\n\\n    function handleWithdrawals() external override onlyAuthorized WithdrawInProgress {\\n\\n        uint256 withdrawValue = 0;\\n        for (\\n            uint256 i = 0;\\n            i < withdrawEpochs[withdrawEpoch].requests.length;\\n            i++\\n        ) {\\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\\n                .requests[i];\\n            withdrawValue += _shareValue(request.shares);\\n        }\\n\\n        if (withdrawValue <= totalIdle()) {\\n            _fulfillWithdrawEpoch();\\n            return;\\n        }\\n\\n        uint256 amountNeeded = withdrawValue - totalIdle();\\n        uint256 strategyRequested = 0;\\n\\n        for (\\n            uint256 i = 0;\\n            i < _supportedChainIds.length() && amountNeeded > 0;\\n            i++\\n        ) {\\n            uint16 chainId = uint16(_supportedChainIds.at(i));\\n            EnumerableSet.AddressSet\\n                storage strategiesByChainId = _strategiesByChainId[chainId];\\n\\n            for (\\n                uint256 j = 0;\\n                j < strategiesByChainId.length() && amountNeeded > 0;\\n                j++\\n            ) {\\n                address strategy = strategiesByChainId.at(j);\\n                StrategyParams storage params = strategies[chainId][strategy];\\n\\n                if (params.totalDebt == 0) {\\n                    continue;\\n                }\\n\\n                uint256 strategyRequest = Math.min(\\n                    amountNeeded,\\n                    params.totalDebt\\n                );\\n                withdrawEpochs[withdrawEpoch].requestedAmount[chainId][\\n                    strategy\\n                ] = strategyRequest;\\n                amountNeeded -= strategyRequest;\\n\\n                _sendMessageToStrategy(\\n                    chainId,\\n                    strategy,\\n                    abi.encode(\\n                        MessageType.WithdrawSomeRequest,\\n                        WithdrawSomeRequest({\\n                            id: withdrawEpoch,\\n                            amount: strategyRequest\\n                        })\\n                    )\\n                );\\n                strategyRequested++;\\n            }\\n        }\\n\\n        withdrawEpochs[withdrawEpoch].approveExpected = strategyRequested;\\n        withdrawEpochs[withdrawEpoch].inProgress = true;\\n    }\\n\\n    function pricePerShare() external view override returns (uint256) {\\n        return _shareValue(10 ** decimals());\\n    }\\n\\n    function revokeStrategy(\\n        uint16 _chainId,\\n        address _strategy\\n    ) external override onlyAuthorized {\\n        _revokeStrategy(_chainId, _strategy);\\n    }\\n\\n    function updateStrategyDebtRatio(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio\\n    ) external override onlyAuthorized {\\n        totalDebtRatio -= strategies[_chainId][_strategy].debtRatio;\\n        strategies[_chainId][_strategy].debtRatio = _debtRatio;\\n\\n        require(totalDebtRatio + _debtRatio <= 10_000, \\\"V6\\\");\\n        totalDebtRatio += _debtRatio;\\n    }\\n\\n    function migrateStrategy(\\n        uint16 _chainId,\\n        address _oldStrategy,\\n        address _newStrategy\\n    ) external onlyAuthorized nonAction(_chainId, _newStrategy){\\n        require(_newStrategy != address(0), \\\"V7\\\");\\n\\n        StrategyParams memory params = strategies[_chainId][_oldStrategy];\\n        strategies[_chainId][_newStrategy] = StrategyParams({\\n            activation: params.lastReport,\\n            debtRatio: params.debtRatio,\\n            totalDebt: params.totalDebt,\\n            totalGain: 0,\\n            totalLoss: 0,\\n            lastReport: params.lastReport,\\n            performanceFee: params.performanceFee,\\n            strategist: params.strategist\\n        });\\n        strategies[_chainId][_oldStrategy].debtRatio = 0;\\n        strategies[_chainId][_oldStrategy].totalDebt = 0;\\n\\n        _sendMessageToStrategy(\\n            _chainId,\\n            _oldStrategy,\\n            abi.encode(\\n                MessageType.MigrateStrategyRequest,\\n                MigrateStrategyRequest({newStrategy: _newStrategy})\\n            )\\n        );\\n    }\\n\\n    function sgReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint,\\n        address _token,\\n        uint256 _amountLD,\\n        bytes memory _payload\\n    ) external override {\\n        require(_token == address(token), \\\"V8\\\");\\n        require(\\n            msg.sender == address(sgRouter) ||\\n                msg.sender == address(sgBridge) ||\\n                msg.sender == owner(),\\n            \\\"V9\\\"\\n        );\\n\\n        address srcAddress = address(\\n            bytes20(abi.encodePacked(_srcAddress.slice(0, 20)))\\n        );\\n\\n        _handlePayload(_srcChainId, _payload, _amountLD);\\n\\n        emit SgReceived(_token, _amountLD, srcAddress);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        require(msg.sender == address(lzEndpoint), \\\"V10\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function _deposit(\\n        uint256 _amount,\\n        address _recipient\\n    ) internal returns (uint256) {\\n        require(!emergencyShutdown, \\\"V11\\\");\\n        uint256 shares = _issueSharesForAmount(_recipient, _amount);\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        return shares;\\n    }\\n\\n    function _handlePayload(\\n        uint16 _chainId,\\n        bytes memory _payload,\\n        uint256 _receivedTokens\\n    ) internal {\\n        MessageType messageType = abi.decode(_payload, (MessageType));\\n        if (messageType == MessageType.StrategyReport) {\\n            (, StrategyReport memory message) = abi.decode(\\n                _payload,\\n                (uint256, StrategyReport)\\n            );\\n            _handleStrategyReport(_chainId, message, _receivedTokens);\\n        } else if (messageType == MessageType.WithdrawSomeResponse) {\\n            (, WithdrawSomeResponse memory message) = abi.decode(\\n                _payload,\\n                (uint256, WithdrawSomeResponse)\\n            );\\n            _handleWithdrawSomeResponse(_chainId, message);\\n        }\\n    }\\n\\n    function _handleStrategyReport(\\n        uint16 _chainId,\\n        StrategyReport memory _message,\\n        uint256 _receivedTokens\\n    ) internal {\\n        _verifySignature(_chainId, _message);\\n\\n        if (_message.loss > 0) {\\n            _reportLoss(_chainId, _message.strategy, _message.loss);\\n        }\\n\\n        strategies[_chainId][_message.strategy].totalGain += _message.profit;\\n        uint256 debt = _debtOutstanding(_chainId, _message.strategy);\\n        uint256 debtPayment = Math.min(debt, _message.debtPayment);\\n\\n        if (debtPayment > 0) {\\n            strategies[_chainId][_message.strategy].totalDebt -= debtPayment;\\n            totalDebt -= debtPayment;\\n            debt -= debtPayment;\\n        }\\n\\n        if (_message.creditAvailable > 0) {\\n            strategies[_chainId][_message.strategy].totalDebt += _message\\n                .creditAvailable;\\n            totalDebt += _message.creditAvailable;\\n        }\\n\\n        strategies[_chainId][_message.strategy].lastReport = _message.timestamp;\\n\\n        if (\\n            strategies[_chainId][_message.strategy].debtRatio == 0 ||\\n            emergencyShutdown\\n        ) {\\n            debt = _message.totalAssets;\\n        }\\n\\n        if (_message.giveToStrategy > 0) {\\n            _bridge(\\n                _message.giveToStrategy,\\n                _chainId,\\n                _message.strategy,\\n                abi.encode(\\n                    MessageType.AdjustPositionRequest,\\n                    AdjustPositionRequest({debtOutstanding: debt})\\n                )\\n            );\\n        } else {\\n            _sendMessageToStrategy(\\n                _chainId,\\n                _message.strategy,\\n                abi.encode(\\n                    MessageType.AdjustPositionRequest,\\n                    AdjustPositionRequest({debtOutstanding: debt})\\n                )\\n            );\\n        }\\n\\n        StrategyParams memory params = strategies[_chainId][_message.strategy];\\n        emit StrategyReported(\\n            _chainId,\\n            _message.strategy,\\n            _message.profit,\\n            _message.loss,\\n            _message.debtPayment,\\n            params.totalGain,\\n            params.totalLoss,\\n            params.totalDebt,\\n            _message.creditAvailable,\\n            params.debtRatio,\\n            _receivedTokens\\n        );\\n    }\\n\\n    function _reportLoss(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _loss\\n    ) internal {\\n        require(strategies[_chainId][_strategy].totalDebt >= _loss, \\\"V12\\\");\\n        strategies[_chainId][_strategy].totalLoss += _loss;\\n        strategies[_chainId][_strategy].totalDebt -= _loss;\\n        totalDebt -= _loss;\\n    }\\n\\n    function _initiateWithdraw(\\n        uint256 _shares,\\n        address _recipient,\\n        uint256 _maxLoss\\n    ) internal WithdrawInProgress{\\n\\n        _transfer(msg.sender, address(this), _shares);\\n        withdrawEpochs[withdrawEpoch].requests.push(\\n            WithdrawRequest({\\n                author: msg.sender,\\n                user: _recipient,\\n                shares: _shares,\\n                maxLoss: _maxLoss,\\n                expected: _shareValue(_shares),\\n                success: false\\n            })\\n        );\\n    }\\n\\n    function _shareValue(uint256 _shares) internal view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return _shares;\\n        }\\n        return (_shares * totalAssets()) / totalSupply();\\n    }\\n\\n    function _issueSharesForAmount(\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 shares = 0;\\n        if (totalSupply() == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = (_amount * totalSupply()) / totalAssets();\\n        }\\n        require(shares > 0, \\\"V13\\\");\\n        _mint(_to, shares);\\n        return shares;\\n    }\\n\\n    function _sendMessageToStrategy(\\n        uint16 _chainId,\\n        address _strategy,\\n        bytes memory _payload\\n    ) internal isAction(_chainId, _strategy) {\\n\\n        bytes memory remoteAndLocalAddresses = abi.encodePacked(\\n            _strategy,\\n            address(this)\\n        );\\n\\n        (uint256 nativeFee, ) = lzEndpoint.estimateFees(\\n            _chainId,\\n            address(this),\\n            _payload,\\n            false,\\n            _getAdapterParams()\\n        );\\n\\n        if (address(this).balance < nativeFee) {\\n            revert InsufficientFunds(nativeFee, address(this).balance);\\n        }\\n\\n        lzEndpoint.send{value: nativeFee}(\\n            _chainId,\\n            remoteAndLocalAddresses,\\n            _payload,\\n            payable(address(this)),\\n            address(this),\\n            _getAdapterParams()\\n        );\\n    }\\n\\n    function _getAdapterParams() internal view virtual returns (bytes memory) {\\n        uint16 version = 1;\\n        uint256 gasForDestinationLzReceive = 1_000_000;\\n        return abi.encodePacked(version, gasForDestinationLzReceive);\\n    }\\n\\n    function _revokeStrategy(uint16 _chainId, address _strategy) internal {\\n        totalDebtRatio -= strategies[_chainId][_strategy].debtRatio;\\n        strategies[_chainId][_strategy].debtRatio = 0;\\n    }\\n\\n    function _creditAvailable(\\n        uint16 _chainId,\\n        address _strategy\\n    ) internal view returns (uint256) {\\n        if (emergencyShutdown) {\\n            return 0;\\n        }\\n\\n        uint256 strategyDebtLimit = (strategies[_chainId][_strategy].debtRatio *\\n            totalAssets()) / 10_000;\\n        uint256 strategyTotalDebt = strategies[_chainId][_strategy].totalDebt;\\n\\n        if (strategyDebtLimit <= strategyTotalDebt) {\\n            return 0;\\n        }\\n\\n        return Math.min(totalIdle(), strategyDebtLimit - strategyTotalDebt);\\n    }\\n\\n    function _debtOutstanding(\\n        uint16 _chainId,\\n        address _strategy\\n    ) internal view returns (uint256) {\\n        uint256 strategyDebtLimit = (strategies[_chainId][_strategy].debtRatio *\\n            totalAssets()) / 10_000;\\n        uint256 strategyTotalDebt = strategies[_chainId][_strategy].totalDebt;\\n\\n        if (emergencyShutdown) {\\n            return strategyTotalDebt;\\n        } else if (strategyTotalDebt <= strategyDebtLimit) {\\n            return 0;\\n        } else {\\n            return strategyTotalDebt - strategyDebtLimit;\\n        }\\n    }\\n\\n    function _fulfillWithdrawEpoch() internal {\\n        uint256 requestsLength = withdrawEpochs[withdrawEpoch].requests.length;\\n        require(requestsLength > 0, \\\"V14\\\");\\n\\n        uint256[] memory shareValues = new uint256[](requestsLength);\\n\\n        for (uint256 i = 0; i < requestsLength; i++) {\\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\\n                .requests[i];\\n            shareValues[i] = _shareValue(request.shares);\\n        }\\n\\n        for (uint256 i = 0; i < requestsLength; i++) {\\n            WithdrawRequest storage request = withdrawEpochs[withdrawEpoch]\\n                .requests[i];\\n            uint256 valueToTransfer = Math.min(shareValues[i], totalIdle());\\n\\n            if (valueToTransfer < request.expected) {\\n                uint256 diff = request.expected - valueToTransfer;\\n                uint256 diffScaled = (diff * 10_000) / request.expected;\\n\\n                if (diffScaled > request.maxLoss) {\\n                    request.success = false;\\n                    this.transfer(request.author, request.shares);\\n                    continue;\\n                }\\n            }\\n\\n            request.success = true;\\n            token.safeTransfer(request.user, valueToTransfer);\\n            _burn(address(this), request.shares);\\n        }\\n\\n        emit FulfilledWithdrawEpoch(withdrawEpoch, requestsLength);\\n\\n        withdrawEpochs[withdrawEpoch].inProgress = false;\\n        withdrawEpoch++;\\n    }\\n\\n    function _handleWithdrawSomeResponse(\\n        uint16 _chainId,\\n        WithdrawSomeResponse memory _message\\n    ) internal isAction(_chainId, _message.source){\\n\\n        if (_message.loss > 0) {\\n            _reportLoss(_chainId, _message.source, _message.loss);\\n        }\\n        strategies[_chainId][_message.source].totalDebt -= _message.amount;\\n        totalDebt -= _message.amount;\\n\\n        withdrawEpochs[_message.id].approveActual++;\\n        withdrawEpochs[_message.id].approved[_chainId][_message.source] = true;\\n        if (\\n            withdrawEpochs[_message.id].approveExpected ==\\n            withdrawEpochs[_message.id].approveActual\\n        ) {\\n            _fulfillWithdrawEpoch();\\n        }\\n\\n        emit StrategyWithdrawnSome(\\n            _chainId,\\n            _message.source,\\n            _message.amount,\\n            _message.loss,\\n            _message.id\\n        );\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64,\\n        bytes memory _payload\\n    ) internal override {\\n        address srcAddress = address(\\n            bytes20(abi.encodePacked(_srcAddress.slice(0, 20)))\\n        );\\n        require(strategies[_srcChainId][srcAddress].activation > 0, \\\"V15\\\");\\n\\n        _handlePayload(_srcChainId, _payload, 0);\\n    }\\n\\n    function _bridge(\\n        uint256 _amount,\\n        uint16 _destChainId,\\n        address _dest,\\n        bytes memory _payload\\n    ) internal {\\n        uint256 fee = sgBridge.feeForBridge(_destChainId, _dest, _payload);\\n        sgBridge.bridge{value: fee}(\\n            address(token),\\n            _amount,\\n            _destChainId,\\n            _dest,\\n            _payload\\n        );\\n    }\\n\\n    function _verifySignature(\\n        uint16 _chainId,\\n        StrategyReport memory _report\\n    ) internal {\\n        require(\\n            _usedNonces[_chainId][_report.strategy][_report.nonce] == false,\\n            \\\"V16\\\"\\n        );\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(_report.strategy, _report.nonce, _chainId)\\n        );\\n        bytes32 ethSignedMessageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n        );\\n        require(\\n            ECDSA.recover(ethSignedMessageHash, _report.signature) ==\\n                strategies[_chainId][_report.strategy].strategist,\\n            \\\"V17\\\"\\n        );\\n\\n        _usedNonces[_chainId][_report.strategy][_report.nonce] = true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x3ad5279a35f9d276e524f023a205643e93110fe66ef7bd30f42d780309c0b2f9\",\"license\":\"MIT\"},\"contracts/integrations/stargate/IStargate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\\ninterface IStargateRouter {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        LzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x7a59d74d4419cbf6b5baad6e21e91c35e4b94571b75abc15e41c83941046ab90\",\"license\":\"MIT\"},\"contracts/interfaces/ISgBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface ISgBridge {\\n    error TokenNotSupported(address token, uint16 destChainId);\\n\\n    event Bridge(uint16 indexed chainId, uint256 amount);\\n\\n    function initialize(address _router, uint16 _currentChainId) external;\\n\\n    function setRouter(address _router) external;\\n\\n    function setSlippage(uint256 _slippage) external;\\n\\n    function setDstGasForCall(uint256 _dstGasForCall) external;\\n\\n    function setCurrentChainId(uint16 _currentChainId) external;\\n\\n    function setStargatePoolId(\\n        address _token,\\n        uint16 _chainId,\\n        uint256 _poolId\\n    ) external;\\n\\n    function revokeFunds() external;\\n\\n    function bridge(\\n        address _token,\\n        uint256 _amount,\\n        uint16 _destChainId,\\n        address _destinationAddress,\\n        bytes memory _message\\n    ) external payable;\\n\\n    function feeForBridge(\\n        uint16 _destChainId,\\n        address _destinationContract,\\n        bytes memory _payload\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba18573119dbe337d02fd0b494a0a2ffef31817088754594c04a688c43951dfc\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategyMessages.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStrategyMessages {\\n    enum MessageType {\\n        WithdrawSomeRequest,\\n        WithdrawSomeResponse,\\n        StrategyReport,\\n        AdjustPositionRequest,\\n        MigrateStrategyRequest\\n    }\\n\\n    struct WithdrawSomeRequest {\\n        uint256 amount;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawSomeResponse {\\n        address source;\\n        uint256 amount;\\n        uint256 loss;\\n        uint256 id;\\n    }\\n\\n    struct StrategyReport {\\n        address strategy;\\n        uint256 timestamp;\\n        uint256 profit;\\n        uint256 loss;\\n        uint256 debtPayment;\\n        uint256 giveToStrategy;\\n        uint256 requestFromStrategy;\\n        uint256 creditAvailable;\\n        uint256 totalAssets;\\n        uint256 nonce;\\n        bytes signature;\\n    }\\n\\n    struct AdjustPositionRequest {\\n        uint256 debtOutstanding;\\n    }\\n\\n    struct MigrateStrategyRequest {\\n        address newStrategy;\\n    }\\n}\\n\",\"keccak256\":\"0x0ae964b47c6f0e791014a8f89dcdd3135142ab2e364bd01a7ae3112df55b3134\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n    uint256 lastReport;\\n    uint256 performanceFee;\\n    address strategist;\\n}\\n\\nstruct WithdrawRequest {\\n    address author;\\n    address user;\\n    uint256 shares;\\n    uint256 maxLoss;\\n    uint256 expected;\\n    bool success;\\n}\\n\\nstruct WithdrawEpoch {\\n    WithdrawRequest[] requests;\\n    bool inProgress;\\n    uint256 approveExpected;\\n    uint256 approveActual;\\n    mapping(uint16 => mapping(address => bool)) approved;\\n    mapping(uint16 => mapping(address => uint256)) requestedAmount;\\n}\\n\\ninterface IVault {\\n    error InsufficientFunds(uint256 amount, uint256 balance);\\n\\n    event SgReceived(address indexed token, uint256 amount, address sender);\\n    event StrategyWithdrawnSome(\\n        uint16 indexed chainId,\\n        address indexed strategy,\\n        uint256 amount,\\n        uint256 loss,\\n        uint256 id\\n    );\\n    event FulfilledWithdrawEpoch(uint256 epochId, uint256 requestCount);\\n    event StrategyReported(\\n        uint16 chainId,\\n        address strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPaid,\\n        uint256 totalGain,\\n        uint256 totalLoss,\\n        uint256 totalDebt,\\n        uint256 debtAdded,\\n        uint256 debtRatio,\\n        uint256 tokens\\n    );\\n\\n    function initialize(\\n        address _governance,\\n        address _lzEndpoint,\\n        IERC20 _token,\\n        address _sgBridge,\\n        address _sgRouter\\n    ) external;\\n\\n    function token() external view returns (IERC20);\\n\\n    function revokeFunds() external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _recipient\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 _maxShares,\\n        address _recipient,\\n        uint256 _maxLoss\\n    ) external;\\n\\n    function addStrategy(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio,\\n        uint256 _performanceFee,\\n        address _strategist\\n    ) external;\\n\\n    function handleWithdrawals() external;\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function revokeStrategy(uint16 _chainId, address _strategy) external;\\n\\n    function updateStrategyDebtRatio(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio\\n    ) external;\\n\\n    function governance() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbe261f193857eec80f60ffe8e2332f3b5bd29569741828561fa98fa45454be8d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1593,"contract":"contracts/Vault.sol:Vault","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1596,"contract":"contracts/Vault.sol:Vault","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2841,"contract":"contracts/Vault.sol:Vault","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1774,"contract":"contracts/Vault.sol:Vault","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1780,"contract":"contracts/Vault.sol:Vault","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1782,"contract":"contracts/Vault.sol:Vault","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1784,"contract":"contracts/Vault.sol:Vault","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1786,"contract":"contracts/Vault.sol:Vault","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":2366,"contract":"contracts/Vault.sol:Vault","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1465,"contract":"contracts/Vault.sol:Vault","label":"_owner","offset":0,"slot":"101","type":"t_address"},{"astId":1585,"contract":"contracts/Vault.sol:Vault","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":213,"contract":"contracts/Vault.sol:Vault","label":"lzEndpoint","offset":0,"slot":"151","type":"t_contract(ILayerZeroEndpointUpgradeable)144"},{"astId":217,"contract":"contracts/Vault.sol:Vault","label":"trustedRemoteLookup","offset":0,"slot":"152","type":"t_mapping(t_uint16,t_bytes_storage)"},{"astId":223,"contract":"contracts/Vault.sol:Vault","label":"minDstGasLookup","offset":0,"slot":"153","type":"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"},{"astId":227,"contract":"contracts/Vault.sol:Vault","label":"payloadSizeLimitLookup","offset":0,"slot":"154","type":"t_mapping(t_uint16,t_uint256)"},{"astId":229,"contract":"contracts/Vault.sol:Vault","label":"precrime","offset":0,"slot":"155","type":"t_address"},{"astId":761,"contract":"contracts/Vault.sol:Vault","label":"__gap","offset":0,"slot":"156","type":"t_array(t_uint256)45_storage"},{"astId":804,"contract":"contracts/Vault.sol:Vault","label":"failedMessages","offset":0,"slot":"201","type":"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"},{"astId":1023,"contract":"contracts/Vault.sol:Vault","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":5959,"contract":"contracts/Vault.sol:Vault","label":"governance","offset":0,"slot":"251","type":"t_address"},{"astId":5963,"contract":"contracts/Vault.sol:Vault","label":"token","offset":0,"slot":"252","type":"t_contract(IERC20)2920"},{"astId":5966,"contract":"contracts/Vault.sol:Vault","label":"sgBridge","offset":0,"slot":"253","type":"t_contract(ISgBridge)8065"},{"astId":5968,"contract":"contracts/Vault.sol:Vault","label":"totalDebtRatio","offset":0,"slot":"254","type":"t_uint256"},{"astId":5970,"contract":"contracts/Vault.sol:Vault","label":"totalDebt","offset":0,"slot":"255","type":"t_uint256"},{"astId":5972,"contract":"contracts/Vault.sol:Vault","label":"emergencyShutdown","offset":0,"slot":"256","type":"t_bool"},{"astId":5979,"contract":"contracts/Vault.sol:Vault","label":"strategies","offset":0,"slot":"257","type":"t_mapping(t_uint16,t_mapping(t_address,t_struct(StrategyParams)8138_storage))"},{"astId":5981,"contract":"contracts/Vault.sol:Vault","label":"withdrawEpoch","offset":0,"slot":"258","type":"t_uint256"},{"astId":5986,"contract":"contracts/Vault.sol:Vault","label":"_strategiesByChainId","offset":0,"slot":"259","type":"t_mapping(t_uint16,t_struct(AddressSet)5554_storage)"},{"astId":5989,"contract":"contracts/Vault.sol:Vault","label":"_supportedChainIds","offset":0,"slot":"260","type":"t_struct(UintSet)5711_storage"},{"astId":5994,"contract":"contracts/Vault.sol:Vault","label":"withdrawEpochs","offset":0,"slot":"262","type":"t_mapping(t_uint256,t_struct(WithdrawEpoch)8174_storage)"},{"astId":6002,"contract":"contracts/Vault.sol:Vault","label":"_usedNonces","offset":0,"slot":"263","type":"t_mapping(t_uint16,t_mapping(t_address,t_mapping(t_uint256,t_bool)))"},{"astId":6004,"contract":"contracts/Vault.sol:Vault","label":"sgRouter","offset":0,"slot":"264","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_struct(WithdrawRequest)8151_storage)dyn_storage":{"base":"t_struct(WithdrawRequest)8151_storage","encoding":"dynamic_array","label":"struct WithdrawRequest[]","numberOfBytes":"32"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_memory_ptr":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(IERC20)2920":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(ILayerZeroEndpointUpgradeable)144":{"encoding":"inplace","label":"contract ILayerZeroEndpointUpgradeable","numberOfBytes":"20"},"t_contract(ISgBridge)8065":{"encoding":"inplace","label":"contract ISgBridge","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_struct(StrategyParams)8138_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct StrategyParams)","numberOfBytes":"32","value":"t_struct(StrategyParams)8138_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))":{"encoding":"mapping","key":"t_bytes_memory_ptr","label":"mapping(bytes => mapping(uint64 => bytes32))","numberOfBytes":"32","value":"t_mapping(t_uint64,t_bytes32)"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint16,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_uint16,t_mapping(t_address,t_mapping(t_uint256,t_bool)))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(address => mapping(uint256 => bool)))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},"t_mapping(t_uint16,t_mapping(t_address,t_struct(StrategyParams)8138_storage))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(address => struct StrategyParams))","numberOfBytes":"32","value":"t_mapping(t_address,t_struct(StrategyParams)8138_storage)"},"t_mapping(t_uint16,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))","numberOfBytes":"32","value":"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"},"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(uint16 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_uint256)"},"t_mapping(t_uint16,t_struct(AddressSet)5554_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)5554_storage"},"t_mapping(t_uint16,t_uint256)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_struct(WithdrawEpoch)8174_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct WithdrawEpoch)","numberOfBytes":"32","value":"t_struct(WithdrawEpoch)8174_storage"},"t_mapping(t_uint64,t_bytes32)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AddressSet)5554_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":5553,"contract":"contracts/Vault.sol:Vault","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)5239_storage"}],"numberOfBytes":"64"},"t_struct(Set)5239_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":5234,"contract":"contracts/Vault.sol:Vault","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":5238,"contract":"contracts/Vault.sol:Vault","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_struct(StrategyParams)8138_storage":{"encoding":"inplace","label":"struct StrategyParams","members":[{"astId":8123,"contract":"contracts/Vault.sol:Vault","label":"activation","offset":0,"slot":"0","type":"t_uint256"},{"astId":8125,"contract":"contracts/Vault.sol:Vault","label":"debtRatio","offset":0,"slot":"1","type":"t_uint256"},{"astId":8127,"contract":"contracts/Vault.sol:Vault","label":"totalDebt","offset":0,"slot":"2","type":"t_uint256"},{"astId":8129,"contract":"contracts/Vault.sol:Vault","label":"totalGain","offset":0,"slot":"3","type":"t_uint256"},{"astId":8131,"contract":"contracts/Vault.sol:Vault","label":"totalLoss","offset":0,"slot":"4","type":"t_uint256"},{"astId":8133,"contract":"contracts/Vault.sol:Vault","label":"lastReport","offset":0,"slot":"5","type":"t_uint256"},{"astId":8135,"contract":"contracts/Vault.sol:Vault","label":"performanceFee","offset":0,"slot":"6","type":"t_uint256"},{"astId":8137,"contract":"contracts/Vault.sol:Vault","label":"strategist","offset":0,"slot":"7","type":"t_address"}],"numberOfBytes":"256"},"t_struct(UintSet)5711_storage":{"encoding":"inplace","label":"struct EnumerableSet.UintSet","members":[{"astId":5710,"contract":"contracts/Vault.sol:Vault","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)5239_storage"}],"numberOfBytes":"64"},"t_struct(WithdrawEpoch)8174_storage":{"encoding":"inplace","label":"struct WithdrawEpoch","members":[{"astId":8155,"contract":"contracts/Vault.sol:Vault","label":"requests","offset":0,"slot":"0","type":"t_array(t_struct(WithdrawRequest)8151_storage)dyn_storage"},{"astId":8157,"contract":"contracts/Vault.sol:Vault","label":"inProgress","offset":0,"slot":"1","type":"t_bool"},{"astId":8159,"contract":"contracts/Vault.sol:Vault","label":"approveExpected","offset":0,"slot":"2","type":"t_uint256"},{"astId":8161,"contract":"contracts/Vault.sol:Vault","label":"approveActual","offset":0,"slot":"3","type":"t_uint256"},{"astId":8167,"contract":"contracts/Vault.sol:Vault","label":"approved","offset":0,"slot":"4","type":"t_mapping(t_uint16,t_mapping(t_address,t_bool))"},{"astId":8173,"contract":"contracts/Vault.sol:Vault","label":"requestedAmount","offset":0,"slot":"5","type":"t_mapping(t_uint16,t_mapping(t_address,t_uint256))"}],"numberOfBytes":"192"},"t_struct(WithdrawRequest)8151_storage":{"encoding":"inplace","label":"struct WithdrawRequest","members":[{"astId":8140,"contract":"contracts/Vault.sol:Vault","label":"author","offset":0,"slot":"0","type":"t_address"},{"astId":8142,"contract":"contracts/Vault.sol:Vault","label":"user","offset":0,"slot":"1","type":"t_address"},{"astId":8144,"contract":"contracts/Vault.sol:Vault","label":"shares","offset":0,"slot":"2","type":"t_uint256"},{"astId":8146,"contract":"contracts/Vault.sol:Vault","label":"maxLoss","offset":0,"slot":"3","type":"t_uint256"},{"astId":8148,"contract":"contracts/Vault.sol:Vault","label":"expected","offset":0,"slot":"4","type":"t_uint256"},{"astId":8150,"contract":"contracts/Vault.sol:Vault","label":"success","offset":0,"slot":"5","type":"t_bool"}],"numberOfBytes":"192"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/integrations/stargate/IStargate.sol":{"IStargateReceiver":{"abi":[{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"amountLD","type":"uint256"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"sgReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"ab8236f3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/stargate/IStargate.sol\":\"IStargateReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/integrations/stargate/IStargate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\\ninterface IStargateRouter {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        LzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x7a59d74d4419cbf6b5baad6e21e91c35e4b94571b75abc15e41c83941046ab90\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IStargateRouter":{"abi":[{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint8","name":"_functionType","type":"uint8"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"bytes","name":"_transferAndCallPayload","type":"bytes"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"}],"internalType":"struct IStargateRouter.LzTxObj","name":"_lzTxParams","type":"tuple"}],"name":"quoteLayerZeroFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_srcPoolId","type":"uint256"},{"internalType":"uint256","name":"_dstPoolId","type":"uint256"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"uint256","name":"_amountLD","type":"uint256"},{"internalType":"uint256","name":"_minAmountLD","type":"uint256"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"}],"internalType":"struct IStargateRouter.LzTxObj","name":"_lzTxParams","type":"tuple"},{"internalType":"bytes","name":"_to","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteLayerZeroFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))":"0a512369","swap(uint16,uint256,uint256,address,uint256,uint256,(uint256,uint256,bytes),bytes,bytes)":"9fbf10fc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transferAndCallPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/stargate/IStargate.sol\":\"IStargateRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/integrations/stargate/IStargate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\\ninterface IStargateRouter {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        LzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x7a59d74d4419cbf6b5baad6e21e91c35e4b94571b75abc15e41c83941046ab90\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISgBridge.sol":{"ISgBridge":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint16","name":"destChainId","type":"uint16"}],"name":"TokenNotSupported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Bridge","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint16","name":"_destChainId","type":"uint16"},{"internalType":"address","name":"_destinationAddress","type":"address"},{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"bridge","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_destChainId","type":"uint16"},{"internalType":"address","name":"_destinationContract","type":"address"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"feeForBridge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"},{"internalType":"uint16","name":"_currentChainId","type":"uint16"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"revokeFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_currentChainId","type":"uint16"}],"name":"setCurrentChainId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dstGasForCall","type":"uint256"}],"name":"setDstGasForCall","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"setRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_slippage","type":"uint256"}],"name":"setSlippage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_poolId","type":"uint256"}],"name":"setStargatePoolId","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"bridge(address,uint256,uint16,address,bytes)":"72408ab6","feeForBridge(uint16,address,bytes)":"0dc63461","initialize(address,uint16)":"f39e69a4","revokeFunds()":"2d606843","setCurrentChainId(uint16)":"24bb7293","setDstGasForCall(uint256)":"991f2188","setRouter(address)":"c0d78655","setSlippage(uint256)":"f0fa55a9","setStargatePoolId(address,uint16,uint256)":"7de07f04"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"destChainId\",\"type\":\"uint16\"}],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bridge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_destChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_destChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_destinationContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"feeForBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currentChainId\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_currentChainId\",\"type\":\"uint16\"}],\"name\":\"setCurrentChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstGasForCall\",\"type\":\"uint256\"}],\"name\":\"setDstGasForCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"setStargatePoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISgBridge.sol\":\"ISgBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/interfaces/ISgBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface ISgBridge {\\n    error TokenNotSupported(address token, uint16 destChainId);\\n\\n    event Bridge(uint16 indexed chainId, uint256 amount);\\n\\n    function initialize(address _router, uint16 _currentChainId) external;\\n\\n    function setRouter(address _router) external;\\n\\n    function setSlippage(uint256 _slippage) external;\\n\\n    function setDstGasForCall(uint256 _dstGasForCall) external;\\n\\n    function setCurrentChainId(uint16 _currentChainId) external;\\n\\n    function setStargatePoolId(\\n        address _token,\\n        uint16 _chainId,\\n        uint256 _poolId\\n    ) external;\\n\\n    function revokeFunds() external;\\n\\n    function bridge(\\n        address _token,\\n        uint256 _amount,\\n        uint16 _destChainId,\\n        address _destinationAddress,\\n        bytes memory _message\\n    ) external payable;\\n\\n    function feeForBridge(\\n        uint16 _destChainId,\\n        address _destinationContract,\\n        bytes memory _payload\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba18573119dbe337d02fd0b494a0a2ffef31817088754594c04a688c43951dfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IStrategyMessages.sol":{"IStrategyMessages":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStrategyMessages.sol\":\"IStrategyMessages\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"contracts/interfaces/IStrategyMessages.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IStrategyMessages {\\n    enum MessageType {\\n        WithdrawSomeRequest,\\n        WithdrawSomeResponse,\\n        StrategyReport,\\n        AdjustPositionRequest,\\n        MigrateStrategyRequest\\n    }\\n\\n    struct WithdrawSomeRequest {\\n        uint256 amount;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawSomeResponse {\\n        address source;\\n        uint256 amount;\\n        uint256 loss;\\n        uint256 id;\\n    }\\n\\n    struct StrategyReport {\\n        address strategy;\\n        uint256 timestamp;\\n        uint256 profit;\\n        uint256 loss;\\n        uint256 debtPayment;\\n        uint256 giveToStrategy;\\n        uint256 requestFromStrategy;\\n        uint256 creditAvailable;\\n        uint256 totalAssets;\\n        uint256 nonce;\\n        bytes signature;\\n    }\\n\\n    struct AdjustPositionRequest {\\n        uint256 debtOutstanding;\\n    }\\n\\n    struct MigrateStrategyRequest {\\n        address newStrategy;\\n    }\\n}\\n\",\"keccak256\":\"0x0ae964b47c6f0e791014a8f89dcdd3135142ab2e364bd01a7ae3112df55b3134\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IVault.sol":{"IVault":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"InsufficientFunds","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"requestCount","type":"uint256"}],"name":"FulfilledWithdrawEpoch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"}],"name":"SgReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"gain","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtPaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalGain","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalLoss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalDebt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtAdded","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"debtRatio","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokens","type":"uint256"}],"name":"StrategyReported","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loss","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"}],"name":"StrategyWithdrawnSome","type":"event"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"uint256","name":"_debtRatio","type":"uint256"},{"internalType":"uint256","name":"_performanceFee","type":"uint256"},{"internalType":"address","name":"_strategist","type":"address"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"governance","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"handleWithdrawals","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_governance","type":"address"},{"internalType":"address","name":"_lzEndpoint","type":"address"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_sgBridge","type":"address"},{"internalType":"address","name":"_sgRouter","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pricePerShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"revokeFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"}],"name":"revokeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_strategy","type":"address"},{"internalType":"uint256","name":"_debtRatio","type":"uint256"}],"name":"updateStrategyDebtRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxShares","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_maxLoss","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStrategy(uint16,address,uint256,uint256,address)":"52106a49","deposit(uint256,address)":"6e553f65","governance()":"5aa6e675","handleWithdrawals()":"ef34253c","initialize(address,address,address,address,address)":"1459457a","pricePerShare()":"99530b06","revokeFunds()":"2d606843","revokeStrategy(uint16,address)":"cfbcc644","token()":"fc0c546a","totalAssets()":"01e1d114","updateStrategyDebtRatio(uint16,address,uint256)":"0a97c254","withdraw(uint256,address,uint256)":"e63697c8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestCount\",\"type\":\"uint256\"}],\"name\":\"FulfilledWithdrawEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SgReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StrategyWithdrawnSome\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sgBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sgRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"updateStrategyDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@yearn-protocol/=lib/yearn-vaults/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n    uint256 lastReport;\\n    uint256 performanceFee;\\n    address strategist;\\n}\\n\\nstruct WithdrawRequest {\\n    address author;\\n    address user;\\n    uint256 shares;\\n    uint256 maxLoss;\\n    uint256 expected;\\n    bool success;\\n}\\n\\nstruct WithdrawEpoch {\\n    WithdrawRequest[] requests;\\n    bool inProgress;\\n    uint256 approveExpected;\\n    uint256 approveActual;\\n    mapping(uint16 => mapping(address => bool)) approved;\\n    mapping(uint16 => mapping(address => uint256)) requestedAmount;\\n}\\n\\ninterface IVault {\\n    error InsufficientFunds(uint256 amount, uint256 balance);\\n\\n    event SgReceived(address indexed token, uint256 amount, address sender);\\n    event StrategyWithdrawnSome(\\n        uint16 indexed chainId,\\n        address indexed strategy,\\n        uint256 amount,\\n        uint256 loss,\\n        uint256 id\\n    );\\n    event FulfilledWithdrawEpoch(uint256 epochId, uint256 requestCount);\\n    event StrategyReported(\\n        uint16 chainId,\\n        address strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPaid,\\n        uint256 totalGain,\\n        uint256 totalLoss,\\n        uint256 totalDebt,\\n        uint256 debtAdded,\\n        uint256 debtRatio,\\n        uint256 tokens\\n    );\\n\\n    function initialize(\\n        address _governance,\\n        address _lzEndpoint,\\n        IERC20 _token,\\n        address _sgBridge,\\n        address _sgRouter\\n    ) external;\\n\\n    function token() external view returns (IERC20);\\n\\n    function revokeFunds() external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _recipient\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 _maxShares,\\n        address _recipient,\\n        uint256 _maxLoss\\n    ) external;\\n\\n    function addStrategy(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio,\\n        uint256 _performanceFee,\\n        address _strategist\\n    ) external;\\n\\n    function handleWithdrawals() external;\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function revokeStrategy(uint16 _chainId, address _strategy) external;\\n\\n    function updateStrategyDebtRatio(\\n        uint16 _chainId,\\n        address _strategy,\\n        uint256 _debtRatio\\n    ) external;\\n\\n    function governance() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbe261f193857eec80f60ffe8e2332f3b5bd29569741828561fa98fa45454be8d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}