/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  VaultMock,
  VaultMockInterface,
} from "../../../contracts/mock/VaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346200035257601f90601f196001600160401b0362000da138819003858101841685018381118682101762000256578592829160405283396020948591810103126200035257516001600160a01b038116949085900362000352576200006662000357565b6009815268135bd8dad5985d5b1d60ba1b858201526200008562000357565b91600283526126ab60f11b86840152815192848411620002565760039384546001948582811c9216801562000347575b8a83101462000331578185849311620002db575b50899085831160011462000278576000926200026c575b505060001982871b1c191690841b1784555b8051948511620002565760049687548481811c911680156200024b575b828210146200023657838111620001eb575b50809286116001146200017f57508495509084929160009562000173575b50501b92600019911b1c19161790555b600580546001600160a01b031916919091179055604051610a299081620003788239f35b0151935038806200013f565b939295859081168860005285600020956000905b89838310620001d05750505010620001b5575b50505050811b0190556200014f565b01519060f884600019921b161c1916905538808080620001a6565b85870151895590970196948501948893509081019062000193565b88600052816000208480890160051c820192848a106200022c575b0160051c019085905b8281106200021f57505062000121565b600081550185906200020f565b9250819262000206565b602289634e487b7160e01b6000525260246000fd5b90607f16906200010f565b634e487b7160e01b600052604160045260246000fd5b015190503880620000e0565b908987941691886000528b6000209260005b8d828210620002c45750508411620002ab575b505050811b018455620000f2565b015160001983891b60f8161c191690553880806200029d565b8385015186558a979095019493840193016200028a565b90915086600052896000208580850160051c8201928c861062000327575b918891869594930160051c01915b82811062000317575050620000c9565b6000815585945088910162000307565b92508192620002f9565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000b5565b600080fd5b60408051919082016001600160401b03811183821017620002565760405256fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146105c857508163095ea7b31461059e57816318160ddd1461057f57816323b872dd146104b5578163313ce5671461049957816339509351146104495781636e553f651461031e57816370a08231146102e757816395d89b41146101ff578163a457c2d71461015757508063a9059cbb14610127578063dd62ed3e146100df5763fc0c546a146100b457600080fd5b346100db57816003193601126100db5760055490516001600160a01b039091168152602090f35b5080fd5b50346100db57806003193601126100db57806020926100fc6106e8565b610104610703565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b50346100db57806003193601126100db576020906101506101466106e8565b6024359033610877565b5160018152f35b905082346101fc57826003193601126101fc576101726106e8565b918360243592338152600160205281812060018060a01b03861682526020522054908282106101ab576020856101508585038733610775565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100db57816003193601126100db5780519180938054916001908360011c92600185169485156102dd575b60209586861081146102ca578589529081156102a6575060011461026b575b610267878761025d828c0383610719565b519182918261069f565b0390f35b9080949750528583205b82841061029357505050826102679461025d9282010194868061024c565b8054868501880152928601928101610275565b60ff19168887015250505050151560051b830101925061025d82610267868061024c565b634e487b7160e01b845260228352602484fd5b93607f169361022d565b5050346100db5760203660031901126100db5760209181906001600160a01b0361030f6106e8565b16815280845220549051908152f35b8383346100db57806003193601126100db576001600160a01b0392803584610344610703565b169081156104065761035881600254610752565b60025581855260646020968793878552868820848154019055876000805160206109d4833981519152868951878152a3600554169386865195869485936323b872dd60e01b8552339085015230602485015260448401525af180156103fa576103c3575b5051908152f35b8381813d83116103f3575b6103d88183610719565b810103126103ef5751801515036100db57836103bc565b8280fd5b503d6103ce565b505051903d90823e3d90fd5b835162461bcd60e51b8152602081850152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b5050346100db57806003193601126100db5761015060209261049261046c6106e8565b338352600186528483206001600160a01b03821684528652918490205460243590610752565b9033610775565b5050346100db57816003193601126100db576020905160128152f35b839150346100db5760603660031901126100db576104d16106e8565b6104d9610703565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610513575b602086610150878787610877565b84821061053c57509183916105316020969561015095033383610775565b919394819350610505565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100db57816003193601126100db576020906002549051908152f35b5050346100db57806003193601126100db576020906101506105be6106e8565b6024359033610775565b9291503461069b578360031936011261069b57600354600181811c9186908281168015610691575b602095868610821461067e575084885290811561065c5750600114610621575b610267868661025d828b0383610719565b929550600383528583205b82841061064957505050826102679461025d928201019438610610565b805486850188015292860192810161062c565b60ff191687860152505050151560051b830101925061025d8261026738610610565b634e487b7160e01b845260229052602483fd5b93607f16936105f0565b8380fd5b6020808252825181830181905290939260005b8281106106d457505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016106b2565b600435906001600160a01b03821682036106fe57565b600080fd5b602435906001600160a01b03821682036106fe57565b601f909101601f19168101906001600160401b0382119082101761073c57604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161075f57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561082657169182156107d65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6001600160a01b03908116918215610980571691821561092f576000828152806020526040812054918083106108db57604082826000805160206109d4833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220125e408b3af425d3d9c4aa1444b81c27968896ce0eaa7b09cf1a4b4551e4fe5864736f6c63430008180033";

type VaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultMock__factory extends ContractFactory {
  constructor(...args: VaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override deploy(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_token, overrides || {}) as Promise<
      VaultMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VaultMock__factory {
    return super.connect(runner) as VaultMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultMockInterface {
    return new Interface(_abi) as VaultMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): VaultMock {
    return new Contract(address, _abi, runner) as unknown as VaultMock;
  }
}
