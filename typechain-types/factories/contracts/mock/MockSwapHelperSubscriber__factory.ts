/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockSwapHelperSubscriber,
  MockSwapHelperSubscriberInterface,
} from "../../../contracts/mock/MockSwapHelperSubscriber";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "Notified",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "notify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760c6908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63b91dc4bb14602857600080fd5b34608c576080366003190112608c576001600160a01b036004358181169081900360885760243591821680920360885760643583527f9b2db766e04dc7ee1cc19d1415531ad5b3fd566db4f745d9a8ad51e3d3fe1bd7602060443594a480f35b8380fd5b5080fdfea26469706673582212209ec927c32ad8e062468844257b64bbdfd203504648096f0e137b18489f3122f664736f6c63430008180033";

type MockSwapHelperSubscriberConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSwapHelperSubscriberConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSwapHelperSubscriber__factory extends ContractFactory {
  constructor(...args: MockSwapHelperSubscriberConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockSwapHelperSubscriber & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockSwapHelperSubscriber__factory {
    return super.connect(runner) as MockSwapHelperSubscriber__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSwapHelperSubscriberInterface {
    return new Interface(_abi) as MockSwapHelperSubscriberInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockSwapHelperSubscriber {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockSwapHelperSubscriber;
  }
}
