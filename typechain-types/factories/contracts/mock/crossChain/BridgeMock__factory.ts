/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  BridgeMock,
  BridgeMockInterface,
} from "../../../../contracts/mock/crossChain/BridgeMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_destinationAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "bridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastBridge",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "bool",
        name: "a",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "v",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761030d908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081636e81221c14610223575080637b711e56146100625763b5da237a1461004357600080fd5b3461005e578160031936011261005e57602091549051908152f35b5080fd5b503461005e5760c036600319011261005e5761007c61026d565b9060443561ffff81160361021f57610092610288565b6001600160a01b0392608435848116036102175760a4356001600160401b0380821161021b573660238301121561021b57816004013590811161021b5736910160240111610217578316928251916370a0823160e01b8352306004840152856020958685602481845afa94851561020d5790829188959493966101d7575b5090604492918751968795869463a9059cbb60e01b865216600485015260248401525af19081156101cd578491610193575b50156101515782602435815580f35b60649250519062461bcd60e51b825280600483015260248201527f4272696467654d6f636b2066756e6473207472616e73666572206661696c65646044820152fd5b90508281813d83116101c6575b6101aa818361029e565b810103126101c2575180151581036101c25738610142565b8380fd5b503d6101a0565b82513d86823e3d90fd5b85819493969297503d8311610206575b6101f1818361029e565b810103126101c2579051938693906044610110565b503d6101e7565b86513d84823e3d90fd5b8480fd5b8680fd5b8280fd5b9050823461026a57608036600319011261026a5761023f61026d565b506024356001600160a01b0381160361026a575061025b610288565b50600181526044356020820152f35b80fd5b600435906001600160a01b038216820361028357565b600080fd5b606435906001600160a01b038216820361028357565b601f909101601f19168101906001600160401b038211908210176102c157604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220185951ac60420b9ac4739a050e8c15d2446bd84e77819da5dd996478fae988a964736f6c63430008180033";

type BridgeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeMock__factory extends ContractFactory {
  constructor(...args: BridgeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BridgeMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BridgeMock__factory {
    return super.connect(runner) as BridgeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeMockInterface {
    return new Interface(_abi) as BridgeMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BridgeMock {
    return new Contract(address, _abi, runner) as unknown as BridgeMock;
  }
}
