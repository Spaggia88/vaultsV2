/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type WithdrawRequestStruct = {
  author: AddressLike;
  user: AddressLike;
  shares: BigNumberish;
  maxLoss: BigNumberish;
  expected: BigNumberish;
  success: boolean;
  timestamp: BigNumberish;
};

export type WithdrawRequestStructOutput = [
  author: string,
  user: string,
  shares: bigint,
  maxLoss: bigint,
  expected: bigint,
  success: boolean,
  timestamp: bigint
] & {
  author: string;
  user: string;
  shares: bigint;
  maxLoss: bigint;
  expected: bigint;
  success: boolean;
  timestamp: bigint;
};

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_PAYLOAD_SIZE_LIMIT"
      | "GOVERNANCE"
      | "MAX_BPS"
      | "addStrategy"
      | "creditAvailable"
      | "debtOutstanding"
      | "debtOutstandingForReport"
      | "deposit"
      | "emergencyShutdown"
      | "failedMessages"
      | "forceResumeReceive"
      | "gasForLzSend"
      | "getChainIdsSet"
      | "getConfig"
      | "getRequestsWithinEpoch"
      | "getRoleAdmin"
      | "getStrategiesSetByChainId"
      | "getTrustedRemoteAddress"
      | "grantRole"
      | "handleWithdrawals"
      | "hasRole"
      | "initialize"
      | "isTrustedRemote"
      | "lzEndpoint"
      | "lzReceive"
      | "migrateStrategy"
      | "minDstGasLookup"
      | "mixChainIds"
      | "mixStrategiesByChainIds"
      | "nonblockingLzReceive"
      | "owner"
      | "payloadSizeLimitLookup"
      | "precrime"
      | "pricePerShare"
      | "proxiableUUID"
      | "renounceOwnership"
      | "renounceRole"
      | "retryMessage"
      | "revokeFunds"
      | "revokeRole"
      | "setConfig"
      | "setMinDstGas"
      | "setPayloadSizeLimit"
      | "setPrecrime"
      | "setReceiveVersion"
      | "setSendVersion"
      | "setSgLzSettings"
      | "setStrategist"
      | "setTrustedRemote"
      | "setTrustedRemoteAddress"
      | "setVaultToken"
      | "sgBridge"
      | "sgReceive"
      | "sgRouter"
      | "strategies"
      | "supportsInterface"
      | "totalAssets"
      | "totalDebt"
      | "totalDebtRatio"
      | "totalIdle"
      | "transferOwnership"
      | "trustedRemoteLookup"
      | "updateStrategyDebtRatio"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vaultToken"
      | "wantToken"
      | "withdraw"
      | "withdrawEpoch"
      | "withdrawEpochs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Deposit"
      | "FulfilledWithdrawEpoch"
      | "Initialized"
      | "MessageFailed"
      | "OwnershipTransferred"
      | "RetryMessageSuccess"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetMinDstGas"
      | "SetPrecrime"
      | "SetTrustedRemote"
      | "SetTrustedRemoteAddress"
      | "SgReceived"
      | "StrategyReported"
      | "StrategyWithdrawnSome"
      | "Upgraded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_PAYLOAD_SIZE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAvailable",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debtOutstanding",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debtOutstandingForReport",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gasForLzSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainIdsSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsWithinEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategiesSetByChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemoteAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateStrategy",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDstGasLookup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mixChainIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mixStrategiesByChainIds",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonblockingLzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payloadSizeLimitLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDstGas",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayloadSizeLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrecrime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSgLzSettings",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sgBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sgReceive",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "sgRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDebtRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalIdle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedRemoteLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyDebtRatio",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wantToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEpochs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_PAYLOAD_SIZE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOVERNANCE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstandingForReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForLzSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainIdsSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsWithinEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategiesSetByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDstGasLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mixChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mixStrategiesByChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonblockingLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payloadSizeLimitLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinDstGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayloadSizeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrecrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSgLzSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sgBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sgReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sgRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalIdle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedRemoteLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wantToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEpochs",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    wantTokenAmount: BigNumberish,
    recipient: AddressLike,
    sharesIssued: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    wantTokenAmount: bigint,
    recipient: string,
    sharesIssued: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    wantTokenAmount: bigint;
    recipient: string;
    sharesIssued: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfilledWithdrawEpochEvent {
  export type InputTuple = [epochId: BigNumberish, requestCount: BigNumberish];
  export type OutputTuple = [epochId: bigint, requestCount: bigint];
  export interface OutputObject {
    epochId: bigint;
    requestCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageFailedEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _payload: BytesLike,
    _reason: BytesLike
  ];
  export type OutputTuple = [
    _srcChainId: bigint,
    _srcAddress: string,
    _nonce: bigint,
    _payload: string,
    _reason: string
  ];
  export interface OutputObject {
    _srcChainId: bigint;
    _srcAddress: string;
    _nonce: bigint;
    _payload: string;
    _reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RetryMessageSuccessEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _payloadHash: BytesLike
  ];
  export type OutputTuple = [
    _srcChainId: bigint,
    _srcAddress: string,
    _nonce: bigint,
    _payloadHash: string
  ];
  export interface OutputObject {
    _srcChainId: bigint;
    _srcAddress: string;
    _nonce: bigint;
    _payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinDstGasEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _type: BigNumberish,
    _minDstGas: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _type: bigint,
    _minDstGas: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _type: bigint;
    _minDstGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPrecrimeEvent {
  export type InputTuple = [precrime: AddressLike];
  export type OutputTuple = [precrime: string];
  export interface OutputObject {
    precrime: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteEvent {
  export type InputTuple = [_remoteChainId: BigNumberish, _path: BytesLike];
  export type OutputTuple = [_remoteChainId: bigint, _path: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _path: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteAddressEvent {
  export type InputTuple = [
    _remoteChainId: BigNumberish,
    _remoteAddress: BytesLike
  ];
  export type OutputTuple = [_remoteChainId: bigint, _remoteAddress: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SgReceivedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, sender: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyReportedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    strategy: AddressLike,
    gain: BigNumberish,
    loss: BigNumberish,
    debtPaid: BigNumberish,
    totalGain: BigNumberish,
    totalLoss: BigNumberish,
    totalDebt: BigNumberish,
    debtAdded: BigNumberish,
    debtRatio: BigNumberish,
    tokens: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    strategy: string,
    gain: bigint,
    loss: bigint,
    debtPaid: bigint,
    totalGain: bigint,
    totalLoss: bigint,
    totalDebt: bigint,
    debtAdded: bigint,
    debtRatio: bigint,
    tokens: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    strategy: string;
    gain: bigint;
    loss: bigint;
    debtPaid: bigint;
    totalGain: bigint;
    totalLoss: bigint;
    totalDebt: bigint;
    debtAdded: bigint;
    debtRatio: bigint;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyWithdrawnSomeEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    strategy: AddressLike,
    amount: BigNumberish,
    loss: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    strategy: string,
    amount: bigint,
    loss: bigint,
    id: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    strategy: string;
    amount: bigint;
    loss: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    from: AddressLike,
    wantTokenAmount: BigNumberish,
    recipient: AddressLike,
    sharesIssued: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    wantTokenAmount: bigint,
    recipient: string,
    sharesIssued: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    wantTokenAmount: bigint;
    recipient: string;
    sharesIssued: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_PAYLOAD_SIZE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  GOVERNANCE: TypedContractMethod<[], [string], "view">;

  MAX_BPS: TypedContractMethod<[], [bigint], "view">;

  addStrategy: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _debtRatio: BigNumberish,
      _performanceFee: BigNumberish,
      _strategist: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  creditAvailable: TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike],
    [bigint],
    "view"
  >;

  debtOutstanding: TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike],
    [bigint],
    "view"
  >;

  debtOutstandingForReport: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _receivedTokens: BigNumberish
    ],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  emergencyShutdown: TypedContractMethod<[], [boolean], "view">;

  failedMessages: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  forceResumeReceive: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  gasForLzSend: TypedContractMethod<[], [bigint], "view">;

  getChainIdsSet: TypedContractMethod<[], [bigint[]], "view">;

  getConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      arg2: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;

  getRequestsWithinEpoch: TypedContractMethod<
    [epoch: BigNumberish],
    [WithdrawRequestStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStrategiesSetByChainId: TypedContractMethod<
    [chainId: BigNumberish],
    [string[]],
    "view"
  >;

  getTrustedRemoteAddress: TypedContractMethod<
    [_remoteChainId: BigNumberish],
    [string],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  handleWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      gouvernance: AddressLike,
      mainAdmin: AddressLike,
      _lzEndpoint: AddressLike,
      _wantToken: AddressLike,
      _sgRouter: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  migrateStrategy: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _oldStrategy: AddressLike,
      _newStrategy: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  minDstGasLookup: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  mixChainIds: TypedContractMethod<
    [values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  mixStrategiesByChainIds: TypedContractMethod<
    [chainId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  nonblockingLzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payloadSizeLimitLookup: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  precrime: TypedContractMethod<[], [string], "view">;

  pricePerShare: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  retryMessage: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;

  revokeFunds: TypedContractMethod<[], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setMinDstGas: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _packetType: BigNumberish,
      _minGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPayloadSizeLimit: TypedContractMethod<
    [_dstChainId: BigNumberish, _size: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrecrime: TypedContractMethod<
    [_precrime: AddressLike],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSgLzSettings: TypedContractMethod<
    [_newSgRouter: AddressLike, _newSgBridge: AddressLike, _gas: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStrategist: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _newStrategist: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _path: BytesLike],
    [void],
    "nonpayable"
  >;

  setTrustedRemoteAddress: TypedContractMethod<
    [_remoteChainId: BigNumberish, _remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  setVaultToken: TypedContractMethod<
    [_newToken: AddressLike],
    [void],
    "nonpayable"
  >;

  sgBridge: TypedContractMethod<[], [string], "view">;

  sgReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      arg2: BigNumberish,
      _token: AddressLike,
      _amountLD: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sgRouter: TypedContractMethod<[], [string], "view">;

  strategies: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        activation: bigint;
        debtRatio: bigint;
        totalDebt: bigint;
        totalGain: bigint;
        totalLoss: bigint;
        lastReport: bigint;
        performanceFee: bigint;
        strategist: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalDebt: TypedContractMethod<[], [bigint], "view">;

  totalDebtRatio: TypedContractMethod<[], [bigint], "view">;

  totalIdle: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedRemoteLookup: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  updateStrategyDebtRatio: TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike, _debtRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vaultToken: TypedContractMethod<[], [string], "view">;

  wantToken: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_maxShares: BigNumberish, _recipient: AddressLike, _maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawEpoch: TypedContractMethod<[], [bigint], "view">;

  withdrawEpochs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        inProgress: boolean;
        approveExpected: bigint;
        approveActual: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_PAYLOAD_SIZE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOVERNANCE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _debtRatio: BigNumberish,
      _performanceFee: BigNumberish,
      _strategist: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditAvailable"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "debtOutstanding"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "debtOutstandingForReport"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _receivedTokens: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyShutdown"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "failedMessages"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasForLzSend"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChainIdsSet"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      arg2: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestsWithinEpoch"
  ): TypedContractMethod<
    [epoch: BigNumberish],
    [WithdrawRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategiesSetByChainId"
  ): TypedContractMethod<[chainId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTrustedRemoteAddress"
  ): TypedContractMethod<[_remoteChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      gouvernance: AddressLike,
      mainAdmin: AddressLike,
      _lzEndpoint: AddressLike,
      _wantToken: AddressLike,
      _sgRouter: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrateStrategy"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _oldStrategy: AddressLike,
      _newStrategy: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minDstGasLookup"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mixChainIds"
  ): TypedContractMethod<[values: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mixStrategiesByChainIds"
  ): TypedContractMethod<
    [chainId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonblockingLzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payloadSizeLimitLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "precrime"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricePerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retryMessage"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revokeFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDstGas"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _packetType: BigNumberish,
      _minGas: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPayloadSizeLimit"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _size: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrecrime"
  ): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSgLzSettings"
  ): TypedContractMethod<
    [_newSgRouter: AddressLike, _newSgBridge: AddressLike, _gas: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategist"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _strategy: AddressLike,
      _newStrategist: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _path: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedRemoteAddress"
  ): TypedContractMethod<
    [_remoteChainId: BigNumberish, _remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultToken"
  ): TypedContractMethod<[_newToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sgBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sgReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      arg2: BigNumberish,
      _token: AddressLike,
      _amountLD: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sgRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        activation: bigint;
        debtRatio: bigint;
        totalDebt: bigint;
        totalGain: bigint;
        totalLoss: bigint;
        lastReport: bigint;
        performanceFee: bigint;
        strategist: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDebtRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalIdle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedRemoteLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateStrategyDebtRatio"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _strategy: AddressLike, _debtRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vaultToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wantToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_maxShares: BigNumberish, _recipient: AddressLike, _maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawEpochs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        inProgress: boolean;
        approveExpected: bigint;
        approveActual: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FulfilledWithdrawEpoch"
  ): TypedContractEvent<
    FulfilledWithdrawEpochEvent.InputTuple,
    FulfilledWithdrawEpochEvent.OutputTuple,
    FulfilledWithdrawEpochEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MessageFailed"
  ): TypedContractEvent<
    MessageFailedEvent.InputTuple,
    MessageFailedEvent.OutputTuple,
    MessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RetryMessageSuccess"
  ): TypedContractEvent<
    RetryMessageSuccessEvent.InputTuple,
    RetryMessageSuccessEvent.OutputTuple,
    RetryMessageSuccessEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetMinDstGas"
  ): TypedContractEvent<
    SetMinDstGasEvent.InputTuple,
    SetMinDstGasEvent.OutputTuple,
    SetMinDstGasEvent.OutputObject
  >;
  getEvent(
    key: "SetPrecrime"
  ): TypedContractEvent<
    SetPrecrimeEvent.InputTuple,
    SetPrecrimeEvent.OutputTuple,
    SetPrecrimeEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemote"
  ): TypedContractEvent<
    SetTrustedRemoteEvent.InputTuple,
    SetTrustedRemoteEvent.OutputTuple,
    SetTrustedRemoteEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemoteAddress"
  ): TypedContractEvent<
    SetTrustedRemoteAddressEvent.InputTuple,
    SetTrustedRemoteAddressEvent.OutputTuple,
    SetTrustedRemoteAddressEvent.OutputObject
  >;
  getEvent(
    key: "SgReceived"
  ): TypedContractEvent<
    SgReceivedEvent.InputTuple,
    SgReceivedEvent.OutputTuple,
    SgReceivedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyReported"
  ): TypedContractEvent<
    StrategyReportedEvent.InputTuple,
    StrategyReportedEvent.OutputTuple,
    StrategyReportedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyWithdrawnSome"
  ): TypedContractEvent<
    StrategyWithdrawnSomeEvent.InputTuple,
    StrategyWithdrawnSomeEvent.OutputTuple,
    StrategyWithdrawnSomeEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Deposit(address,uint256,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FulfilledWithdrawEpoch(uint256,uint256)": TypedContractEvent<
      FulfilledWithdrawEpochEvent.InputTuple,
      FulfilledWithdrawEpochEvent.OutputTuple,
      FulfilledWithdrawEpochEvent.OutputObject
    >;
    FulfilledWithdrawEpoch: TypedContractEvent<
      FulfilledWithdrawEpochEvent.InputTuple,
      FulfilledWithdrawEpochEvent.OutputTuple,
      FulfilledWithdrawEpochEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MessageFailed(uint16,bytes,uint64,bytes,bytes)": TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;
    MessageFailed: TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RetryMessageSuccess(uint16,bytes,uint64,bytes32)": TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;
    RetryMessageSuccess: TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetMinDstGas(uint16,uint16,uint256)": TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;
    SetMinDstGas: TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;

    "SetPrecrime(address)": TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;
    SetPrecrime: TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;

    "SetTrustedRemote(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;
    SetTrustedRemote: TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;

    "SetTrustedRemoteAddress(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;
    SetTrustedRemoteAddress: TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;

    "SgReceived(address,uint256,address)": TypedContractEvent<
      SgReceivedEvent.InputTuple,
      SgReceivedEvent.OutputTuple,
      SgReceivedEvent.OutputObject
    >;
    SgReceived: TypedContractEvent<
      SgReceivedEvent.InputTuple,
      SgReceivedEvent.OutputTuple,
      SgReceivedEvent.OutputObject
    >;

    "StrategyReported(uint16,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;
    StrategyReported: TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;

    "StrategyWithdrawnSome(uint16,address,uint256,uint256,uint256)": TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;
    StrategyWithdrawnSome: TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdraw(address,uint256,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
