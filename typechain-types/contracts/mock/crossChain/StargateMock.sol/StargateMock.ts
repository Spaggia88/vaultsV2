/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface StargateMockInterface extends Interface {
  getFunction(nameOrSignature: "bridge"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ExternalCallSuccess"): EventFragment;

  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
}

export namespace ExternalCallSuccessEvent {
  export type InputTuple = [
    receiver: AddressLike,
    chainId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    chainId: bigint,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    receiver: string;
    chainId: bigint;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StargateMock extends BaseContract {
  connect(runner?: ContractRunner | null): StargateMock;
  waitForDeployment(): Promise<this>;

  interface: StargateMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      destinationAddress: AddressLike,
      destinationToken: AddressLike,
      receiverPayload: BytesLike
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      destinationAddress: AddressLike,
      destinationToken: AddressLike,
      receiverPayload: BytesLike
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "ExternalCallSuccess"
  ): TypedContractEvent<
    ExternalCallSuccessEvent.InputTuple,
    ExternalCallSuccessEvent.OutputTuple,
    ExternalCallSuccessEvent.OutputObject
  >;

  filters: {
    "ExternalCallSuccess(address,uint16,address,uint256)": TypedContractEvent<
      ExternalCallSuccessEvent.InputTuple,
      ExternalCallSuccessEvent.OutputTuple,
      ExternalCallSuccessEvent.OutputObject
    >;
    ExternalCallSuccess: TypedContractEvent<
      ExternalCallSuccessEvent.InputTuple,
      ExternalCallSuccessEvent.OutputTuple,
      ExternalCallSuccessEvent.OutputObject
    >;
  };
}
