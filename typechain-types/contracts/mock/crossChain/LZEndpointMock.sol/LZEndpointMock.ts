/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LZEndpointMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_send"
      | "bytesToAddress"
      | "estimateFees"
      | "receivePayload"
      | "send"
      | "srcChainId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_send",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [BigNumberish, AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePayload",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "srcChainId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytesToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "srcChainId", data: BytesLike): Result;
}

export interface LZEndpointMock extends BaseContract {
  connect(runner?: ContractRunner | null): LZEndpointMock;
  waitForDeployment(): Promise<this>;

  interface: LZEndpointMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _send: TypedContractMethod<
    [
      arg0: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: AddressLike,
      arg4: AddressLike,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  bytesToAddress: TypedContractMethod<[_bys: BytesLike], [string], "view">;

  estimateFees: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: AddressLike,
      _payload: BytesLike,
      _bool: boolean,
      _nonce: BytesLike
    ],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;

  receivePayload: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: AddressLike,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [
      _sourceChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: AddressLike,
      arg4: AddressLike,
      arg5: BytesLike
    ],
    [void],
    "payable"
  >;

  srcChainId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_send"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: AddressLike,
      arg4: AddressLike,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bytesToAddress"
  ): TypedContractMethod<[_bys: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "estimateFees"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: AddressLike,
      _payload: BytesLike,
      _bool: boolean,
      _nonce: BytesLike
    ],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "receivePayload"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: AddressLike,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _sourceChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: AddressLike,
      arg4: AddressLike,
      arg5: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "srcChainId"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
