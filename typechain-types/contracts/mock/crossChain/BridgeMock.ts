/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BridgeMockInterface extends Interface {
  getFunction(
    nameOrSignature: "bridge" | "lastBridge" | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export interface BridgeMock extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeMock;
  waitForDeployment(): Promise<this>;

  interface: BridgeMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      arg2: BigNumberish,
      _destinationAddress: AddressLike,
      arg4: AddressLike,
      arg5: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  lastBridge: TypedContractMethod<[], [bigint], "view">;

  swap: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      _amountA: BigNumberish,
      arg3: AddressLike
    ],
    [[boolean, bigint] & { a: boolean; v: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      arg2: BigNumberish,
      _destinationAddress: AddressLike,
      arg4: AddressLike,
      arg5: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastBridge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      _amountA: BigNumberish,
      arg3: AddressLike
    ],
    [[boolean, bigint] & { a: boolean; v: bigint }],
    "view"
  >;

  filters: {};
}
