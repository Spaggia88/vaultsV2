/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPlainPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add_liquidity(uint256[2],uint256)"
      | "add_liquidity(uint256[],uint256)"
      | "calc_token_amount(uint256[],bool)"
      | "calc_token_amount(uint256[2],bool)"
      | "calc_withdraw_one_coin"
      | "lp_token"
      | "remove_liquidity"
      | "remove_liquidity_one_coin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[],uint256)",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount(uint256[],bool)",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount(uint256[2],bool)",
    values: [[BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount(uint256[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount(uint256[2],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike
  ): Result;
}

export interface IPlainPool extends BaseContract {
  connect(runner?: ContractRunner | null): IPlainPool;
  waitForDeployment(): Promise<this>;

  interface: IPlainPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "add_liquidity(uint256[2],uint256)": TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _min_mint_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "add_liquidity(uint256[],uint256)": TypedContractMethod<
    [_amounts: BigNumberish[], _min_mint_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "calc_token_amount(uint256[],bool)": TypedContractMethod<
    [_amounts: BigNumberish[], is_deposit: boolean],
    [bigint],
    "view"
  >;

  "calc_token_amount(uint256[2],bool)": TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], is_deposit: boolean],
    [bigint],
    "view"
  >;

  calc_withdraw_one_coin: TypedContractMethod<
    [_token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;

  lp_token: TypedContractMethod<[], [string], "view">;

  remove_liquidity: TypedContractMethod<
    [_amount: BigNumberish, _min_amounts: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;

  remove_liquidity_one_coin: TypedContractMethod<
    [
      _amount: BigNumberish,
      i: BigNumberish,
      _min_underlying_amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256)"
  ): TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _min_mint_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[],uint256)"
  ): TypedContractMethod<
    [_amounts: BigNumberish[], _min_mint_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calc_token_amount(uint256[],bool)"
  ): TypedContractMethod<
    [_amounts: BigNumberish[], is_deposit: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calc_token_amount(uint256[2],bool)"
  ): TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], is_deposit: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calc_withdraw_one_coin"
  ): TypedContractMethod<
    [_token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lp_token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remove_liquidity"
  ): TypedContractMethod<
    [_amount: BigNumberish, _min_amounts: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      i: BigNumberish,
      _min_underlying_amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
