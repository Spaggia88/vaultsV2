/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPikaPerpV4 {
  export type StakeStruct = {
    owner: AddressLike;
    amount: BigNumberish;
    shares: BigNumberish;
    timestamp: BigNumberish;
  };

  export type StakeStructOutput = [
    owner: string,
    amount: bigint,
    shares: bigint,
    timestamp: bigint
  ] & { owner: string; amount: bigint; shares: bigint; timestamp: bigint };
}

export interface IPikaPerpV4Interface extends Interface {
  getFunction(
    nameOrSignature: "getStake" | "redeem" | "stake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
}

export interface IPikaPerpV4 extends BaseContract {
  connect(runner?: ContractRunner | null): IPikaPerpV4;
  waitForDeployment(): Promise<this>;

  interface: IPikaPerpV4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStake: TypedContractMethod<
    [stakeOwner: AddressLike],
    [IPikaPerpV4.StakeStructOutput],
    "view"
  >;

  redeem: TypedContractMethod<
    [user: AddressLike, shares: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStake"
  ): TypedContractMethod<
    [stakeOwner: AddressLike],
    [IPikaPerpV4.StakeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [user: AddressLike, shares: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
