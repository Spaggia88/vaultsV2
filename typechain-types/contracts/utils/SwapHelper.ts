/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SwapHelper {
  export type SwapInfoStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    inAmount: BigNumberish;
  };

  export type SwapInfoStructOutput = [
    srcToken: string,
    dstToken: string,
    inAmount: bigint
  ] & { srcToken: string; dstToken: string; inAmount: bigint };

  export type QuoteInfoStruct = {
    swapInfo: SwapHelper.SwapInfoStruct;
    outAmount: BigNumberish;
  };

  export type QuoteInfoStructOutput = [
    swapInfo: SwapHelper.SwapInfoStructOutput,
    outAmount: bigint
  ] & { swapInfo: SwapHelper.SwapInfoStructOutput; outAmount: bigint };

  export type JobInfoStruct = { jobId: BytesLike; jobFeeInJuels: BigNumberish };

  export type JobInfoStructOutput = [jobId: string, jobFeeInJuels: bigint] & {
    jobId: string;
    jobFeeInJuels: bigint;
  };
}

export interface SwapHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ONE_INCH_ETH_ADDRESS"
      | "QUOTE_AUTHORIZED_ROLE"
      | "STRATEGIST_ROLE"
      | "SWAP_AUTHORIZED_ROLE"
      | "addSubscriber"
      | "aggregationRouter"
      | "fulfillQuote"
      | "fulfillSwap"
      | "getFeeInHundredthsOfLink"
      | "getOracleAddress"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isReadyToFulfillQuote"
      | "isReadyToFulfillSwap"
      | "jobInfos"
      | "oracleAddress"
      | "quoteBuffer"
      | "registerQuoteRequest"
      | "registerSwapCalldata"
      | "removeSubscriber"
      | "renounceRole"
      | "requestQuote"
      | "requestSwap"
      | "revokeRole"
      | "setFeeInHundredthsOfLink"
      | "setJobInfo"
      | "setOracleAddress"
      | "strategistFulfillQuote"
      | "strategistFulfillSwap"
      | "subscriberAt"
      | "subscribersLength"
      | "supportsInterface"
      | "swapBuffer"
      | "withdrawLink"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainlinkCancelled"
      | "ChainlinkFulfilled"
      | "ChainlinkRequested"
      | "QuoteRegistered"
      | "QuoteSent"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StrategistInterferred"
      | "SwapPerformed"
      | "SwapRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_INCH_ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUOTE_AUTHORIZED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STRATEGIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_AUTHORIZED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSubscriber",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregationRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeInHundredthsOfLink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToFulfillQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToFulfillSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerQuoteRequest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSwapCalldata",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubscriber",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestQuote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSwap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInHundredthsOfLink",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobInfo",
    values: [BigNumberish, SwapHelper.JobInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategistFulfillQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategistFulfillSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriberAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_INCH_ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUOTE_AUTHORIZED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STRATEGIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_AUTHORIZED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregationRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeInHundredthsOfLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToFulfillQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToFulfillSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerQuoteRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSwapCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeInHundredthsOfLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJobInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategistFulfillQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategistFulfillSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriberAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;
}

export namespace ChainlinkCancelledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkRequestedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteRegisteredEvent {
  export type InputTuple = [toAmount: BigNumberish];
  export type OutputTuple = [toAmount: bigint];
  export interface OutputObject {
    toAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteSentEvent {
  export type InputTuple = [_quoteBuffer: SwapHelper.QuoteInfoStruct];
  export type OutputTuple = [_quoteBuffer: SwapHelper.QuoteInfoStructOutput];
  export interface OutputObject {
    _quoteBuffer: SwapHelper.QuoteInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategistInterferredEvent {
  export type InputTuple = [interference: BigNumberish];
  export type OutputTuple = [interference: bigint];
  export interface OutputObject {
    interference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPerformedEvent {
  export type InputTuple = [_swapBuffer: SwapHelper.SwapInfoStruct];
  export type OutputTuple = [_swapBuffer: SwapHelper.SwapInfoStructOutput];
  export interface OutputObject {
    _swapBuffer: SwapHelper.SwapInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRegisteredEvent {
  export type InputTuple = [swapCalldata: BytesLike];
  export type OutputTuple = [swapCalldata: string];
  export interface OutputObject {
    swapCalldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapHelper extends BaseContract {
  connect(runner?: ContractRunner | null): SwapHelper;
  waitForDeployment(): Promise<this>;

  interface: SwapHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ONE_INCH_ETH_ADDRESS: TypedContractMethod<[], [string], "view">;

  QUOTE_AUTHORIZED_ROLE: TypedContractMethod<[], [string], "view">;

  STRATEGIST_ROLE: TypedContractMethod<[], [string], "view">;

  SWAP_AUTHORIZED_ROLE: TypedContractMethod<[], [string], "view">;

  addSubscriber: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  aggregationRouter: TypedContractMethod<[], [string], "view">;

  fulfillQuote: TypedContractMethod<[], [void], "nonpayable">;

  fulfillSwap: TypedContractMethod<[], [void], "nonpayable">;

  getFeeInHundredthsOfLink: TypedContractMethod<
    [_purpose: BigNumberish],
    [bigint],
    "view"
  >;

  getOracleAddress: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isReadyToFulfillQuote: TypedContractMethod<[], [boolean], "view">;

  isReadyToFulfillSwap: TypedContractMethod<[], [boolean], "view">;

  jobInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { jobId: string; jobFeeInJuels: bigint }],
    "view"
  >;

  oracleAddress: TypedContractMethod<[], [string], "view">;

  quoteBuffer: TypedContractMethod<
    [],
    [
      [SwapHelper.SwapInfoStructOutput, bigint] & {
        swapInfo: SwapHelper.SwapInfoStructOutput;
        outAmount: bigint;
      }
    ],
    "view"
  >;

  registerQuoteRequest: TypedContractMethod<
    [requestId: BytesLike, toAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerSwapCalldata: TypedContractMethod<
    [requestId: BytesLike, swapCalldata: BytesLike],
    [void],
    "nonpayable"
  >;

  removeSubscriber: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestQuote: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestSwap: TypedContractMethod<
    [
      src: AddressLike,
      dst: AddressLike,
      amount: BigNumberish,
      slippage: BigNumberish
    ],
    [void],
    "payable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeInHundredthsOfLink: TypedContractMethod<
    [_purpose: BigNumberish, _feeInHundredthsOfLink: BigNumberish],
    [void],
    "nonpayable"
  >;

  setJobInfo: TypedContractMethod<
    [_purpose: BigNumberish, _info: SwapHelper.JobInfoStruct],
    [void],
    "nonpayable"
  >;

  setOracleAddress: TypedContractMethod<
    [_oracleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  strategistFulfillQuote: TypedContractMethod<
    [toAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategistFulfillSwap: TypedContractMethod<
    [_swapCalldata: BytesLike],
    [void],
    "payable"
  >;

  subscriberAt: TypedContractMethod<
    [subscriberIdx: BigNumberish],
    [string],
    "view"
  >;

  subscribersLength: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapBuffer: TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        srcToken: string;
        dstToken: string;
        inAmount: bigint;
      }
    ],
    "view"
  >;

  withdrawLink: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ONE_INCH_ETH_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "QUOTE_AUTHORIZED_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STRATEGIST_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SWAP_AUTHORIZED_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSubscriber"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aggregationRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfillQuote"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfillSwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFeeInHundredthsOfLink"
  ): TypedContractMethod<[_purpose: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOracleAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReadyToFulfillQuote"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReadyToFulfillSwap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "jobInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { jobId: string; jobFeeInJuels: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracleAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteBuffer"
  ): TypedContractMethod<
    [],
    [
      [SwapHelper.SwapInfoStructOutput, bigint] & {
        swapInfo: SwapHelper.SwapInfoStructOutput;
        outAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerQuoteRequest"
  ): TypedContractMethod<
    [requestId: BytesLike, toAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSwapCalldata"
  ): TypedContractMethod<
    [requestId: BytesLike, swapCalldata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSubscriber"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestQuote"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSwap"
  ): TypedContractMethod<
    [
      src: AddressLike,
      dst: AddressLike,
      amount: BigNumberish,
      slippage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeInHundredthsOfLink"
  ): TypedContractMethod<
    [_purpose: BigNumberish, _feeInHundredthsOfLink: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setJobInfo"
  ): TypedContractMethod<
    [_purpose: BigNumberish, _info: SwapHelper.JobInfoStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleAddress"
  ): TypedContractMethod<[_oracleAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strategistFulfillQuote"
  ): TypedContractMethod<[toAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strategistFulfillSwap"
  ): TypedContractMethod<[_swapCalldata: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "subscriberAt"
  ): TypedContractMethod<[subscriberIdx: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "subscribersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapBuffer"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        srcToken: string;
        dstToken: string;
        inAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawLink"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ChainlinkCancelled"
  ): TypedContractEvent<
    ChainlinkCancelledEvent.InputTuple,
    ChainlinkCancelledEvent.OutputTuple,
    ChainlinkCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkFulfilled"
  ): TypedContractEvent<
    ChainlinkFulfilledEvent.InputTuple,
    ChainlinkFulfilledEvent.OutputTuple,
    ChainlinkFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkRequested"
  ): TypedContractEvent<
    ChainlinkRequestedEvent.InputTuple,
    ChainlinkRequestedEvent.OutputTuple,
    ChainlinkRequestedEvent.OutputObject
  >;
  getEvent(
    key: "QuoteRegistered"
  ): TypedContractEvent<
    QuoteRegisteredEvent.InputTuple,
    QuoteRegisteredEvent.OutputTuple,
    QuoteRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "QuoteSent"
  ): TypedContractEvent<
    QuoteSentEvent.InputTuple,
    QuoteSentEvent.OutputTuple,
    QuoteSentEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StrategistInterferred"
  ): TypedContractEvent<
    StrategistInterferredEvent.InputTuple,
    StrategistInterferredEvent.OutputTuple,
    StrategistInterferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapPerformed"
  ): TypedContractEvent<
    SwapPerformedEvent.InputTuple,
    SwapPerformedEvent.OutputTuple,
    SwapPerformedEvent.OutputObject
  >;
  getEvent(
    key: "SwapRegistered"
  ): TypedContractEvent<
    SwapRegisteredEvent.InputTuple,
    SwapRegisteredEvent.OutputTuple,
    SwapRegisteredEvent.OutputObject
  >;

  filters: {
    "ChainlinkCancelled(bytes32)": TypedContractEvent<
      ChainlinkCancelledEvent.InputTuple,
      ChainlinkCancelledEvent.OutputTuple,
      ChainlinkCancelledEvent.OutputObject
    >;
    ChainlinkCancelled: TypedContractEvent<
      ChainlinkCancelledEvent.InputTuple,
      ChainlinkCancelledEvent.OutputTuple,
      ChainlinkCancelledEvent.OutputObject
    >;

    "ChainlinkFulfilled(bytes32)": TypedContractEvent<
      ChainlinkFulfilledEvent.InputTuple,
      ChainlinkFulfilledEvent.OutputTuple,
      ChainlinkFulfilledEvent.OutputObject
    >;
    ChainlinkFulfilled: TypedContractEvent<
      ChainlinkFulfilledEvent.InputTuple,
      ChainlinkFulfilledEvent.OutputTuple,
      ChainlinkFulfilledEvent.OutputObject
    >;

    "ChainlinkRequested(bytes32)": TypedContractEvent<
      ChainlinkRequestedEvent.InputTuple,
      ChainlinkRequestedEvent.OutputTuple,
      ChainlinkRequestedEvent.OutputObject
    >;
    ChainlinkRequested: TypedContractEvent<
      ChainlinkRequestedEvent.InputTuple,
      ChainlinkRequestedEvent.OutputTuple,
      ChainlinkRequestedEvent.OutputObject
    >;

    "QuoteRegistered(uint256)": TypedContractEvent<
      QuoteRegisteredEvent.InputTuple,
      QuoteRegisteredEvent.OutputTuple,
      QuoteRegisteredEvent.OutputObject
    >;
    QuoteRegistered: TypedContractEvent<
      QuoteRegisteredEvent.InputTuple,
      QuoteRegisteredEvent.OutputTuple,
      QuoteRegisteredEvent.OutputObject
    >;

    "QuoteSent(tuple)": TypedContractEvent<
      QuoteSentEvent.InputTuple,
      QuoteSentEvent.OutputTuple,
      QuoteSentEvent.OutputObject
    >;
    QuoteSent: TypedContractEvent<
      QuoteSentEvent.InputTuple,
      QuoteSentEvent.OutputTuple,
      QuoteSentEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StrategistInterferred(uint8)": TypedContractEvent<
      StrategistInterferredEvent.InputTuple,
      StrategistInterferredEvent.OutputTuple,
      StrategistInterferredEvent.OutputObject
    >;
    StrategistInterferred: TypedContractEvent<
      StrategistInterferredEvent.InputTuple,
      StrategistInterferredEvent.OutputTuple,
      StrategistInterferredEvent.OutputObject
    >;

    "SwapPerformed(tuple)": TypedContractEvent<
      SwapPerformedEvent.InputTuple,
      SwapPerformedEvent.OutputTuple,
      SwapPerformedEvent.OutputObject
    >;
    SwapPerformed: TypedContractEvent<
      SwapPerformedEvent.InputTuple,
      SwapPerformedEvent.OutputTuple,
      SwapPerformedEvent.OutputObject
    >;

    "SwapRegistered(bytes)": TypedContractEvent<
      SwapRegisteredEvent.InputTuple,
      SwapRegisteredEvent.OutputTuple,
      SwapRegisteredEvent.OutputObject
    >;
    SwapRegistered: TypedContractEvent<
      SwapRegisteredEvent.InputTuple,
      SwapRegisteredEvent.OutputTuple,
      SwapRegisteredEvent.OutputObject
    >;
  };
}
