/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISgBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridge"
      | "feeForBridge"
      | "initialize"
      | "revokeFunds"
      | "setCurrentChainId"
      | "setDstGasForCall"
      | "setRouter"
      | "setSlippage"
      | "setStargatePoolId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Bridge"): EventFragment;

  encodeFunctionData(
    functionFragment: "bridge",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeForBridge",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDstGasForCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStargatePoolId",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeForBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDstGasForCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStargatePoolId",
    data: BytesLike
  ): Result;
}

export namespace BridgeEvent {
  export type InputTuple = [chainId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [chainId: bigint, amount: bigint];
  export interface OutputObject {
    chainId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISgBridge extends BaseContract {
  connect(runner?: ContractRunner | null): ISgBridge;
  waitForDeployment(): Promise<this>;

  interface: ISgBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridge: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _destChainId: BigNumberish,
      _destinationAddress: AddressLike,
      _message: BytesLike
    ],
    [void],
    "payable"
  >;

  feeForBridge: TypedContractMethod<
    [
      _destChainId: BigNumberish,
      _destinationContract: AddressLike,
      _payload: BytesLike
    ],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_router: AddressLike, _currentChainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeFunds: TypedContractMethod<[], [void], "nonpayable">;

  setCurrentChainId: TypedContractMethod<
    [_currentChainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDstGasForCall: TypedContractMethod<
    [_dstGasForCall: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  setSlippage: TypedContractMethod<
    [_slippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStargatePoolId: TypedContractMethod<
    [_token: AddressLike, _chainId: BigNumberish, _poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _destChainId: BigNumberish,
      _destinationAddress: AddressLike,
      _message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeForBridge"
  ): TypedContractMethod<
    [
      _destChainId: BigNumberish,
      _destinationContract: AddressLike,
      _payload: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_router: AddressLike, _currentChainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrentChainId"
  ): TypedContractMethod<[_currentChainId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDstGasForCall"
  ): TypedContractMethod<[_dstGasForCall: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSlippage"
  ): TypedContractMethod<[_slippage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStargatePoolId"
  ): TypedContractMethod<
    [_token: AddressLike, _chainId: BigNumberish, _poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Bridge"
  ): TypedContractEvent<
    BridgeEvent.InputTuple,
    BridgeEvent.OutputTuple,
    BridgeEvent.OutputObject
  >;

  filters: {
    "Bridge(uint16,uint256)": TypedContractEvent<
      BridgeEvent.InputTuple,
      BridgeEvent.OutputTuple,
      BridgeEvent.OutputObject
    >;
    Bridge: TypedContractEvent<
      BridgeEvent.InputTuple,
      BridgeEvent.OutputTuple,
      BridgeEvent.OutputObject
    >;
  };
}
