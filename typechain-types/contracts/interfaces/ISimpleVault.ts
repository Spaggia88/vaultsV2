/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrategyMessages {
  export type StrategyReportStruct = {
    strategy: AddressLike;
    timestamp: BigNumberish;
    profit: BigNumberish;
    loss: BigNumberish;
    debtPayment: BigNumberish;
    giveToStrategy: BigNumberish;
    requestFromStrategy: BigNumberish;
    creditAvailable: BigNumberish;
    totalAssets: BigNumberish;
    nonce: BigNumberish;
    signature: BytesLike;
  };

  export type StrategyReportStructOutput = [
    strategy: string,
    timestamp: bigint,
    profit: bigint,
    loss: bigint,
    debtPayment: bigint,
    giveToStrategy: bigint,
    requestFromStrategy: bigint,
    creditAvailable: bigint,
    totalAssets: bigint,
    nonce: bigint,
    signature: string
  ] & {
    strategy: string;
    timestamp: bigint;
    profit: bigint;
    loss: bigint;
    debtPayment: bigint;
    giveToStrategy: bigint;
    requestFromStrategy: bigint;
    creditAvailable: bigint;
    totalAssets: bigint;
    nonce: bigint;
    signature: string;
  };
}

export interface ISimpleVaultInterface extends Interface {
  getFunction(nameOrSignature: "onChainReport"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onChainReport",
    values: [BigNumberish, IStrategyMessages.StrategyReportStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "onChainReport",
    data: BytesLike
  ): Result;
}

export interface ISimpleVault extends BaseContract {
  connect(runner?: ContractRunner | null): ISimpleVault;
  waitForDeployment(): Promise<this>;

  interface: ISimpleVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onChainReport: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _message: IStrategyMessages.StrategyReportStruct,
      _receivedTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onChainReport"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _message: IStrategyMessages.StrategyReportStruct,
      _receivedTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
