/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IVaultInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "FulfilledWithdrawEpoch"
      | "SgReceived"
      | "StrategyReported"
      | "StrategyWithdrawnSome"
      | "Withdraw"
  ): EventFragment;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    wantTokenAmount: BigNumberish,
    recipient: AddressLike,
    sharesIssued: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    wantTokenAmount: bigint,
    recipient: string,
    sharesIssued: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    wantTokenAmount: bigint;
    recipient: string;
    sharesIssued: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfilledWithdrawEpochEvent {
  export type InputTuple = [epochId: BigNumberish, requestCount: BigNumberish];
  export type OutputTuple = [epochId: bigint, requestCount: bigint];
  export interface OutputObject {
    epochId: bigint;
    requestCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SgReceivedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, sender: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyReportedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    strategy: AddressLike,
    gain: BigNumberish,
    loss: BigNumberish,
    debtPaid: BigNumberish,
    totalGain: BigNumberish,
    totalLoss: BigNumberish,
    totalDebt: BigNumberish,
    debtAdded: BigNumberish,
    debtRatio: BigNumberish,
    tokens: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    strategy: string,
    gain: bigint,
    loss: bigint,
    debtPaid: bigint,
    totalGain: bigint,
    totalLoss: bigint,
    totalDebt: bigint,
    debtAdded: bigint,
    debtRatio: bigint,
    tokens: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    strategy: string;
    gain: bigint;
    loss: bigint;
    debtPaid: bigint;
    totalGain: bigint;
    totalLoss: bigint;
    totalDebt: bigint;
    debtAdded: bigint;
    debtRatio: bigint;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyWithdrawnSomeEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    strategy: AddressLike,
    amount: BigNumberish,
    loss: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    strategy: string,
    amount: bigint,
    loss: bigint,
    id: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    strategy: string;
    amount: bigint;
    loss: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    from: AddressLike,
    wantTokenAmount: BigNumberish,
    recipient: AddressLike,
    sharesIssued: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    wantTokenAmount: bigint,
    recipient: string,
    sharesIssued: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    wantTokenAmount: bigint;
    recipient: string;
    sharesIssued: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVault extends BaseContract {
  connect(runner?: ContractRunner | null): IVault;
  waitForDeployment(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FulfilledWithdrawEpoch"
  ): TypedContractEvent<
    FulfilledWithdrawEpochEvent.InputTuple,
    FulfilledWithdrawEpochEvent.OutputTuple,
    FulfilledWithdrawEpochEvent.OutputObject
  >;
  getEvent(
    key: "SgReceived"
  ): TypedContractEvent<
    SgReceivedEvent.InputTuple,
    SgReceivedEvent.OutputTuple,
    SgReceivedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyReported"
  ): TypedContractEvent<
    StrategyReportedEvent.InputTuple,
    StrategyReportedEvent.OutputTuple,
    StrategyReportedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyWithdrawnSome"
  ): TypedContractEvent<
    StrategyWithdrawnSomeEvent.InputTuple,
    StrategyWithdrawnSomeEvent.OutputTuple,
    StrategyWithdrawnSomeEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FulfilledWithdrawEpoch(uint256,uint256)": TypedContractEvent<
      FulfilledWithdrawEpochEvent.InputTuple,
      FulfilledWithdrawEpochEvent.OutputTuple,
      FulfilledWithdrawEpochEvent.OutputObject
    >;
    FulfilledWithdrawEpoch: TypedContractEvent<
      FulfilledWithdrawEpochEvent.InputTuple,
      FulfilledWithdrawEpochEvent.OutputTuple,
      FulfilledWithdrawEpochEvent.OutputObject
    >;

    "SgReceived(address,uint256,address)": TypedContractEvent<
      SgReceivedEvent.InputTuple,
      SgReceivedEvent.OutputTuple,
      SgReceivedEvent.OutputObject
    >;
    SgReceived: TypedContractEvent<
      SgReceivedEvent.InputTuple,
      SgReceivedEvent.OutputTuple,
      SgReceivedEvent.OutputObject
    >;

    "StrategyReported(uint16,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;
    StrategyReported: TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;

    "StrategyWithdrawnSome(uint16,address,uint256,uint256,uint256)": TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;
    StrategyWithdrawnSome: TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;

    "Withdraw(address,uint256,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
