/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IOnChainVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStrategy"
      | "deposit"
      | "governance"
      | "initialize"
      | "pricePerShare"
      | "revokeFunds"
      | "revokeStrategy"
      | "token"
      | "totalAssets"
      | "updateStrategyDebtRatio"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "StrategyReported"
      | "StrategyWithdrawnSome"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyDebtRatio",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace StrategyReportedEvent {
  export type InputTuple = [
    strategy: AddressLike,
    gain: BigNumberish,
    loss: BigNumberish,
    debtPaid: BigNumberish,
    totalGain: BigNumberish,
    totalLoss: BigNumberish,
    totalDebt: BigNumberish,
    debtAdded: BigNumberish,
    debtRatio: BigNumberish
  ];
  export type OutputTuple = [
    strategy: string,
    gain: bigint,
    loss: bigint,
    debtPaid: bigint,
    totalGain: bigint,
    totalLoss: bigint,
    totalDebt: bigint,
    debtAdded: bigint,
    debtRatio: bigint
  ];
  export interface OutputObject {
    strategy: string;
    gain: bigint;
    loss: bigint;
    debtPaid: bigint;
    totalGain: bigint;
    totalLoss: bigint;
    totalDebt: bigint;
    debtAdded: bigint;
    debtRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyWithdrawnSomeEvent {
  export type InputTuple = [
    strategy: AddressLike,
    amount: BigNumberish,
    loss: BigNumberish
  ];
  export type OutputTuple = [strategy: string, amount: bigint, loss: bigint];
  export interface OutputObject {
    strategy: string;
    amount: bigint;
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    recipient: AddressLike,
    shares: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [recipient: string, shares: bigint, value: bigint];
  export interface OutputObject {
    recipient: string;
    shares: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOnChainVault extends BaseContract {
  connect(runner?: ContractRunner | null): IOnChainVault;
  waitForDeployment(): Promise<this>;

  interface: IOnChainVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStrategy: TypedContractMethod<
    [
      _strategy: AddressLike,
      _debtRatio: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _token: AddressLike,
      _governance: AddressLike,
      treasury: AddressLike,
      name: string,
      symbol: string
    ],
    [void],
    "nonpayable"
  >;

  pricePerShare: TypedContractMethod<[], [bigint], "view">;

  revokeFunds: TypedContractMethod<[], [void], "nonpayable">;

  revokeStrategy: TypedContractMethod<
    [_strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  updateStrategyDebtRatio: TypedContractMethod<
    [_strategy: AddressLike, _debtRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_maxShares: BigNumberish, _recipient: AddressLike, _maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [
      _strategy: AddressLike,
      _debtRatio: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _governance: AddressLike,
      treasury: AddressLike,
      name: string,
      symbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pricePerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeStrategy"
  ): TypedContractMethod<[_strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateStrategyDebtRatio"
  ): TypedContractMethod<
    [_strategy: AddressLike, _debtRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_maxShares: BigNumberish, _recipient: AddressLike, _maxLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "StrategyReported"
  ): TypedContractEvent<
    StrategyReportedEvent.InputTuple,
    StrategyReportedEvent.OutputTuple,
    StrategyReportedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyWithdrawnSome"
  ): TypedContractEvent<
    StrategyWithdrawnSomeEvent.InputTuple,
    StrategyWithdrawnSomeEvent.OutputTuple,
    StrategyWithdrawnSomeEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;
    StrategyReported: TypedContractEvent<
      StrategyReportedEvent.InputTuple,
      StrategyReportedEvent.OutputTuple,
      StrategyReportedEvent.OutputObject
    >;

    "StrategyWithdrawnSome(address,uint256,uint256)": TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;
    StrategyWithdrawnSome: TypedContractEvent<
      StrategyWithdrawnSomeEvent.InputTuple,
      StrategyWithdrawnSomeEvent.OutputTuple,
      StrategyWithdrawnSomeEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
